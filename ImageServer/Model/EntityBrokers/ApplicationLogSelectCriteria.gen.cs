#region License

// Copyright (c) 2013, ClearCanvas Inc.
// All rights reserved.
// http://www.ClearCanvas.ca
//
// This file is part of the ClearCanvas RIS/PACS open source project.
//
// The ClearCanvas RIS/PACS open source project is free software: you can
// redistribute it and/or modify it under the terms of the GNU General Public
// License as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// The ClearCanvas RIS/PACS open source project is distributed in the hope that it
// will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
// Public License for more details.
//
// You should have received a copy of the GNU General Public License along with
// the ClearCanvas RIS/PACS open source project.  If not, see
// <http://www.gnu.org/licenses/>.

#endregion

// This file is auto-generated by the Macro.Model.SqlServer.CodeGenerator project.

namespace Macro.ImageServer.Model.EntityBrokers
{
    using System;
    using System.Xml;
    using Macro.Enterprise.Core;
    using Macro.ImageServer.Enterprise;

    public partial class ApplicationLogSelectCriteria : EntitySelectCriteria
    {
        public ApplicationLogSelectCriteria()
        : base("ApplicationLog")
        {}
        public ApplicationLogSelectCriteria(ApplicationLogSelectCriteria other)
        : base(other)
        {}
        public override object Clone()
        {
            return new ApplicationLogSelectCriteria(this);
        }
        [EntityFieldDatabaseMappingAttribute(TableName="ApplicationLog", ColumnName="Host")]
        public ISearchCondition<String> Host
        {
            get
            {
              if (!SubCriteria.ContainsKey("Host"))
              {
                 SubCriteria["Host"] = new SearchCondition<String>("Host");
              }
              return (ISearchCondition<String>)SubCriteria["Host"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="ApplicationLog", ColumnName="Timestamp")]
        public ISearchCondition<DateTime> Timestamp
        {
            get
            {
              if (!SubCriteria.ContainsKey("Timestamp"))
              {
                 SubCriteria["Timestamp"] = new SearchCondition<DateTime>("Timestamp");
              }
              return (ISearchCondition<DateTime>)SubCriteria["Timestamp"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="ApplicationLog", ColumnName="LogLevel")]
        public ISearchCondition<String> LogLevel
        {
            get
            {
              if (!SubCriteria.ContainsKey("LogLevel"))
              {
                 SubCriteria["LogLevel"] = new SearchCondition<String>("LogLevel");
              }
              return (ISearchCondition<String>)SubCriteria["LogLevel"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="ApplicationLog", ColumnName="Thread")]
        public ISearchCondition<String> Thread
        {
            get
            {
              if (!SubCriteria.ContainsKey("Thread"))
              {
                 SubCriteria["Thread"] = new SearchCondition<String>("Thread");
              }
              return (ISearchCondition<String>)SubCriteria["Thread"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="ApplicationLog", ColumnName="Message")]
        public ISearchCondition<String> Message
        {
            get
            {
              if (!SubCriteria.ContainsKey("Message"))
              {
                 SubCriteria["Message"] = new SearchCondition<String>("Message");
              }
              return (ISearchCondition<String>)SubCriteria["Message"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="ApplicationLog", ColumnName="Exception")]
        public ISearchCondition<String> Exception
        {
            get
            {
              if (!SubCriteria.ContainsKey("Exception"))
              {
                 SubCriteria["Exception"] = new SearchCondition<String>("Exception");
              }
              return (ISearchCondition<String>)SubCriteria["Exception"];
            } 
        }
    }
}
