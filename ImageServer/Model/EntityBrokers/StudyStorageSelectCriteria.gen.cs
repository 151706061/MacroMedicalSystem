#region License

// Copyright (c) 2013, ClearCanvas Inc.
// All rights reserved.
// http://www.ClearCanvas.ca
//
// This file is part of the ClearCanvas RIS/PACS open source project.
//
// The ClearCanvas RIS/PACS open source project is free software: you can
// redistribute it and/or modify it under the terms of the GNU General Public
// License as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// The ClearCanvas RIS/PACS open source project is distributed in the hope that it
// will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
// Public License for more details.
//
// You should have received a copy of the GNU General Public License along with
// the ClearCanvas RIS/PACS open source project.  If not, see
// <http://www.gnu.org/licenses/>.

#endregion

// This file is auto-generated by the Macro.Model.SqlServer.CodeGenerator project.

namespace Macro.ImageServer.Model.EntityBrokers
{
    using System;
    using System.Xml;
    using Macro.Enterprise.Core;
    using Macro.ImageServer.Enterprise;

    public partial class StudyStorageSelectCriteria : EntitySelectCriteria
    {
        public StudyStorageSelectCriteria()
        : base("StudyStorage")
        {}
        public StudyStorageSelectCriteria(StudyStorageSelectCriteria other)
        : base(other)
        {}
        public override object Clone()
        {
            return new StudyStorageSelectCriteria(this);
        }
        [EntityFieldDatabaseMappingAttribute(TableName="StudyStorage", ColumnName="ServerPartitionGUID")]
        public ISearchCondition<ServerEntityKey> ServerPartitionKey
        {
            get
            {
              if (!SubCriteria.ContainsKey("ServerPartitionKey"))
              {
                 SubCriteria["ServerPartitionKey"] = new SearchCondition<ServerEntityKey>("ServerPartitionKey");
              }
              return (ISearchCondition<ServerEntityKey>)SubCriteria["ServerPartitionKey"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="StudyStorage", ColumnName="StudyInstanceUid")]
        public ISearchCondition<String> StudyInstanceUid
        {
            get
            {
              if (!SubCriteria.ContainsKey("StudyInstanceUid"))
              {
                 SubCriteria["StudyInstanceUid"] = new SearchCondition<String>("StudyInstanceUid");
              }
              return (ISearchCondition<String>)SubCriteria["StudyInstanceUid"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="StudyStorage", ColumnName="InsertTime")]
        public ISearchCondition<DateTime> InsertTime
        {
            get
            {
              if (!SubCriteria.ContainsKey("InsertTime"))
              {
                 SubCriteria["InsertTime"] = new SearchCondition<DateTime>("InsertTime");
              }
              return (ISearchCondition<DateTime>)SubCriteria["InsertTime"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="StudyStorage", ColumnName="LastAccessedTime")]
        public ISearchCondition<DateTime> LastAccessedTime
        {
            get
            {
              if (!SubCriteria.ContainsKey("LastAccessedTime"))
              {
                 SubCriteria["LastAccessedTime"] = new SearchCondition<DateTime>("LastAccessedTime");
              }
              return (ISearchCondition<DateTime>)SubCriteria["LastAccessedTime"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="StudyStorage", ColumnName="WriteLock")]
        public ISearchCondition<Boolean> WriteLock
        {
            get
            {
              if (!SubCriteria.ContainsKey("WriteLock"))
              {
                 SubCriteria["WriteLock"] = new SearchCondition<Boolean>("WriteLock");
              }
              return (ISearchCondition<Boolean>)SubCriteria["WriteLock"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="StudyStorage", ColumnName="ReadLock")]
        public ISearchCondition<Int16> ReadLock
        {
            get
            {
              if (!SubCriteria.ContainsKey("ReadLock"))
              {
                 SubCriteria["ReadLock"] = new SearchCondition<Int16>("ReadLock");
              }
              return (ISearchCondition<Int16>)SubCriteria["ReadLock"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="StudyStorage", ColumnName="StudyStatusEnum")]
        public ISearchCondition<StudyStatusEnum> StudyStatusEnum
        {
            get
            {
              if (!SubCriteria.ContainsKey("StudyStatusEnum"))
              {
                 SubCriteria["StudyStatusEnum"] = new SearchCondition<StudyStatusEnum>("StudyStatusEnum");
              }
              return (ISearchCondition<StudyStatusEnum>)SubCriteria["StudyStatusEnum"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="StudyStorage", ColumnName="QueueStudyStateEnum")]
        public ISearchCondition<QueueStudyStateEnum> QueueStudyStateEnum
        {
            get
            {
              if (!SubCriteria.ContainsKey("QueueStudyStateEnum"))
              {
                 SubCriteria["QueueStudyStateEnum"] = new SearchCondition<QueueStudyStateEnum>("QueueStudyStateEnum");
              }
              return (ISearchCondition<QueueStudyStateEnum>)SubCriteria["QueueStudyStateEnum"];
            } 
        }
    }
}
