#region License

// Copyright (c) 2013, ClearCanvas Inc.
// All rights reserved.
// http://www.ClearCanvas.ca
//
// This file is part of the ClearCanvas RIS/PACS open source project.
//
// The ClearCanvas RIS/PACS open source project is free software: you can
// redistribute it and/or modify it under the terms of the GNU General Public
// License as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// The ClearCanvas RIS/PACS open source project is distributed in the hope that it
// will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
// Public License for more details.
//
// You should have received a copy of the GNU General Public License along with
// the ClearCanvas RIS/PACS open source project.  If not, see
// <http://www.gnu.org/licenses/>.

#endregion

// This file is auto-generated by the Macro.Model.SqlServer.CodeGenerator project.

namespace Macro.ImageServer.Model.EntityBrokers
{
    using System;
    using System.Xml;
    using Macro.Enterprise.Core;
    using Macro.ImageServer.Enterprise;

    public partial class AlertSelectCriteria : EntitySelectCriteria
    {
        public AlertSelectCriteria()
        : base("Alert")
        {}
        public AlertSelectCriteria(AlertSelectCriteria other)
        : base(other)
        {}
        public override object Clone()
        {
            return new AlertSelectCriteria(this);
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Alert", ColumnName="InsertTime")]
        public ISearchCondition<DateTime> InsertTime
        {
            get
            {
              if (!SubCriteria.ContainsKey("InsertTime"))
              {
                 SubCriteria["InsertTime"] = new SearchCondition<DateTime>("InsertTime");
              }
              return (ISearchCondition<DateTime>)SubCriteria["InsertTime"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Alert", ColumnName="Component")]
        public ISearchCondition<String> Component
        {
            get
            {
              if (!SubCriteria.ContainsKey("Component"))
              {
                 SubCriteria["Component"] = new SearchCondition<String>("Component");
              }
              return (ISearchCondition<String>)SubCriteria["Component"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Alert", ColumnName="TypeCode")]
        public ISearchCondition<Int32> TypeCode
        {
            get
            {
              if (!SubCriteria.ContainsKey("TypeCode"))
              {
                 SubCriteria["TypeCode"] = new SearchCondition<Int32>("TypeCode");
              }
              return (ISearchCondition<Int32>)SubCriteria["TypeCode"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Alert", ColumnName="Source")]
        public ISearchCondition<String> Source
        {
            get
            {
              if (!SubCriteria.ContainsKey("Source"))
              {
                 SubCriteria["Source"] = new SearchCondition<String>("Source");
              }
              return (ISearchCondition<String>)SubCriteria["Source"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Alert", ColumnName="AlertLevelEnum")]
        public ISearchCondition<AlertLevelEnum> AlertLevelEnum
        {
            get
            {
              if (!SubCriteria.ContainsKey("AlertLevelEnum"))
              {
                 SubCriteria["AlertLevelEnum"] = new SearchCondition<AlertLevelEnum>("AlertLevelEnum");
              }
              return (ISearchCondition<AlertLevelEnum>)SubCriteria["AlertLevelEnum"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Alert", ColumnName="AlertCategoryEnum")]
        public ISearchCondition<AlertCategoryEnum> AlertCategoryEnum
        {
            get
            {
              if (!SubCriteria.ContainsKey("AlertCategoryEnum"))
              {
                 SubCriteria["AlertCategoryEnum"] = new SearchCondition<AlertCategoryEnum>("AlertCategoryEnum");
              }
              return (ISearchCondition<AlertCategoryEnum>)SubCriteria["AlertCategoryEnum"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Alert", ColumnName="Content")]
        public ISearchCondition<XmlDocument> Content
        {
            get
            {
              if (!SubCriteria.ContainsKey("Content"))
              {
                 SubCriteria["Content"] = new SearchCondition<XmlDocument>("Content");
              }
              return (ISearchCondition<XmlDocument>)SubCriteria["Content"];
            } 
        }
    }
}
