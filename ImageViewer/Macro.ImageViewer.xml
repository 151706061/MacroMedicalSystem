<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Macro.ImageViewer</name>
    </assembly>
    <members>
        <member name="T:Macro.ImageViewer.StudyManagement.StudyTree">
            <summary>
            A tree representation of the DICOM patient, study, series, SOP hierarchy.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyTree.#ctor">
            <summary>
            Creates an instance of <see cref="T:Macro.ImageViewer.StudyManagement.StudyTree"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyTree.GetPatient(System.String)">
            <summary>
            Gets a <see cref="T:Macro.ImageViewer.StudyManagement.Patient"/> with the specified patient ID.
            </summary>
            <param name="patientId"></param>
            <returns>The <see cref="T:Macro.ImageViewer.StudyManagement.Patient"/> or <b>null</b> if the patient ID
            cannot be found.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyTree.GetStudy(System.String)">
            <summary>
            Gets a <see cref="T:Macro.ImageViewer.StudyManagement.Study"/> with the specified Study Instance UID.
            </summary>
            <param name="studyInstanceUID"></param>
            <returns>The <see cref="T:Macro.ImageViewer.StudyManagement.Study"/> or <b>null</b> if the Study Instance UID
            cannot be found.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyTree.GetSeries(System.String)">
            <summary>
            Gets a <see cref="T:Macro.ImageViewer.StudyManagement.Series"/> with the specified Series Instance UID.
            </summary>
            <param name="seriesInstanceUID"></param>
            <returns>The <see cref="T:Macro.ImageViewer.StudyManagement.Series"/> or <b>null</b> if the Series Instance UID
            cannot be found.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyTree.GetSop(System.String)">
            <summary>
            Gets a <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> with the specified SOP Instance UID.
            </summary>
            <param name="sopInstanceUID"></param>
            <returns>The <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> or <b>null</b> if the SOP Instance UID
            cannot be found.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyTree.AddSop(Macro.ImageViewer.StudyManagement.Sop)">
            <summary>
            Adds a <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> to the <see cref="T:Macro.ImageViewer.StudyManagement.StudyTree"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyTree.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.StudyManagement.StudyTree"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyTree.Dispose(System.Boolean)">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern
            </summary>
            <param name="disposing">True if this object is being disposed, false if it is being finalized</param>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.StudyTree.Patients">
            <summary>
            Gets the collection of <see cref="T:Macro.ImageViewer.StudyManagement.Patient"/> objects that belong
            to this <see cref="T:Macro.ImageViewer.StudyManagement.StudyTree"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.StudyTree.Studies">
            <summary>
            Enumerates all studies for all patients.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.StudyTree.SopValidationDisabled">
            <summary>
            Indicates if each <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> should be validated when adding to the <see cref="T:Macro.ImageViewer.StudyManagement.StudyTree"/>
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.StudyItem">
            <summary>
            A study item.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyItem.#ctor(System.String,Macro.ImageViewer.Common.IDicomServiceNode)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.StudyItem"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyItem.#ctor(Macro.Dicom.Iod.IStudyRootData,Macro.ImageViewer.Common.IDicomServiceNode)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.StudyItem"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyItem.#ctor(Macro.Dicom.Iod.IPatientData,Macro.Dicom.Iod.IStudyData,Macro.ImageViewer.Common.IDicomServiceNode)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.StudyItem"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyItem.#ctor(Macro.Dicom.Iod.IPatientData,Macro.Dicom.Iod.IStudyData,Macro.Dicom.ServiceModel.Query.IIdentifier)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.StudyItem"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyItem.#ctor(Macro.Dicom.ServiceModel.Query.IStudyRootStudyIdentifier)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.StudyItem"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.StudyItem.Server">
            <summary>
            Gets or sets the server.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.StudyItemList">
            <summary>
            A list of <see cref="T:Macro.ImageViewer.StudyManagement.StudyItem"/> objects.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyItemList.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.StudyItemList"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.QueryParameters">
            <summary>
            A map of query parameters.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.QueryParameters.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.QueryParameters"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.QueryParameters.#ctor(Macro.ImageViewer.StudyManagement.QueryParameters)">
            <summary>
            Creates a copy of <paramref name="other"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.IStudyFinder">
            <summary>
            Defines a study finder.
            </summary>
            <remarks>
            <see cref="T:Macro.ImageViewer.StudyManagement.IStudyFinder"/> abstracts the finding of studies,
            allowing many means of finding studies (e.g., local database,
            DICOM query, DICOMDIR, etc.) to be treated in the same way.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.IStudyFinder.Query(Macro.ImageViewer.StudyManagement.QueryParameters,Macro.Dicom.Iod.IApplicationEntity)">
            <summary>
            Queries for studies on a target server matching the specified query parameters.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.IStudyFinder.Name">
            <summary>
            Gets the name of the study finder.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationImage">
            <summary>
            The final image that is presented to the user in a <see cref="P:Macro.ImageViewer.PresentationImage.Tile"/>.
            </summary>
            <remarks>
            An <see cref="T:Macro.ImageViewer.IPresentationImage"/> can be thought of as a <i>scene</i> 
            composed of many parts, be they images, lines, text, etc.  It is the
            image that is presented to the user in a <see cref="P:Macro.ImageViewer.PresentationImage.Tile"/>.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.IPresentationImage">
            <summary>
            Defines the final image that is presented to the user in an <see cref="T:Macro.ImageViewer.ITile"/>.
            </summary>
            <remarks>
            <para>
            An <see cref="T:Macro.ImageViewer.IPresentationImage"/> can be thought of as a "scene"
            composed of many parts, be they images, lines, text, etc.  It is the
            image that is presented to the user in a <see cref="P:Macro.ImageViewer.IPresentationImage.Tile"/>.
            </para>
            <para>
            You should not implement <see cref="T:Macro.ImageViewer.IPresentationImage"/> directly.
            Instead, subclass <see cref="T:Macro.ImageViewer.PresentationImage"/>.
            </para>
            </remarks>
            <seealso cref="T:Macro.ImageViewer.IDisplaySet">for more information on disposal of <see cref="T:Macro.ImageViewer.IDisplaySet"/>s and <see cref="T:Macro.ImageViewer.IPresentationImage"/>s.</seealso>
        </member>
        <member name="T:Macro.ImageViewer.IDrawable">
            <summary>
            Provides drawing functionality.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.IDrawable.Draw">
            <summary>
            Draw the object.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.IDrawable.Drawing">
            <summary>
            Fires just before the object is actually drawn/rendered.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.IPresentationImage.CreateFreshCopy">
            <summary>
            Creates a fresh copy of the <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
            <remarks>
            This will instantiate a fresh copy of this <see cref="T:Macro.ImageViewer.IPresentationImage"/>
            using the same construction parameters as the original.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.IPresentationImage.Clone">
            <summary>
            Creates a deep copy of the <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
            <remarks>
            <see cref="T:Macro.ImageViewer.IPresentationImage"/>s should never return null from this method.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.IPresentationImage.DrawToBitmap(System.Int32,System.Int32)">
            <summary>
            Renders the <see cref="T:Macro.ImageViewer.PresentationImage"/> to an offscreen <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="width">Bitmap width.</param>
            <param name="height">Bitmap height.</param>
            <returns></returns>
            <remarks>
            This method can be used anywhere an offscreen bitmap is required, such as 
            paper/DICOM printing, thumbnail generation, creation of new DICOM images, etc.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.IPresentationImage.DrawToBitmap(System.Drawing.Bitmap)">
            <summary>
            Renders the <see cref="T:Macro.ImageViewer.PresentationImage"/> to a provided offscreen <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="bmp">The offscreen bitmap to render to.</param>
            <returns></returns>
            <remarks>
            This method can be used anywhere an offscreen bitmap is required, such as 
            paper/DICOM printing, thumbnail generation, creation of new DICOM images, etc.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.IPresentationImage.ImageViewer">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
            <value>The associated <see cref="T:Macro.ImageViewer.IImageViewer"/> or <b>null</b> if the 
            <see cref="T:Macro.ImageViewer.IPresentationImage"/> is not part of the 
            logical workspace yet.</value>
        </member>
        <member name="P:Macro.ImageViewer.IPresentationImage.ParentDisplaySet">
            <summary>
            Gets the parent <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
            <value>The parent <see cref="T:Macro.ImageViewer.IDisplaySet"/> or <b>null</b> if the 
            <see cref="T:Macro.ImageViewer.IPresentationImage"/> has not
            been added to the <see cref="T:Macro.ImageViewer.IDisplaySet"/> yet.</value>
        </member>
        <member name="P:Macro.ImageViewer.IPresentationImage.Tile">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.ITile"/>.
            </summary>
            <value>The <see cref="T:Macro.ImageViewer.ITile"/> that currently contains the
            <see cref="T:Macro.ImageViewer.IPresentationImage"/> or <b>null</b> if the 
            <see cref="T:Macro.ImageViewer.IPresentationImage"/> is not currently visible.</value>
        </member>
        <member name="P:Macro.ImageViewer.IPresentationImage.ClientRectangle">
            <summary>
            Gets the client rectangle of the surface on which the
            presentation image will be rendered.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IPresentationImage.Linked">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Macro.ImageViewer.IPresentationImage"/>
            is linked.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IPresentationImage.Selected">
            <summary>
            Gets a value indicating whether the <see cref="T:Macro.ImageViewer.IPresentationImage"/>
            is selected.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IPresentationImage.Visible">
            <summary>
            Gets a value indicating whether the <see cref="T:Macro.ImageViewer.IPresentationImage"/>
            is visible.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IPresentationImage.SelectedGraphic">
            <summary>
            Gets the currently selected <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>.
            </summary>
            <value>The currently selected <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> or <b>null</b>
            if no <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> is currently selected.</value>
            <remarks>
            It is possible for an <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> to be selected,
            focussed or selected and focussed.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.IPresentationImage.FocussedGraphic">
            <summary>
            Gets the currently focussed <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>.
            </summary>
            <value>The currently selected <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> or <b>null</b>
            if no <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> is currently focussed.</value>
            <remarks>
            It is possible for an <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> to be selected,
            focussed or selected and focussed.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.IPresentationImage.Uid">
            <summary>
            Gets or sets unique identifier for this <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationImage.#ctor">
            <summary>
            Instantiates a new instance of <see cref="T:Macro.ImageViewer.PresentationImage"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationImage.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.PresentationImage"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationImage.Dispose(System.Boolean)">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern
            </summary>
            <param name="disposing">True if this object is being disposed, false if it is being finalized</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationImage.CreateFreshCopy">
            <summary>
            Creates a fresh copy of the <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
            <remarks>
            This will instantiate a fresh copy of this <see cref="T:Macro.ImageViewer.IPresentationImage"/>
            using the same construction parameters as the original.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.PresentationImage.Clone">
            <summary>
            Creates a deep copy of the <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
            <remarks>
            <see cref="T:Macro.ImageViewer.IPresentationImage"/>s should never return null from this method.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.PresentationImage.Draw">
            <summary>
            Draws the <see cref="T:Macro.ImageViewer.PresentationImage"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationImage.Draw(Macro.ImageViewer.Rendering.DrawArgs)">
            <summary>
            Raises the <see cref="E:Macro.ImageViewer.EventBroker.ImageDrawing"/> event and
            renders the <see cref="T:Macro.ImageViewer.PresentationImage"/>.
            </summary>
            <param name="drawArgs"></param>
            <remarks>
            For internal Framework use only.
            </remarks>
            <exception cref="T:Macro.ImageViewer.Rendering.RenderingException">Thrown if any <see cref="T:System.Exception"/> is encountered while rendering the image.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationImage.DrawToBitmap(System.Int32,System.Int32)">
            <summary>
            Renders the <see cref="T:Macro.ImageViewer.PresentationImage"/> to an offscreen <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="width">Bitmap width.</param>
            <param name="height">Bitmap height.</param>
            <returns></returns>
            <remarks>
            This method can be used anywhere an offscreen bitmap is required, such as 
            paper/DICOM printing, thumbnail generation, creation of new DICOM images, etc.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if invalid image dimensions are supplied.</exception>
            <exception cref="T:Macro.ImageViewer.Rendering.RenderingException">Thrown if any <see cref="T:System.Exception"/> is encountered while rendering the image.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationImage.DrawToBitmap(System.Drawing.Bitmap)">
            <summary>
            Renders the <see cref="T:Macro.ImageViewer.PresentationImage"/> to a provided offscreen <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="bmp">The offscreen bitmap to render to.</param>
            <returns></returns>
            <remarks>
            This method can be used anywhere an offscreen bitmap is required, such as 
            paper/DICOM printing, thumbnail generation, creation of new DICOM images, etc.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="bmp"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="bmp"/> has invalid dimensions.</exception>
            <exception cref="T:Macro.ImageViewer.Rendering.RenderingException">Thrown if any <see cref="T:System.Exception"/> is encountered while rendering the image.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationImage.DrawNoEvents(Macro.ImageViewer.Rendering.DrawArgs)">
            <summary>
            Renders the <see cref="T:Macro.ImageViewer.PresentationImage"/> without firing any events.
            </summary>
            <exception cref="T:Macro.ImageViewer.Rendering.RenderingException">Thrown if any <see cref="T:System.Exception"/> is encountered while rendering the image.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationImage.OnDrawing">
            <summary>
            Raises the <see cref="E:Macro.ImageViewer.PresentationImage.Drawing"/> event.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationImage.ImageViewer">
            <summary>
            Gets the parent <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
            <value>The associated <see cref="T:Macro.ImageViewer.IImageViewer"/> or <b>null</b> if the 
            <see cref="T:Macro.ImageViewer.PresentationImage"/> is not part of the 
            logical workspace yet.</value>
        </member>
        <member name="P:Macro.ImageViewer.PresentationImage.ParentDisplaySet">
            <summary>
            Gets the parent <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
            <value>The parent <see cref="T:Macro.ImageViewer.IDisplaySet"/> or <b>null</b> if the 
            <see cref="T:Macro.ImageViewer.PresentationImage"/> has not
            been added to the <see cref="T:Macro.ImageViewer.IDisplaySet"/> yet.</value>
        </member>
        <member name="P:Macro.ImageViewer.PresentationImage.Tile">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.ITile"/>.
            </summary>
            <value>The <see cref="T:Macro.ImageViewer.ITile"/> that currently contains the
            <see cref="T:Macro.ImageViewer.PresentationImage"/> or <b>null</b> if the 
            <see cref="T:Macro.ImageViewer.PresentationImage"/> is not currently visible.</value>
        </member>
        <member name="P:Macro.ImageViewer.PresentationImage.ClientRectangle">
            <summary>
            Gets the client rectangle of the surface on which the
            presentation image will be rendered.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationImage.Visible">
            <summary>
            Gets a value indicating whether the <see cref="T:Macro.ImageViewer.PresentationImage"/> is visible.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationImage.Selected">
            <summary>
            Gets a value indicating whether the <see cref="T:Macro.ImageViewer.PresentationImage"/> is selected.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationImage.Linked">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Macro.ImageViewer.PresentationImage"/> is linked.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationImage.Uid">
            <summary>
            Gets or sets unique identifier for this <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationImage.SceneGraph">
            <summary>
            Gets the <see cref="P:Macro.ImageViewer.PresentationImage.SceneGraph"/>.
            </summary>
            <remarks>
            The <see cref="P:Macro.ImageViewer.PresentationImage.SceneGraph"/> is a tree of <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> objects
            that represents what the user sees in a <see cref="P:Macro.ImageViewer.PresentationImage.Tile"/>.  If you're writing
            tools, you should avoid accessing the <see cref="P:Macro.ImageViewer.PresentationImage.SceneGraph"/> directly as it 
            is intended only for the renderer to traverse.  Instead, add and remove
            from the <see cref="P:Macro.ImageViewer.PresentationImage.SceneGraph"/> through interfaces on <see cref="T:Macro.ImageViewer.PresentationImage"/>
            subclasses.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.PresentationImage.SelectedGraphic">
            <summary>
            Gets the currently selected <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>.
            </summary>
            <value>The currently selected <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> or <b>null</b>
            if no <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> is currently selected.</value>
            <remarks>
            It is possible for an <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> to be selected,
            focussed or selected and focussed.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.PresentationImage.FocussedGraphic">
            <summary>
            Gets the currently focussed <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>.
            </summary>
            <value>The currently selected <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> or <b>null</b>
            if no <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> is currently focussed.</value>
            <remarks>
            It is possible for an <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> to be selected,
            focussed or selected and focussed.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.PresentationImage.ImageRenderer">
            <summary>
            Gets this <see cref="T:Macro.ImageViewer.PresentationImage"/>'s image renderer.
            </summary>
            <remarks>
            <para>
            The creation of the image renderer is left to the subclass.
            This allows the greatest flexibility, since it is sometimes the case
            that a subclass of <see cref="T:Macro.ImageViewer.PresentationImage"/> needs 
            a specialized <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/>.
            </para>
            <para>
            In general, <see cref="P:Macro.ImageViewer.PresentationImage.ImageRenderer"/> should be considered an internal
            Framework property and should not be used.
            </para>
            </remarks>
        </member>
        <member name="E:Macro.ImageViewer.PresentationImage.Drawing">
            <summary>
            Fires just before the <see cref="T:Macro.ImageViewer.PresentationImage"/> is actually drawn/rendered.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Rendering.IRenderingSurface">
            <summary>
            Defines a rendering surface.
            </summary>
            <remarks>
            <para>
            Unless you are implementing your own renderering surface, you should never
            have to interact with this interface.  The two properties on 
            <see cref="T:Macro.ImageViewer.Rendering.IRenderingSurface"/> should only ever have to be set by the 
            Framework.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Rendering.IRenderingSurface.WindowID">
            <summary>
            Gets or sets the window ID.
            </summary>
            <remarks>
            On Windows systems, this is the window handle, or "hwnd" 
            of the WinForms control you will eventually render to.  This
            property is set by the Framework; you should never have to
            set this property yourself.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Rendering.IRenderingSurface.ContextID">
            <summary>
            Gets or sets the context ID.
            </summary>
            <remarks>
            On Windows systems, this is the device context handle, or "hdc"
            of the WinForms control you will eventually render to. This
            property is set by the Framework; you should never have to
            set this property yourself.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Rendering.IRenderingSurface.ClientRectangle">
            <summary>
            Gets or sets the rectangle of the surface.
            </summary>
            <remarks>
            This is the rectangle of the view onto the <see cref="T:Macro.ImageViewer.ITile"/>.
            The top-left corner is always (0,0).  This rectangle changes as the
            view (i.e., the hosting window) changes size. Implementor should be
            aware that the rectangle can have a width or height of 0, and handle
            that boundary case appropriately.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Rendering.IRenderingSurface.ClipRectangle">
            <summary>
            Gets or sets the rectangle that requires repainting.
            </summary>
            <remarks>
            The implementer of <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/> should use this rectangle
            to intelligently perform the <see cref="F:Macro.ImageViewer.Rendering.DrawMode.Refresh"/> operation.
            This property is set by the Framework; you should never have to
            set this property yourself.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.Modifiers">
            <summary>
            An object representing modifier keys (e.g. Control, Alt, Shift).
            </summary>
            <remarks>
            This class is intended for internal framework use only.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.Modifiers.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.Modifiers.#ctor(Macro.Desktop.ModifierFlags)">
            <summary>
            Constructor that takes a <see cref="P:Macro.ImageViewer.InputManagement.Modifiers.ModifierFlags"/> as input.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.Modifiers.Equals(System.Object)">
            <summary>
            Determines whether another object is equal to this object.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.Modifiers.Equals(Macro.ImageViewer.InputManagement.Modifiers)">
            <summary>
            Gets whether or not this object is equal to <paramref name="other"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.Modifiers.Equals(Macro.Desktop.ModifierFlags)">
            <summary>
            Gets whether or not this object is equal to <paramref name="other"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.Modifiers.GetHashCode">
            <summary>
            Gets a hashcode for this object instance. 
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.Modifiers.ToString">
            <summary>
            Gets a string describing the object instance.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.Modifiers.Control">
            <summary>
            Gets whether or not the Control key is down.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.Modifiers.Alt">
            <summary>
            Gets whether or not the Alt key is down.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.Modifiers.Shift">
            <summary>
            Gets whether or not the Shift key is down.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.Modifiers.ModifierFlags">
            <summary>
            Gets the state of all modifiers via a <see cref="P:Macro.ImageViewer.InputManagement.Modifiers.ModifierFlags"/> enum.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.MouseButtonHandlerBehaviour">
            <summary>
            Defines constants for modifying the behaviour of an <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/>.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.InputManagement.MouseButtonHandlerBehaviour.None">
            <summary>
            Indicates to the framework that no special behaviour, not event the defaults, should be applied.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.InputManagement.MouseButtonHandlerBehaviour.Default">
            <summary>
            Indicates to the framework that the default behaviour should be applied.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.InputManagement.MouseButtonHandlerBehaviour.SuppressContextMenu">
            <summary>
            Indicates to the framework that the context menu should be suppressed, usually because this 
            object is going to return true from <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)"/> and keep capture 
            after the mouse button has been released.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.InputManagement.MouseButtonHandlerBehaviour.ConstrainToTile">
            <summary>
            Indicates to the framework that <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Track(Macro.ImageViewer.InputManagement.IMouseInformation)"/> calls should not be 
            made for points outside the <see cref="T:Macro.ImageViewer.ITile"/>'s client rectangle.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.InputManagement.MouseButtonHandlerBehaviour.SuppressOnTileActivate">
            <summary>
            Indicates to the framework that the <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> should be ignored
            when a tile is first activated.  If this flag is not specified, then the <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/>
            will <b>not</b> be ignored on tile activation.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.InputManagement.MouseButtonHandlerBehaviour.CancelStartOnDoubleClick">
            <summary>
            Because a click must happen before a double-click, this allows an <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> to opt-out
            after gaining initial capture (via <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Start(Macro.ImageViewer.InputManagement.IMouseInformation)"/>) and have the framework 
            call <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Cancel"/> in order to allow another handler to process the double-click.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.InputManagement.MouseButtonHandlerBehaviour.IgnoreDoubleClicks">
            <summary>
            Indicates to the framework that the tool does not want to receive double-click notifications.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler">
            <summary>
            An interface for objects that handle mouse button input.
            </summary>
            <remarks>
            <para>
            The framework will look for this interface first on graphic objects (<see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>) 
            in the current <see cref="T:Macro.ImageViewer.IPresentationImage"/>'s SceneGraph (see <see cref="P:Macro.ImageViewer.PresentationImage.SceneGraph"/>), then on 
            <see cref="T:Macro.Desktop.Tools.ITool"/>s belonging to the current <see cref="T:Macro.ImageViewer.IImageViewer"/> 
            (via <see cref="M:Macro.ImageViewer.InputManagement.IViewerShortcutManager.GetMouseButtonHandlers(Macro.ImageViewer.InputManagement.MouseButtonShortcut)"/>) and if an appropriate one is found, it will be given capture.
            </para>
            <para>
            An <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> gets capture by returning true from <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Start(Macro.ImageViewer.InputManagement.IMouseInformation)"/> indicating to the framework
            that it would like to handle mouse button input.  Similarly, capture is not released until <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)"/> returns
            false, or <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Cancel"/> is called by the framework.
            </para>
            <para>
            When an <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> has capture, all mouse input defined by the <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> interface
            is handled by the object with capture.  No other objects receive any input until capture is released.
            </para>
            </remarks>
            <seealso cref="T:Macro.ImageViewer.IImageViewer"/>
            <seealso cref="T:Macro.ImageViewer.ImageViewerComponent"/>
            <seealso cref="T:Macro.ImageViewer.ITile"/>
            <seealso cref="T:Macro.ImageViewer.InputManagement.TileController"/>
            <seealso cref="T:Macro.ImageViewer.IPresentationImage"/>
            <seealso cref="P:Macro.ImageViewer.PresentationImage.SceneGraph"/>
            <seealso cref="T:Macro.ImageViewer.Graphics.IGraphic"/>
            <seealso cref="T:Macro.ImageViewer.Graphics.Graphic"/>
            <seealso cref="T:Macro.ImageViewer.InputManagement.IMouseInformation"/>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Start(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by the framework each time a mouse button is pressed.
            </summary>
            <remarks>
            As a general rule, if the <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> object did anything as a result of this call, it must 
            return true.  If false is returned, <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Start(Macro.ImageViewer.InputManagement.IMouseInformation)"/> is called on other <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/>s
            until one returns true.
            </remarks>
            <returns>
            True if the <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> did something as a result of the call, 
            and hence would like to receive capture.  Otherwise, false.
            </returns>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Track(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by the framework when the mouse has moved.
            </summary>
            <remarks>
            A button does not necessarily have to be down for this message to be called.  The framework can
            call it any time the mouse moves.
            </remarks>
            <returns>True if the message was handled, otherwise false.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by the framework when the mouse button is released.
            </summary>
            <returns>
            True if the framework should <b>not</b> release capture, otherwise false.
            </returns>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Cancel">
            <summary>
            Called by the framework to let <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> perform any necessary cleanup 
            when capture is going to be forcibly released.
            </summary>
            <remarks>
            It is important that this method is implemented correctly and doesn't simply do nothing when it is inappropriate
            to do so, otherwise odd behaviour may be experienced.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Behaviour">
            <summary>
            Allows the <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> to override certain default framework behaviour.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.ImageSetCollection">
            <summary>
            A collection of <see cref="T:Macro.ImageViewer.IImageSet"/> objects.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageSetCollection.#ctor">
            <summary>
            Instantiates a new instance of <see cref="T:Macro.ImageViewer.DisplaySetCollection"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageSetCollection.Sort">
            <summary>
            Sorts the collection using <see cref="P:Macro.ImageViewer.ImageSetCollection.SortComparer"/>.
            </summary>
            <remarks>
            If <see cref="P:Macro.ImageViewer.ImageSetCollection.SortComparer"/> is null, it is first set to a default one.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.ImageSetCollection.Sort(System.Collections.Generic.IComparer{Macro.ImageViewer.IImageSet})">
            <summary>
            Sorts the collection with the given comparer.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageSetCollection.SortComparer">
            <summary>
            The comparer that was last used to sort the collection, via <see cref="M:Macro.ImageViewer.ImageSetCollection.Sort"/>.
            </summary>
            <remarks>
            When an item is added to or replaced, this value is set to null.  When an item is
            simply removed, the sort order is maintained, so this value also will not change.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.IImageSopProvider">
            <summary>
            Provides access to an <see cref="P:Macro.ImageViewer.StudyManagement.IImageSopProvider.ImageSop"/> and the relevant <see cref="P:Macro.ImageViewer.StudyManagement.IImageSopProvider.Frame"/>.
            </summary>
            <remarks>
            <para>
            If you have subclassed <see cref="T:Macro.ImageViewer.PresentationImage"/> and want to expose
            an <see cref="P:Macro.ImageViewer.StudyManagement.IImageSopProvider.ImageSop"/> and <see cref="P:Macro.ImageViewer.StudyManagement.IImageSopProvider.Frame"/> to <see cref="T:Macro.ImageViewer.BaseTools.ImageViewerTool"/> objects, 
            do so by implementing this interface in your subclass.
            </para>
            <para>
            In general, avoid accessing members of subclasses of <see cref="T:Macro.ImageViewer.PresentationImage"/>
            directly.  Prefer instead to use provider interfaces such as this one.  Doing
            so prevents <see cref="T:Macro.ImageViewer.BaseTools.ImageViewerTool"/> objects from having to know about specific
            subclasses of <see cref="T:Macro.ImageViewer.PresentationImage"/>, thus allowing them to work with
            any type of <see cref="T:Macro.ImageViewer.PresentationImage"/> that implements the provider interface.
            </para>
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.ISopProvider">
            <summary>
            Interface for providers of <see cref="P:Macro.ImageViewer.StudyManagement.ISopProvider.Sop"/> objects that are not necessarily <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>s.
            </summary>
            <remarks>
            See <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/> for a more detailed explanation of 'providers'.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ISopProvider.Sop">
            <summary>
            Gets a <see cref="P:Macro.ImageViewer.StudyManagement.ISopProvider.Sop"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.IImageSopProvider.ImageSop">
            <summary>
            Gets an <see cref="P:Macro.ImageViewer.StudyManagement.IImageSopProvider.ImageSop"/>.
            </summary>
            <remarks>
            This is the parent of <see cref="P:Macro.ImageViewer.StudyManagement.IImageSopProvider.Frame"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.IImageSopProvider.Frame">
            <summary>
            Gets a <see cref="P:Macro.ImageViewer.StudyManagement.IImageSopProvider.Frame"/>.
            </summary>
            <remarks>
            This <see cref="P:Macro.ImageViewer.StudyManagement.IImageSopProvider.Frame"/> belongs to <see cref="P:Macro.ImageViewer.StudyManagement.IImageSopProvider.ImageSop"/>.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.FrameDataRetrieverDelegate`1">
            <summary>
            A delegate used to retrieve data from an <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.FrameDataRetrieverFactory">
            <summary>
            A helper factory for constructing a delegate to return a specific <see cref="T:Macro.Dicom.DicomTag"/>'s
            value from an <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>.
            </summary>
            <remarks>
            Note that the <see cref="T:Macro.ImageViewer.StudyManagement.FrameDataRetrieverDelegate`1"/>s returned by this factory
            simply return the default value for the return type when the tag has no value or
            does not exist.  Therefore, you should only use <see cref="T:Macro.ImageViewer.StudyManagement.FrameDataRetrieverDelegate`1"/>s
            for cases when the existence of the tag is unimportant.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.FrameDataRetrieverFactory.GetStringRetriever(System.UInt32)">
            <summary>
            Returns a delegate that will get the value of <paramref name="dicomTag"/> (at position 0),
            from an <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/> as a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.FrameDataRetrieverFactory.GetStringRetriever(System.UInt32,System.UInt32)">
            <summary>
            Returns a delegate that will get the value of <paramref name="dicomTag"/> (at <paramref name="position"/>),
            from an <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/> as a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.FrameDataRetrieverFactory.GetStringArrayRetriever(System.UInt32)">
            <summary>
            Returns a delegate that will get the value of <paramref name="dicomTag"/> (all positions),
            from an <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/> as an array of <see cref="T:System.String"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.FrameDataRetrieverFactory.GetIntRetriever(System.UInt32)">
            <summary>
            Returns a delegate that will get the value of <paramref name="dicomTag"/> (at position 0),
            from an <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/> as an <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.FrameDataRetrieverFactory.GetIntRetriever(System.UInt32,System.UInt32)">
            <summary>
            Returns a delegate that will get the value of <paramref name="dicomTag"/> (at <paramref name="position"/>),
            from an <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/> as an <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.FrameDataRetrieverFactory.GetIntArrayRetriever(System.UInt32)">
            <summary>
            Returns a delegate that will get the value of <paramref name="dicomTag"/> (all positions),
            from an <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/> as an array of <see cref="T:System.Int32"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.FrameDataRetrieverFactory.GetDoubleRetriever(System.UInt32)">
            <summary>
            Returns a delegate that will get the value of <paramref name="dicomTag"/> (at position 0),
            from an <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/> as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.FrameDataRetrieverFactory.GetDoubleRetriever(System.UInt32,System.UInt32)">
            <summary>
            Returns a delegate that will get the value of <paramref name="dicomTag"/> (at <paramref name="position"/>),
            from an <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/> as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.FrameDataRetrieverFactory.GetDoubleArrayRetriever(System.UInt32)">
            <summary>
            Returns a delegate that will get the value of <paramref name="dicomTag"/> (all positions),
            from an <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/> as an array of <see cref="T:System.Double"/>s.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.ImagePlaneHelper">
            <summary>
            Contains helper methods for converting between image coordinates
            and the patient coordinate system defined by the Dicom Image Plane Module.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ImagePlaneHelper.#ctor(Macro.Dicom.Iod.ImagePositionPatient,Macro.Dicom.Iod.ImageOrientationPatient,Macro.Dicom.Iod.PixelSpacing)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ImagePlaneHelper.ConvertToPatient(System.Drawing.PointF)">
            <summary>
            Converts the input image position (expressed in pixels) to the patient coordinate system.
            </summary>
            <returns>A position vector, or null if the <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>'s position information is invalid.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ImagePlaneHelper.ConvertToImagePlane(Macro.ImageViewer.Mathematics.Vector3D,Macro.ImageViewer.Mathematics.Vector3D)">
            <summary>
            Converts the input <paramref name="positionPatient">position vector</paramref> to the coordinate
            system of the image plane, moving the origin to <paramref name="originPatient"/>.
            </summary>
            <remarks>
            Note that the resultant position vector remains in units of mm and the z-coordinate is valid.
            </remarks>
            <param name="positionPatient">The position vector, in patient coordinates,
            to be converted to the coordinate system of the image plane.</param>
            <param name="originPatient">The new origin, in patient coordinates.</param>
            <returns>A position vector, or null if the <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>'s position information is invalid.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ImagePlaneHelper.ConvertToImagePlane(Macro.ImageViewer.Mathematics.Vector3D)">
            <summary>
            Converts the input <paramref name="positionPatient">position vector</paramref> to the coordinate
            system of the image plane, moving the origin to the top left corner of the image.
            </summary>
            <remarks>
            Note that the resultant position vector remains in units of mm and the z-coordinate is valid.
            </remarks>
            <param name="positionPatient">The position vector, in patient coordinates,
            to be converted to the coordinate system of the image plane.</param>
            <returns>A position vector, or null if the <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>'s position information is invalid.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ImagePlaneHelper.ConvertToImage(System.Drawing.PointF)">
            <summary>
            Converts a point in the image plane expressed in millimetres (mm) into a point expressed in pixels.
            </summary>
            <returns>The corresponding pixel coordinate, or null if the <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>'s position information is invalid.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ImagePlaneHelper.ConvertFromImage(System.Drawing.PointF)">
            <summary>
            Converts a point in the image expressed in pixels to a point expressed in mm.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ImagePlaneHelper.GetNormalVector">
            <summary>
            Gets the normal vector describing the plane of the image in patient coordinates.
            </summary>
            <returns>The normal vector, or null if the <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>'s position information is invalid.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ImagePlaneHelper.GetNormalVector(Macro.Dicom.Iod.ImageOrientationPatient)">
            <summary>
            Gets the normal vector describing the plane of the image in patient coordinates.
            </summary>
            <returns>The normal vector, or null if the <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>'s position information is invalid.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ImagePlaneHelper.GetRotationMatrix">
            <summary>
            Gets a rotation matrix that, when multiplied by a column matrix representing a
            position vector in patient coordinates, will rotate the position vector
            into a coordinate system matching that of the image plane.
            </summary>
            <returns>The rotation matrix, or null if the <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>'s position information is invalid.</returns>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImagePlaneHelper.IsValid">
            <summary>
            Gets whether or not the patient orientation and pixel spacing values are valid and
            can therefore be used to transform between patient and image coordinates.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Rendering.GdiRendererFactory">
            <summary>
            A factory for <see cref="T:Macro.ImageViewer.Rendering.GdiRenderer"/>s.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Rendering.RendererFactoryBase">
            <summary>
            Provides base implementation for a Render Factory.
            </summary>
            <remarks>
            Inheritors must also derive from <see cref="T:Macro.ImageViewer.Rendering.RendererBase"/> 
            in order to use this class (it calls <see cref="M:Macro.ImageViewer.Rendering.RendererFactoryBase.GetNewRenderer"/> to allocate
            a new <see cref="T:Macro.ImageViewer.Rendering.RendererBase"/> from within the <see cref="M:Macro.ImageViewer.Rendering.RendererFactoryBase.GetRenderer"/> factory
            method.  Note that only one <see cref="T:Macro.ImageViewer.Rendering.RendererBase"/> object is actually allocated
            per thread, and is wrapped in an internal proxy object.  This is because the 
            <see cref="T:Macro.ImageViewer.Rendering.RendererBase"/> object is purposely <b>not</b> thread-safe to make it
            easier for inheritors to implement.  However, there is nothing stopping a developer
            from deriving directly from <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/> and creating their own Singleton
            thread-safe renderer.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Rendering.IRendererFactory">
            <summary>
            A factory for <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.IRendererFactory.Initialize">
            <summary>
            Initializes a <see cref="T:Macro.ImageViewer.Rendering.IRendererFactory"/>.
            </summary>
            <exception cref="T:Macro.ImageViewer.Rendering.RendererFactoryInitializationException">
            Thrown when the <see cref="T:Macro.ImageViewer.Rendering.IRendererFactory"/> cannot initialize, for example
            when the required hardware is not present.
            </exception>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.IRendererFactory.GetRenderer">
            <summary>
            Gets an <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererFactoryBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererFactoryBase.GetNewRenderer">
            <summary>
            Allocates a new <see cref="T:Macro.ImageViewer.Rendering.RendererBase"/>.
            </summary>
            <remarks>
            Inheritors must override this method.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererFactoryBase.Initialize">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererFactoryBase.GetRenderer">
            <summary>
            Factory method for <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/>s.
            </summary>
            <remarks>
            See the remarks for <see cref="T:Macro.ImageViewer.Rendering.RendererFactoryBase"/> regarding how
            these objects are actually allocated/managed internally.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Rendering.IRenderer">
            <summary>
            Defines an <see cref="T:Macro.ImageViewer.IPresentationImage"/> renderer.
            </summary>
            <remarks>
            Unless you are implementing your own renderer, you should never
            have to interact with this interface.  The two methods on <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/>
            should only ever have to be called by the Framework, and thus
            should be treated as internal.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.IRenderer.GetRenderingSurface(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Gets an <see cref="T:Macro.ImageViewer.Rendering.IRenderingSurface"/>.
            </summary>
            <param name="windowID">The window ID.  On Windows systems, this is the window handle
            or "hwnd".</param>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
            <returns></returns>
            <remarks>
            This method is called by <b>TileControl</b> (i.e., the <see cref="T:Macro.ImageViewer.ITile"/> view)
            whenever it is resized, which includes when the control is first created.
            Once <b>TileControl</b> has obtained the surface, it just holds onto it.
            Your implementation of <see cref="M:Macro.ImageViewer.Rendering.IRenderer.Draw(Macro.ImageViewer.Rendering.DrawArgs)"/> should just render to the
            that same surface (passed in via the <see cref="T:Macro.ImageViewer.Rendering.DrawArgs"/>) irrespective 
            of the <see cref="T:Macro.ImageViewer.IPresentationImage"/> being rendered.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.IRenderer.Draw(Macro.ImageViewer.Rendering.DrawArgs)">
            <summary>
            Renders the specified scene graph to the graphics surface.
            </summary>
            <remarks>
            Calling code should take care to handle any exceptions in a manner suitable to the context of
            the rendering operation. For example, the view control for an
            <see cref="T:Macro.ImageViewer.ITile"/> may wish to display the error message in the tile's client area <i>without
            crashing the control</i>, whereas an image export routine may wish to notify the user via an error
            dialog and have the export output <i>fail to be created</i>. Automated routines (such as unit
            tests) may even wish that the exception bubble all the way to the top for debugging purposes.
            </remarks>
            <param name="args">A <see cref="T:Macro.ImageViewer.Rendering.DrawArgs"/> object that specifies the graphics surface and the scene graph to be rendered.</param>
            <exception cref="T:Macro.ImageViewer.Rendering.RenderingException">Thrown if any <see cref="T:System.Exception"/> is encountered in the rendering pipeline.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.GdiRendererFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.GdiRendererFactory.GetNewRenderer">
            <summary>
            Allocates a new <see cref="T:Macro.ImageViewer.Rendering.GdiRenderer"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Rendering.GdiRenderer">
            <summary>
            A 2D Renderer that uses GDI.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Rendering.RendererBase">
            <summary>
            A Template class providing the base functionality for an <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/>.
            </summary>
            <remarks>
            See the remarks section for <see cref="T:Macro.ImageViewer.Rendering.RendererFactoryBase"/> regarding the 
            thread-safety of this object (it is not thread-safe).  For this reason, you should
            use this class in tandem with the <see cref="T:Macro.ImageViewer.Rendering.RendererFactoryBase"/>, although it
            is not required that you do so.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.Draw(Macro.ImageViewer.Rendering.DrawArgs)">
            <summary>
            Renders the specified scene graph to the graphics surface.
            </summary>
            <remarks>
            Calling code should take care to handle any exceptions in a manner suitable to the context of
            the rendering operation. For example, the view control for an
            <see cref="T:Macro.ImageViewer.ITile"/> may wish to display the error message in the tile's client area <i>without
            crashing the control</i>, whereas an image export routine may wish to notify the user via an error
            dialog and have the export output <i>fail to be created</i>. Automated routines (such as unit
            tests) may even wish that the exception bubble all the way to the top for debugging purposes.
            </remarks>
            <param name="drawArgs">A <see cref="T:Macro.ImageViewer.Rendering.DrawArgs"/> object that specifies the graphics surface and the scene graph to be rendered.</param>
            <exception cref="T:Macro.ImageViewer.Rendering.RenderingException">Thrown if any <see cref="T:System.Exception"/> is encountered in the rendering pipeline.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.GetRenderingSurface(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Factory method for an <see cref="T:Macro.ImageViewer.Rendering.IRenderingSurface"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.Initialize(Macro.ImageViewer.Rendering.DrawArgs)">
            <summary>
            Initializes the member variables before calling <see cref="M:Macro.ImageViewer.Rendering.RendererBase.Render"/> or <see cref="M:Macro.ImageViewer.Rendering.RendererBase.Refresh"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.Render">
            <summary>
            Traverses and draws the scene graph.  
            </summary>
            <remarks>
            Inheritors should override this method to do any necessary work before calling the base method.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.Refresh">
            <summary>
            Called when <see cref="P:Macro.ImageViewer.Rendering.DrawArgs.DrawMode"/> is equal to <b>DrawMode.Refresh</b>.
            </summary>
            <remarks>
            Inheritors must implement this method.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.DrawSceneGraph(Macro.ImageViewer.Graphics.CompositeGraphic)">
            <summary>
            Traverses and Renders the Scene Graph.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.DrawTextOverlay(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Draws the Text Overlay.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.DrawImageGraphic(Macro.ImageViewer.Graphics.ImageGraphic)">
            <summary>
            Draws an <see cref="T:Macro.ImageViewer.Graphics.ImageGraphic"/>.  Must be overridden and implemented.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.DrawLinePrimitive(Macro.ImageViewer.Graphics.LinePrimitive)">
            <summary>
            Draws a <see cref="T:Macro.ImageViewer.Graphics.LinePrimitive"/>.  Must be overridden and implemented.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.DrawInvariantLinePrimitive(Macro.ImageViewer.Graphics.InvariantLinePrimitive)">
            <summary>
            Draws a <see cref="T:Macro.ImageViewer.Graphics.InvariantLinePrimitive"/>.  Must be overridden and implemented.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.DrawCurvePrimitive(Macro.ImageViewer.Graphics.CurvePrimitive)">
            <summary>
            Draws a <see cref="T:Macro.ImageViewer.Graphics.CurvePrimitive"/>. Must be overridden and implemented.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.DrawRectanglePrimitive(Macro.ImageViewer.Graphics.RectanglePrimitive)">
            <summary>
            Draws a <see cref="T:Macro.ImageViewer.Graphics.RectanglePrimitive"/>.  Must be overridden and implemented.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.DrawInvariantRectanglePrimitive(Macro.ImageViewer.Graphics.InvariantRectanglePrimitive)">
            <summary>
            Draws a <see cref="T:Macro.ImageViewer.Graphics.InvariantRectanglePrimitive"/>.  Must be overridden and implemented.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.DrawEllipsePrimitive(Macro.ImageViewer.Graphics.EllipsePrimitive)">
            <summary>
            Draws a <see cref="T:Macro.ImageViewer.Graphics.EllipsePrimitive"/>.  Must be overridden and implemented.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.DrawInvariantEllipsePrimitive(Macro.ImageViewer.Graphics.InvariantEllipsePrimitive)">
            <summary>
            Draws a <see cref="T:Macro.ImageViewer.Graphics.InvariantEllipsePrimitive"/>.  Must be overridden and implemented.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.DrawArcPrimitive(Macro.ImageViewer.Graphics.IArcGraphic)">
            <summary>
            Draws a <see cref="T:Macro.ImageViewer.Graphics.ArcPrimitive"/>.  Must be overridden and implemented.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.DrawPointPrimitive(Macro.ImageViewer.Graphics.PointPrimitive)">
            <summary>
            Draws a <see cref="T:Macro.ImageViewer.Graphics.PointPrimitive"/>.  Must be overridden and implemented.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.DrawTextPrimitive(Macro.ImageViewer.Graphics.InvariantTextPrimitive)">
            <summary>
            Draws an <see cref="T:Macro.ImageViewer.Graphics.InvariantTextPrimitive"/>.  Must be overridden and implemented.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.DrawAnnotationBox(System.String,Macro.ImageViewer.Annotations.AnnotationBox)">
            <summary>
            Draws an <see cref="T:Macro.ImageViewer.Annotations.AnnotationBox"/>.  Must be overridden and implemented.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.ShowErrorMessage(System.String)">
            <summary>
            Draws an error message in the Scene Graph's client area of the screen.
            </summary>
            <remarks>
            <para>
            This method was deprecated in favour of allowing the render client code to handle errors in
            a manner suitable for the context in which it is called. For example, the view control for an
            <see cref="T:Macro.ImageViewer.ITile"/> may wish to display the error message in the tile's client area <i>without
            crashing the control</i>, whereas an image export routine may wish to notify the user via an error
            dialog and have the export output <i>fail to be created</i>. Automated routines (such as unit
            tests) may even wish that the exception bubble all the way to the top for debugging purposes.
            </para>
            <para>
            For these reasons, this method is no longer called by <see cref="T:Macro.ImageViewer.Rendering.RendererBase"/>, although
            individual renderer implementations may still render error messages if, even after consideration
            of the above listed scenarios, it is determined that the exception should be handled internally.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.Dispose(System.Boolean)">
            <summary>
            Dispose method.  Inheritors should override this method to do any additional cleanup.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererBase.Dispose">
            <summary>
            Dispose method.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Rendering.RendererBase.DrawMode">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.Rendering.DrawMode"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Rendering.RendererBase.SceneGraph">
            <summary>
            Gets the <b>SceneGraph</b> that is to be rendered.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Rendering.RendererBase.Surface">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.Rendering.IRenderingSurface"/> that is to be rendered upon.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Rendering.RendererBase.Dpi">
            <summary>
            Gets the resolution of the intended output device in DPI.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.GdiRenderer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.GdiRenderer.Dispose(System.Boolean)">
            <summary>
            Dispose method.  Inheritors should override this method to do any additional cleanup.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.GdiRenderer.Render">
            <summary>
            Traverses and renders the scene graph.  
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.GdiRenderer.Refresh">
            <summary>
            Called when <see cref="P:Macro.ImageViewer.Rendering.DrawArgs.DrawMode"/> is equal to <b>DrawMode.Refresh</b>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.GdiRenderer.DrawImageGraphic(Macro.ImageViewer.Graphics.ImageGraphic)">
            <summary>
            Draws an <see cref="T:Macro.ImageViewer.Graphics.ImageGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.GdiRenderer.DrawLinePrimitive(Macro.ImageViewer.Graphics.LinePrimitive)">
            <summary>
            Draws a <see cref="T:Macro.ImageViewer.Graphics.LinePrimitive"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.GdiRenderer.DrawInvariantLinePrimitive(Macro.ImageViewer.Graphics.InvariantLinePrimitive)">
            <summary>
            Draws a <see cref="T:Macro.ImageViewer.Graphics.InvariantLinePrimitive"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.GdiRenderer.DrawCurvePrimitive(Macro.ImageViewer.Graphics.CurvePrimitive)">
            <summary>
            Draws a <see cref="T:Macro.ImageViewer.Graphics.CurvePrimitive"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.GdiRenderer.DrawRectanglePrimitive(Macro.ImageViewer.Graphics.RectanglePrimitive)">
            <summary>
            Draws a <see cref="T:Macro.ImageViewer.Graphics.RectanglePrimitive"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.GdiRenderer.DrawInvariantRectanglePrimitive(Macro.ImageViewer.Graphics.InvariantRectanglePrimitive)">
            <summary>
            Draws a <see cref="T:Macro.ImageViewer.Graphics.InvariantRectanglePrimitive"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.GdiRenderer.DrawEllipsePrimitive(Macro.ImageViewer.Graphics.EllipsePrimitive)">
            <summary>
            Draws a <see cref="T:Macro.ImageViewer.Graphics.EllipsePrimitive"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.GdiRenderer.DrawInvariantEllipsePrimitive(Macro.ImageViewer.Graphics.InvariantEllipsePrimitive)">
            <summary>
            Draws a <see cref="T:Macro.ImageViewer.Graphics.InvariantEllipsePrimitive"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.GdiRenderer.DrawArcPrimitive(Macro.ImageViewer.Graphics.IArcGraphic)">
            <summary>
            Draws a <see cref="T:Macro.ImageViewer.Graphics.ArcPrimitive"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.GdiRenderer.DrawPointPrimitive(Macro.ImageViewer.Graphics.PointPrimitive)">
            <summary>
            Draws a <see cref="T:Macro.ImageViewer.Graphics.PointPrimitive"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.GdiRenderer.DrawTextPrimitive(Macro.ImageViewer.Graphics.InvariantTextPrimitive)">
            <summary>
            Draws an <see cref="T:Macro.ImageViewer.Graphics.InvariantTextPrimitive"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.GdiRenderer.DrawAnnotationBox(System.String,Macro.ImageViewer.Annotations.AnnotationBox)">
            <summary>
            Draws an <see cref="T:Macro.ImageViewer.Annotations.AnnotationBox"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.GdiRenderer.ShowErrorMessage(System.String)">
            <summary>
            Draws an error message in the Scene Graph's client area of the screen.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.GdiRenderer.GetRenderingSurface(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Factory method for an <see cref="T:Macro.ImageViewer.Rendering.IRenderingSurface"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Mathematics.Matrix">
            <summary>
            Represents a matrix of arbitrary dimensions.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new zero matrix of the given dimensions.
            </summary>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="columns">The number of columns in the matrix.</param>
            <exception cref="T:System.ArgumentException">Thrown if either <paramref name="rows"/> or <paramref name="columns"/> is zero or negative.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix.#ctor(System.Single[0:,0:])">
            <summary>
            Constructs a new matrix and initializes its values to that of the given 2-dimensional array.
            </summary>
            <param name="matrix">The 2-dimensional array (rows, then columns) with which to initialize the matrix.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the supplied matrix is null.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix.#ctor(Macro.ImageViewer.Mathematics.Matrix)">
            <summary>
            Constructs a new matrix as a clone of an existing matrix.
            </summary>
            <param name="matrix">The source matrix to clone.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the supplied matrix is null.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix.SetRow(System.Int32,System.Single[])">
            <summary>
            Sets all the values in a particular row.
            </summary>
            <remarks>
            This is more efficient than setting each value separately.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix.SetColumn(System.Int32,System.Single[])">
            <summary>
            Sets all the values in a particular column.
            </summary>
            <remarks>
            This is more efficient than setting each value separately.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix.Clone">
            <summary>
            Clones this matrix and its values.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix.Transpose">
            <summary>
            Returns a matrix that is the transpose of this matrix.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix.ToString">
            <summary>
            Gets a string describing the matrix.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix.GetIdentity(System.Int32)">
            <summary>
            Gets an identity matrix with the input dimensions.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix.GetIdentity(Macro.ImageViewer.Mathematics.Matrix)">
            <summary>
            Gets an identity matrix with the dimensions of the given square matrix.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix.op_Multiply(Macro.ImageViewer.Mathematics.Matrix,Macro.ImageViewer.Mathematics.Matrix)">
            <summary>
            Performs matrix multiplication of <paramref name="left"/> and <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix.op_Multiply(System.Single,Macro.ImageViewer.Mathematics.Matrix)">
            <summary>
            Performs scalar multiplication of <paramref name="matrix"/> by <paramref name="scale"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix.op_Multiply(Macro.ImageViewer.Mathematics.Matrix,System.Single)">
            <summary>
            Performs scalar multiplication of <paramref name="matrix"/> by <paramref name="scale"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix.op_Division(System.Single,Macro.ImageViewer.Mathematics.Matrix)">
            <summary>
            This notation is no longer supported.
            </summary>
            <remarks>
            <para>This notation is ambiguous. Please use an explicit notation of the expected operation, such as one of the following.</para>
            <code>scale * matrix.Inverse()</code>
            <code>matrix / scale</code>
            <code>scale * Matrix.GetIdentity(matrix) * matrix.Inverse()</code>
            <code>(scale * Matrix.GetIdentity(matrix)).Inverse() * matrix</code>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix.op_Division(Macro.ImageViewer.Mathematics.Matrix,System.Single)">
            <summary>
            Performs scalar multiplication of <paramref name="matrix"/> by 1/<paramref name="scale"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix.op_Addition(Macro.ImageViewer.Mathematics.Matrix,Macro.ImageViewer.Mathematics.Matrix)">
            <summary>
            Performs element-by-element addition of <paramref name="left"/> and <paramref name="right"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If the matrices do not have the same dimensions.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix.op_Subtraction(Macro.ImageViewer.Mathematics.Matrix,Macro.ImageViewer.Mathematics.Matrix)">
            <summary>
            Performs element-by-element subtraction of <paramref name="right"/> from <paramref name="left"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If the matrices do not have the same dimensions.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix.AreEqual(Macro.ImageViewer.Mathematics.Matrix,Macro.ImageViewer.Mathematics.Matrix,System.Single)">
            <summary>
            Gets a value indicating whether or not the elements of <paramref name="left"/> are equal to <paramref name="right"/> within the given tolerance.
            </summary>
            <exception cref="T:System.ArgumentException">If the matrices do not have the same dimensions.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix.AreEqual(Macro.ImageViewer.Mathematics.Matrix,Macro.ImageViewer.Mathematics.Matrix)">
            <summary>
            Gets a value indicating whether or not the elements of <paramref name="left"/> are equal to <paramref name="right"/> within a small tolerance.
            </summary>
            <exception cref="T:System.ArgumentException">If the matrices do not have the same dimensions.</exception>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.Matrix.Rows">
            <summary>
            Gets the number of rows in the matrix.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.Matrix.Columns">
            <summary>
            Gets the number of columns in the matrix.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.Matrix.IsSquare">
            <summary>
            Gets whether or not the matrix is square (rows == columns).
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.Matrix.IsIdentity">
            <summary>
            Gets whether or not this is an identity matrix.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the value of the cell at the specified row and column indices.
            </summary>
            <param name="row">The row index</param>
            <param name="column">The column index</param>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.BasicVoiLutLinear">
            <summary>
            The most basic of Linear Luts where the <see cref="P:Macro.ImageViewer.Imaging.BasicVoiLutLinear.WindowWidth"/> and <see cref="P:Macro.ImageViewer.Imaging.BasicVoiLutLinear.WindowCenter"/> can be directly set/manipulated.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Imaging.IBasicVoiLutLinear"/>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.VoiLutLinearBase">
            <summary>
            Abstract class providing all the base implementation for Linear Voi Luts.
            </summary>
            <remarks>
            A simple Linear Voi Lut class (<see cref="T:Macro.ImageViewer.Imaging.BasicVoiLutLinear"/>) and other 
            abstract base classes (<see cref="T:Macro.ImageViewer.Imaging.CalculatedVoiLutLinear"/>, <see cref="T:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear"/>)
            are provided that cover most, if not all, Linear Voi Lut use cases.  You should not need
            to derive directly from this class.
            </remarks>
            <seealso cref="T:Macro.ImageViewer.Imaging.ComposableVoiLut"/>
            <seealso cref="T:Macro.ImageViewer.Imaging.IVoiLut"/>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.ComposableVoiLut">
            <summary>
            Abstract base implementation for a lookup table in the standard grayscale image display pipeline that selects range from manufacturer-independent values for display.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Imaging.LutComposer"/>
            <seealso cref="T:Macro.ImageViewer.Imaging.IVoiLut"/>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.ComposableLutBase">
            <summary>
            Abstract base implementation for a lookup table that comprises part of the standard grayscale image display pipeline.
            </summary>
            <remarks>
            This class contains abstract internal members and cannot be directly subclassed. Instead, subclass either
            <see cref="T:Macro.ImageViewer.Imaging.ComposableModalityLut"/>, <see cref="T:Macro.ImageViewer.Imaging.ComposableVoiLut"/> or <see cref="T:Macro.ImageViewer.Imaging.ComposableLut"/> depending
            on the intended use of the lookup table in the grayscale image display pipeline.
            </remarks>
            <seealso cref="T:Macro.ImageViewer.Imaging.LutComposer"/>
            <seealso cref="T:Macro.ImageViewer.Imaging.IComposableLut"/>
            <seealso cref="T:Macro.ImageViewer.Imaging.ComposableLut"/>
            <seealso cref="T:Macro.ImageViewer.Imaging.ComposableModalityLut"/>
            <seealso cref="T:Macro.ImageViewer.Imaging.ComposableVoiLut"/>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.IComposableLut">
            <summary>
            Defines a lookup table that comprises part of the standard grayscale image display pipeline.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Imaging.LutComposer"/>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IComposableLut.GetKey">
            <summary>
            Gets a string key that identifies this particular lookup table's characteristics.
            </summary>
            <remarks>
            This method is not to be confused with <b>equality</b>, since some lookup tables can be
            dependent upon the actual image to which it belongs.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IComposableLut.GetDescription">
            <summary>
            Gets an abbreviated description of the lookup table.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IComposableLut.Clone">
            <summary>
            Creates a deep-copy of the <see cref="T:Macro.ImageViewer.Imaging.IComposableLut"/>.
            </summary>
            <remarks>
            Implementations may return null from this method when appropriate.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IComposableLut.MinInputValue">
            <summary>
            Gets or sets the minimum input value.
            </summary>
            <remarks>
            This value is set internally by the framework and should not be modified by client code.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IComposableLut.MaxInputValue">
            <summary>
            Gets or sets the maximum input value.
            </summary>
            <remarks>
            This value is set internally by the framework and should not be modified by client code.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IComposableLut.MinOutputValue">
            <summary>
            Gets the minimum output value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IComposableLut.MaxOutputValue">
            <summary>
            Gets the maximum output value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IComposableLut.Item(System.Double)">
            <summary>
            Gets the output value of the lookup table for a given input value.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Imaging.IComposableLut.LutChanged">
            <summary>
            Fired when the lookup table has changed in some way.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ComposableLutBase.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Imaging.ComposableLutBase"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ComposableLutBase.OnLutChanged">
            <summary>
            Fires the <see cref="E:Macro.ImageViewer.Imaging.ComposableLutBase.LutChanged"/> event.
            </summary>
            <remarks>
            Inheritors should call this method when any property of the lookup table has changed.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ComposableLutBase.Lookup(System.Double)">
            <summary>
            Gets the output value of the lookup table for a given input value.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ComposableLutBase.GetKey">
            <summary>
            Gets a string key that identifies this particular lookup table's characteristics.
            </summary>
            <remarks>
            This method is not to be confused with <b>equality</b>, since some lookup tables can be
            dependent upon the actual image to which it belongs.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ComposableLutBase.GetDescription">
            <summary>
            Gets an abbreviated description of the lookup table.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ComposableLutBase.CreateMemento">
            <summary>
            Captures the state of the lookup table.
            </summary>
            <remarks>
            <para>
            The implementation should return an object containing enough state information so that,
            when <see cref="M:Macro.ImageViewer.Imaging.ComposableLutBase.SetMemento(System.Object)"/> is called, the lookup table can be restored to the original state.
            </para>
            <para>
            If the method is implemented, <see cref="M:Macro.ImageViewer.Imaging.ComposableLutBase.SetMemento(System.Object)"/> must also be implemented.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ComposableLutBase.SetMemento(System.Object)">
            <summary>
            Restores the state of the lookup table.
            </summary>
            <param name="memento">An object that was originally created by <see cref="M:Macro.ImageViewer.Imaging.ComposableLutBase.CreateMemento"/>.</param>
            <remarks>
            <para>
            The implementation should return the lookup table to the original state captured by <see cref="M:Macro.ImageViewer.Imaging.ComposableLutBase.CreateMemento"/>.
            </para>
            <para>
            If you implement <see cref="M:Macro.ImageViewer.Imaging.ComposableLutBase.CreateMemento"/> to capture the lookup table's state, you must also implement this method
            to allow the state to be restored. Failure to do so will result in a <see cref="T:System.InvalidOperationException"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ComposableLutBase.Clone">
            <summary>
            Creates a deep-copy of the <see cref="T:Macro.ImageViewer.Imaging.IComposableLut"/>.
            </summary>
            <remarks>
            Implementations may return null from this method when appropriate.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.ComposableLutBase.MinInputValueCore">
            <summary>
            Gets or sets the minimum input value.
            </summary>
            <remarks>
            This value is set internally by the framework and should not be modified by client code.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.ComposableLutBase.MaxInputValueCore">
            <summary>
            Gets or sets the maximum input value.
            </summary>
            <remarks>
            This value is set internally by the framework and should not be modified by client code.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.ComposableLutBase.MinOutputValueCore">
            <summary>
            Gets the minimum output value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.ComposableLutBase.MaxOutputValueCore">
            <summary>
            Gets the maximum output value.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Imaging.ComposableLutBase.LutChanged">
            <summary>
            Fired when the lookup table has changed in some way.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.IVoiLut">
            <summary>
            Defines a lookup table in the standard grayscale image display pipeline used to select a range from manufacturer-independent values for display.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Imaging.LutComposer"/>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IVoiLut.Clone">
            <summary>
            Creates a deep-copy of the <see cref="T:Macro.ImageViewer.Imaging.IVoiLut"/>.
            </summary>
            <remarks>
            Implementations may return null from this method when appropriate.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IVoiLut.MinOutputValue">
            <summary>
            Gets the minimum output value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IVoiLut.MaxOutputValue">
            <summary>
            Gets the maximum output value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IVoiLut.Item(System.Double)">
            <summary>
            Gets the output value of the lookup table for a given input value.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiLutLinearBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiLutLinearBase.GetWindowWidth">
            <summary>
            Gets the Window Width.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiLutLinearBase.GetWindowCenter">
            <summary>
            Gets the Window Center.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiLutLinearBase.GetKey">
            <summary>
            Gets a string key that identifies this particular LUT's characteristics, so that 
            an image's <see cref="T:Macro.ImageViewer.Imaging.IComposedLut"/> can be more efficiently determined.
            </summary>
            <remarks>
            This method is not to be confused with <b>equality</b>, since some Luts can be
            dependent upon the actual image to which it belongs.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiLutLinearBase.OnLutChanged">
            <summary>
            Should be called by implementors when the Lut characteristics have changed.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.VoiLutLinearBase.Item(System.Double)">
            <summary>
            Gets the output value of the Lut at a given input <paramref name="index"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.VoiLutLinearBase.MinInputValue">
            <summary>
            Gets or sets the minimum input value.
            </summary>
            <remarks>
            This value should not be modified by your code.  It will be set internally by the framework.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.VoiLutLinearBase.MaxInputValue">
            <summary>
            Gets the maximum input value.
            </summary>
            <remarks>
            This value should not be modified by your code.  It will be set internally by the framework.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.VoiLutLinearBase.MinOutputValue">
            <summary>
            Gets the minimum output value.
            </summary>
            <exception cref="T:System.MemberAccessException">Thrown on any attempt to set the value.</exception>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.VoiLutLinearBase.MaxOutputValue">
            <summary>
            Gets the maximum output value.
            </summary>
            <exception cref="T:System.MemberAccessException">Thrown on any attempt to set the value.</exception>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.IBasicVoiLutLinear">
            <summary>
            The most basic of Linear Luts where the <see cref="P:Macro.ImageViewer.Imaging.IBasicVoiLutLinear.WindowWidth"/> and <see cref="P:Macro.ImageViewer.Imaging.IBasicVoiLutLinear.WindowCenter"/>
            can be set/manipulated.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Imaging.IVoiLutLinear"/>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.IVoiLutLinear">
            <summary>
            A read-only Linear Voi Lut, where the <see cref="P:Macro.ImageViewer.Imaging.IVoiLutLinear.WindowWidth"/> and <see cref="P:Macro.ImageViewer.Imaging.IVoiLutLinear.WindowCenter"/> cannot be set.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Imaging.IVoiLut"/>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IVoiLutLinear.WindowWidth">
            <summary>
            Gets the Window Width.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IVoiLutLinear.WindowCenter">
            <summary>
            Gets the Window Center.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IBasicVoiLutLinear.WindowWidth">
            <summary>
            Gets or sets the Window Width.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IBasicVoiLutLinear.WindowCenter">
            <summary>
            Gets or sets the Window Center.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.BasicVoiLutLinear.#ctor(System.Double,System.Double)">
            <summary>
            Constructor.  
            </summary>
            <remarks>
            Allows the initial <see cref="P:Macro.ImageViewer.Imaging.BasicVoiLutLinear.WindowWidth"/> and <see cref="P:Macro.ImageViewer.Imaging.BasicVoiLutLinear.WindowCenter"/> to be set.
            </remarks>
            <param name="windowWidth">The initial Window Width.</param>
            <param name="windowCenter">The initial Window Center.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.BasicVoiLutLinear.#ctor">
            <summary>
            Default Constructor.
            </summary>
            <remarks>
            The initial <see cref="P:Macro.ImageViewer.Imaging.BasicVoiLutLinear.WindowWidth"/> and <see cref="P:Macro.ImageViewer.Imaging.BasicVoiLutLinear.WindowCenter"/> are 1 and 0, respectively.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.BasicVoiLutLinear.GetWindowWidth">
            <summary>
            Gets the <see cref="P:Macro.ImageViewer.Imaging.BasicVoiLutLinear.WindowWidth"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.BasicVoiLutLinear.GetWindowCenter">
            <summary>
            Gets the <see cref="P:Macro.ImageViewer.Imaging.BasicVoiLutLinear.WindowCenter"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.BasicVoiLutLinear.GetDescription">
            <summary>
            Gets an abbreviated description of the Lut.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.BasicVoiLutLinear.CreateMemento">
            <summary>
            Creates a memento, through which the Lut's state can be restored.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.BasicVoiLutLinear.SetMemento(System.Object)">
            <summary>
            Sets the Lut's state from the input memento object.
            </summary>
            <exception cref="T:System.InvalidCastException">Thrown when the memento is unrecognized, which should never happen.</exception>
            <param name="memento">The memento to use to restore a previous state.</param>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.BasicVoiLutLinear.WindowWidth">
            <summary>
            Gets or sets the Window Width.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.BasicVoiLutLinear.WindowCenter">
            <summary>
            Gets or sets the Window Center.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Comparers.DicomSeriesComparer">
            <summary>
            Base class for comparers that compare some aspect of
            DICOM series.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Comparers.DisplaySetComparer">
            <summary>
            Base class for comparers that compare some aspect of <see cref="T:Macro.ImageViewer.IDisplaySet"/>s.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Comparers.ComparerBase">
            <summary>
            Base class for comparers that are used for sorting collections.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.ComparerBase.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.ComparerBase"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.ComparerBase.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.ComparerBase"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.ComparerBase.Compare(System.Collections.Generic.IEnumerable{System.IComparable},System.Collections.Generic.IEnumerable{System.IComparable})">
            <summary>
            Compares two sets of values, where the position of the items
            in <paramref name="x"/> corresponds with the position of the items
            in <paramref name="y"/>.
            </summary>
            <remarks>
            Item pairs are compared in order until the first non-equal pair
            is found, at which point comparison stops and a result is returned.
            The number of items in <paramref name="x"/> and <paramref name="y"/> <b>must</b>
            always yield the same number of entries, or an <see cref="T:System.ArgumentException"/> may be thrown.
            </remarks>
            <returns>Zero when <b>all</b> entry pairs are equal, otherwise +-<see cref="P:Macro.ImageViewer.Comparers.ComparerBase.ReturnValue"/>.</returns>
        </member>
        <member name="P:Macro.ImageViewer.Comparers.ComparerBase.Reverse">
            <summary>
            Gets or sets a value indicating whether or not the collection will be
            sorted in ascending or descending order.
            </summary>
            <remarks>
            The default is false, or descending.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Comparers.ComparerBase.ReturnValue">
            <summary>
            Gets a value indicating whether or not the collection will be
            sorted in ascending or descending order.
            </summary>
            <remarks>
            Inheritors should return this value appropriately in order for
            the reversible sorting mechanism to work properly.
            </remarks>
            <value>1 if <see cref="P:Macro.ImageViewer.Comparers.ComparerBase.Reverse"/> is <b>true</b></value>
            <value>-1 if <see cref="P:Macro.ImageViewer.Comparers.ComparerBase.Reverse"/> is <b>false</b></value>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DisplaySetComparer.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.DisplaySetComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DisplaySetComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.DisplaySetComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DisplaySetComparer.Compare(Macro.ImageViewer.IDisplaySet,Macro.ImageViewer.IDisplaySet)">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.IDisplaySet"/>s.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DicomSeriesComparer.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.DicomSeriesComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DicomSeriesComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.DicomSeriesComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DicomSeriesComparer.Compare(Macro.ImageViewer.IDisplaySet,Macro.ImageViewer.IDisplaySet)">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.IDisplaySet"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DicomSeriesComparer.Compare(Macro.ImageViewer.StudyManagement.Series,Macro.ImageViewer.StudyManagement.Series)">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.StudyManagement.Series"/>.
            </summary>
            <remarks>Simply calls <see cref="M:Macro.ImageViewer.Comparers.DicomSeriesComparer.Compare(Macro.ImageViewer.StudyManagement.Sop,Macro.ImageViewer.StudyManagement.Sop)"/>,
            passing the first <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> in each <see cref="T:Macro.ImageViewer.StudyManagement.Series"/>.</remarks>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DicomSeriesComparer.Compare(Macro.ImageViewer.StudyManagement.Sop,Macro.ImageViewer.StudyManagement.Sop)">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>s.
            </summary>
            <remarks>
            The relevant DICOM series property to be compared
            is taken from the <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.VoiLutImageOperation">
            <summary>
            A specialization of the <see cref="T:Macro.ImageViewer.BasicImageOperation"/> where the
            originator is an <see cref="T:Macro.ImageViewer.Imaging.IVoiLutManager"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.BasicImageOperation">
            <summary>
            A simple way to implement an ImageOperation, using delegates.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.ImageOperation">
            <summary>
            Abstract base class for an undoable operation performed on an <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.UndoableOperation`1">
            <summary>
            Abstract base class for <see cref="T:Macro.ImageViewer.IUndoableOperation`1"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.IUndoableOperation`1">
            <summary>
            An interface for an operation on an object
            that implements undo/redo using the Memento pattern.
            </summary>
            <remarks>
            <para>
            The Memento design pattern allows client code to perform undo/redo operations on
            an object without understanding any of the internals of how the operation is undone.
            All that is needed is a 'memento' from before and after any modifications are made
            to the object in question.  These mementos can then be used to construct a 
            single <see cref="T:Macro.Desktop.MemorableUndoableCommand"/> to be entered into the 
            <see cref="T:Macro.Desktop.CommandHistory"/> and the changes to the object's state
            can then be 'undone' and 'redone', simply be passing the memento back to the object.
            </para>
            <para>
            This interface is merely an abstraction that allows client code to apply the Memento
            pattern to an arbitrary object without any understanding of the operation being applied
            or the participating objects.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.IUndoableOperation`1.GetOriginator(`0)">
            <summary>
            In the memento pattern, the 'originator' is the object whose state is being
            captured and restored via a memento.
            </summary>
            <remarks>
            In this interface definition, the originator is purposely not of <typeparamref name="T">type T</typeparamref>
            because you may actually want to perform the operation on an object that is not itself
            <see cref="T:Macro.Desktop.IMemorable">memorable</see>, but rather on some <see cref="T:Macro.Desktop.IMemorable">memorable</see> property.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.IUndoableOperation`1.AppliesTo(`0)">
            <summary>
            Gets whether or not this operation applies to the given item.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.IUndoableOperation`1.Apply(`0)">
            <summary>
            Applies the operation to the given item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Macro.ImageViewer.UndoableOperation`1.#ctor">
            <summary>
            Protected constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.UndoableOperation`1.GetOriginator(`0)">
            <summary>
            In the memento pattern, the 'originator' is the object whose state is being
            captured and restored via a memento.
            </summary>
            <remarks>
            In this interface definition, the originator is purposely not of <typeparamref name="T">type T</typeparamref>
            because you may actually want to perform the operation on an object that is not itself
            <see cref="T:Macro.Desktop.IMemorable">memorable</see>, but rather on some <see cref="T:Macro.Desktop.IMemorable">memorable</see> property.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.UndoableOperation`1.AppliesTo(`0)">
            <summary>
            Gets whether or not this operation applies to the given item.
            </summary>
            <remarks>
            By default, simply returns whether or not <see cref="M:Macro.ImageViewer.UndoableOperation`1.GetOriginator(`0)"/> returns for the given item.
            Subclasses can override this method to customize the behaviour.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.UndoableOperation`1.Apply(`0)">
            <summary>
            Applies the operation to the given item.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageOperation.#ctor">
            <summary>
            Default protected constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BasicImageOperation.#ctor(Macro.ImageViewer.BasicImageOperation.GetOriginatorDelegate,Macro.ImageViewer.BasicImageOperation.ApplyDelegate)">
            <summary>
            Mandatory constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BasicImageOperation.GetOriginator(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Gets the originator for the input <see cref="T:Macro.ImageViewer.IPresentationImage"/>, which must be <see cref="T:Macro.Desktop.IMemorable"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BasicImageOperation.Apply(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Applies the operation to the input <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.BasicImageOperation.GetOriginatorDelegate">
            <summary>
            Defines a delegate used to get the originator for a given <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.BasicImageOperation.ApplyDelegate">
            <summary>
            Defines a delegate used to apply an undoable operation to an <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiLutImageOperation.#ctor(Macro.ImageViewer.BasicImageOperation.ApplyDelegate)">
            <summary>
            Mandatory constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiLutImageOperation.GetOriginator(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Returns the <see cref="T:Macro.ImageViewer.Imaging.IVoiLutManager"/> associated with the 
            <see cref="T:Macro.ImageViewer.IPresentationImage"/>, or null.
            </summary>
            <remarks>
            When used in conjunction with an <see cref="T:Macro.ImageViewer.ImageOperationApplicator"/>,
            it is always safe to cast the return value directly to <see cref="T:Macro.ImageViewer.Imaging.IVoiLutManager"/>
            without checking for null from within the <see cref="T:Macro.ImageViewer.BasicImageOperation.ApplyDelegate"/> 
            specified in the constructor.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSerializableGraphicAnnotationAttribute">
            <summary>
            Specifies the <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.GraphicAnnotationSerializer"/> to use when serializing a DICOM graphic annotation (DICOM PS 3.3 C.10.5)
            </summary>
            <remarks>
            Only one attribute may be specified on any given class. Attributes decorating base classes are inherited (and can be overriden)
            by the derived class.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSerializableGraphicAnnotationAttribute.#ctor(System.Type)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSerializableGraphicAnnotationAttribute"/>.
            </summary>
            <param name="serializerType">The concrete implementation of <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.GraphicAnnotationSerializer"/> to use.</param>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomSerializableGraphicAnnotationAttribute.Serializer">
            <summary>
            Gets an instance of the specified serializer.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.Dicom.GraphicAnnotationSerializer">
            <summary>
            Base class for a state-less class that serializes <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>s into <see cref="T:Macro.Dicom.Iod.Sequences.GraphicAnnotationSequenceItem"/>s according to DICOM PS 3.3 C.10.5.
            </summary>
            <remarks>
            Concrete implementations of this class must have a public, parameter-less constructor.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.GraphicAnnotationSerializer.Serialize(Macro.ImageViewer.Graphics.IGraphic,Macro.Dicom.Iod.Sequences.GraphicAnnotationSequenceItem)">
            <summary>
            Serializes the specified graphic to the supplied serialization state object.
            </summary>
            <param name="graphic">The graphic to serialize.</param>
            <param name="serializationState">The state to which the graphic should be serialized.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.GraphicAnnotationSerializer.SerializeGraphic(Macro.ImageViewer.Graphics.IGraphic,Macro.Dicom.Iod.Sequences.GraphicAnnotationSequenceItem)">
            <summary>
            Helper method to serialize a graphic to the supplied serialization state object.
            </summary>
            <param name="graphic">The graphic to serialize.</param>
            <param name="serializationState">The state to which the graphic should be serialized.</param>
            <returns>True if the graphic was serializable; False otherwise.</returns>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.Dicom.GraphicAnnotationSerializer`1">
            <summary>
            Typed class for a state-less class that serializes a particular type of <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>s according to DICOM PS 3.3 C.10.5.
            </summary>
            <remarks>
            Concrete implementations of this class must have a public, parameter-less constructor.
            </remarks>
            <typeparam name="T">The type of <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> that the serializer supports.</typeparam>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.GraphicAnnotationSerializer`1.Serialize(`0,Macro.Dicom.Iod.Sequences.GraphicAnnotationSequenceItem)">
            <summary>
            Serializes the specified graphic to the supplied serialization state object.
            </summary>
            <param name="graphic">The graphic to serialize.</param>
            <param name="serializationState">The state to which the graphic should be serialized.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.GraphicAnnotationSerializer`1.Serialize(Macro.ImageViewer.Graphics.IGraphic,Macro.Dicom.Iod.Sequences.GraphicAnnotationSequenceItem)">
            <summary>
            Serializes the specified graphic to the supplied serialization state object.
            </summary>
            <param name="graphic">The graphic to serialize.</param>
            <param name="serializationState">The state to which the graphic should be serialized.</param>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.InsertGraphicUndoableCommand">
            <summary>
            An <see cref="T:Macro.Desktop.UndoableCommand"/> for inserting an <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> into a <see cref="T:Macro.ImageViewer.Graphics.GraphicCollection"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InsertGraphicUndoableCommand.#ctor(Macro.ImageViewer.Graphics.IGraphic,Macro.ImageViewer.Graphics.GraphicCollection,System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InsertGraphicUndoableCommand.Execute">
            <summary>
            <see cref="M:Macro.ImageViewer.Graphics.InsertGraphicUndoableCommand.Execute"/>s the insert command.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InsertGraphicUndoableCommand.Unexecute">
            <summary>
            <see cref="M:Macro.ImageViewer.Graphics.InsertGraphicUndoableCommand.Unexecute"/>s the insert command (e.g. removes the graphic).
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.EllipsePrimitive">
            <summary>
            A primitive ellipse graphic.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.BoundableGraphic">
            <summary>
            A <see cref="T:Macro.ImageViewer.Graphics.VectorGraphic"/> that can be described by a
            rectangular bounding box.
            </summary>
            <remarks>
            Rectangles and ellipses are examples of graphics that can be
            described by a rectangular bounding box.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.VectorGraphic">
            <summary>
            An vector <see cref="T:Macro.ImageViewer.Graphics.Graphic"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.Graphic">
            <summary>
            An graphical object that can be rendered.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.IGraphic">
            <summary>
            Defines a graphical object that can be rendered.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.IGraphic.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit test on the <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> at a given point.
            </summary>
            <param name="point">The mouse position in destination coordinates.</param>
            <returns>
            <b>True</b> if <paramref name="point"/> "hits" the <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>,
            <b>false</b> otherwise.
            </returns>
            <remarks>
            It is up to the implementation of <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> to define what a "hit" is.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.IGraphic.GetClosestPoint(System.Drawing.PointF)">
            <summary>
            Gets the point on the graphic closest to the specified point.
            </summary>
            <param name="point">A point in either source or destination coordinates.</param>
            <returns>The point on the graphic closest to the given <paramref name="point"/>.</returns>
            <remarks>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>,
            the computation will be carried out in either source
            or destination coordinates.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.IGraphic.Move(System.Drawing.SizeF)">
            <summary>
            Moves the <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> by a specified delta.
            </summary>
            <param name="delta">The distance to move.</param>
            <remarks>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>,
            <paramref name="delta"/> will be interpreted in either source
            or destination coordinates.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.IGraphic.ResetCoordinateSystem">
            <summary>
            Resets the <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/>.
            </summary>
            <remarks>
            <para>
            <see cref="M:Macro.ImageViewer.Graphics.IGraphic.ResetCoordinateSystem"/> will reset the <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/>
            to what it was before the <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> property
            was last set.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.IGraphic.Clone">
            <summary>
            Creates a deep copy of the graphic.
            </summary>
            <remarks>
            Graphic objects that are not cloneable may return null.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.IGraphic.GetRoi">
            <summary>
            Gets an object describing the region of interest on the <see cref="P:Macro.ImageViewer.Graphics.IGraphic.ParentPresentationImage"/> selected by this <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>.
            </summary>
            <remarks>
            Graphic objects that do not describe a region of interest may return null.
            </remarks>
            <returns>A <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/> describing this region of interest, or null if the graphic does not describe a region of interest.</returns>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IGraphic.ParentGraphic">
            <summary>
            Gets this <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> object's parent <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IGraphic.ParentPresentationImage">
            <summary>
            Gets this <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> object's associated 
            <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
            <value>The associated <see cref="T:Macro.ImageViewer.IPresentationImage"/> or <b>null</b>
            if the <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> is not yet part of the scene graph.</value>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IGraphic.ImageViewer">
            <summary>
            Gets this <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> object's associated 
            <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
            <value>The associated <see cref="T:Macro.ImageViewer.IImageViewer"/> or <b>null</b>
            if the <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> is not yet associated with
            an <see cref="T:Macro.ImageViewer.IImageViewer"/>.</value>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IGraphic.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> is visible.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IGraphic.BoundingBox">
            <summary>
            Gets the tightest bounding box that encloses the graphic in either source or destination coordinates.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem">
            <summary>
            Gets or sets the <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/>.
            </summary>
            <remarks>
            After the <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> has been set and the
            desired operations have been performed on the <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>,
            it is proper practice to call <see cref="M:Macro.ImageViewer.Graphics.IGraphic.ResetCoordinateSystem"/>
            to restore the previous coordinate system.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IGraphic.SpatialTransform">
            <summary>
            Gets this <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> object's <see cref="P:Macro.ImageViewer.Graphics.IGraphic.SpatialTransform"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IGraphic.Name">
            <summary>
            Gets or sets the name of this <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.IGraphic.VisualStateChanged">
            <summary>
            Occurs when a property is changed on a graphic, resulting in a change in the graphic's visual state.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.Graphic.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.Graphic.OnParentPresentationImageChanged(Macro.ImageViewer.IPresentationImage,Macro.ImageViewer.IPresentationImage)">
            <summary>
            Called when the value of the <see cref="P:Macro.ImageViewer.Graphics.Graphic.ParentPresentationImage"/> property changes.
            </summary>
            <param name="oldParentPresentationImage">A reference to the old parent presentation image.</param>
            <param name="newParentPresentationImage">A reference to the new parent presentation image.</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.Graphic.OnNameChanged">
            <summary>
            Called when the value of the <see cref="P:Macro.ImageViewer.Graphics.Graphic.Name"/> property changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.Graphic.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit test on the <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> at a given point.
            </summary>
            <param name="point">The mouse position in destination coordinates.</param>
            <returns>
            <b>True</b> if <paramref name="point"/> "hits" the <see cref="T:Macro.ImageViewer.Graphics.Graphic"/>,
            <b>false</b> otherwise.
            </returns>
            <remarks>
            It is up to the <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> to define what a "hit" is.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.Graphic.GetClosestPoint(System.Drawing.PointF)">
            <summary>
            Gets the point on the <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> closest to the specified point.
            </summary>
            <param name="point">A point in either source or destination coordinates.</param>
            <returns>The point on the graphic closest to the given <paramref name="point"/>.</returns>
            <remarks>
            <para>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>,
            the computation will be carried out in either source
            or destination coordinates.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.Graphic.Move(System.Drawing.SizeF)">
            <summary>
            Moves the <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> by a specified delta.
            </summary>
            <param name="delta">The distance to move.</param>
            <remarks>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>,
            <paramref name="delta"/> will be interpreted in either source
            or destination coordinates.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.Graphic.ResetCoordinateSystem">
            <summary>
            Resets the <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>.
            </summary>
            <remarks>
            <para>
            <see cref="M:Macro.ImageViewer.Graphics.Graphic.ResetCoordinateSystem"/> will reset the <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>
            to what it was before the <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/> property
            was last set.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.Graphic.Draw">
            <summary>
            Draws the <see cref="T:Macro.ImageViewer.Graphics.Graphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.Graphic.OnDrawing">
            <summary>
            Fires the <see cref="E:Macro.ImageViewer.Graphics.Graphic.Drawing"/> event.  Should be called by an <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/>
            for each object just before it is drawn/rendered, hence the reason it is public.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.Graphic.Clone">
            <summary>
            Creates a deep copy of the graphic.
            </summary>
            <remarks>
            Graphic objects that are not cloneable may return null.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.Graphic.GetRoi">
            <summary>
            Gets an object describing the region of interest on the <see cref="P:Macro.ImageViewer.Graphics.Graphic.ParentPresentationImage"/> selected by this <see cref="T:Macro.ImageViewer.Graphics.Graphic"/>.
            </summary>
            <remarks>
            Graphic objects that do not describe a region of interest may return null.
            </remarks>
            <returns>A <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/> describing this region of interest, or null if the graphic does not describe a region of interest.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.Graphic.CreateSpatialTransform">
            <summary>
            Creates the <see cref="P:Macro.ImageViewer.Graphics.Graphic.SpatialTransform"/> for this <see cref="T:Macro.ImageViewer.Graphics.Graphic"/>.
            </summary>
            <returns></returns>
            <remarks>
            Override this if the default <see cref="P:Macro.ImageViewer.Graphics.Graphic.SpatialTransform"/> created
            is not appropriate.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.Graphic.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.Graphics.Graphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.Graphic.Dispose(System.Boolean)">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern
            </summary>
            <param name="disposing">True if this object is being disposed, false if it is being finalized</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.Graphic.NotifyVisualStateChanged(System.String)">
            <summary>
            Fires the <see cref="E:Macro.ImageViewer.Graphics.Graphic.VisualStateChanged"/> event.
            </summary>
            <param name="propertyName">The name of the property whose value changed.</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.Graphic.NotifyVisualStateChanged(Macro.ImageViewer.Graphics.VisualStateChangedEventArgs)">
            <summary>
            Forwards the <see cref="E:Macro.ImageViewer.Graphics.Graphic.VisualStateChanged"/> event from a child graphic to listeners of a parent graphic.
            </summary>
            <param name="e">Data for the <see cref="E:Macro.ImageViewer.Graphics.Graphic.VisualStateChanged"/> event.</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.Graphic.OnVisualStateChanged(System.String)">
            <summary>
            Called when the visual state changes on the current graphic, before notification of other handlers observing the <see cref="E:Macro.ImageViewer.Graphics.Graphic.VisualStateChanged"/> event.
            </summary>
            <param name="propertyName">The name of the property whose value changed.</param>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.Graphic.ParentGraphic">
            <summary>
            Gets this <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> object's parent <see cref="T:Macro.ImageViewer.Graphics.Graphic"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.Graphic.ParentPresentationImage">
            <summary>
            Gets this <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> object's associated 
            <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
            <value>The associated <see cref="T:Macro.ImageViewer.IPresentationImage"/> or <b>null</b>
            if the <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> is not yet part of the scene graph.</value>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.Graphic.ImageViewer">
            <summary>
            Gets this <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> object's associated 
            <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
            <value>The associated <see cref="T:Macro.ImageViewer.IImageViewer"/> or <b>null</b>
            if the <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> is not yet associated with
            an <see cref="T:Macro.ImageViewer.IImageViewer"/>.</value>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.Graphic.Name">
            <summary>
            Gets or sets the name of this <see cref="T:Macro.ImageViewer.Graphics.Graphic"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.Graphic.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> is visible.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.Graphic.BoundingBox">
            <summary>
            Gets the tightest bounding box that encloses the graphic in either source or destination coordinates.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem">
            <summary>
            Gets or sets the <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>.
            </summary>
            <remarks>
            After the <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/> has been set and the
            desired operations have been performed on the <see cref="T:Macro.ImageViewer.Graphics.Graphic"/>,
            it is proper practice to call <see cref="M:Macro.ImageViewer.Graphics.Graphic.ResetCoordinateSystem"/>
            to restore the previous coordinate system.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.Graphic.SpatialTransform">
            <summary>
            Gets this <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> object's <see cref="P:Macro.ImageViewer.Graphics.Graphic.SpatialTransform"/>.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.Graphic.Drawing">
            <summary>
            Fires just before the <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> is drawn/rendered.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.Graphic.VisualStateChanged">
            <summary>
            Occurs when a property is changed on a graphic, resulting in a change in the graphic's visual state.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.IVectorGraphic">
            <summary>
            Defines a vector based graphic.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IVectorGraphic.Color">
            <summary>
            Gets or sets the colour.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IVectorGraphic.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Graphics.VectorGraphic.HitTestDistance">
            <summary>
            The hit test distance in destination pixels.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.VectorGraphic.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.VectorGraphic"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.VectorGraphic.Color">
            <summary>
            Gets or sets the colour.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.VectorGraphic.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.IBoundableGraphic">
            <summary>
            Defines an <see cref="T:Macro.ImageViewer.Graphics.IVectorGraphic"/> that can be described by a
            rectangular bounding box.
            </summary>
            <remarks>
            Rectangles and ellipses are examples of graphics that can be
            described by a rectangular bounding box.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.IBoundableGraphic.Contains(System.Drawing.PointF)">
            <summary>
            Returns a value indicating whether the specified point is
            contained in the graphic.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.IBoundableGraphic.TopLeftChanged">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.Graphics.IBoundableGraphic.TopLeft"/> property changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.IBoundableGraphic.BottomRightChanged">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.Graphics.IBoundableGraphic.BottomRight"/> property changed.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IBoundableGraphic.TopLeft">
            <summary>
            Gets or sets the top left corner of the bounding rectangle in either source or destination coordinates.
            </summary>
            <remarks>
            <para><see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this property is in source or destination coordinates.</para>
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IBoundableGraphic.BottomRight">
            <summary>
            Gets or sets the bottom right corner of the bounding rectangle in either source or destination coordinates.
            </summary>
            <remarks>
            <para><see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this property is in source or destination coordinates.</para>
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IBoundableGraphic.Rectangle">
            <summary>
            Gets the bounding rectangle of the graphic in either source or destination coordinates.
            </summary>
            <remarks>
            <para>
            This property gives the orientation-sensitive rectangle that bounds the graphic, whereas
            the <see cref="P:Macro.ImageViewer.Graphics.IGraphic.BoundingBox"/> property gives the normalized rectangle with positive
            width and height.
            </para>
            <para><see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this property is in source or destination coordinates.</para>
            </remarks>
            <seealso cref="P:Macro.ImageViewer.Graphics.IGraphic.BoundingBox"/>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IBoundableGraphic.Width">
            <summary>
            Gets the width of the bounding rectangle in either source or destination pixels.
            </summary>
            <remarks>
            <para><see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this property is in source or destination coordinates.</para>
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IBoundableGraphic.Height">
            <summary>
            Gets the height of the bounding rectangle in either source or destination pixels.
            </summary>
            <remarks>
            <para><see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this property is in source or destination coordinates.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.BoundableGraphic.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.BoundableGraphic.Move(System.Drawing.SizeF)">
            <summary>
            Moves the <see cref="T:Macro.ImageViewer.Graphics.RectanglePrimitive"/> by a specified delta.
            </summary>
            <param name="delta">The distance to move.</param>
            <remarks>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>,
            <paramref name="delta"/> will be interpreted in either source
            or destination coordinates.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.BoundableGraphic.Contains(System.Drawing.PointF)">
            <summary>
            Returns a value indicating whether the specified point is
            contained in the graphic.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.BoundableGraphic.TopLeft">
            <summary>
            Gets or sets the top-left corner of the rectangle
            in either source or destination coordinates.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.BoundableGraphic.BottomRight">
            <summary>
            Gets or sets the bottom-right corner of the rectangle
            in either source or destination coordinates.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.BoundableGraphic.Width">
            <summary>
            Gets the width of the rectangle in either source or destination pixels.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination pixels.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.BoundableGraphic.Height">
            <summary>
            Gets the height of the rectangle in either source or destination pixels.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination pixels.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.BoundableGraphic.Rectangle">
            <summary>
            Gets the rectangle that defines a <see cref="T:Macro.ImageViewer.Graphics.BoundableGraphic"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.BoundableGraphic.BoundingBox">
            <summary>
            Gets the tightest bounding box that encloses the graphic in either source or destination coordinates.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.BoundableGraphic.TopLeftChanged">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.Graphics.BoundableGraphic.TopLeft"/> property changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.BoundableGraphic.BottomRightChanged">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.Graphics.BoundableGraphic.BottomRight"/> property changed.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.EllipsePrimitive.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.EllipsePrimitive"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.EllipsePrimitive.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit test on the <see cref="T:Macro.ImageViewer.Graphics.EllipsePrimitive"/> at a given point.
            </summary>
            <param name="point">The mouse position in destination coordinates.</param>
            <returns>
            <b>True</b> if <paramref name="point"/> "hits" the <see cref="T:Macro.ImageViewer.Graphics.EllipsePrimitive"/>,
            <b>false</b> otherwise.
            </returns>
            <remarks>
            A "hit" is defined as when the mouse position is <see cref="F:Macro.ImageViewer.Graphics.VectorGraphic.HitTestDistance"/>
            screen pixels away from any point on the ellipse.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.EllipsePrimitive.GetClosestPoint(System.Drawing.PointF)">
            <summary>
            Gets the point where the ellipse intersects the line whose end points
            are the center of the ellipse and the specified point.
            </summary>
            <param name="point">A point in either source or destination coordinates.</param>
            <returns>The point on the graphic closest to the given <paramref name="point"/>.</returns>
            <remarks>
            <para>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>,
            the computation will be carried out in either source
            or destination coordinates.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.EllipsePrimitive.Contains(System.Drawing.PointF)">
            <summary>
            Returns a value indicating whether the specified point is contained
            in the ellipse.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.EllipsePrimitive.GetRoi">
            <summary>
            Gets an object describing the region of interest on the <see cref="P:Macro.ImageViewer.Graphics.Graphic.ParentPresentationImage"/> selected by this <see cref="T:Macro.ImageViewer.Graphics.Graphic"/>.
            </summary>
            <remarks>
            Graphic objects that do not describe a region of interest may return null.
            </remarks>
            <returns>A <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/> describing this region of interest, or null if the graphic does not describe a region of interest.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.EllipsePrimitive.IntersectEllipseAndLine(System.Single,System.Single,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Finds the intersection between an ellipse and a line that starts at the
            center of the ellipse and ends at an aribtrary point.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.IRoiLengthProvider">
            <summary>
            Defines the property get the length of a region of interest.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.IRoiLengthProvider.Units">
            <summary>
            Gets or sets the units of length with which to compute the value of <see cref="P:Macro.ImageViewer.RoiGraphics.IRoiLengthProvider.Length"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.IRoiLengthProvider.Length">
            <summary>
            Gets the length of the region of interest in units of length as specified by <see cref="P:Macro.ImageViewer.RoiGraphics.IRoiLengthProvider.Units"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">If <see cref="P:Macro.ImageViewer.RoiGraphics.IRoiLengthProvider.Units"/> is a physical
            unit of measurement and the image has no pixel spacing information, nor has it been calibrated.</exception>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.IRoiLengthProvider.IsCalibrated">
            <summary>
            Gets a value indicating that the image has pixel spacing information or has
            previously been calibrated with physical dimensions.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.ViewerActionPermissionAttribute">
            <summary>
            Associates authority tokens with a viewer-specific action.
            </summary>
            <remarks>
            <para>
            All tokens specified will be ANDed with <see cref="F:Macro.ImageViewer.AuthorityTokens.ViewerVisible"/>, which is a global token
            intended to limit access to all viewer-specific functionality.
            </para>
            <para>
            This attribute sets the action permissibility via the <see cref="M:Macro.Desktop.Actions.Action.SetPermissibility(Macro.Common.Specifications.ISpecification)"/> method.
            If multiple authority tokens are supplied in an array to a single instance of the attribute, those tokens will be combined using AND.  If
            multiple instances of this attribute are specified, the tokens associated with each instance are combined
            using OR logic.  This allows for the possibility of constructing a permission specification based on a complex boolean
            combination of authority tokens.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.ViewerActionPermissionAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor - the specified authority token will be associated with the specified action ID.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ViewerActionPermissionAttribute.#ctor(System.String,System.String[])">
            <summary>
            Constructor - all of the specified tokens will combined using AND and associated with the specified action ID.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.DicomDisplaySetDescriptor">
            <summary>
            Abstract base implementation of an <see cref="T:Macro.ImageViewer.IDicomDisplaySetDescriptor"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.DisplaySetDescriptor">
            <summary>
            Abstract base implementation of <see cref="T:Macro.ImageViewer.IDisplaySetDescriptor"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.IDisplaySetDescriptor">
            <summary>
            Definition of an object that describes the contents of an <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IDisplaySetDescriptor.DisplaySet">
            <summary>
            The <see cref="T:Macro.ImageViewer.IDisplaySet"/> described by this object.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IDisplaySetDescriptor.Name">
            <summary>
            Gets the descriptive name of the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IDisplaySetDescriptor.Description">
            <summary>
            Gets a description of the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IDisplaySetDescriptor.Number">
            <summary>
            Gets a numeric identifier for the <see cref="T:Macro.ImageViewer.IDisplaySet"/>, which usually corresponds
            to a DICOM Series Number.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IDisplaySetDescriptor.Uid">
            <summary>
            Gets the unique identifier for the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySetDescriptor.#ctor">
            <summary>
            Protected constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySetDescriptor.Clone">
            <summary>
             Creates a copy of this object.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySetDescriptor.ToString">
            <summary>
            Gets a text description of this object.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySetDescriptor.DisplaySet">
            <summary>
            The <see cref="T:Macro.ImageViewer.IDisplaySet"/> described by this object.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySetDescriptor.Name">
            <summary>
            Gets the descriptive name of the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySetDescriptor.Description">
            <summary>
            Gets a description of the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySetDescriptor.Number">
            <summary>
            Gets a numeric identifier for the <see cref="T:Macro.ImageViewer.IDisplaySet"/>, which usually corresponds
            to a DICOM Series Number.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySetDescriptor.Uid">
            <summary>
            Gets the unique identifier for the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.IDicomDisplaySetDescriptor">
            <summary>
            Definition of an <see cref="T:Macro.ImageViewer.IDisplaySetDescriptor"/> whose contents are based on
            a DICOM Series.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IDicomDisplaySetDescriptor.SourceSeries">
            <summary>
            Gets the <see cref="T:Macro.Dicom.ServiceModel.Query.ISeriesIdentifier"/> for the series used to 
            generate the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
            <remarks>
            <para>
             The series used to create the <see cref="T:Macro.ImageViewer.IDisplaySet"/> is not necessarily
            the same as the series that the contained <see cref="T:Macro.ImageViewer.IPresentationImage"/>s
            belong to.  For example, the <see cref="P:Macro.ImageViewer.IDicomDisplaySetDescriptor.SourceSeries"/> could be a Key Object
            series that simply references images in other series.
            </para>
            <para>
            Additionally, this property can also be null if, for example, the images are
            a composition of images from many series in the same study.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.IDicomDisplaySetDescriptor.IsComposite">
            <summary>
            Gets whether or not the display set is comprised of simple DICOM images, taken from a single
            series, or whether it is a composite of images from multiple series.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DicomDisplaySetDescriptor.#ctor(Macro.Dicom.ServiceModel.Query.ISeriesIdentifier)">
            <summary>
            Protected constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DicomDisplaySetDescriptor.#ctor(Macro.Dicom.ServiceModel.Query.ISeriesIdentifier,Macro.ImageViewer.IPresentationImageFactory)">
            <summary>
            Protected constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DicomDisplaySetDescriptor.#ctor(Macro.ImageViewer.DicomDisplaySetDescriptor,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Protected constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DicomDisplaySetDescriptor.GetName">
            <summary>
            Gets the descriptive name of the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DicomDisplaySetDescriptor.GetDescription">
            <summary>
            Gets a description of the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DicomDisplaySetDescriptor.GetUid">
            <summary>
            Gets the unique identifier for the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DicomDisplaySetDescriptor.GetNumber">
            <summary>
            Gets a numeric identifier for the <see cref="T:Macro.ImageViewer.IDisplaySet"/>, which usually corresponds
            to a DICOM Series Number.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DicomDisplaySetDescriptor.SourceSeries">
            <summary>
            Gets the <see cref="T:Macro.Dicom.ServiceModel.Query.ISeriesIdentifier"/> for the series used to 
            generate the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
            <remarks>
            The series used to create the <see cref="T:Macro.ImageViewer.IDisplaySet"/> is not necessarily
            the same as the series that the contained <see cref="T:Macro.ImageViewer.IPresentationImage"/>s
            belong to.  For example, the <see cref="P:Macro.ImageViewer.IDicomDisplaySetDescriptor.SourceSeries"/> could be a Key Object
            series that simply references images in other series.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.DicomDisplaySetDescriptor.Name">
            <summary>
            Gets the descriptive name of the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DicomDisplaySetDescriptor.Description">
            <summary>
            Gets a description of the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DicomDisplaySetDescriptor.Uid">
            <summary>
            Gets the unique identifier for the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DicomDisplaySetDescriptor.Number">
            <summary>
            Gets a numeric identifier for the <see cref="T:Macro.ImageViewer.IDisplaySet"/>, which usually corresponds
            to a DICOM Series Number.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.BasicDisplaySetFactory">
            <summary>
            A <see cref="T:Macro.ImageViewer.DisplaySetFactory"/> for the most typical cases; creating a <see cref="T:Macro.ImageViewer.IDisplaySet"/> that
            contains <see cref="T:Macro.ImageViewer.IPresentationImage"/>s for the entire series, and creating a single <see cref="T:Macro.ImageViewer.IDisplaySet"/> for
            each image in the series.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.DisplaySetFactory">
            <summary>
            Abstract base implementation of <see cref="T:Macro.ImageViewer.IDisplaySetFactory"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.IDisplaySetFactory">
            <summary>
            Defines a factory for <see cref="T:Macro.ImageViewer.IDisplaySet"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.IDisplaySetFactory.SetStudyTree(Macro.ImageViewer.StudyManagement.StudyTree)">
            <summary>
            Sets the <see cref="T:Macro.ImageViewer.StudyManagement.StudyTree"/> where the factory can search for referenced <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.IDisplaySetFactory.CreateDisplaySets(Macro.ImageViewer.StudyManagement.Series)">
            <summary>
            Creates zero or more <see cref="T:Macro.ImageViewer.IDisplaySet"/>s from the given <see cref="T:Macro.ImageViewer.StudyManagement.Series"/>.
            </summary>
            <returns>Zero or more <see cref="T:Macro.ImageViewer.IDisplaySet"/>s.</returns>
        </member>
        <member name="M:Macro.ImageViewer.IDisplaySetFactory.CreateDisplaySets(Macro.ImageViewer.StudyManagement.Study)">
            <summary>
            Creates zero or more <see cref="T:Macro.ImageViewer.IDisplaySet"/>s from the given <see cref="T:Macro.ImageViewer.StudyManagement.Study"/>.
            </summary>
            <returns>Zero or more <see cref="T:Macro.ImageViewer.IDisplaySet"/>s.</returns>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySetFactory.#ctor">
            <summary>
            Protected constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySetFactory.#ctor(Macro.ImageViewer.IPresentationImageFactory)">
            <summary>
            Protected constructor.
            </summary>
            <param name="presentationImageFactory">The <see cref="T:Macro.ImageViewer.IPresentationImageFactory"/>
            used to create the <see cref="T:Macro.ImageViewer.IPresentationImage"/>s that populate the constructed <see cref="T:Macro.ImageViewer.IDisplaySet"/>s.</param>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySetFactory.SetStudyTree(Macro.ImageViewer.StudyManagement.StudyTree)">
            <summary>
            Sets the <see cref="T:Macro.ImageViewer.StudyManagement.StudyTree"/> where the factory can search for referenced <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySetFactory.CreateDisplaySets(Macro.ImageViewer.StudyManagement.Series)">
            <summary>
            Creates zero or more <see cref="T:Macro.ImageViewer.IDisplaySet"/>s from the given <see cref="T:Macro.ImageViewer.StudyManagement.Series"/>.
            </summary>
            <returns>Zero or more <see cref="T:Macro.ImageViewer.IDisplaySet"/>s.</returns>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySetFactory.CreateDisplaySets(Macro.ImageViewer.StudyManagement.Study)">
            <summary>
            Creates zero or more <see cref="T:Macro.ImageViewer.IDisplaySet"/>s from the given <see cref="T:Macro.ImageViewer.StudyManagement.Study"/>.
            </summary>
            <returns>Zero or more <see cref="T:Macro.ImageViewer.IDisplaySet"/>s.</returns>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySetFactory.StudyTree">
            <summary>
            Gets the <see cref="P:Macro.ImageViewer.DisplaySetFactory.StudyTree"/> where the factory can look for referenced <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySetFactory.PresentationImageFactory">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.IPresentationImageFactory"/> used to create the <see cref="T:Macro.ImageViewer.IPresentationImage"/>s
            that populate the constructed <see cref="T:Macro.ImageViewer.IDisplaySet"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BasicDisplaySetFactory.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BasicDisplaySetFactory.#ctor(Macro.ImageViewer.IPresentationImageFactory)">
            <summary>
            Constructor.
            </summary>
            <param name="presentationImageFactory">The <see cref="T:Macro.ImageViewer.IPresentationImageFactory"/>
            used to create the <see cref="T:Macro.ImageViewer.IPresentationImage"/>s that populate the constructed <see cref="T:Macro.ImageViewer.IDisplaySet"/>s.</param>
        </member>
        <member name="M:Macro.ImageViewer.BasicDisplaySetFactory.CreateDisplaySets(Macro.ImageViewer.StudyManagement.Series)">
            <summary>
            Creates <see cref="T:Macro.ImageViewer.IDisplaySet"/>s from the given <see cref="T:Macro.ImageViewer.StudyManagement.Series"/>.
            </summary>
            <param name="series">The series for which <see cref="T:Macro.ImageViewer.IDisplaySet"/>s are to be created.</param>
            <returns>A list of created <see cref="T:Macro.ImageViewer.IDisplaySet"/>s.</returns>
        </member>
        <member name="P:Macro.ImageViewer.BasicDisplaySetFactory.CreateSingleImageDisplaySets">
            <summary>
            Specifies whether single image display sets should be created.
            </summary>
            <remarks>
            When this is false, series display sets are created. However, in the degenerate case
            where a series has only one image, the factory will not return a display set when
            this property is true. Instead, you must set this property to false in order
            to get a series display set returned.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.MREchoDisplaySetFactory">
            <summary>
            A <see cref="T:Macro.ImageViewer.DisplaySetFactory"/> that splits MR series with multiple echoes into multiple <see cref="T:Macro.ImageViewer.IDisplaySet"/>s; one per echo.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.MREchoDisplaySetFactory.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.MREchoDisplaySetFactory.#ctor(Macro.ImageViewer.IPresentationImageFactory)">
            <summary>
            Constructor.
            </summary>
            <param name="presentationImageFactory">The <see cref="T:Macro.ImageViewer.IPresentationImageFactory"/>
            used to create the <see cref="T:Macro.ImageViewer.IPresentationImage"/>s that populate the constructed <see cref="T:Macro.ImageViewer.IDisplaySet"/>s.</param>
        </member>
        <member name="M:Macro.ImageViewer.MREchoDisplaySetFactory.CreateDisplaySets(Macro.ImageViewer.StudyManagement.Series)">
            <summary>
            Creates zero or more <see cref="T:Macro.ImageViewer.IDisplaySet"/>s from the given <see cref="T:Macro.ImageViewer.StudyManagement.Series"/>.
            </summary>
            <remarks>
            When the input <see cref="T:Macro.ImageViewer.StudyManagement.Series"/> does not have multiple echoes, no <see cref="T:Macro.ImageViewer.IDisplaySet"/>s will be returned.
            Otherwise, at least 2 <see cref="T:Macro.ImageViewer.IDisplaySet"/>s will be returned.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.KeyImageDisplaySetDescriptor.SourceStudy">
            <summary>
            The source study for the display set.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.KeyImageDisplaySetDescriptor.Name">
            <summary>
            Gets the descriptive name of the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.KeyImageDisplaySetDescriptor.Description">
            <summary>
            Gets a description of the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.KeyImageDisplaySetDescriptor.Uid">
            <summary>
            Gets the unique identifier for the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.KeyImageDisplaySetDescriptor.Number">
            <summary>
            Gets a numeric identifier for the <see cref="T:Macro.ImageViewer.IDisplaySet"/>, always "1".
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.MixedMultiFrameDisplaySetFactory">
            <summary>
            A <see cref="T:Macro.ImageViewer.DisplaySetFactory"/> that splits series with multiple single or multiframe images into
            separate <see cref="T:Macro.ImageViewer.IDisplaySet"/>s.
            </summary>
            <remarks>
            This factory will only create <see cref="T:Macro.ImageViewer.IDisplaySet"/>s when the following is true.
            <list type="bullet">
            <item>The input series contains more than one multiframe image.</item>
            <item>The input series contains at least one multiframe image and at least one single frame image.</item>
            </list>
            For typical series, consisting only of single frame images, no <see cref="T:Macro.ImageViewer.IDisplaySet"/>s will be created.
            The <see cref="T:Macro.ImageViewer.IDisplaySet"/>s that are created are:
            <list type="bullet">
            <item>One <see cref="T:Macro.ImageViewer.IDisplaySet"/> per multiframe image.</item>
            <item>One <see cref="T:Macro.ImageViewer.IDisplaySet"/> containing all the single frame images, if any.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.MixedMultiFrameDisplaySetFactory.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.MixedMultiFrameDisplaySetFactory.#ctor(Macro.ImageViewer.IPresentationImageFactory)">
            <summary>
            Constructor.
            </summary>
            <param name="presentationImageFactory">The <see cref="T:Macro.ImageViewer.IPresentationImageFactory"/>
            used to create the <see cref="T:Macro.ImageViewer.IPresentationImage"/>s that populate the constructed <see cref="T:Macro.ImageViewer.IDisplaySet"/>s.</param>
        </member>
        <member name="M:Macro.ImageViewer.MixedMultiFrameDisplaySetFactory.CreateDisplaySets(Macro.ImageViewer.StudyManagement.Series)">
            <summary>
            Creates zero or more <see cref="T:Macro.ImageViewer.IDisplaySet"/>s from the given <see cref="T:Macro.ImageViewer.StudyManagement.Series"/>.
            </summary>
            <remarks>When the input series does not contain a mixture of single and multiframe
            images, no <see cref="T:Macro.ImageViewer.IDisplaySet"/>s will be returned.</remarks>
        </member>
        <member name="T:Macro.ImageViewer.BasicPresentationImage">
            <summary>
            A <see cref="T:Macro.ImageViewer.PresentationImage"/> that encapsulates basic
            2D image functionality.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.IImageGraphicProvider">
            <summary>
            Provides access to an <see cref="P:Macro.ImageViewer.Graphics.IImageGraphicProvider.ImageGraphic"/>.
            </summary>
            <remarks>
            <para>
            If you have subclassed <see cref="T:Macro.ImageViewer.PresentationImage"/> and want to expose
            an <see cref="P:Macro.ImageViewer.Graphics.IImageGraphicProvider.ImageGraphic"/> to <see cref="T:Macro.ImageViewer.BaseTools.ImageViewerTool"/> objects, 
            do so by implementing this interface in your subclass.
            </para>
            <para>
            In general, avoid accessing members of subclasses of <see cref="T:Macro.ImageViewer.PresentationImage"/>
            directly.  Prefer instead to use provider interfaces such as this one.  Doing
            so prevents <see cref="T:Macro.ImageViewer.BaseTools.ImageViewerTool"/> objects from having to know about specific
            subclasses of <see cref="T:Macro.ImageViewer.PresentationImage"/>, thus allowing them to work with
            any type of <see cref="T:Macro.ImageViewer.PresentationImage"/> that implements the provider interface.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IImageGraphicProvider.ImageGraphic">
            <summary>
            Gets an <see cref="P:Macro.ImageViewer.Graphics.IImageGraphicProvider.ImageGraphic"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.ISpatialTransformProvider">
            <summary>
            Provides access to an <see cref="T:Macro.ImageViewer.Graphics.ISpatialTransform"/>.
            </summary>
            <remarks>
            <para>
            If you have subclassed <see cref="T:Macro.ImageViewer.PresentationImage"/> and want to expose
            an <see cref="T:Macro.ImageViewer.Graphics.ISpatialTransform"/> to <see cref="T:Macro.ImageViewer.BaseTools.ImageViewerTool"/> objects, 
            do so by implementing this interface in your subclass.
            </para>
            <para>
            In general, avoid accessing members of subclasses of <see cref="T:Macro.ImageViewer.PresentationImage"/>
            directly.  Prefer instead to use provider interfaces such as this one.  Doing
            so prevents <see cref="T:Macro.ImageViewer.BaseTools.ImageViewerTool"/> objects from having to know about specific
            subclasses of <see cref="T:Macro.ImageViewer.PresentationImage"/>, thus allowing them to work with
            any type of <see cref="T:Macro.ImageViewer.PresentationImage"/> that implements the provider interface.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ISpatialTransformProvider.SpatialTransform">
            <summary>
            Gets an <see cref="T:Macro.ImageViewer.Graphics.ISpatialTransform"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.IApplicationGraphicsProvider">
            <summary>
            Provides access to a <see cref="T:Macro.ImageViewer.Graphics.GraphicCollection"/> containing application-level graphics.
            </summary>
            <remarks>
            <para>
            Application-level graphics are rendered after any domain-level graphics and before any
            user-level graphics.
            </para>
            <para>
            If you have subclassed <see cref="T:Macro.ImageViewer.PresentationImage"/> and want to expose
            a <see cref="T:Macro.ImageViewer.Graphics.GraphicCollection"/> to <see cref="T:Macro.ImageViewer.BaseTools.ImageViewerTool"/> objects, 
            do so by implementing this interface in your subclass.
            </para>
            <para>
            In general, avoid accessing members of subclasses of <see cref="T:Macro.ImageViewer.PresentationImage"/>
            directly.  Prefer instead to use provider interfaces such as this one.  Doing
            so prevents <see cref="T:Macro.ImageViewer.BaseTools.ImageViewerTool"/> objects from having to know about specific
            subclasses of <see cref="T:Macro.ImageViewer.PresentationImage"/>, thus allowing them to work with
            any type of <see cref="T:Macro.ImageViewer.PresentationImage"/> that implements the provider interface.
            </para>
            </remarks>
            <seealso cref="T:Macro.ImageViewer.Graphics.IOverlayGraphicsProvider"/>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IApplicationGraphicsProvider.ApplicationGraphics">
            <summary>
            Gets a <see cref="T:Macro.ImageViewer.Graphics.GraphicCollection"/> of application-level graphics.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.IOverlayGraphicsProvider">
            <summary>
            Provides access to a <see cref="T:Macro.ImageViewer.Graphics.GraphicCollection"/> containing user-level graphics.
            </summary>
            <remarks>
            <para>
            User-level graphics are rendered after any domain-level graphics and after any
            application-level graphics.
            </para>
            <para>
            If you have subclassed <see cref="T:Macro.ImageViewer.PresentationImage"/> and want to expose
            a <see cref="T:Macro.ImageViewer.Graphics.GraphicCollection"/> to <see cref="T:Macro.ImageViewer.BaseTools.ImageViewerTool"/> objects, 
            do so by implementing this interface in your subclass.
            </para>
            <para>
            In general, avoid accessing members of subclasses of <see cref="T:Macro.ImageViewer.PresentationImage"/>
            directly.  Prefer instead to use provider interfaces such as this one.  Doing
            so prevents <see cref="T:Macro.ImageViewer.BaseTools.ImageViewerTool"/> objects from having to know about specific
            subclasses of <see cref="T:Macro.ImageViewer.PresentationImage"/>, thus allowing them to work with
            any type of <see cref="T:Macro.ImageViewer.PresentationImage"/> that implements the provider interface.
            </para>
            </remarks>
            <seealso cref="T:Macro.ImageViewer.Graphics.IApplicationGraphicsProvider"/>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IOverlayGraphicsProvider.OverlayGraphics">
            <summary>
            Gets a <see cref="T:Macro.ImageViewer.Graphics.GraphicCollection"/> of user-level graphics.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Annotations.IAnnotationLayoutProvider">
            <summary>
            Provides access to an <see cref="T:Macro.ImageViewer.Annotations.IAnnotationLayout"/>.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Annotations.IAnnotationLayout"/>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.IAnnotationLayoutProvider.AnnotationLayout">
            <summary>
            Gets or sets the <see cref="T:Macro.ImageViewer.Annotations.IAnnotationLayout"/>.
            </summary>
            <remarks>
            Like other provider interfaces, it is not recommended that this property return null.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.IPresentationStateProvider">
            <summary>
            Defines a property to get or set the <see cref="T:Macro.ImageViewer.PresentationStates.PresentationState"/> of an <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.IPresentationStateProvider.PresentationState">
            <summary>
            Gets or sets the <see cref="T:Macro.ImageViewer.PresentationStates.PresentationState"/> of the image.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BasicPresentationImage.#ctor(Macro.ImageViewer.BasicPresentationImage,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BasicPresentationImage.#ctor(Macro.ImageViewer.Graphics.ImageGraphic)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.BasicPresentationImage"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BasicPresentationImage.#ctor(Macro.ImageViewer.Graphics.ImageGraphic,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.BasicPresentationImage"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BasicPresentationImage.Draw(Macro.ImageViewer.Rendering.DrawArgs)">
            <summary>
            Raises the <see cref="E:Macro.ImageViewer.EventBroker.ImageDrawing"/> event and
            renders the <see cref="T:Macro.ImageViewer.PresentationImage"/>.
            </summary>
            <param name="drawArgs"></param>
            <remarks>
            For internal Framework use only.
            </remarks>
            <exception cref="T:Macro.ImageViewer.Rendering.RenderingException">Thrown if any <see cref="T:System.Exception"/> is encountered while rendering the image.</exception>
        </member>
        <member name="M:Macro.ImageViewer.BasicPresentationImage.Dispose(System.Boolean)">
            <summary>
            Dispose method.  Inheritors should override this method to do any additional cleanup.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BasicPresentationImage.CreateAnnotationLayout">
            <summary>
            Creates an empty <see cref="P:Macro.ImageViewer.BasicPresentationImage.AnnotationLayout"/> unless overridden.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BasicPresentationImage.ImageGraphic">
            <summary>
            Gets this presentation image's <see cref="P:Macro.ImageViewer.BasicPresentationImage.ImageGraphic"/>.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.BasicPresentationImage.ImageGraphic"/> is the first <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>
            added to the <see cref="P:Macro.ImageViewer.PresentationImage.SceneGraph"/> and thus is rendered first.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.BasicPresentationImage.SpatialTransform">
            <summary>
            Gets this presentation image's spatial transform.
            </summary>
            <remarks>
            The <see cref="P:Macro.ImageViewer.BasicPresentationImage.ImageGraphic"/> and graphics added to the 
            <see cref="P:Macro.ImageViewer.BasicPresentationImage.OverlayGraphics"/> collection are subject to this
            spatial transform.  Thus, the effect is that overlay graphics
            appear to be anchored to the underlying image.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.BasicPresentationImage.ApplicationGraphics">
            <summary>
            Gets this presentation image's collection of application graphics.
            </summary>
            <remarks>
            Use <see cref="P:Macro.ImageViewer.BasicPresentationImage.ApplicationGraphics"/> to add graphics that you want to
            overlay the image at the application-level. These graphics are rendered
            before any <see cref="P:Macro.ImageViewer.BasicPresentationImage.OverlayGraphics"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.BasicPresentationImage.OverlayGraphics">
            <summary>
            Gets this presentation image's collection of overlay graphics.
            </summary>
            <remarks>
            Use <see cref="P:Macro.ImageViewer.BasicPresentationImage.OverlayGraphics"/> to add graphics that you want to
            overlay the image at the user-level. These graphics are rendered
            after any <see cref="P:Macro.ImageViewer.BasicPresentationImage.ApplicationGraphics"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.BasicPresentationImage.PresentationState">
            <summary>
            Gets or sets the <see cref="T:Macro.ImageViewer.PresentationStates.PresentationState"/> of the image.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BasicPresentationImage.AnnotationLayout">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.Annotations.IAnnotationLayout"/> associated with this presentation image.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BasicPresentationImage.ImageRenderer">
            <summary>
            Gets an <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/>.
            </summary>
            <remarks>
            In general, <see cref="P:Macro.ImageViewer.BasicPresentationImage.ImageRenderer"/> should be considered an internal
            Framework property and should not be used.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.BasicPresentationImage.CompositeImageGraphic">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.Graphics.CompositeGraphic"/> at the root of the scene graphic containing the image itself and all additional graphics.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PlaceholderDisplaySetFactory.PlaceholderPresentationImage.#ctor(Macro.ImageViewer.PlaceholderDisplaySetFactory.PlaceholderPresentationImage,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.InvariantTextPrimitive">
            <summary>
            A text <see cref="T:Macro.ImageViewer.Graphics.InvariantPrimitive"/>.
            </summary>
            <remarks>
            An <see cref="T:Macro.ImageViewer.Graphics.InvariantTextPrimitive"/> is both size invariant and
            rotation invariant.  That is, text always appears the same size irrespective of
            the zoom, and <i>always</i> appears left to right irrespective of the rotation.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.InvariantPrimitive">
            <summary>
            A <see cref="T:Macro.ImageViewer.Graphics.VectorGraphic"/> whose size in destination coordinates is invariant
            under zoom.
            </summary>
            <remarks>
            Sometimes it is desirable to have a <see cref="T:Macro.ImageViewer.Graphics.VectorGraphic"/> whose
            <i>size</i> is invariant under zoom, but whose position is not.  A good example
            are the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPoint"/> objects on measurement tools that allow a 
            user to stretch and resize the measurement.  They are anchored to a certain
            point on the underlying image so that when zoomed, the control point appears
            to "move" with the zoom of the image, but their size
            in screen pixels remains the same.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantPrimitive.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.InvariantPrimitive"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantPrimitive.OnLocationChanged">
            <summary>
            Called when the value of <see cref="P:Macro.ImageViewer.Graphics.InvariantPrimitive.Location"/> changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantPrimitive.Move(System.Drawing.SizeF)">
            <summary>
            Moves the <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> by a specified delta.
            </summary>
            <param name="delta">The distance to move.</param>
            <remarks>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>,
            <paramref name="delta"/> will be interpreted in either source
            or destination coordinates.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantPrimitive.Location">
            <summary>
            The location where the <see cref="T:Macro.ImageViewer.Graphics.InvariantPrimitive"/> is anchored.
            </summary>
            <remarks>
            The value of this property is in either source or destination coordinates
            depending on the value of <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/>.
            </remarks>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.InvariantPrimitive.LocationChanged">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.Graphics.InvariantPrimitive.Location"/> property has changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.InvariantPrimitive.AnchorPointChanged">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.Graphics.InvariantPrimitive.Location"/> property has changed.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantPrimitive.AnchorPoint">
            <summary>
            The point in the coordinate system of the parent <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> where the
            <see cref="T:Macro.ImageViewer.Graphics.InvariantPrimitive"/> is anchored.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.ITextGraphic">
            <summary>
            Defines an <see cref="T:Macro.ImageViewer.Graphics.IVectorGraphic"/> that contains some dynamic, formattable text content.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ITextGraphic.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ITextGraphic.SizeInPoints">
            <summary>
            Gets or sets the size in points.
            </summary>
            <remarks>
            Default value is 10 points.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ITextGraphic.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <remarks>
            Default value is "Arial".
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ITextGraphic.Dimensions">
            <summary>
            Gets the dimensions of the smallest rectangle that bounds the text.
            </summary>
            <remarks>
            This property is in either source or destination coordinates depending on the value of <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ITextGraphic.Location">
            <summary>
            Gets or sets the location of the center of the text.
            </summary>
            <remarks>
            This property is in either source or destination coordinates depending on the value of <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantTextPrimitive.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.InvariantTextPrimitive"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantTextPrimitive.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.InvariantTextPrimitive"/> with
            the specified text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantTextPrimitive.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit test on the <see cref="T:Macro.ImageViewer.Graphics.InvariantTextPrimitive"/> at a given point.
            </summary>
            <param name="point">The mouse position in destination coordinates.</param>
            <returns>
            <b>True</b> if <paramref name="point"/> "hits" the <see cref="T:Macro.ImageViewer.Graphics.InvariantTextPrimitive"/>,
            <b>false</b> otherwise.
            </returns>
            <remarks>
            A "hit" is defined as when the mouse position is within the 
            text's <see cref="P:Macro.ImageViewer.Graphics.InvariantTextPrimitive.BoundingBox"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantTextPrimitive.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantTextPrimitive.SizeInPoints">
            <summary>
            Gets or sets the size in points.
            </summary>
            <remarks>
            Default value is 10 points.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantTextPrimitive.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <remarks>
            Default value is "Arial".
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantTextPrimitive.Dimensions">
            <summary>
            Gets or sets the dimensions of text's bounding box.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.InvariantTextPrimitive.Dimensions"/> is not determined by <see cref="T:Macro.ImageViewer.Graphics.InvariantTextPrimitive"/>,
            but by the implementation of <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/>, since the measurement of
            the text size is ultimately platform dependent.  It is up to the implementor
            of <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/> to set this property.  For example, a GDI+ version of
            <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/> might use 
            <see cref="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)"/> to
            determine the text dimensions.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantTextPrimitive.BoundingBox">
            <summary>
            Gets the bounding box of the text in source or destination coordinates.  The centre of the 
            bounding box should be <see cref="P:Macro.ImageViewer.Graphics.InvariantPrimitive.Location"/>.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.InvariantTextPrimitive.BoundingBoxChanged">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.Graphics.InvariantTextPrimitive.BoundingBox"/> property changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.IActivityMonitorQuickLinkHandler.CanHandle(Macro.ImageViewer.StudyManagement.ActivityMonitorQuickLink)">
            <summary>
            Asks handler if it can handle the specified link.
            </summary>
            <param name="link"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.IActivityMonitorQuickLinkHandler.Handle(Macro.ImageViewer.StudyManagement.ActivityMonitorQuickLink,Macro.Desktop.IDesktopWindow)">
            <summary>
            Asks handler to handle the specified link, returning true if handled.
            </summary>
            <param name="link"></param>
            <param name="window"> </param>
            <returns></returns>
        </member>
        <member name="T:Macro.ImageViewer.PermissionsHelper">
            <summary>
            Helper class for determining whether or not the current user has certain viewer-specific permissions.
            </summary>
            <remarks>
            Regardless of what is input, each of the methods in this class will unconditionally check for
            the <see cref="F:Macro.ImageViewer.AuthorityTokens.ViewerVisible"/> token, which is a global token intended to limit
            access to all viewer components.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.PermissionsHelper.IsInRole(System.String)">
            <summary>
            Checks whether the current user has the correct permissions based on the provided authority token.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PermissionsHelper.IsInRoles(System.String[])">
            <summary>
            Checks whether the current user has the correct permissions based on the provided authority tokens.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PermissionsHelper.IsInRoles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks whether the current user has the correct permissions based on the provided authority tokens.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PermissionsHelper.IsInAnyRole(System.String[])">
            <summary>
            Checks whether the current user is in at least one of the specified roles/authority tokens.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PermissionsHelper.IsInAnyRole(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks whether the current user is in at least one of the specified roles/authority tokens.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.IDataModalityLut">
            <summary>
            Defines a lookup table in the standard grayscale image display pipeline used to transform stored pixel values to manufacturer-independent values implemented as an array of values.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Imaging.LutComposer"/>
            <see cref="T:Macro.ImageViewer.Imaging.IModalityLut"/>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.IModalityLut">
            <summary>
            Defines a lookup table in the standard grayscale image display pipeline used to transform stored pixel values to manufacturer-independent values.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Imaging.LutComposer"/>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IModalityLut.Clone">
            <summary>
            Creates a deep-copy of the <see cref="T:Macro.ImageViewer.Imaging.IModalityLut"/>.
            </summary>
            <remarks>
            Implementations may return null from this method when appropriate.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IModalityLut.MinInputValue">
            <summary>
            Gets or sets the minimum input stored pixel value.
            </summary>
            <remarks>
            This value is set internally by the framework and should not be modified by client code.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IModalityLut.MaxInputValue">
            <summary>
            Gets or sets the maximum input stored pixel value.
            </summary>
            <remarks>
            This value is set internally by the framework and should not be modified by client code.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IModalityLut.Item(System.Int32)">
            <summary>
            Gets the output value of the lookup table for a given input stored pixel value.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IDataModalityLut.Clone">
            <summary>
            Creates a deep-copy of the <see cref="T:Macro.ImageViewer.Imaging.IDataModalityLut"/>.
            </summary>
            <remarks>
            Implementations may return NULL from this method when appropriate.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IDataModalityLut.FirstMappedPixelValue">
            <summary>
            Gets the first mapped pixel value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IDataModalityLut.Data">
            <summary>
            Gets the lookup table data.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.UndoableOperationCommand`1">
            <summary>
            An <see cref="T:Macro.Desktop.UndoableCommand"/> specifically for operations on objects
            that implement the Memento pattern using <see cref="T:Macro.Desktop.IMemorable"/>.
            </summary>
            <remarks>
            <para>
            This class is used in conjunction with <see cref="T:Macro.ImageViewer.IUndoableOperation`1"/>, which
            is intended to streamline application of the same operation to objects implementing
            the Memento pattern via <see cref="T:Macro.Desktop.IMemorable"/>.  See the comments for 
            <see cref="T:Macro.ImageViewer.IUndoableOperation`1"/> for information on the pattern
            of applying the operation and creating the <see cref="T:Macro.Desktop.MemorableUndoableCommand"/>.
            </para>
            <para>
            The <see cref="T:Macro.ImageViewer.UndoableOperationCommand`1"/> removes all the burden of properly
            applying the <see cref="T:Macro.ImageViewer.IUndoableOperation`1"/> and obtaining the mementos for
            any number of objects.  Given the <see cref="T:Macro.ImageViewer.IUndoableOperation`1"/> and a list
            of items to which the operation should be applied, the first call to <see cref="M:Macro.ImageViewer.UndoableOperationCommand`1.Execute"/>
            will automatically apply the <see cref="T:Macro.ImageViewer.IUndoableOperation`1"/> and populate
            itself with a <see cref="T:Macro.Desktop.MemorableUndoableCommand"/> for each object that actually
            changed as a result of the operation.  Since the application of the operation
            is not guaranteed to result in any changes, you should check that the
            <see cref="P:Macro.Desktop.CompositeUndoableCommand.Count"/> property is non-zero after first calling
            <see cref="M:Macro.ImageViewer.UndoableOperationCommand`1.Execute"/> before adding the <see cref="T:Macro.ImageViewer.UndoableOperationCommand`1"/>
            to the <see cref="T:Macro.Desktop.CommandHistory"/>.
            </para>
            </remarks>
            <seealso cref="T:Macro.Desktop.IMemorable"/>
            <seealso cref="T:Macro.ImageViewer.IUndoableOperation`1"/>
            <seealso cref="T:Macro.Desktop.CompositeUndoableCommand"/>
        </member>
        <member name="M:Macro.ImageViewer.UndoableOperationCommand`1.#ctor(Macro.ImageViewer.IUndoableOperation{`0},`0)">
            <summary>
            Constructor.
            </summary>
            <param name="operation">The <see cref="T:Macro.ImageViewer.IUndoableOperation`1"/> that is to be applied to <paramref name="item"/>.</param>
            <param name="item">The item to which the <paramref name="operation"/> should be applied.</param>
        </member>
        <member name="M:Macro.ImageViewer.UndoableOperationCommand`1.#ctor(Macro.ImageViewer.IUndoableOperation{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="operation">The <see cref="T:Macro.ImageViewer.IUndoableOperation`1"/> that is to be applied to <paramref name="items"/>.</param>
            <param name="items">The items to which the <paramref name="operation"/> should be applied.</param>
        </member>
        <member name="M:Macro.ImageViewer.UndoableOperationCommand`1.Execute">
            <summary>
            On the first call, the <see cref="T:Macro.ImageViewer.IUndoableOperation`1"/> is applied and this
            object is populated with the <see cref="T:Macro.Desktop.MemorableUndoableCommand"/>s to undo
            the operation.
            </summary>
            <remarks>
            You should call <see cref="M:Macro.ImageViewer.UndoableOperationCommand`1.Execute"/> and check that the <see cref="P:Macro.Desktop.CompositeUndoableCommand.Count"/>
            is non-zero before adding to the <see cref="T:Macro.Desktop.CommandHistory"/>.  Otherwise, there will end up
            being 'no-op' commands in the <see cref="T:Macro.Desktop.CommandHistory"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.UndoableOperationCommand`1.Apply(Macro.ImageViewer.IUndoableOperation{`0},`0)">
            <summary>
            Applies <paramref name="operation"/> to <paramref name="item"/> and returns
            an <see cref="T:Macro.Desktop.UndoableCommand"/> that can undo and redo the operation.
            </summary>
            <returns>
            An <see cref="T:Macro.Desktop.UndoableCommand"/> if application of <paramref name="operation"/>
            resulted in a change to the internal state of <paramref name="item"/>, otherwise null.
            </returns>
            <remarks>
            Inheritors can override this method to do any additional processing and/or to
            modify the resulting command, if necessary.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.PatientCollection">
            <summary>
            A collection of <see cref="T:Macro.ImageViewer.StudyManagement.Patient"/> objects.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.PatientCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.PatientCollection"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.ImageBoxSelectedEventArgs">
            <summary>
            Provides data for the <see cref="E:Macro.ImageViewer.EventBroker.ImageBoxSelected"/> event.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageBoxSelectedEventArgs.SelectedImageBox">
            <summary>
            Gets the selected <see cref="T:Macro.ImageViewer.IImageBox"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Rendering.DrawMode">
            <summary>
            Drawing mode enumeration.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Rendering.DrawMode.Render">
            <summary>
            Renders the image from scratch
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Rendering.DrawMode.Refresh">
            <summary>
            Refreshes the image by only repainting the rendered image.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Rendering.DrawArgs">
            <summary>
            Provides data for the implementer of <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.DrawArgs.#ctor(Macro.ImageViewer.Rendering.IRenderingSurface,Macro.Desktop.Screen,Macro.ImageViewer.Rendering.DrawMode)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Rendering.DrawArgs"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Rendering.DrawArgs.SceneGraph">
            <summary>
            Gets the scene graph.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Rendering.DrawArgs.RenderingSurface">
            <summary>
            Gets the rendering surface.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Rendering.DrawArgs.DrawMode">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.Rendering.DrawMode"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Rendering.DrawArgs.Screen">
            <summary>
            Gets information about the screen on which the <see cref="P:Macro.ImageViewer.Rendering.DrawArgs.SceneGraph"/>
            will be drawn.
            </summary>
            <remarks>
            If the tile to be drawn straddles two screens, the information returned
            will be that of the screen on which the larger portion of the <see cref="T:Macro.ImageViewer.Tile"/>
            resides.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Rendering.DrawArgs.Dpi">
            <summary>
            Gets or sets the resolution of the output device in DPI to be used in scaling vector graphics appropriately.
            </summary>
            <remarks>
            The vector graphics are drawn for display at a nominal screen resolution (usually 96 DPI). If the destination
            output device has a significantly larger DPI, setting this value will allow font sizes and line widths
            to be scaled appropriately so that the size of the vector graphics relative to the rest of the image remains
            relatively constant.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Rendering.DrawArgs.Tag">
            <summary>
            Gets or sets user-defined data.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.ReleaseCaptureMessage">
            <summary>
            A message object created by the view layer to notify a controlling object 
            (e.g. <see cref="T:Macro.ImageViewer.InputManagement.TileController"/>) that capture should be released.
            </summary>
            <remarks>
            This class is intended for internal framework use only.
            </remarks>
            <seealso cref="T:Macro.ImageViewer.InputManagement.TileController"/>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.ReleaseCaptureMessage.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.KeyboardButtonShortcut">
            <summary>
            Represents the current message object's (e.g. <see cref="T:Macro.ImageViewer.InputManagement.KeyboardButtonMessage"/>) state.
            </summary>
            <remarks>
            This class is intended for internal framework use only.
            </remarks>
            <seealso cref="T:Macro.ImageViewer.InputManagement.KeyboardButtonDownPreview"/>
            <seealso cref="T:Macro.ImageViewer.InputManagement.KeyboardButtonMessage"/>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.KeyboardButtonShortcut.#ctor(Macro.Desktop.XKeys)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.KeyboardButtonShortcut.GetHashCode">
            <summary>
            Gets a hashcode for this object instance.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.KeyboardButtonShortcut.Equals(System.Object)">
            <summary>
            Determines if this object is equal to another.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.KeyboardButtonShortcut.Equals(Macro.ImageViewer.InputManagement.KeyboardButtonShortcut)">
            <summary>
            Gets whether or not this object is equal to <paramref name="other"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.KeyboardButtonShortcut.Equals(Macro.Desktop.XKeys)">
            <summary>
            Gets whether or not this object is equal to <paramref name="other"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.KeyboardButtonShortcut.ToString">
            <summary>
            Gets a string describing this object instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.KeyboardButtonShortcut.IsEmpty">
            <summary>
            Gets whether or not this is an empty shortcut (e.g. no keystrokes).
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.KeyboardButtonShortcut.KeyData">
            <summary>
            Gets the Key Data, in its entirety.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.KeyboardButtonShortcut.KeyCode">
            <summary>
            Gets the Key Code (modifiers removed), which is extracted from the <see cref="P:Macro.ImageViewer.InputManagement.KeyboardButtonShortcut.KeyData"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.KeyboardButtonShortcut.Control">
            <summary>
            Indicates whether the Control key is down.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.KeyboardButtonShortcut.Alt">
            <summary>
            Indicates whether the Alt key is down.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.KeyboardButtonShortcut.Shift">
            <summary>
            Indicates whether the Shift key is down.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.IStatefulGraphic">
            <summary>
            Defines a graphic that has state.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.IStatefulGraphic.State">
            <summary>
            Gets or sets the state of the <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.InteractiveGraphics.IStatefulGraphic.StateChanged">
            <summary>
            Occurs when the state of the <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> has changed.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.CompassStretchCursorTokenStrategy">
            <summary>
            This class implements a simple algorithm for determining which cursor on an 8 point compass to show
            for a particular control point in a <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPointGroup"/>.  The class assumes that the
            purpose of the control points is to stretch the graphic that owns the control points (as will be
            the case with most ROI graphic implementations).
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.StretchCursorTokenStrategy">
            <summary>
            A strategy for determining what the <see cref="T:Macro.Desktop.CursorToken"/> should be
            for a given <see cref="P:Macro.ImageViewer.InteractiveGraphics.StretchCursorTokenStrategy.TargetGraphic"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.ICursorTokenProvider">
            <summary>
            A provider of a <see cref="T:Macro.Desktop.CursorToken"/> that is returned based on the current mouse position within an <see cref="T:Macro.ImageViewer.ITile"/>.
            </summary>
            <remarks>
            The framework will look for this interface on graphic objects (<see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>) 
            in the current <see cref="T:Macro.ImageViewer.IPresentationImage"/>'s SceneGraph (see <see cref="P:Macro.ImageViewer.PresentationImage.SceneGraph"/>) when the
            mouse has moved within the current <see cref="T:Macro.ImageViewer.ITile"/>.  If the object returns a <see cref="T:Macro.Desktop.CursorToken"/>, then the
            corresponding cursor will be shown at the current mouse position.
            </remarks>
            <seealso cref="T:Macro.Desktop.CursorToken"/>
            <seealso cref="T:Macro.ImageViewer.ITile"/>
            <seealso cref="T:Macro.ImageViewer.IPresentationImage"/>
            <seealso cref="P:Macro.ImageViewer.PresentationImage.SceneGraph"/>
            <seealso cref="T:Macro.ImageViewer.Graphics.IGraphic"/>
            <seealso cref="T:Macro.ImageViewer.Graphics.Graphic"/>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.ICursorTokenProvider.GetCursorToken(System.Drawing.Point)">
            <summary>
            Gets the cursor token to be shown at the current mouse position.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StretchCursorTokenStrategy.#ctor">
            <summary>
            Protected constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StretchCursorTokenStrategy.GetCursorToken(System.Drawing.Point)">
            <summary>
            Gets the cursor token to be shown at the current mouse position.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.StretchCursorTokenStrategy.TargetGraphic">
            <summary>
            The target <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> for which the <see cref="T:Macro.Desktop.CursorToken"/>
            is to be determined.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CompassStretchCursorTokenStrategy.InstallDefaults">
            <summary>
            Installs the default set of system cursors for the compass.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CompassStretchCursorTokenStrategy.DistanceToCompassPoint(System.Drawing.PointF,System.Drawing.RectangleF,Macro.ImageViewer.InteractiveGraphics.CompassStretchCursorTokenStrategy.CompassPoints)">
            <summary>
            Computes the distance from a point to a compass point on the given rectangle.
            </summary>
            <param name="point">a point whose distance from a compass point on the rectangle is to be determined.</param>
            <param name="compassRectangle">the rectangle from which to determine the compass point position.</param>
            <param name="compassPoint">the point on the compass to find the distance to.</param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CompassStretchCursorTokenStrategy.GetCompassPointPosition(Macro.ImageViewer.InteractiveGraphics.CompassStretchCursorTokenStrategy.CompassPoints,System.Drawing.RectangleF)">
            <summary>
            Computes the position on a given rectangle that corresponds to the given compass point.
            </summary>
            <param name="compassPoint">the compass point whose position on the rectangle is to be determined.</param>
            <param name="rectangle">the rectangle.</param>
            <returns>the point on the rectangle that corresponds to the given compass point.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CompassStretchCursorTokenStrategy.GetCursorToken(System.Drawing.Point)">
            <summary>
            Gets the appropriate <see cref="T:Macro.Desktop.CursorToken"/> for a given point (in destination coordinates).
            </summary>
            <param name="point">the point (in destination coordinates).</param>
            <returns>a <see cref="T:Macro.Desktop.CursorToken"/> that is appropriate for the given point, or null.</returns>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.CompassStretchCursorTokenStrategy.BoundingRectangle">
            <summary>
            Gets the bounding rectangle that contains all the points in the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPointGroup"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.CompassStretchCursorTokenStrategy.Item(Macro.ImageViewer.InteractiveGraphics.CompassStretchCursorTokenStrategy.CompassPoints)">
            <summary>
            Gets or sets the <see cref="T:Macro.Desktop.CursorToken"/> that corresponds to a particular point on the compass.
            </summary>
            <param name="compassPoint">the compass point.</param>
            <returns>the <see cref="T:Macro.Desktop.CursorToken"/> that corresponds to the specified point on the compass, or null.</returns>
        </member>
        <member name="M:Macro.ImageViewer.LoadMultipleStudiesExceptionHandler.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.LoadMultipleStudiesExceptionHandler.Handle(System.Exception,Macro.Desktop.IExceptionHandlingContext)">
            <summary>
             Handles the specified exception.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.LoadMultipleStudiesException">
            <summary>
            Exception thrown when multiple studies have failed to load.
            </summary>
            <seealso cref="M:Macro.ImageViewer.ImageViewerComponent.LoadStudies(System.Collections.Generic.IList{Macro.ImageViewer.LoadStudyArgs})"/>
        </member>
        <member name="F:Macro.ImageViewer.LoadMultipleStudiesException.TotalStudies">
            <summary>
            Gets the total number of studies that were loaded, or attempted to load.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.LoadMultipleStudiesException.LoadStudyExceptions">
            <summary>
            Gets all of the individual exceptions that occurred per study.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.LoadMultipleStudiesException.GetExceptionSummary">
            <summary>
            Gets a text summary of the exception(s).
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LoadMultipleStudiesException.AllStudiesFailed">
            <summary>
            Gets whether or not all the studies failed to load.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LoadMultipleStudiesException.OfflineCount">
            <summary>
            Gets the number of studies that failed to load because they are offline.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LoadMultipleStudiesException.NearlineCount">
            <summary>
            Gets the number of studies that failed to load because they are nearline.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LoadMultipleStudiesException.IncompleteCount">
            <summary>
            Gets the number of studies that could only be partially loaded.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LoadMultipleStudiesException.InUseCount">
            <summary>
            Gets the number of studies that failed to load because they are in use.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LoadMultipleStudiesException.NotFoundCount">
            <summary>
            Gets the number of studies that failed to load because they could not be found.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LoadMultipleStudiesException.StudyLoaderNotFoundCount">
            <summary>
            Gets the number of studies that failed to load because there was no appropriate <see cref="T:Macro.ImageViewer.StudyManagement.IStudyLoader"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LoadMultipleStudiesException.UnknownFailureCount">
            <summary>
            Gets the number of studies that failed to load for unknown reasons.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.IFrameReference">
            <summary>
            Interface defining a transient reference to a <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>.
            </summary>
            <remarks>
            See <see cref="T:Macro.ImageViewer.StudyManagement.ISopReference"/> for a detailed explanation of 'transient references'.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.IFrameReference.Clone">
            <summary>
            Clones an existing <see cref="T:Macro.ImageViewer.StudyManagement.IFrameReference"/>, creating a new transient reference.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.Frame">
            <summary>
            Represents the DICOM concept of a frame.
            </summary>
            <remarks>
            Note that there should no longer be any need to derive directly from this class.
            See <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> and/or <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> for more information.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Frame.#ctor(Macro.ImageViewer.StudyManagement.ImageSop,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/> with the
            specified parameters.
            </summary>
            <param name="parentImageSop">The parent <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>.</param>
            <param name="frameNumber">The first frame is frame 1.</param>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Frame.GetNormalizedPixelData">
            <summary>
            Gets pixel data in normalized form.
            </summary>
            <remarks>
            See <see cref="M:Macro.ImageViewer.StudyManagement.ISopFrameData.GetNormalizedPixelData"/> for a detailed explanation.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Frame.UnloadPixelData">
            <summary>
            Unloads the pixel data.
            </summary>
            <remarks>
            <see cref="M:Macro.ImageViewer.StudyManagement.ISopFrameData.Unload"/> for a detailed explanation.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Frame.CreateTransientReference">
            <summary>
            Creates a <see cref="T:Macro.ImageViewer.StudyManagement.IFrameReference">transient reference</see> to this <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>.
            </summary>
            <remarks>
            See <see cref="T:Macro.ImageViewer.StudyManagement.ISopReference"/> for a detailed explanation of transient references.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Frame.Validate">
            <summary>
            Validates the <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/> object.
            </summary>
            <remarks>
            Derived classes should call the base class implementation first, and then do further validation.
            The <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/> class validates properties deemed vital to usage of the object.
            </remarks>
            <exception cref="T:Macro.ImageViewer.StudyManagement.SopValidationException">Thrown when validation fails.</exception>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Frame.Dispose(System.Boolean)">
            <summary>
            Inheritors should override this method to do additional cleanup.
            </summary>
            <remarks>
            Frames should never be disposed by client code; they are disposed by
            the parent <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.ParentImageSop">
            <summary>
            Gets the parent <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.StudyInstanceUid">
            <summary>
            Gets the Study Instance UID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.SeriesInstanceUid">
            <summary>
            Gets the Series Instance UID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.SopInstanceUid">
            <summary>
            Gets the SOP Instance UID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.FrameNumber">
            <summary>
            Gets the frame number.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.PatientOrientation">
            <summary>
            Gets the patient orientation.
            </summary>
            <remarks>
            A <see cref="T:Macro.Dicom.Iod.PatientOrientation"/> is returned even when no data is available; 
            the <see cref="P:Macro.Dicom.Iod.PatientOrientation.IsEmpty"/> property will be true.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.ImageType">
            <summary>
            Gets the image type.  The entire Image Type value should be returned as a Dicom string array.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.AcquisitionNumber">
            <summary>
            Gets the acquisition number.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.AcquisitionDate">
            <summary>
            Gets the acquisiton date.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.AcquisitionTime">
            <summary>
            Gets the acquisition time.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.AcquisitionDateTime">
            <summary>
            Gets the acquisition date/time.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.ImagesInAcquisition">
            <summary>
            Gets the number of images in the acquisition.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.ImageComments">
            <summary>
            Gets the image comments.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.LossyImageCompression">
            <summary>
            Gets the lossy image compression.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.LossyImageCompressionRatio">
            <summary>
            Gets the lossy image compression ratio.
            </summary>
            <remarks>
            Will return as many parsable values as possible up to the first non-parsable value.  For example, if there are 3 values, but the last one is poorly encoded, 2 values will be returned.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.PixelSpacing">
            <summary>
            Gets the pixel spacing.
            </summary>
            <remarks>
            It is generally recommended that clients use <see cref="P:Macro.ImageViewer.StudyManagement.Frame.NormalizedPixelSpacing"/> when
            in calculations that require the pixel spacing.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.ImageOrientationPatient">
            <summary>
            Gets the image orientation patient.
            </summary>
            <remarks>
            Returns an <see cref="T:Macro.Dicom.Iod.ImageOrientationPatient"/> object with zero for all its values
            when no data is available or the existing data is bad/incorrect;  <see cref="P:Macro.Dicom.Iod.ImageOrientationPatient.IsNull"/>
            will be true.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.ImagePositionPatient">
            <summary>
            Gets the image position patient.
            </summary>
            <remarks>
            Returns an <see cref="T:Macro.Dicom.Iod.ImagePositionPatient"/> object with zero for all its values when no data is
            available or the existing data is bad/incorrect; <see cref="P:Macro.Dicom.Iod.ImagePositionPatient.IsNull"/> will be true.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.SliceThickness">
            <summary>
            Gets the slice thickness.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.SliceLocation">
            <summary>
            Gets the slice location.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.ImagerPixelSpacing">
            <summary>
            Gets the imager pixel spacing.
            </summary>
            <remarks>
            It is generally recommended that clients use <see cref="P:Macro.ImageViewer.StudyManagement.Frame.NormalizedPixelSpacing"/> when
            in calculations that require the imager pixel spacing.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.SamplesPerPixel">
            <summary>
            Gets the samples per pixel.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.PhotometricInterpretation">
            <summary>
            Gets the photometric interpretation.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.Rows">
            <summary>
            Gets the number of rows.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.Columns">
            <summary>
            Gets the number of columns.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.BitsAllocated">
            <summary>
            Gets the number of bits allocated.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.BitsStored">
            <summary>
            Gets the number of bits stored.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.HighBit">
            <summary>
            Gets the high bit.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.PixelRepresentation">
            <summary>
            Gets the pixel representation.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.PlanarConfiguration">
            <summary>
            Gets the planar configuration.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.PixelAspectRatio">
            <summary>
            Gets the pixel aspect ratio.
            </summary>
            <remarks>
            If no value exists in the image header, or the value is invalid, a <see cref="T:Macro.Dicom.Iod.PixelAspectRatio"/>
            is returned whose <see cref="P:Macro.Dicom.Iod.PixelAspectRatio.IsNull"/> property evaluates to true.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.RescaleIntercept">
            <summary>
            Gets the rescale intercept.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.RescaleSlope">
            <summary>
            Gets the rescale slope.
            </summary>
            <remarks>
            1.0 is returned if no data is available.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.RescaleType">
            <summary>
            Gets the rescale type.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.RescaleUnits">
            <summary>
            Gets the units of the rescale function output.
            </summary>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Frame.RescaleSlope"/>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Frame.RescaleIntercept"/>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Frame.RescaleType"/>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.IsSubnormalRescale">
            <summary>
            Gets a value indicating whether or not the rescale function is subnormal (i.e. output of the function is too small to be represented as distinct values).
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.WindowCenterAndWidth">
            <summary>
            Gets the window width and center.
            </summary>
            <remarks>
            Will return as many parsable values as possible up to the first non-parsable value.
            For example, if there are 3 values, but the last one is poorly encoded, 2 values will be returned.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.WindowCenterAndWidthExplanation">
            <summary>
            Gets the window width and center explanation(s).
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.FrameOfReferenceUid">
            <summary>
            Gets the frame of reference uid for the image.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.SpacingBetweenSlices">
            <summary>
            Gets the spacing between the slices.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.IsColor">
            <summary>
            Gets a value indicating whether the image is colour.
            </summary>
            <returns>
            <b>true</b> if <see cref="P:Macro.ImageViewer.StudyManagement.Frame.PhotometricInterpretation"/> is anything other than
            MONOCHROME1 or MONOCHROME2.
            </returns>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.ImagePlaneHelper">
            <summary>
            Gets the <see cref="P:Macro.ImageViewer.StudyManagement.Frame.ImagePlaneHelper"/> for this <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Frame.NormalizedPixelSpacing">
            <summary>
            Gets the pixel spacing appropriate to the modality.
            </summary>
            <remarks>
            See the remarks for <see cref="T:Macro.ImageViewer.StudyManagement.NormalizedPixelSpacing"/>.
            Clients who require the pixel spacing should use this property as opposed to 
            the raw DICOM pixel spacing property in <see cref="P:Macro.ImageViewer.StudyManagement.Frame.PixelSpacing"/>.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.KeyboardButtonDownPreview">
            <summary>
            A message object created by the view layer to allow a controlling object 
            (e.g. <see cref="T:Macro.ImageViewer.InputManagement.TileController"/>) to preview a keyboard button message before it is processed.
            </summary>
            <remarks>
            This class is intended for internal framework use only.
            </remarks>
            <seealso cref="T:Macro.ImageViewer.InputManagement.KeyboardButtonShortcut"/>
            <seealso cref="T:Macro.ImageViewer.InputManagement.TileController"/>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.KeyboardButtonDownPreview.#ctor(Macro.Desktop.XKeys)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.KeyboardButtonDownPreview.Shortcut">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.InputManagement.KeyboardButtonShortcut"/> to be previewed.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.IVoiLutProvider">
            <summary>
            A provider of a VOI LUT, accessed and manipulated via the <see cref="P:Macro.ImageViewer.Imaging.IVoiLutProvider.VoiLutManager"/> property.
            </summary>
            <remarks>
            <para>
            The <see cref="P:Macro.ImageViewer.Imaging.IVoiLutProvider.VoiLutManager"/> property allows access to and manipulation of the installed VOI LUT.
            </para>
            <para>
            Implementors should not return null for the <see cref="P:Macro.ImageViewer.Imaging.IVoiLutProvider.VoiLutManager"/> property.
            </para>
            </remarks>
            <seealso cref="T:Macro.ImageViewer.Imaging.IVoiLutManager"/>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IVoiLutProvider.VoiLutManager">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.Imaging.IVoiLutManager"/> associated with the provider.
            </summary>
            <remarks>
            This property should never return null.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.MinMaxPixelCalculatedLinearLut">
            <summary>
            A Linear Lut whose <see cref="P:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear.WindowWidth"/> and <see cref="P:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear.WindowCenter"/> 
            are calculated based on the minimum and maximum pixel value in the pixel data.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear"/>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear">
            <summary>
            This class provides all the base functionality for a Linear Lut where the 
            <see cref="P:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear.WindowWidth"/> and <see cref="P:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear.WindowCenter"/> are calculated via some algorithm
            on (an image's) <see cref="T:Macro.ImageViewer.Imaging.GrayscalePixelData"/>.
            </summary>
            <remarks>
            Inheritors must implement the <see cref="M:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear.CalculateWindowRange(Macro.ImageViewer.Imaging.GrayscalePixelData,System.Int32@,System.Int32@)"/> method in order to perform
            their calculation.  <see cref="M:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear.CalculateWindowRange(Macro.ImageViewer.Imaging.GrayscalePixelData,System.Int32@,System.Int32@)"/> will only be called once, after which
            the <see cref="P:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear.WindowWidth"/> and <see cref="P:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear.WindowCenter"/> values will be cached.
            </remarks>
            <seealso cref="T:Macro.ImageViewer.Imaging.CalculatedVoiLutLinear"/>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.CalculatedVoiLutLinear">
            <summary>
            Abstract class providing the base functionality for Luts where the <see cref="P:Macro.ImageViewer.Imaging.CalculatedVoiLutLinear.WindowWidth"/>
            and <see cref="P:Macro.ImageViewer.Imaging.CalculatedVoiLutLinear.WindowCenter"/> are calculated and/or retrieved from an external source.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Imaging.IVoiLutLinear"/>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.CalculatedVoiLutLinear.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.CalculatedVoiLutLinear.GetWindowWidth">
            <summary>
            Gets the <see cref="P:Macro.ImageViewer.Imaging.CalculatedVoiLutLinear.WindowWidth"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.CalculatedVoiLutLinear.GetWindowCenter">
            <summary>
            Gets the <see cref="P:Macro.ImageViewer.Imaging.CalculatedVoiLutLinear.WindowCenter"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.CalculatedVoiLutLinear.WindowWidth">
            <summary>
            Gets the Window Width.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.CalculatedVoiLutLinear.WindowCenter">
            <summary>
            Gets the Window Center.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear.#ctor(Macro.ImageViewer.Imaging.GrayscalePixelData,Macro.ImageViewer.Imaging.IModalityLut)">
            <summary>
            Constructor.
            </summary>
            <param name="pixelData">The pixel data the algorithm will be run on.</param>
            <param name="modalityLut">The modality lut to use for calculating <see cref="P:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear.WindowWidth"/> and <see cref="P:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear.WindowCenter"/>, if applicable.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear.#ctor(Macro.ImageViewer.Imaging.GrayscalePixelData)">
            <summary>
            Constructor.
            </summary>
            <param name="pixelData">The pixel data the algorithm will be run on.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear.#ctor(Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear.CalculateWindowRange(Macro.ImageViewer.Imaging.GrayscalePixelData,System.Int32@,System.Int32@)">
            <summary>
            Called when either of <see cref="P:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear.WindowWidth"/> or <see cref="P:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear.WindowCenter"/> are first accessed.
            </summary>
            <remarks>
            Inheritors must implement this method and return the <paramref name="windowStart"/> and <paramref name="windowEnd"/> 
            value range that will be used to calculate the <see cref="P:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear.WindowWidth"/> and <see cref="P:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear.WindowCenter"/>.
            </remarks>
            <param name="pixelData">The pixel data that is to be used to calculate <paramref name="windowStart"/> and <paramref name="windowEnd"/>.</param>
            <param name="windowStart">returns the start value in the window range.</param>
            <param name="windowEnd">returns the end value in the window range.</param>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear.WindowWidth">
            <summary>
            Gets the Window Width.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear.WindowCenter">
            <summary>
            Gets the Window Center.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.MinMaxPixelCalculatedLinearLut.#ctor(Macro.ImageViewer.Imaging.GrayscalePixelData,Macro.ImageViewer.Imaging.IModalityLut)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            The input <see cref="T:Macro.ImageViewer.Imaging.IVoiLut"/> object can be null.
            </remarks>
            <param name="pixelData">The pixel data the algorithm will be run on.</param>
            <param name="modalityLut">The modality lut to use for calculating <see cref="P:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear.WindowWidth"/> 
            and <see cref="P:Macro.ImageViewer.Imaging.AlgorithmCalculatedVoiLutLinear.WindowCenter"/>, if applicable.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.MinMaxPixelCalculatedLinearLut.#ctor(Macro.ImageViewer.Imaging.GrayscalePixelData)">
            <summary>
            Constructor.
            </summary>
            <param name="pixelData">The pixel data the algorithm will be run on.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.MinMaxPixelCalculatedLinearLut.CalculateWindowRange(Macro.ImageViewer.Imaging.GrayscalePixelData,System.Int32@,System.Int32@)">
            <summary>
            Calculates and returns the minimum and maximum pixel values in the input <paramref name="pixelData"/>.
            </summary>
            <param name="pixelData">The input pixel data.</param>
            <param name="windowStart">Returns the minimum pixel value.</param>
            <param name="windowEnd">Returns the maximum pixel value.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.MinMaxPixelCalculatedLinearLut.GetDescription">
            <summary>
            Gets an abbreviated description of the Lut.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.ColorMapFactoryExtensionPoint">
            <summary>
            An extension point for <see cref="T:Macro.ImageViewer.Imaging.IColorMapFactory"/>s.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Imaging.IColorMapFactory"/>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.IColorMapFactory">
            <summary>
            A factory for color maps.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Imaging.ColorMapFactoryExtensionPoint"/>
            <seealso cref="T:Macro.ImageViewer.Imaging.ColorMap"/>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IColorMapFactory.Create">
            <summary>
            Creates a color map.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IColorMapFactory.Name">
            <summary>
            Gets a name that should be unique when compared to other <see cref="T:Macro.ImageViewer.Imaging.IColorMapFactory"/>s.
            </summary>
            <remarks>
            This name should <b>not</b> be a resource string, as it should be language-independent.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IColorMapFactory.Description">
            <summary>
            Gets a brief description of the factory.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.ColorPresentationImage">
            <summary>
            A colour <see cref="T:Macro.ImageViewer.PresentationImage"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ColorPresentationImage.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.ColorPresentationImage"/>.
            </summary>
            <param name="rows"></param>
            <param name="columns"></param>
            <remarks>
            This simple constructor will automatically create RGB pixel data with the specified
            number of rows and columns.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.ColorPresentationImage.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,Macro.ImageViewer.Imaging.PixelDataGetter)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.ColorPresentationImage"/>.
            </summary>
            <param name="rows"></param>
            <param name="columns"></param>
            <param name="pixelSpacingX"></param>
            <param name="pixelSpacingY"></param>
            <param name="pixelAspectRatioX"></param>
            <param name="pixelAspectRatioY"></param>
            <param name="pixelDataGetter"></param>
            <remarks>
            This more flexible constructor allows for the pixel data
            to be retrieved from and external source via a <see cref="T:Macro.ImageViewer.Imaging.PixelDataGetter"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.ColorPresentationImage.#ctor(Macro.ImageViewer.ColorPresentationImage,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ColorPresentationImage.CreateFreshCopy">
            <summary>
            Creates a fresh copy of the <see cref="T:Macro.ImageViewer.ColorPresentationImage"/>.
            </summary>
            <remarks>
            This will instantiate a fresh copy of this <see cref="T:Macro.ImageViewer.ColorPresentationImage"/>
            using the same construction parameters as the original.
            </remarks>
            <returns></returns>		
        </member>
        <member name="P:Macro.ImageViewer.ColorPresentationImage.ImageGraphic">
            <summary>
            Gets this image's <see cref="T:Macro.ImageViewer.Graphics.ColorImageGraphic"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ColorPresentationImage.VoiLutsEnabled">
            <summary>
            Gets or sets a value indicating whether VOI LUTs should be used in rendering this image.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ColorPresentationImage.VoiLutManager">
            <summary>
            Gets this image's <see cref="T:Macro.ImageViewer.Imaging.IVoiLutManager"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Annotations.IAnnotationLayout">
            <summary>
            Defines an entire layout of <see cref="T:Macro.ImageViewer.Annotations.AnnotationBox"/>es to be rendered to
            the overlay by an <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/>.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Annotations.AnnotationBox"/>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.IAnnotationLayout.Clone">
            <summary>
            Gets a deep clone of the annotation layout.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.IAnnotationLayout.AnnotationBoxes">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.Annotations.AnnotationBox"/>es that define the layout.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.IAnnotationLayout.Visible">
            <summary>
            Gets or sets whether the <see cref="T:Macro.ImageViewer.Annotations.IAnnotationLayout"/> is visible.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.Dicom.DisplayAreaSerializationOption">
            <summary>
            Enumerated values that specify how the displayed area of an image should be serialized in a presentation state.
            </summary>
            <remarks>
            <para>If the image with presentation state is being rendered in a screen rectangle of the same size as when the presentation
            state was created, then the displayed area is the same. However, this is the exception rather than the norm. The typical
            use case for presentation states would have the rendering of the image take place on a different workstation, typically
            with differing physical monitor size, screen resolution, window dimensions, window aspect ratio, etc. These enumerated
            values serve to specify which quality of the visible area should be preserved in such circumstances.</para>
            <para>An alternative description can be found in DICOM Standard 2008, PS 3.3 C.10.4.</para>
            </remarks>
        </member>
        <member name="F:Macro.ImageViewer.PresentationStates.Dicom.DisplayAreaSerializationOption.SerializeAsDisplayedArea">
            <summary>
            Specifies that maintaining the same minimum visible area has higher precedence over maintaining the same magnification.
            </summary>
            <remarks>
            In cases where the aspect ratio of the screen rectangle where the image and presentation state is being rendered differs
            from that of the creator, then the magnification will be adjusted such that, at a minimum, the original visible area
            remains completely visible.
            </remarks>
        </member>
        <member name="F:Macro.ImageViewer.PresentationStates.Dicom.DisplayAreaSerializationOption.SerializeAsTrueSize">
            <summary>
            Specifies that maintaining the true physical size of the image has higher precedence over maintaining the same visible area.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.PresentationStates.Dicom.DisplayAreaSerializationOption.SerializeAsMagnification">
            <summary>
            Specifies that maintaining the same magnification ratio has higher precedence over maintaining the same visible area.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicsPlane">
            <summary>
            The composite graphic containing all the DICOM-defined graphics that may be specified in
            a DICOM image header or an accompanying presentation state.
            </summary>
            <remarks>
            <para>This graphic provides explicit support for the following DICOM graphics concepts:</para>
            <list type="table">
            <listheader><dicom>Reference</dicom><description>Module</description></listheader>
            <item><dicom>PS 3.3 C.7.6.11</dicom><description>Display Shutter</description></item>
            <item><dicom>PS 3.3 C.7.6.15</dicom><description>Bitmap Display Shutter</description></item>
            <item><dicom>PS 3.3 C.9.2</dicom><description>Overlay Plane</description></item>
            <item><dicom>PS 3.3 C.11.7</dicom><description>Overlay Activation</description></item>
            <item><dicom>PS 3.3 C.10.7</dicom><description>Graphic Layer</description></item>
            </list>
            <para>Additionally, support for the following DICOM is available by directly using the appropriate class:</para>
            <list type="table">
            <listheader><dicom>Reference</dicom><description>Module</description><class>See</class></listheader>
            <item><dicom>PS 3.3 C.10.5</dicom><description>Graphic Annotation</description><class><see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicAnnotation"/></class></item>
            </list>
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.CompositeGraphic">
            <summary>
            A <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> that can group other <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> objects.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.CompositeGraphic.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.CompositeGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.CompositeGraphic.ResetCoordinateSystem">
            <summary>
            Resets the <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.CoordinateSystem"/>.
            </summary>
            <remarks>
            <para>
            <see cref="M:Macro.ImageViewer.Graphics.CompositeGraphic.ResetCoordinateSystem"/> will reset the <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.CoordinateSystem"/>
            to what it was before the <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.CoordinateSystem"/> was last set.
            </para>
            <para>
            Calling <see cref="M:Macro.ImageViewer.Graphics.CompositeGraphic.ResetCoordinateSystem"/> will recursively call
            <see cref="M:Macro.ImageViewer.Graphics.CompositeGraphic.ResetCoordinateSystem"/> on <i>all</i> <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> 
            objects in the subtree.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.CompositeGraphic.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit test on the <see cref="T:Macro.ImageViewer.Graphics.CompositeGraphic"/> at given point.
            </summary>
            <param name="point">The mouse position in destination coordinates.</param>
            <returns>
            <b>True</b> if <paramref name="point"/> "hits" any <see cref="T:Macro.ImageViewer.Graphics.Graphic"/>
            in the subtree, <b>false</b> otherwise.
            </returns>
            <remarks>
            Calling <see cref="M:Macro.ImageViewer.Graphics.CompositeGraphic.HitTest(System.Drawing.Point)"/> will recursively call <see cref="M:Macro.ImageViewer.Graphics.CompositeGraphic.HitTest(System.Drawing.Point)"/> on
            <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> objects in the subtree.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.CompositeGraphic.GetClosestPoint(System.Drawing.PointF)">
            <summary>
            Gets the point on the <see cref="T:Macro.ImageViewer.Graphics.CompositeGraphic"/> closest to the specified point.
            </summary>
            <param name="point">A point in either source or destination coordinates.</param>
            <returns>The point on the graphic closest to the given <paramref name="point"/>.</returns>
            <remarks>
            <para>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>,
            the computation will be carried out in either source
            or destination coordinates.</para>
            <para>Calling <see cref="M:Macro.ImageViewer.Graphics.CompositeGraphic.GetClosestPoint(System.Drawing.PointF)"/> will recursively call <see cref="M:Macro.ImageViewer.Graphics.CompositeGraphic.GetClosestPoint(System.Drawing.PointF)"/>
            on <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> objects in the subtree and return the closest result.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.CompositeGraphic.Move(System.Drawing.SizeF)">
            <summary>
            Moves the <see cref="T:Macro.ImageViewer.Graphics.CompositeGraphic"/> by a specified delta.
            </summary>
            <param name="delta">The distance to move.</param>
            <remarks>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.CoordinateSystem"/>,
            <paramref name="delta"/> will be interpreted in either source
            or destination coordinates.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.CompositeGraphic.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.Graphics.CompositeGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.CompositeGraphic.EnumerateChildGraphics(System.Boolean)">
            <summary>
            Enumerates the immediate child graphics of this <see cref="T:Macro.ImageViewer.Graphics.CompositeGraphic"/>.
            </summary>
            <param name="reverse">A value specifying that the enumeration should be carried out in reverse order.</param>
            <returns>An enumeration of child graphics.</returns>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.CompositeGraphic.Graphics">
            <summary>
            Gets a collection of this <see cref="T:Macro.ImageViewer.Graphics.CompositeGraphic"/>'s child graphics.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.CompositeGraphic.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Macro.ImageViewer.Graphics.CompositeGraphic"/> is visible.
            </summary>
            <remarks>
            Setting the <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.Visible"/> property will <b>not</b> recursively set the 
            <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.Visible"/> property for child objects in the subtree for reasons
            of preservation of state.  For example, if a <see cref="T:Macro.ImageViewer.Graphics.CompositeGraphic"/> at
            the very top of the scene graph had many child graphics whose visibility were
            dependent on, say, the position of the mouse, when the <see cref="T:Macro.ImageViewer.Graphics.CompositeGraphic"/>'s
            visibility changed, the visibility of the child objects would no longer be correct.
            Also, when a parent graphic's <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.Visible"/> property is false, it's children
            are not rendered regardless of the value of their <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.Visible"/> property.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.CompositeGraphic.BoundingBox">
            <summary>
            Gets the tightest bounding box that encloses all the bounding boxes of the child graphics in either source or destination coordinates.
            </summary>
            <remarks>
            <para><see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this property is in source or destination coordinates.</para>
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.CompositeGraphic.CoordinateSystem">
            <summary>
            Gets or sets the <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.CoordinateSystem"/>.
            </summary>
            <remarks>
            Setting the <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.CoordinateSystem"/> property will recursively set the 
            <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.CoordinateSystem"/> property for <i>all</i> <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> 
            objects in the subtree.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicsPlane.#ctor">
            <summary>
            Constructs a new instance of a <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicsPlane"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicsPlane.Clear">
            <summary>
            Clears all graphics from the DICOM graphics plane.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicsPlane.GetDicomGraphicsPlane(Macro.ImageViewer.IDicomPresentationImage)">
            <summary>
            Gets the DICOM graphics plane of the specified DICOM presentation image, creating the plane if necessary.
            </summary>
            <param name="dicomPresentationImage">The target DICOM presentation image.</param>
            <returns>The DICOM graphics plane associated with the specified presentation image.</returns>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicsPlane.GetDicomGraphicsPlane(Macro.ImageViewer.IDicomPresentationImage,System.Boolean)">
            <summary>
            Gets the DICOM graphics plane of the specified DICOM presentation image.
            </summary>
            <param name="dicomPresentationImage">The target DICOM presentation image.</param>
            <param name="createIfNecessary">A value indicating if a DICOM graphics plane should be automatically created and associated with the presentation image.</param>
            <returns>The DICOM graphics plane associated with the specified presentation image, or null if one doesn't exist and was not created.</returns>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicsPlane.Shutters">
            <summary>
            Gets a collection of available shutters.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicsPlane.Layers">
            <summary>
            Gets a collection of available graphic layers.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicsPlane.ImageOverlays">
            <summary>
            Gets a collection of available overlays from the image SOP.
            </summary>
            <remarks>
            The indices of overlays in this collection are restricted to 0-15, representing the 16 available overlay plane groups.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicsPlane.PresentationOverlays">
            <summary>
            Gets a collection of available overlays from an associated presentation state SOP, if one exists.
            </summary>
            <remarks>
            The indices of overlays in this collection are restricted to 0-15, representing the 16 available overlay plane groups.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicsPlane.UserOverlays">
            <summary>
            Gets a collection of existing user-created overlays.
            </summary>
            <remarks>
            This collection gives client code a collection to insert any dynamically created overlay planes which may not necessarily
            have an assigned overlay plane group. During DICOM softcopy presentation state serialization, visible overlays in this collection
            will be given priority for serialization, since only 16 overlays can be serialized.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneOverlays">
            <summary>
            Represents a collection of overlay planes available on an image.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneOverlays.ActivateAsLayer(Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic,System.String)">
            <summary>
            Activates the specified overlay plane in the given layer.
            </summary>
            <param name="overlay">The overlay plane to activate. This overlay must be part of the collection.</param>
            <param name="layerId">The ID of the layer on which to activate the overlay plane.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="overlay"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="overlay"/> is not part of the collection.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneOverlays.ActivateAsLayer(System.Int32,System.String)">
            <summary>
            Activates the specified overlay plane in the given layer.
            </summary>
            <param name="index">The index of the overlay plane to activate.</param>
            <param name="layerId">The ID of the layer on which to activate the overlay plane.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of range.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneOverlays.ActivateAsShutter(Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic)">
            <summary>
            Activates the specified overlay plane as a bitmap display shutter.
            </summary>
            <param name="overlay">The overlay plane to activate. This overlay must be part of the collection.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="overlay"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="overlay"/> is not part of the collection.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneOverlays.ActivateAsShutter(System.Int32)">
            <summary>
            Activates the specified overlay plane as a bitmap display shutter.
            </summary>
            <param name="index">The index of the overlay plane to activate.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of range.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneOverlays.Deactivate(Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic)">
            <summary>
            Deactivates the specified overlay plane.
            </summary>
            <param name="overlay">The overlay plane to activate. This overlay must be part of the collection.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="overlay"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="overlay"/> is not part of the collection.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneOverlays.Deactivate(System.Int32)">
            <summary>
            Deactivates the specified overlay plane.
            </summary>
            <param name="index">The index of the overlay plane to activate.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of range.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneOverlays.Add(Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic)">
            <summary>
            Adds the specified overlay plane to the collection.
            </summary>
            <param name="overlay">The overlay plane to add to the collection. This overlay must not be a part of any other <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneOverlays"/> collection.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="overlay"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="overlay"/> is part of another <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneOverlays"/> collection.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneOverlays.Remove(Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic)">
            <summary>
            Removes the specified overlay plane from the collection.
            </summary>
            <param name="overlay">The overlay plane to remove from the collection. This overlay must be part of the collection.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="overlay"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="overlay"/> is not part of the collection.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneOverlays.Contains(System.Int32)">
            <summary>
            Checks if the specified overlay plane is part of the collection.
            </summary>
            <param name="index">The index of the overlay plane to check for.</param>
            <returns>True if the specified overlay plane is part of the collection; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneOverlays.Contains(Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic)">
            <summary>
            Checks if the specified overlay plane is part of the collection.
            </summary>
            <param name="overlay">The overlay plane to check for.</param>
            <returns>True if the specified overlay plane is part of the collection; False otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="overlay"/> is null.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneOverlays.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneOverlays.IsShutter(Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic)">
            <summary>
            Checks if the specified overlay plane is currently activated as a bitmap display shutter.
            </summary>
            <param name="overlay">The overlay plane to check for.</param>
            <returns>True if the specified overlay plane is activated as a bitmap display shutter; False otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="overlay"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="overlay"/> is not part of the collection.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneOverlays.IsLayer(Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic)">
            <summary>
            Checks if the specified overlay plane is currently activated on a layer.
            </summary>
            <param name="overlay">The overlay plane to check for.</param>
            <returns>True if the specified overlay plane is activated on a layer; False otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="overlay"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="overlay"/> is not part of the collection.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneOverlays.GetLayer(Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic)">
            <summary>
            Gets the ID of the layer on which the specified overlay plane is currently activated, if applicable.
            </summary>
            <param name="overlay">The overlay plane to check for.</param>
            <returns>The layer ID of the overlay plane to check for.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="overlay"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="overlay"/> is not part of the collection.</exception>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneOverlays.Item(System.Int32)">
            <summary>
            Gets the overlay plane at a specific index.
            </summary>
            <param name="index">The index of the overlay plane.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of range.</exception>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneOverlays.Count">
            <summary>
            Gets the number of overlay planes in the collection.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneLayers">
            <summary>
            Represents a collection of available DICOM graphic layers.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneLayers.Add(System.String)">
            <summary>
            Adds a layer with the specified ID.
            </summary>
            <param name="layerId">The ID of the layer.</param>
            <returns>The layer that was added.</returns>
            <exception cref="T:System.ArgumentException">Thrown if a layer with the same ID already exists.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneLayers.Insert(System.Int32,System.String)">
            <summary>
            Inserts a layer with the specified ID at the specified index.
            </summary>
            <param name="index">The index at which to insert the layer.</param>
            <param name="layerId">The ID of the layer.</param>
            <returns>The layer that was inserted.</returns>
            <exception cref="T:System.ArgumentException">Thrown if a layer with the same ID already exists.</exception>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneLayers.InactiveLayer">
            <summary>
            Gets the inactive layer.
            </summary>
            <remarks>
            The inactive layer is a special layer with an empty (0-length) <see cref="P:Macro.ImageViewer.PresentationStates.Dicom.ILayer.Id"/>.
            This layer is never shown in the scene graph, and <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>s can be moved here to disable their display.
            Alternatively, the <see cref="P:Macro.ImageViewer.Graphics.IGraphic.Visible"/> property can be set on individual objects,
            but certain DICOM objects (such as overlays from presentation states) require a layer to be
            explicitly identified and, if the identified layer is the 0-length ID, should be disabled.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneLayers.Item(System.String)">
            <summary>
            Gets the layer with the specified ID.
            </summary>
            <remarks>
            If a layer with the specified ID does not exist, it is automatically created and returned.
            </remarks>
            <param name="layerId">The ID of the layer.</param>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneLayers.Item(System.Int32)">
            <summary>
            Gets the layer at the specified index.
            </summary>
            <param name="index">The index of the layer.</param>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.Dicom.ILayer">
            <summary>
            Represents a single DICOM graphics layer.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.ILayer.Id">
            <summary>
            Gets the ID string of this layer.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.ILayer.Description">
            <summary>
            Gets or sets a textual description of this layer.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.ILayer.Visible">
            <summary>
            Gets or sets a value indicating that this layer is visible.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.ILayer.Owner">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicsPlane"/> to which this layer belongs.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.ILayer.Graphics">
            <summary>
            Gets a collection of graphics on this layer.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicsPlane.LayerGraphic.#ctor">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneShutters">
            <summary>
            Represents a collection of available display shutters.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneShutters.Activate(Macro.ImageViewer.PresentationStates.IShutterGraphic)">
            <summary>
            Activates the specified display shutter graphic.
            </summary>
            <param name="shutter">The display shutter to activate. This shutter must be a part of the collection.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="shutter"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="shutter"/> is not part of the collection.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneShutters.Activate(System.Int32)">
            <summary>
            Activates the specified display shutter graphic.
            </summary>
            <param name="index">The index of the display shutter to activate.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of range.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneShutters.ActivateFirst">
            <summary>
            Activates the first display shutter graphic in the collection.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneShutters.Deactivate(Macro.ImageViewer.PresentationStates.IShutterGraphic)">
            <summary>
            Deactivates the specified display shutter graphic.
            </summary>
            <param name="shutter">The display shutter to deactivate. This shutter must be a part of the collection.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="shutter"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="shutter"/> is not part of the collection.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneShutters.Deactivate(System.Int32)">
            <summary>
            Deactivates the specified display shutter graphic.
            </summary>
            <param name="index">The index of the display shutter to deactivate.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of range.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneShutters.DeactivateAll">
            <summary>
            Deactivates any and all active display shutter graphics.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneShutters.ActiveShutter">
            <summary>
            Gets the currently activate display shutter graphic.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneShutters.Item(System.Int32)">
            <summary>
            Gets the display shutter graphic at the specified index.
            </summary>
            <param name="index">The index of the display shutter to deactivate.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of range.</exception>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.IDicomGraphicsPlaneShutters.Enabled">
            <summary>
            Enables or disables all display shutters.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive">
            <summary>
            An <see cref="T:Macro.ImageViewer.Graphics.InvariantPrimitive"/> that can be described by a
            rectangular bounding box.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.Contains(System.Drawing.PointF)">
            <summary>
            Returns a value indicating whether the specified point is
            contained in the graphic.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.OnLocationChanged">
            <summary>
            Called when the value of <see cref="P:Macro.ImageViewer.Graphics.InvariantPrimitive.Location"/> changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.OnTopLeftChanged">
            <summary>
            Called when the value of <see cref="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.TopLeft"/> or <see cref="P:Macro.ImageViewer.Graphics.InvariantPrimitive.Location"/> changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.OnBottomRightChanged">
            <summary>
            Called when the value of <see cref="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.BottomRight"/> or <see cref="P:Macro.ImageViewer.Graphics.InvariantPrimitive.Location"/> changes.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.TopLeft">
            <summary>
            Gets the top left corner of the rectangle in either source or destination coordinates.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.InvariantTopLeft">
            <summary>
            Gets or sets the top left corner of the rectangle in <i>screen</i> pixels relative to 
            the anchor point.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.InvariantTopLeft"/> is different from <see cref="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.TopLeft"/> in that
            it is the top left corner of the rectangle in screen pixels where (0,0)
            is the anchor point. For example, if you wanted an
            invariant square of size 9x9 screen pixels and the anchor point is in the middle
            of the square, <see cref="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.InvariantTopLeft"/> would be (-4,-4) and 
            <see cref="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.InvariantBottomRight"/> would be (4,4).
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.BottomRight">
            <summary>
            Gets the bottom right corner of the rectangle in either source or destination coordinates.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.InvariantBottomRight">
            <summary>
            Gets or sets the bottom right corner of the rectangle in <i>screen</i> pixels relative to 
            the anchor point.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.InvariantBottomRight"/> is different from <see cref="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.BottomRight"/> in that
            it is the bottom right corner of the rectangle in screen pixels where (0,0)
            is the anchor point. For example, if you wanted an
            invariant square of size 9x9 screen pixels and the anchor point is in the middle
            of the square, <see cref="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.InvariantTopLeft"/> would be (-4,-4) and 
            <see cref="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.InvariantBottomRight"/> would be (4,4).
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.Width">
            <summary>
            Gets the width of the rectangle in either source or destination pixels.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination pixels.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.Height">
            <summary>
            Gets the height of the rectangle in either source or destination pixels.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.TopLeftChanged">
            <summary>
            Occurs when the value of <see cref="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.TopLeft"/> changes.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.BottomRightChanged">
            <summary>
            Occurs when the value of <see cref="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.BottomRight"/> changes.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.BoundingBox">
            <summary>
            Gets the tightest bounding box that encloses the graphic in either source or destination coordinates.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.Rectangle">
            <summary>
            Gets the rectangle that defines a <see cref="T:Macro.ImageViewer.Graphics.BoundableGraphic"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.InvariantArcPrimitive">
            <summary>
            An arc <see cref="T:Macro.ImageViewer.Graphics.InvariantPrimitive"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.IArcGraphic">
            <summary>
            Defines an arc graphic.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IArcGraphic.StartAngle">
            <summary>
            Gets or sets the angle at which the arc begins.
            </summary>
            <remarks>
            It is good practice to set the <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.StartAngle"/> before the <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.SweepAngle"/>
            because in the case where a graphic is scaled differently in x than in y, the conversion
            of the <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.SweepAngle"/> from <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Source"/> to
            <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Destination"/> coordinates is dependent upon the <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.StartAngle"/>.
            However, under normal circumstances, where the scale in x and y are the same, the <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.StartAngle"/>
            and <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.SweepAngle"/> can be set independently.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IArcGraphic.SweepAngle">
            <summary>
            Gets or sets the angle that the arc sweeps out.
            </summary>
            <remarks>
            See <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.StartAngle"/> for information on setting the <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.SweepAngle"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantArcPrimitive.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.InvariantArcPrimitive"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantArcPrimitive.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit test on the <see cref="T:Macro.ImageViewer.Graphics.InvariantArcPrimitive"/> at a given point.
            </summary>
            <param name="point">The mouse position in destination coordinates.</param>
            <returns>
            <b>True</b> if <paramref name="point"/> "hits" the <see cref="T:Macro.ImageViewer.Graphics.InvariantArcPrimitive"/>,
            <b>false</b> otherwise.
            </returns>
            <remarks>
            A "hit" is defined as when the mouse position is <see cref="F:Macro.ImageViewer.Graphics.VectorGraphic.HitTestDistance"/>
            screen pixels away from any point on the arc.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantArcPrimitive.GetClosestPoint(System.Drawing.PointF)">
            <summary>
            Gets the point on the <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> closest to the specified point.
            </summary>
            <param name="point">A point in either source or destination coordinates.</param>
            <returns>The point on the graphic closest to the given <paramref name="point"/>.</returns>
            <remarks>
            <para>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>,
            the computation will be carried out in either source
            or destination coordinates.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantArcPrimitive.Contains(System.Drawing.PointF)">
            <summary>
            Returns a value indicating whether the specified point is
            contained in the graphic.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantArcPrimitive.StartAngle">
            <summary>
            Gets or sets the angle in degrees at which the arc begins.
            </summary>
            <remarks>
            It is good practice to set the <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.StartAngle"/> before the <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.SweepAngle"/>
            because in the case where a graphic is scaled differently in x than in y, the conversion
            of the <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.SweepAngle"/> from <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Source"/> to
            <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Destination"/> coordinates is dependent upon the <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.StartAngle"/>.
            However, under normal circumstances, where the scale in x and y are the same, the <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.StartAngle"/>
            and <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.SweepAngle"/> can be set independently.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantArcPrimitive.SweepAngle">
            <summary>
            Gets or sets the angle in degrees that the arc sweeps out.
            </summary>
            <remarks>
            See <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.StartAngle"/> for information on setting the <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.SweepAngle"/>.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.GeometricShuttersGraphic">
            <summary>
            A display shutter graphic consisting of a combination of a circular, rectangular, and polygonal shutter.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.IShutterGraphic">
            <summary>
            Defines properties to control the presentation display of a graphic which may be used as a display shutter.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.IShutterGraphic.PresentationValue">
            <summary>
            Gets or sets the 16-bit grayscale presentation value which should replace the shuttered pixels.
            </summary>
            <remarks>
            The display of shuttered pixels is no longer defined by the data source but is now
            implementation specific. The <see cref="P:Macro.ImageViewer.PresentationStates.IShutterGraphic.PresentationValue"/> and <see cref="P:Macro.ImageViewer.PresentationStates.IShutterGraphic.PresentationColor"/>
            properties allows this display to be customized by client code.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.IShutterGraphic.PresentationColor">
            <summary>
            Gets or sets the presentation color which should replace the shuttered pixels.
            </summary>
            <remarks>
            The display of shuttered pixels is no longer defined by the data source but is now
            implementation specific. The <see cref="P:Macro.ImageViewer.PresentationStates.IShutterGraphic.PresentationValue"/> and <see cref="P:Macro.ImageViewer.PresentationStates.IShutterGraphic.PresentationColor"/>
            properties allows this display to be customized by client code.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.GeometricShuttersGraphic.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.PresentationStates.GeometricShuttersGraphic"/> with the specified dimensions.
            </summary>
            <param name="rows">The number of rows in the display shutter.</param>
            <param name="columns">The number of columns in the display shutter.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.GeometricShuttersGraphic.#ctor(Macro.ImageViewer.PresentationStates.GeometricShuttersGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.GeometricShuttersGraphic.OnDrawing">
            <summary>
            Fires the <see cref="E:Macro.ImageViewer.Graphics.Graphic.Drawing"/> event.  Should be called by an <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/>
            for each object just before it is drawn/rendered, hence the reason it is public.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.GeometricShuttersGraphic.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.Graphics.CompositeGraphic"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.GeometricShuttersGraphic.DicomShutters">
            <summary>
            Gets a readonly collection of the <see cref="T:Macro.ImageViewer.PresentationStates.GeometricShutter"/>s.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.GeometricShuttersGraphic.CustomShutters">
            <summary>
            Gets a list of custom display shutters.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.GeometricShuttersGraphic.FillColor">
            <summary>
            Gets or sets the presentation color which should replace the shuttered pixels.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.GeometricShuttersGraphic.Macro#ImageViewer#PresentationStates#IShutterGraphic#PresentationValue">
            <summary>
            Gets or sets the 16-bit grayscale presentation value which should replace the shuttered pixels.
            </summary>
            <remarks>
            The display of shuttered pixels is no longer defined by the data source but is now
            implementation specific. The <see cref="P:Macro.ImageViewer.PresentationStates.IShutterGraphic.PresentationValue"/> and <see cref="P:Macro.ImageViewer.PresentationStates.IShutterGraphic.PresentationColor"/>
            properties allows this display to be customized by client code.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.GeometricShuttersGraphic.Macro#ImageViewer#PresentationStates#IShutterGraphic#PresentationColor">
            <summary>
            Gets or sets the presentation color which should replace the shuttered pixels.
            </summary>
            <remarks>
            The display of shuttered pixels is no longer defined by the data source but is now
            implementation specific. The <see cref="P:Macro.ImageViewer.PresentationStates.IShutterGraphic.PresentationValue"/> and <see cref="P:Macro.ImageViewer.PresentationStates.IShutterGraphic.PresentationColor"/>
            properties allows this display to be customized by client code.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.LinearRoi">
            <summary>
            Represents a static, linear region of interest for the purposes of computing statistics on the pixels along the length.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.Roi">
            <summary>
            Represents a static region of interest for the purposes of computing statistics on the contained pixels.
            </summary>
            <remarks>
            <para>
            <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/> objects are static definitions of a region of interest on a particular image. Its
            shape definition and the underlying pixel values are considered fixed upon construction, and hence its
            various properties and statistics are non-changing.
            </para>
            <para>
            New instances of a <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/> should be constructed everytime the definition of the region of
            interest or the underlying image pixel data has changed. The <see cref="M:Macro.ImageViewer.Graphics.IGraphic.GetRoi"/>
            method allows client code to quickly construct a new instance of a <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/> based on the current
            definition of the graphic and the image it currently belongs to.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Roi.#ctor(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Constructs a new region of interest, specifying an <see cref="T:Macro.ImageViewer.IPresentationImage"/> as the source of the pixel data.
            </summary>
            <param name="presentationImage">The image containing the source pixel data.</param>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Roi.GetBoundingBoxRounded(System.Boolean)">
            <summary>
            Returns a bounding box that has been rounded to the nearest whole pixel(s).
            </summary>
            <remarks>
            Uses <see cref="M:Macro.ImageViewer.Mathematics.RectangleUtilities.RoundInflate(System.Drawing.RectangleF)"/> to ensure the bounding box
            returned will encompass every pixel that is inside the ROI.
            </remarks>
            <param name="constrainToImage">Whether or not the returned rectangle should also be constrained to the image bounds.</param>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Roi.ComputeBounds">
            <summary>
            Called by <see cref="P:Macro.ImageViewer.RoiGraphics.Roi.BoundingBox"/> to compute the tightest bounding box of the region of interest.
            </summary>
            <remarks>
            <para>This method is only called once and the result is cached for future accesses.</para>
            <para>
            Regions of interest have no notion of coordinate system. All coordinates are inherently
            given relative to the image pixel space (i.e. <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Source"/>.)
            </para>
            </remarks>
            <returns>A rectangle defining the bounding box.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Roi.CopyTo(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Creates a copy of this <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/> using the same region of interest shape but using a different image as the source pixel data.
            </summary>
            <param name="presentationImage">The image upon which to copy this region of interest.</param>
            <returns>A new <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/> of the same type and shape as the current region of interest.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Roi.Contains(System.Drawing.PointF)">
            <summary>
            Tests to see if the given point is contained within the region of interest.
            </summary>
            <remarks>
            Regions of interest have no notion of coordinate system. All coordinates are inherently
            given relative to the image pixel space (i.e. <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Source"/>.)
            </remarks>
            <param name="point">The point to test.</param>
            <returns>True if the point is defined as within the region of interest; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Roi.Contains(System.Single,System.Single)">
            <summary>
            Tests to see if the given point is contained within the region of interest.
            </summary>
            <remarks>
            Regions of interest have no notion of coordinate system. All coordinates are inherently
            given relative to the image pixel space (i.e. <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Source"/>.)
            </remarks>
            <param name="x">The X-coordinate of the point to test.</param>
            <param name="y">The Y-coordinate of the point to test.</param>
            <returns>True if the point is defined as within the region of interest; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Roi.Contains(System.Int32,System.Int32)">
            <summary>
            Tests to see if the given point is contained within the region of interest.
            </summary>
            <remarks>
            Regions of interest have no notion of coordinate system. All coordinates are inherently
            given relative to the image pixel space (i.e. <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Source"/>.)
            </remarks>
            <param name="x">The X-coordinate of the point to test.</param>
            <param name="y">The Y-coordinate of the point to test.</param>
            <returns>True if the point is defined as within the region of interest; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Roi.GetPixelCoordinates">
            <summary>
            Gets an enumeration of the coordinates of points contained within the region of interest.
            </summary>
            <remarks>
            Regions of interest have no notion of coordinate system. All coordinates are inherently
            given relative to the image pixel space (i.e. <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Source"/>.)
            </remarks>
            <returns>An enumeration of points.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Roi.GetRawPixelValues">
            <summary>
            Gets an enumeration of the raw pixel values contained within the region of interest.
            </summary>
            <returns>An enumeration of raw pixel values.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Roi.GetPixelValues">
            <summary>
            Gets an enumeration of the modality LUT transformed pixel values contained within the region of interest.
            </summary>
            <remarks>
            If the <see cref="P:Macro.ImageViewer.RoiGraphics.Roi.ModalityLut"/> is null, then this method enumerates the same values as <see cref="M:Macro.ImageViewer.RoiGraphics.Roi.GetRawPixelValues"/>.
            </remarks>
            <returns>An enumeration of modality LUT transformed pixel values.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Roi.ValidateUnits(Macro.ImageViewer.RoiGraphics.Units,Macro.Dicom.Iod.PixelSpacing)">
            <summary>
            Checks if operations in the given <paramref name="units"/> are possible with the <paramref name="pixelSpacing"/> information available.
            </summary>
            <returns>True if such operations are valid; False if no such operation is possible.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Roi.ConvertFromSquarePixels(System.Double,Macro.ImageViewer.RoiGraphics.Units,Macro.Dicom.Iod.PixelSpacing)">
            <summary>
            Converts an area in pixels into the given units given some particular pixel spacing.
            </summary>
            <param name="area">The area of pixels to be converted.</param>
            <param name="units">The units into which the area should be converted.</param>
            <param name="pixelSpacing">The pixel spacing information available.</param>
            <returns>The equivalent area in the units of <paramref name="units"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="units"/> is a physical unit of measurement and <paramref name="pixelSpacing"/> is not calibrated.</exception>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Roi.IsBoundingBoxInImage">
            <summary>
            Checks whether or not the region of interest's bounding box intersects the image.
            </summary>
            <returns>True if the bounding box intersects the image; False otherwise.</returns>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.Roi.PresentationImage">
            <summary>
             Gets the presentation image from which the ROI was created.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.Roi.ImageRows">
            <summary>
            Gets the number of rows in the entire image.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.Roi.ImageColumns">
            <summary>
            Gets the number of columns in the entire image.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.Roi.ImageSize">
            <summary>
            Gets the pixel dimensions of the image.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.Roi.PixelData">
            <summary>
            Gets the pixel data of the image.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.Roi.PixelAspectRatio">
            <summary>
            Gets the pixel aspect ratio of the image.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.Roi.NormalizedPixelSpacing">
            <summary>
            Gets the normalized pixel spacing of the image.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.Roi.ModalityLut">
            <summary>
            Gets the modality LUT of the image, if one exists.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.Roi.ModalityLutUnits">
            <summary>
            Gets the units of the modality LUT output of the image.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.Roi.SubnormalModalityLut">
            <summary>
            Gets a value indicating whether or not the modality LUT is subnormal (i.e. the modality LUT output all map to a single distinct value).
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.Roi.Modality">
            <summary>
            Gets the modality of the image.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.Roi.BoundingBox">
            <summary>
            Gets the tightest bounding box containing the region of interest.
            </summary>
            <remarks>
            Regions of interest have no notion of coordinate system. All coordinates are inherently
            given relative to the image pixel space (i.e. <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Source"/>.)
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.Roi.ContainsPixelData">
            <summary>
            Tests to see whether or not the region of interest actual contains any pixel data.
            </summary>
            <returns>True if the region of interest contains pixel data; False otherwise..</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.LinearRoi.#ctor(System.Drawing.PointF,System.Drawing.PointF,Macro.ImageViewer.IPresentationImage)">
            <summary>
            Constructs a new linear region of interest.
            </summary>
            <param name="point1">The first end point of the line.</param>
            <param name="point2">The second end point of the line.</param>
            <param name="presentationImage">The image containing the source pixel data.</param>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.LinearRoi.#ctor(System.Collections.Generic.IEnumerable{System.Drawing.PointF},Macro.ImageViewer.IPresentationImage)">
            <summary>
            Constructs a new linear region of interest.
            </summary>
            <param name="points">The end points of the line.</param>
            <param name="presentationImage">The image containing the source pixel data.</param>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.LinearRoi.#ctor(Macro.ImageViewer.Graphics.IPointsGraphic)">
            <summary>
            Constructs a new linear region of interest, specifying an <see cref="T:Macro.ImageViewer.Graphics.IPointsGraphic"/> as the source of the definition and pixel data.
            </summary>
            <param name="polyline">The linear graphic that represents the region of interest.</param>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.LinearRoi.ComputeBounds">
            <summary>
            Called by <see cref="P:Macro.ImageViewer.RoiGraphics.Roi.BoundingBox"/> to compute the tightest bounding box of the region of interest.
            </summary>
            <remarks>
            <para>This method is only called once and the result is cached for future accesses.</para>
            <para>
            Regions of interest have no notion of coordinate system. All coordinates are inherently
            given relative to the image pixel space (i.e. <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Source"/>.)
            </para>
            </remarks>
            <returns>A rectangle defining the bounding box.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.LinearRoi.CopyTo(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Creates a copy of this <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/> using the same region of interest shape but using a different image as the source pixel data.
            </summary>
            <param name="presentationImage">The image upon which to copy this region of interest.</param>
            <returns>A new <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/> of the same type and shape as the current region of interest.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.LinearRoi.Contains(System.Drawing.PointF)">
            <summary>
            Tests to see if the given point is contained within the region of interest.
            </summary>
            <remarks>
            Regions of interest have no notion of coordinate system. All coordinates are inherently
            given relative to the image pixel space (i.e. <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Source"/>.)
            </remarks>
            <param name="point">The point to test.</param>
            <returns>True if the point is defined as within the region of interest; False otherwise.</returns>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.LinearRoi.Points">
            <summary>
            Gets the points that define the linear region of interest.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.LinearRoi.Units">
            <summary>
            Gets or sets the units of area with which to compute the value of <see cref="P:Macro.ImageViewer.RoiGraphics.IRoiAreaProvider.Area"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.LinearRoi.IsCalibrated">
            <summary>
            Gets a value indicating that the image has pixel spacing information or has
            previously been calibrated with physical dimensions.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.LinearRoi.Length">
            <summary>
            Gets the length of the region of interest in units of length as specified by <see cref="P:Macro.ImageViewer.RoiGraphics.IRoiLengthProvider.Units"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">If <see cref="P:Macro.ImageViewer.RoiGraphics.IRoiLengthProvider.Units"/> is a physical
            unit of measurement and the image has no pixel spacing information, nor has it been calibrated.</exception>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic">
            <summary>
            An standard, stateful interactive graphic that consists of some subject of interest graphic
            and a <see cref="T:Macro.ImageViewer.InteractiveGraphics.ICalloutGraphic">text callout</see> that describes the subject.
            </summary>
            <remarks>
            <para>
            <see cref="T:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic"/> essentially acts as a template for any kind
            of interactive graphic defining some object of interest. The subject of interest
            can be any graphic primitive such as a <see cref="T:Macro.ImageViewer.Graphics.LinePrimitive">line</see>, a
            <see cref="T:Macro.ImageViewer.Graphics.RectanglePrimitive">rectangle</see>, an <see cref="T:Macro.ImageViewer.Graphics.EllipsePrimitive">ellipse</see>,
            etc., or some hierarchy of <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/>s decorating a primitive graphic.
            </para>
            <para>
            By default, the callout line will snap to the nearest point on the <see cref="P:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Subject"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic">
            <summary>
            An interactive graphic that adds a standard set of states to a subject graphic, making it an <see cref="T:Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic">
            <summary>
            An interactive graphic that adds statefulness to the subject graphic.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic">
            <summary>
            Base class for implementations of <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/>.
            </summary>
            <remarks>
            A <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> can be used on it's own where one is required,
            but you essentially want one that does nothing.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.DecoratorCompositeGraphic">
            <summary>
            Base class for <see cref="T:Macro.ImageViewer.Graphics.IDecoratorGraphic"/> implementations.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.IDecoratorGraphic">
            <summary>
            Defines <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>s which follow the <i>decorator pattern</i> to provide
            modify and/or add functionality to an existing <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IDecoratorGraphic.DecoratedGraphic">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> decorated by this graphic.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.DecoratorCompositeGraphic.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.Graphics.DecoratorCompositeGraphic"/>.
            </summary>
            <param name="graphic">The graphic to be decorated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="graphic"/> is null.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.DecoratorCompositeGraphic.#ctor(Macro.ImageViewer.Graphics.DecoratorCompositeGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.DecoratorCompositeGraphic.GetRoi">
            <summary>
            Gets an object describing the region of interest on the <see cref="P:Macro.ImageViewer.Graphics.Graphic.ParentPresentationImage"/> selected by the <see cref="P:Macro.ImageViewer.Graphics.DecoratorCompositeGraphic.DecoratedGraphic"/>.
            </summary>
            <remarks>
            Decorated graphics that do not describe a region of interest may return null.
            </remarks>
            <returns>A <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/> describing this region of interest, or null if the decorated graphic does not describe a region of interest.</returns>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.DecoratorCompositeGraphic.Macro#ImageViewer#Graphics#IDecoratorGraphic#DecoratedGraphic">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> decorated by this graphic.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.DecoratorCompositeGraphic.DecoratedGraphic">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> decorated by this graphic.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic">
            <summary>
            Defines a graphic that decorates an <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> with user interaction
            components controlling an underlying graphic in the scene graph.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.IExportedActionsProvider">
            <summary>
            Defines a method to get exported <see cref="T:Macro.Desktop.Actions.IAction"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.IExportedActionsProvider.GetExportedActions(System.String,Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Gets a set of exported <see cref="T:Macro.Desktop.Actions.IAction"/>s.
            </summary>
            <remarks>
            This mechanism is useful when a particular component defines generally useful <see cref="T:Macro.Desktop.Actions.IAction"/>s
            without requiring specific knowledge of the action model sites that the client code uses.
            </remarks>
            <param name="site">The action model site at which the actions should reside.</param>
            <param name="mouseInformation">The mouse input when the action model was requested, such as in response to a context menu request.</param>
            <returns>A set of exported <see cref="T:Macro.Desktop.Actions.IAction"/>s.</returns>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.IControlGraphic.Subject">
            <summary>
            Gets the subject graphic that this graphic controls.
            </summary>
            <remarks>
            The controlled graphic is the first non-decorator graphic in the
            control graphics chain (the first graphic that doesn't implement
            <see cref="T:Macro.ImageViewer.Graphics.IDecoratorGraphic"/> when recursively following the
            <see cref="P:Macro.ImageViewer.Graphics.IDecoratorGraphic.DecoratedGraphic"/> property.)
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.IControlGraphic.Color">
            <summary>
            Gets or sets the color of the control graphic.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.IControlGraphic.Show">
            <summary>
            Gets or sets a value to show or hide this control graphic without affecting the
            visibility of the underlying subject or other control graphics.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs a new control graphic to control the given subject graphic.
            </summary>
            <param name="subject">The graphic to control.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.#ctor(Macro.ImageViewer.InteractiveGraphics.ControlGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.OnColorChanged">
            <summary>
            Called when the <see cref="P:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Color"/> property changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.OnShowChanged">
            <summary>
            Called when the <see cref="P:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Show"/> property changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.GetCursorToken(System.Drawing.Point)">
            <summary>
            Called by <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> in response to the framework requesting the cursor token for a particular screen coordinate via <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.GetCursorToken(System.Drawing.Point)"/>.
            </summary>
            <param name="point">The screen coordinate for which the cursor is requested.</param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Start(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> in response to a mouse button click via <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Start(Macro.ImageViewer.InputManagement.IMouseInformation)"/>.
            </summary>
            <param name="mouseInformation">The mouse input information.</param>
            <returns>True if the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> did something as a result of the call and hence would like to receive capture; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Track(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> in response to the framework tracking mouse input via <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Track(Macro.ImageViewer.InputManagement.IMouseInformation)"/>.
            </summary>
            <param name="mouseInformation">The mouse input information.</param>
            <returns>True if the message was handled; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> in response a mouse button release via <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)"/>.
            </summary>
            <param name="mouseInformation">The mouse input information.</param>
            <returns>True if the framework should <b>not</b> release capture; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Cancel">
            <summary>
            Called by <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> in response to an attempt to cancel the current operation via <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Cancel"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Macro#ImageViewer#InputManagement#ICursorTokenProvider#GetCursorToken(System.Drawing.Point)">
            <summary>
            Gets the cursor token to be shown at the current mouse position.
            </summary>
            <remarks>
            The <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> implementation returns the the cursor token
            provided by the current input handler, <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.GetCursorToken(System.Drawing.Point)"/>, or any
            child graphics implementing <see cref="T:Macro.ImageViewer.InputManagement.ICursorTokenProvider"/>,
            in decreasing order of priority.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Macro#ImageViewer#InputManagement#IMouseButtonHandler#Start(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by the framework each time a mouse button is pressed.
            </summary>
            <remarks>
            <para>
            As a general rule, if the <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> object did anything as a result of this call, it must 
            return true.  If false is returned, <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Start(Macro.ImageViewer.InputManagement.IMouseInformation)"/> is called on other <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/>s
            until one returns true.
            </para>
            <para>
            The <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> implementation finds a handler by trying <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Start(Macro.ImageViewer.InputManagement.IMouseInformation)"/>,
            and any child graphics implementing <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/>, in decreasing order of priority.
            </para>
            </remarks>
            <param name="mouseInformation">The mouse input information.</param>
            <returns>True if the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> did something as a result of the call and hence would like to receive capture; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Macro#ImageViewer#InputManagement#IMouseButtonHandler#Track(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by the framework when the mouse has moved.
            </summary>
            <remarks>
            <para>
            A button does not necessarily have to be down for this message to be called.  The framework can
            call it any time the mouse moves.
            </para>
            <para>
            The <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> implementation calls <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Track(Macro.ImageViewer.InputManagement.IMouseInformation)"/> on
            the current handler, <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Track(Macro.ImageViewer.InputManagement.IMouseInformation)"/>, or any child graphics implementing <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/>,
            in decreasing order of priority.
            </para>
            </remarks>
            <param name="mouseInformation">The mouse input information.</param>
            <returns>True if the message was handled; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Macro#ImageViewer#InputManagement#IMouseButtonHandler#Stop(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by the framework when the mouse button is released.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> implementation calls <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)"/> on
            the current handler, <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)"/>, or any child graphics implementing <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/>,
            in decreasing order of priority.
            </para>
            </remarks>
            <param name="mouseInformation">The mouse input information.</param>
            <returns>True if the framework should <b>not</b> release capture; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Macro#ImageViewer#InputManagement#IMouseButtonHandler#Cancel">
            <summary>
            Called by the framework to let <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> perform any necessary cleanup 
            when capture is going to be forcibly released.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> implementation calls <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Cancel"/> on
            the current handler or <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Cancel"/> in decreasing order of priority.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.GetExportedActions(System.String,Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Gets a set of exported <see cref="T:Macro.Desktop.Actions.IAction"/>s.
            </summary>
            <remarks>
            <para>
            This mechanism is useful when a particular component defines generally useful <see cref="T:Macro.Desktop.Actions.IAction"/>s
            without requiring specific knowledge of the action model sites that the client code uses.
            </para>
            <para>
            Overriding implementations should generally call the base implementation and invoke a <see cref="M:Macro.Desktop.Actions.IActionSet.Union(Macro.Desktop.Actions.IActionSet)"/>
            with any new actions the derived class wishes to provide in order to maintain full functionality of any
            control graphics further down in the chain.
            </para>
            </remarks>
            <param name="site">The action model site at which the actions should reside.</param>
            <param name="mouseInformation">The mouse input when the action model was requested, such as in response to a context menu request.</param>
            <returns>A set of exported <see cref="T:Macro.Desktop.Actions.IAction"/>s.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.AddToCommandHistory``1(``0,System.Object,System.Object)">
            <summary>
            Helper method to add the operation of an <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> implementing <see cref="T:Macro.Desktop.IMemorable"/> to the associated command history.
            </summary>
            <typeparam name="T">The derived type of <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/>. Must implement <see cref="T:Macro.Desktop.IMemorable"/>.</typeparam>
            <param name="originator">The <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> that performed the operation.</param>
            <param name="beginState">The memento created by <see cref="M:Macro.Desktop.IMemorable.CreateMemento"/> before the operation.</param>
            <param name="endState">The memento created by <see cref="M:Macro.Desktop.IMemorable.CreateMemento"/> after the operation.</param>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Subject">
            <summary>
            Gets the subject graphic that this graphic controls.
            </summary>
            <remarks>
            The controlled graphic is the first non-decorator graphic in the
            control graphics chain (the first graphic that doesn't implement
            <see cref="T:Macro.ImageViewer.Graphics.IDecoratorGraphic"/> when recursively following the
            <see cref="P:Macro.ImageViewer.Graphics.IDecoratorGraphic.DecoratedGraphic"/> property.)
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.CommandName">
            <summary>
            Gets a string that describes the type of control operation that this graphic provides.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Color">
            TODO (CR Oct 2011): This doesn't work when chaining graphics together.
            <summary>
            Gets or sets the color of the control graphic.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Show">
            <summary>
            Gets or sets a value to show or hide this control graphic without affecting the
            visibility of the underlying subject or other control graphics.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.LastTrackedPosition">
            <summary>
            Gets the last tracked cursor position in source or destination coordinates.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.IsTracking">
            <summary>
            Gets a value indicating whether or not the control graphic is currently tracking mouse input.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Behaviour">
            <summary>
            Gets the desired behaviour of this mouse input handler.
            </summary>
            <remarks>
            The default implementation returns the behaviour of the lowest control
            graphic in the control chain, or <see cref="F:Macro.ImageViewer.InputManagement.MouseButtonHandlerBehaviour.None"/>
            if this graphic is the lowest in the control chain.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.#ctor(Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.OnStateInitialized">
            <summary>
            Called when the value of <see cref="P:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.State"/> is initialized for the first time.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.OnStateChanged(Macro.ImageViewer.InteractiveGraphics.GraphicStateChangedEventArgs)">
            <summary>
            Called when the value of <see cref="P:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.State"/> changes.
            </summary>
            <param name="e">An object containing data describing the specific state change.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.Start(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by the framework each time a mouse button is pressed.
            </summary>
            <remarks>
            As a general rule, if the <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> object did anything as a result of this call, it must 
            return true.  If false is returned, <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Start(Macro.ImageViewer.InputManagement.IMouseInformation)"/> is called on other <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/>s
            until one returns true.
            </remarks>
            <returns>
            True if the <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> did something as a result of the call, 
            and hence would like to receive capture.  Otherwise, false.
            </returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.Track(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by the framework when the mouse has moved.
            </summary>
            <remarks>
            A button does not necessarily have to be down for this message to be called.  The framework can
            call it any time the mouse moves.
            </remarks>
            <returns>True if the message was handled, otherwise false.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by the framework when the mouse button is released.
            </summary>
            <returns>
            True if the framework should <b>not</b> release capture, otherwise false.
            </returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.Cancel">
            <summary>
            Called by the framework to let <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> perform any necessary cleanup 
            when capture is going to be forcibly released.
            </summary>
            <remarks>
            It is important that this method is implemented correctly and doesn't simply do nothing when it is inappropriate
            to do so, otherwise odd behaviour may be experienced.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.State">
            <summary>
            Gets or sets the current <see cref="T:Macro.ImageViewer.InteractiveGraphics.GraphicState"/>.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.StateChanged">
            <summary>
            Occurs when the value of <see cref="P:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.State"/> has changed.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.Behaviour">
            <summary>
            Allows the <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> to override certain default framework behaviour.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic">
            <summary>
            Defines a stateful graphic with a number of standard states.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic.CreateInactiveState">
            <summary>
            Creates an inactive <see cref="T:Macro.ImageViewer.InteractiveGraphics.GraphicState"/> for the current graphic.
            </summary>
            <returns>An inactive <see cref="T:Macro.ImageViewer.InteractiveGraphics.GraphicState"/> for the current graphic.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic.CreateFocussedState">
            <summary>
            Creates a focussed <see cref="T:Macro.ImageViewer.InteractiveGraphics.GraphicState"/> for the current graphic.
            </summary>
            <returns>An inactive <see cref="T:Macro.ImageViewer.InteractiveGraphics.GraphicState"/> for the current graphic.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic.CreateSelectedState">
            <summary>
            Creates a selected <see cref="T:Macro.ImageViewer.InteractiveGraphics.GraphicState"/> for the current graphic.
            </summary>
            <returns>An inactive <see cref="T:Macro.ImageViewer.InteractiveGraphics.GraphicState"/> for the current graphic.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic.CreateFocussedSelectedState">
            <summary>
            Creates a focussed and selected <see cref="T:Macro.ImageViewer.InteractiveGraphics.GraphicState"/> for the current graphic.
            </summary>
            <returns>An inactive <see cref="T:Macro.ImageViewer.InteractiveGraphics.GraphicState"/> for the current graphic.</returns>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.ISelectableGraphic">
            <summary>
            Provides selection support.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ISelectableGraphic.Selected">
            <summary>
            Gets or set a value indicating whether the <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> is selected.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.IFocussableGraphic">
            <summary>
            Provides focus support.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IFocussableGraphic.Focussed">
            <summary>
            Gets or set a value indicating whether the <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> is in focus.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.DefaultFocusColor">
            <summary>
            Gets the default value of <see cref="P:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.FocusColor"/>.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.DefaultFocusSelectedColor">
            <summary>
            Gets the default value of <see cref="P:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.FocusSelectedColor"/>.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.DefaultSelectedColor">
            <summary>
            Gets the default value of <see cref="P:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.SelectedColor"/>.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.DefaultInactiveColor">
            <summary>
            Gets the default value of <see cref="P:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.InactiveColor"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs a new instance of <see cref="T:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.#ctor(Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.OnStateInitialized">
            <summary>
            Called when the value of <see cref="P:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.State"/> is initialized for the first time.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.OnStateChanged(Macro.ImageViewer.InteractiveGraphics.GraphicStateChangedEventArgs)">
            <summary>
            Called when the value of <see cref="P:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.State"/> changes.
            </summary>
            <param name="e">An object containing data describing the specific state change.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.OnEnterInactiveState(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called then the graphic <see cref="P:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.State"/> enters the inactive state.
            </summary>
            <param name="mouseInformation">Information about the current mouse input.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.OnEnterFocusState(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called then the graphic <see cref="P:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.State"/> enters the focused state.
            </summary>
            <param name="mouseInformation">Information about the current mouse input.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.OnEnterSelectedState(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called then the graphic <see cref="P:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.State"/> enters the selected state.
            </summary>
            <param name="mouseInformation">Information about the current mouse input.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.OnEnterFocusSelectedState(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called then the graphic <see cref="P:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.State"/> enters the selected and focused state.
            </summary>
            <param name="mouseInformation">Information about the current mouse input.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.CreateInactiveState">
            <summary>
            Creates an inactive <see cref="T:Macro.ImageViewer.InteractiveGraphics.GraphicState"/> for the current graphic.
            </summary>
            <returns>An inactive <see cref="T:Macro.ImageViewer.InteractiveGraphics.GraphicState"/> for the current graphic.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.CreateFocussedState">
            <summary>
            Creates a focussed <see cref="T:Macro.ImageViewer.InteractiveGraphics.GraphicState"/> for the current graphic.
            </summary>
            <returns>An inactive <see cref="T:Macro.ImageViewer.InteractiveGraphics.GraphicState"/> for the current graphic.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.CreateSelectedState">
            <summary>
            Creates a selected <see cref="T:Macro.ImageViewer.InteractiveGraphics.GraphicState"/> for the current graphic.
            </summary>
            <returns>An inactive <see cref="T:Macro.ImageViewer.InteractiveGraphics.GraphicState"/> for the current graphic.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.CreateFocussedSelectedState">
            <summary>
            Creates a focussed and selected <see cref="T:Macro.ImageViewer.InteractiveGraphics.GraphicState"/> for the current graphic.
            </summary>
            <returns>An inactive <see cref="T:Macro.ImageViewer.InteractiveGraphics.GraphicState"/> for the current graphic.</returns>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.FocusColor">
            <summary>
            Gets or sets the color in which to display the graphic when the <see cref="P:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.State"/> is <see cref="T:Macro.ImageViewer.InteractiveGraphics.FocussedGraphicState"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.SelectedColor">
            <summary>
            Gets or sets the color in which to display the graphic when the <see cref="P:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.State"/> is <see cref="T:Macro.ImageViewer.InteractiveGraphics.SelectedGraphicState"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.FocusSelectedColor">
            <summary>
            Gets or sets the color in which to display the graphic when the <see cref="P:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.State"/> is <see cref="T:Macro.ImageViewer.InteractiveGraphics.FocussedSelectedGraphicState"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.InactiveColor">
            <summary>
            Gets or sets the color in which to display the graphic when the <see cref="P:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.State"/> is <see cref="T:Macro.ImageViewer.InteractiveGraphics.InactiveGraphicState"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.Selected">
            <summary>
            Gets or set a value indicating whether the <see cref="T:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic"/> is selected.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic.Focussed">
            <summary>
            Gets or set a value indicating whether the <see cref="T:Macro.ImageViewer.InteractiveGraphics.StandardStatefulGraphic"/> is in focus.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.IContextMenuProvider">
            <summary>
            A provider of an <see cref="T:Macro.Desktop.Actions.ActionModelNode"/> that is returned based on the current state of the mouse.
            </summary>
            <remarks>
            <para>
            The framework will look for this interface on graphic objects (<see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>) 
            in the current <see cref="T:Macro.ImageViewer.IPresentationImage"/>'s SceneGraph (see <see cref="P:Macro.ImageViewer.PresentationImage.SceneGraph"/>) when the mouse 
            is right-clicked.  If a non-empty <see cref="T:Macro.Desktop.Actions.ActionModelNode"/> is returned, a context menu will be shown in the <see cref="T:Macro.ImageViewer.ITile"/>.
            </para>
            <para>
            A context menu can also be invoked from within a tool (for example) by calling <see cref="M:Macro.ImageViewer.ITile.ShowContextMenu(System.Nullable{System.Drawing.Point},Macro.Desktop.Actions.ActionModelNode)"/>. For this
            reason, it is important to check that the input mouse coordinate is appropriate when deciding whether or not to return
            a non-empty <see cref="T:Macro.Desktop.Actions.ActionModelNode"/>.
            </para>
            </remarks>
            <seealso cref="T:Macro.ImageViewer.ITile"/>
            <seealso cref="T:Macro.ImageViewer.InputManagement.IMouseInformation"/>
            <seealso cref="T:Macro.Desktop.Actions.ActionModelNode"/>
            <seealso cref="T:Macro.Desktop.Actions.IAction"/>
            <seealso cref="T:Macro.ImageViewer.IPresentationImage"/>
            <seealso cref="P:Macro.ImageViewer.PresentationImage.SceneGraph"/>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.IContextMenuProvider.GetContextMenuModel(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Gets the context menu <see cref="T:Macro.Desktop.Actions.ActionModelNode"/> based on the current state of the mouse.
            </summary>
            <remarks>
            Because the context menu can be invoked at any time via <see cref="M:Macro.ImageViewer.ITile.ShowContextMenu(System.Nullable{System.Drawing.Point},Macro.Desktop.Actions.ActionModelNode)"/>,
            implementors of this method should check the <see cref="P:Macro.ImageViewer.InputManagement.IMouseInformation.Location"/> property
            of the input <paramref name="mouseInformation"/> when deciding whether or not to return
            a non-empty <see cref="T:Macro.Desktop.Actions.ActionModelNode"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic.#ctor(Macro.ImageViewer.Graphics.IGraphic,Macro.ImageViewer.InteractiveGraphics.IAnnotationCalloutLocationStrategy)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic"/> with the given <see cref="T:Macro.ImageViewer.InteractiveGraphics.IAnnotationCalloutLocationStrategy"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic.#ctor(Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic.Refresh">
            <summary>
            Refreshes the annotation graphic by recomputing the callout position and redrawing the graphic.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic.CreateCalloutGraphic">
            <summary>
            Called by <see cref="T:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic"/> to create the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ICalloutGraphic"/> to be used by this annotation.
            </summary>
            <remarks>
            <para>The default implementation creates a plain <see cref="T:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic"/> with no text and which is not user-modifiable.</para>
            <para>Subclasses can override this method to provide callouts with automatically computed text content or which is user-interactive.</para>
            </remarks>
            <returns>The <see cref="T:Macro.ImageViewer.InteractiveGraphics.ICalloutGraphic"/> to be used.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic.RecomputeCalloutLine">
            <summary>
            Forces a recomputation of the callout line.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic.Suspend">
            <summary>
            Temporarily suspends recomputation of the annotation in response to
            property change events on the <see cref="P:Macro.ImageViewer.InteractiveGraphics.IControlGraphic.Subject"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic.Resume(System.Boolean)">
            <summary>
            Resumes recomputation of the annotation in response to
            property change events on the <see cref="P:Macro.ImageViewer.InteractiveGraphics.IControlGraphic.Subject"/>.
            </summary>
            <param name="notifyNow">True if the recomputation is to be carried out immediately.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic.OnSubjectChanged">
            <summary>
            Called when properties on the <see cref="P:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Subject"/> have changed.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic.GetExportedActions(System.String,Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Gets a set of exported <see cref="T:Macro.Desktop.Actions.IAction"/>s.
            </summary>
            <param name="site">The action model site at which the actions should reside.</param>
            <param name="mouseInformation">The mouse input when the action model was requested, such as in response to a context menu request.</param>
            <returns>A set of exported <see cref="T:Macro.Desktop.Actions.IAction"/>s.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic.GetContextMenuModel(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Gets the context menu <see cref="T:Macro.Desktop.Actions.ActionModelNode"/> based on the current state of the mouse.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic.Callout">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ICalloutGraphic"/> associated with the subject of interest..
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic.ContextMenuNamespace">
            <summary>
            Gets the namespace with which to qualify the action model site of any context menus on this graphic.
            </summary>
            <remarks>
            <para>The default implementation uses the fully qualified name of the <see cref="T:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic"/> type as a namespace.</para>
            <para>An implementation of <see cref="T:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic"/> can override this property to specify that an alternate action model be used instead.</para>
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.IDicomVoiLutsProvider">
            <summary>
            Defines a property to get a collection of DICOM-defined VOI LUTs from the image header and/or any associated presentation state.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IDicomVoiLutsProvider.DicomVoiLuts">
            <summary>
            Gets a collection of DICOM-defined VOI LUTs from the image header and/or any associated presentation state.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.IDicomVoiLuts">
            <summary>
            Defines properties to get the various DICOM-defined VOI LUTs from the image header and/or any associated presentation state.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IDicomVoiLuts.ImageVoiLinearLuts">
            <summary>
            Gets a list of linear VOI LUTs (i.e. value windows) defined in the image header.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IDicomVoiLuts.ImageVoiDataLuts">
            <summary>
            Gets a list of data VOI LUTs defined in the image header.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IDicomVoiLuts.ImageSopInstanceUid">
            <summary>
            Gets the SOP instance UID of the image.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IDicomVoiLuts.ImageSopFrameNumber">
            <summary>
            Gets the frame number of the frame associated with the image.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IDicomVoiLuts.PresentationVoiLinearLuts">
            <summary>
            Gets a list of linear VOI LUTs (i.e. value windows) defined in the presentation state.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IDicomVoiLuts.PresentationVoiDataLuts">
            <summary>
            Gets a list of data VOI LUTs defined in the presentation state.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IDicomVoiLuts.PresentationStateSopInstanceUid">
            <summary>
            Gets the SOP instance UID of the presentation state.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.PolylineGraphic">
            <summary>
            A polyline graphic.
            </summary>
            <remarks>
            A polyline is specified by a series of <i>n</i> anchor points, which
            are connected with a series of <i>n-1</i> line segments.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.IPointsGraphic">
            <summary>
            Defines an <see cref="T:Macro.ImageViewer.Graphics.IVectorGraphic"/> that can be described as an ordered list of independent points.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IPointsGraphic.Points">
            <summary>
            Gets the ordered list of points that defines the graphic.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PolylineGraphic.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.PolylineGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PolylineGraphic.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.PolylineGraphic"/>.
            </summary>
            <param name="roiClosedOnly">
            True if this graphic should only be treated as a
            closed polygon for the purposes of ROI computation
            (<seealso cref="M:Macro.ImageViewer.Graphics.PolylineGraphic.GetRoi"/>).
            </param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PolylineGraphic.#ctor(Macro.ImageViewer.Graphics.PolylineGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PolylineGraphic.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit test on the polyline.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PolylineGraphic.Move(System.Drawing.SizeF)">
            <summary>
            Moves the <see cref="T:Macro.ImageViewer.Graphics.CompositeGraphic"/> by a specified delta.
            </summary>
            <param name="delta">The distance to move.</param>
            <remarks>
            Depending on the value of <see cref="T:Macro.ImageViewer.Graphics.CoordinateSystem"/>,
            <paramref name="delta"/> will be interpreted in either source
            or destination coordinates.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PolylineGraphic.GetClosestPoint(System.Drawing.PointF)">
            <summary>
            Gets the point on the <see cref="T:Macro.ImageViewer.Graphics.CompositeGraphic"/> closest to the specified point.
            </summary>
            <param name="point">A point in either source or destination coordinates.</param>
            <returns>The point on the graphic closest to the given <paramref name="point"/>.</returns>
            <remarks>
            <para>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>,
            the computation will be carried out in either source
            or destination coordinates.</para>
            <para>Calling <see cref="M:Macro.ImageViewer.Graphics.CompositeGraphic.GetClosestPoint(System.Drawing.PointF)"/> will recursively call <see cref="M:Macro.ImageViewer.Graphics.CompositeGraphic.GetClosestPoint(System.Drawing.PointF)"/>
            on <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> objects in the subtree and return the closest result.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PolylineGraphic.GetRoi">
            <summary>
            Gets an object describing the region of interest on the <see cref="P:Macro.ImageViewer.Graphics.Graphic.ParentPresentationImage"/> selected by this <see cref="T:Macro.ImageViewer.Graphics.Graphic"/>.
            </summary>
            <remarks>
            Graphic objects that do not describe a region of interest may return null.
            </remarks>
            <returns>A <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/> describing this region of interest, or null if the graphic does not describe a region of interest.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PolylineGraphic.OnColorChanged">
            <summary>
            Called when the value of the <see cref="P:Macro.ImageViewer.Graphics.PolylineGraphic.Color"/> property changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PolylineGraphic.OnLineStyleChanged">
            <summary>
            Called when the value of the <see cref="P:Macro.ImageViewer.Graphics.PolylineGraphic.LineStyle"/> property changes.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.PolylineGraphic.Color">
            <summary>
            Gets or sets the colour of the <see cref="T:Macro.ImageViewer.Graphics.PolylineGraphic"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.PolylineGraphic.LineStyle">
            <summary>
            Gets or sets the line style of the <see cref="T:Macro.ImageViewer.Graphics.PolylineGraphic"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.PolylineGraphic.RoiClosedOnly">
            <summary>
            Gets or sets a value indicating that the <see cref="M:Macro.ImageViewer.Graphics.PolylineGraphic.GetRoi"/> method
            should assume the shape should always be a closed polygon.
            </summary>
            <remarks>
            If True, then <see cref="M:Macro.ImageViewer.Graphics.PolylineGraphic.GetRoi"/> will only ever return
            <see cref="T:Macro.ImageViewer.RoiGraphics.PolygonalRoi"/> objects (or null, if the shape is not a closed polygon).
            If False, then the method will return <see cref="T:Macro.ImageViewer.RoiGraphics.PolygonalRoi"/> or <see cref="T:Macro.ImageViewer.RoiGraphics.LinearRoi"/>
            depending on the current shape (or null, if the shape is neither a closed polygon nor
            a line).
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.PolylineGraphic.Points">
            <summary>
            Gets the vertices of the polyline.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.PolylineGraphic.BoundingBox">
            <summary>
            Gets the tightest bounding box that encloses all the bounding boxes of the child graphics in either source or destination coordinates.
            </summary>
            <remarks>
            <para><see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this property is in source or destination coordinates.</para>
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.FlashOverlayController">
            <summary>
            Controller for generating colour <see cref="T:Macro.ImageViewer.Graphics.ImageGraphic"/>s that flash up on an
            <see cref="T:Macro.ImageViewer.IPresentationImage"/>'s overlay and disappear shortly thereafter.
            </summary>
            <example lang="CS">
            <![CDATA[
            FlashOverlayController controller = new FlashOverlayController("Icons.CreateKeyImageToolLarge.png", new ResourceResolver(this.GetType(), false));
            controller.Flash(base.SelectedPresentationImage);
            ]]>
            </example>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.FlashOverlayController.#ctor">
            <summary>
            Constructs a default controller.
            </summary>
            <remarks>
            If a base class uses this form of the constructor then it must also override
            the <see cref="M:Macro.ImageViewer.Graphics.FlashOverlayController.GetPixelData"/>, <see cref="P:Macro.ImageViewer.Graphics.FlashOverlayController.Rows"/> and <see cref="P:Macro.ImageViewer.Graphics.FlashOverlayController.Columns"/> virtual members.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.FlashOverlayController.#ctor(Macro.ImageViewer.Imaging.ColorPixelData)">
            <summary>
            Constructs a controller that uses a 32-bit colour ARGB image specified by the provided pixel data.
            </summary>
            <param name="colorPixelData">The 32-bit colour ARGB pixel data.</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.FlashOverlayController.#ctor(System.String,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Constructs a controller that uses the 32-bit colour ARGB bitmap specified by the resource name and resource resolver.
            </summary>
            <param name="resourceName">The partially or fully qualified name of the resource to access.</param>
            <param name="resourceResolver">A resource resolver for the resource.</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.FlashOverlayController.GetPixelData">
            <summary>
            Gets the pixel data of the flash overlay in 32-bit ARGB format.
            </summary>
            <returns>An ARGB byte array.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.FlashOverlayController.Flash(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Flashes the overlay on the specified image.
            </summary>
            <param name="image">The image on which to display the overlay. The image must implement <see cref="T:Macro.ImageViewer.Graphics.IOverlayGraphicsProvider"/>.</param>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.FlashOverlayController.Rows">
            <summary>
            Gets the number of rows in the flash overlay.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.FlashOverlayController.Columns">
            <summary>
            Gets the number of columns in the flash overlay.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.FlashOverlayController.FlashSpeed">
            <summary>
            Gets or sets the delay time of the flash overlay in milliseconds.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.ColorImageGraphic">
            <summary>
            An image where pixel values are ARGB.
            </summary>
            <remarks>
            A typical usage of this class is overlaying
            colour regions on a grayscale image to highlight areas of interest.
            Note that you can control not just the colour, but also the 
            opacity (i.e. alpha) of each pixel.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.ImageGraphic">
            <summary>
            An image <see cref="T:Macro.ImageViewer.Graphics.Graphic"/>.
            </summary>
            <remarks>
            The derived classes <see cref="T:Macro.ImageViewer.Graphics.GrayscaleImageGraphic"/> and 
            <see cref="T:Macro.ImageViewer.Graphics.ColorImageGraphic"/> represent the two basic types of
            2D images in the framework.
            
            An <see cref="T:Macro.ImageViewer.Graphics.ImageGraphic"/> is always a leaf in the scene graph.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ImageGraphic.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.ImageGraphic"/>
            with the specified image parameters.
            </summary>
            <param name="rows"></param>
            <param name="columns"></param>
            <param name="bitsPerPixel">Can be 8 or 16 in the case of
            grayscale images, or 32 for multichannel colour images.</param>
            <remarks>
            Creates an empty image of a specific size and bit depth.
            All all entries in the byte buffer are set to zero. Useful as
            a canvas on which pixels can be set by the client.
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="rows"/> or
            <paramref name="columns"/> is negative, or <paramref name="bitsPerPixel"/>
            is not one of 8, 16 or 32.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ImageGraphic.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.ImageGraphic"/>
            with the specified image parameters.
            </summary>
            <param name="rows"></param>
            <param name="columns"></param>
            <param name="bitsPerPixel">Can be 8 or 16 in the case of
            grayscale images, or 32 for multichannel colour images.</param>
            <param name="pixelData"></param>
            <remarks>
            Creates an image using existing pixel data.
            </remarks>
            <exception cref="T:System.NullReferenceException"><paramref name="pixelData"/> is <b>null</b></exception>
            <exception cref="T:System.ArgumentException"><paramref name="rows"/> or
            <paramref name="columns"/> is negative, or <paramref name="bitsPerPixel"/>
            is not one of 8, 16 or 32.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ImageGraphic.#ctor(System.Int32,System.Int32,System.Int32,Macro.ImageViewer.Imaging.PixelDataGetter)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.ImageGraphic"/>
            with the specified image parameters.
            </summary>
            <param name="rows"></param>
            <param name="columns"></param>
            <param name="bitsPerPixel">Can be 8 or 16 in the case of
            grayscale images, or 32 for multichannel colour images.</param>
            <param name="pixelDataGetter"></param>
            <remarks>
            Creates an image using existing pixel data but does so
            without ever storing a reference to the pixel data. This is necessary
            to ensure that pixel data can be properly garbage collected in
            any future memory management schemes.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ImageGraphic.#ctor(Macro.ImageViewer.Graphics.ImageGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ImageGraphic.CreatePixelDataWrapper">
            <summary>
            Creates an object that encapsulates the pixel data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ImageGraphic.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit test on the <see cref="T:Macro.ImageViewer.Graphics.ImageGraphic"/> at a given point.
            </summary>
            <param name="point">The mouse position in destination coordinates.</param>
            <returns><b>True</b> if <paramref name="point"/> is within the boundaries
            of the image, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ImageGraphic.GetClosestPoint(System.Drawing.PointF)">
            <summary>
            Gets the point on the <see cref="T:Macro.ImageViewer.Graphics.ImageGraphic"/> closest to the specified point.
            </summary>
            <param name="point">A point in either source or destination coordinates.</param>
            <returns>The point on the graphic closest to the given <paramref name="point"/>.</returns>
            <remarks>
            <para>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>,
            the computation will be carried out in either source
            or destination coordinates.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ImageGraphic.Move(System.Drawing.SizeF)">
            <summary>
            Moves the <see cref="T:Macro.ImageViewer.Graphics.ImageGraphic"/> by a specified delta.
            </summary>
            <param name="delta">The distance to move.</param>
            <remarks>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>,
            <paramref name="delta"/> will be interpreted in either source
            or destination coordinates.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ImageGraphic.Rows">
            <summary>
            Gets the number of rows in the image.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ImageGraphic.Columns">
            <summary>
            Gets the number of columns in the image.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ImageGraphic.BitsPerPixel">
            <summary>
            Gets the number of bits per pixel.
            </summary>
            <remarks>In the case of <see cref="T:Macro.ImageViewer.Graphics.GrayscaleImageGraphic"/>, this
            property will always have a value of 8 or 16, whereas in the
            case of <see cref="T:Macro.ImageViewer.Graphics.ColorImageGraphic"/>, it will always have
            a value of 32 (ARGB).</remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ImageGraphic.BytesPerPixel">
            <summary>
            Gets the number of bytes per pixel.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ImageGraphic.IsDoubleWordAligned">
            <summary>
            Gets a value indicating whether image is aligned on a 4-byte boundary
            </summary>
            <remarks>Bitmaps in Windows need to be aligned on a 4-byte boundary.  
            That is, the width of an image must be divisible by 4.</remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ImageGraphic.SizeInPixels">
            <summary>
            Gets the size of the image in pixels.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ImageGraphic.SizeInBytes">
            <summary>
            Gets the size of the image in bytes.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ImageGraphic.DoubleWordAlignedColumns">
            <summary>
            Gets the number of columns when the image has been aligned on a 4-byte boundary.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ImageGraphic.InterpolationMode">
            <summary>
            Gets the current interpolation method.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ImageGraphic.PixelData">
            <summary>
            Gets an object that encapsulates the pixel data.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ImageGraphic.BoundingBox">
            <summary>
            Gets the tightest bounding box that encloses the graphic in either source or destination coordinates.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ImageGraphic.PixelDataRaw">
            <summary>
            Gets or sets the raw raw pixel data.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ImageGraphic.PixelDataGetter">
            <summary>
            Gets or sets the pixel data delegate.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.IVoiLutInstaller">
            <summary>
            Interface to an entity responsible for managing installation of VOI LUTs.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IVoiLutInstaller.InstallVoiLut(Macro.ImageViewer.Imaging.IVoiLut)">
            <summary>
            Installs a new Voi Lut.
            </summary>
            <param name="voiLut">The Lut to be installed.</param>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IVoiLutInstaller.VoiLut">
            <summary>
            Gets the currently installed Voi Lut.
            </summary>
            <returns>The Voi Lut as an <see cref="T:Macro.ImageViewer.Imaging.IVoiLut"/>.</returns>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IVoiLutInstaller.Invert">
            <summary>
            Gets or sets whether the output of the VOI LUT should be inverted for display.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IVoiLutInstaller.DefaultInvert">
            <summary>
            Gets the default value of <see cref="P:Macro.ImageViewer.Imaging.IVoiLutInstaller.Invert"/>.  In DICOM, this would be true
            for all MONOCHROME1 images.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorImageGraphic.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.ColorImageGraphic"/>
            with the specified image parameters.
            </summary>
            <param name="rows"></param>
            <param name="columns"></param>
            <remarks>
            Creates an empty colour image of a specific size.
            By default, all pixels are set to ARGB=(0,0,0,0) (i.e.,
            transparent). 
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorImageGraphic.#ctor(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.ColorImageGraphic"/>
            with the specified image parameters.
            </summary>
            <param name="rows"></param>
            <param name="columns"></param>
            <param name="pixelData">The pixel data in ARGB format.</param>
            <remarks>
            Creates a colour image using existing pixel data.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorImageGraphic.#ctor(System.Int32,System.Int32,Macro.ImageViewer.Imaging.PixelDataGetter)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.ColorImageGraphic"/>
            with the specified image parameters.
            </summary>
            <param name="rows"></param>
            <param name="columns"></param>
            <param name="pixelDataGetter"></param>
            <remarks>
            Creates a grayscale image using existing pixel data but does so
            without ever storing a reference to the pixel data. This is necessary
            to ensure that pixel data can be properly garbage collected in
            any future memory management schemes.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorImageGraphic.#ctor(Macro.ImageViewer.Graphics.ColorImageGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorImageGraphic.Dispose(System.Boolean)">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern
            </summary>
            <param name="disposing">True if this object is being disposed, false if it is being finalized</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorImageGraphic.CreatePixelDataWrapper">
            <summary>
            Creates an object that encapsulates the pixel data.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ColorImageGraphic.VoiLutsEnabled">
            <summary>
            Gets or sets a value indicating whether the LUT should be used in rendering this graphic.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ColorImageGraphic.VoiLutFactory">
            <summary>
            Gets or sets the VOI LUT factory for this <see cref="T:Macro.ImageViewer.Graphics.ColorImageGraphic"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ColorImageGraphic.Invert">
            <summary>
            Gets or sets a value indicating whether or not the image should be inverted.
            </summary>
            <remarks>
            Inversion is equivalent to polarity.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ColorImageGraphic.DefaultInvert">
            <summary>
            Gets the default value of <see cref="P:Macro.ImageViewer.Graphics.ColorImageGraphic.Invert"/>.  In DICOM, this would be true
            for all MONOCHROME1 images.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ColorImageGraphic.PixelData">
            <summary>
            Gets an object that encapsulates the pixel data.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ColorImageGraphic.VoiLutManager">
            <summary>
            Retrieves this image's <see cref="T:Macro.ImageViewer.Imaging.IVoiLutManager"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ColorImageGraphic.VoiLut">
            <summary>
            Gets or sets the LUT used to select and rescale values of interest in the color pixel data <b>on a per-channel basis</b>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ColorImageGraphic.OutputLut">
            <summary>
            The output lut composed of all LUTs in the pipeline.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.ColorImageGraphic.Luts">
            <summary>
            We only support VOI LUTs right now, but theoretically we
            can implement ICC Profiles with an "ICC Transform LUT"
            after the VOI.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Graphics.ColorImageGraphic.Luts.Voi">
            <summary>
            This LUT is initially a <see cref="T:Macro.ImageViewer.Imaging.IdentityVoiLinearLut"/>,
            but may be replaced by W/L tools with something else, such as
            <see cref="T:Macro.ImageViewer.Imaging.BasicVoiLutLinear"/>
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.IDicomImageSetDescriptor">
            <summary>
            Definition of an <see cref="T:Macro.ImageViewer.IImageSetDescriptor"/> whose contents are based on
            a DICOM Study.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.IImageSetDescriptor">
            <summary>
            Definition of an object that describes the contents of an <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageSetDescriptor.ImageSet">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.IImageSet"/> that this object describes.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageSetDescriptor.Name">
            <summary>
            Gets the descriptive name of the <see cref="T:Macro.ImageViewer.IImageSet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageSetDescriptor.PatientInfo">
            <summary>
            Gets a description of the patient whose images are contained in the <see cref="T:Macro.ImageViewer.IImageSet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageSetDescriptor.Uid">
            <summary>
            Gets a unique identifier for the <see cref="T:Macro.ImageViewer.IImageSet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IDicomImageSetDescriptor.SourceStudy">
            <summary>
            Gets the <see cref="T:Macro.Dicom.ServiceModel.Query.IStudyRootStudyIdentifier"/> for the DICOM study from which
            the <see cref="T:Macro.ImageViewer.IImageSet"/> was created.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.DicomImageSetDescriptor">
            <summary>
            Implementation of <see cref="T:Macro.ImageViewer.IDicomImageSetDescriptor"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.ImageSetDescriptor">
            <summary>
            Abstract base implementation of <see cref="T:Macro.ImageViewer.IImageSetDescriptor"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageSetDescriptor.#ctor">
            <summary>
            Protected constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageSetDescriptor.ToString">
            <summary>
            Gets a text description of this <see cref="T:Macro.ImageViewer.IImageSetDescriptor"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageSetDescriptor.ImageSet">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.IImageSet"/> that this object describes.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageSetDescriptor.Name">
            <summary>
            Gets the descriptive name of the <see cref="T:Macro.ImageViewer.IImageSet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageSetDescriptor.PatientInfo">
            <summary>
            Gets a description of the patient whose images are contained in the <see cref="T:Macro.ImageViewer.IImageSet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageSetDescriptor.Uid">
            <summary>
            Gets a unique identifier for the <see cref="T:Macro.ImageViewer.IImageSet"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DicomImageSetDescriptor.#ctor(Macro.Dicom.ServiceModel.Query.IStudyRootStudyIdentifier)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DicomImageSetDescriptor.#ctor(Macro.Dicom.ServiceModel.Query.IStudyRootStudyIdentifier,Macro.ImageViewer.Common.IDicomServiceNode,System.Exception)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DicomImageSetDescriptor.GetName">
            <summary>
            Gets the descriptive name of the <see cref="T:Macro.ImageViewer.IImageSet"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DicomImageSetDescriptor.GetPatientInfo">
            <summary>
            Gets a description of the patient whose images are contained in the <see cref="T:Macro.ImageViewer.IImageSet"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DicomImageSetDescriptor.GetUid">
            <summary>
            Gets a unique identifier for the <see cref="T:Macro.ImageViewer.IImageSet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DicomImageSetDescriptor.SourceStudy">
            <summary>
            Gets the <see cref="T:Macro.Dicom.ServiceModel.Query.IStudyRootStudyIdentifier"/> for the DICOM study from which
            the <see cref="T:Macro.ImageViewer.IImageSet"/> was created.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DicomImageSetDescriptor.Name">
            <summary>
            Gets the descriptive name of the <see cref="T:Macro.ImageViewer.IImageSet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DicomImageSetDescriptor.PatientInfo">
            <summary>
            Gets a description of the patient whose images are contained in the <see cref="T:Macro.ImageViewer.IImageSet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DicomImageSetDescriptor.Uid">
            <summary>
            Gets a unique identifier for the <see cref="T:Macro.ImageViewer.IImageSet"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.BasicImageSetDescriptor">
            <summary>
            Default implementation of <see cref="T:Macro.ImageViewer.IImageSetDescriptor"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BasicImageSetDescriptor.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BasicImageSetDescriptor.Name">
            <summary>
            Gets the descriptive name of the <see cref="T:Macro.ImageViewer.IImageSet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BasicImageSetDescriptor.PatientInfo">
            <summary>
            Gets a description of the patient whose images are contained in the <see cref="T:Macro.ImageViewer.IImageSet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BasicImageSetDescriptor.Uid">
            <summary>
            Gets a unique identifier for the <see cref="T:Macro.ImageViewer.IImageSet"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.ImageBoxDrawingEventArgs">
            <summary>
            Provides data for the <see cref="E:Macro.ImageViewer.EventBroker.ImageBoxSelected"/> event.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageBoxDrawingEventArgs.ImageBox">
            <summary>
            Gets the selected <see cref="T:Macro.ImageViewer.IImageBox"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.WeightedWindowPrefetchingStrategy">
            <summary>
            A base implementation for an <see cref="T:Macro.ImageViewer.StudyManagement.IPrefetchingStrategy"/> based on a window of frames around a visible frame,
            with preference given to selected and unselected <see cref="T:Macro.ImageViewer.IImageBox"/>es depending on a weighting factor.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.PrefetchingStrategy">
            <summary>
            Abstract base class for <see cref="T:Macro.ImageViewer.StudyManagement.IPrefetchingStrategy"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.IPrefetchingStrategy">
            <summary>
            Defines a pixel data prefetching strategy.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.IPrefetchingStrategy.Start(Macro.ImageViewer.IImageViewer)">
            <summary>
            Starts prefetching pixel data in the background for the images
            that have already been added into <paramref name="imageViewer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.IPrefetchingStrategy.Stop">
            <summary>
            Stops prefetching of pixel data in the background.
            </summary>
            <remarks>
            Implementers should ensure that all background threads have terminated
            before this method returns.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.IPrefetchingStrategy.Name">
            <summary>
            Gets the friendly name of the prefetching strategy.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.IPrefetchingStrategy.Description">
            <summary>
            Gets the friendly description of the prefetching strategy.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.PrefetchingStrategy.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.StudyManagement.PrefetchingStrategy"/> with the given <paramref name="name"/>
            and <paramref name="description"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.PrefetchingStrategy.Start">
            <summary>
            Starts prefetching.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.PrefetchingStrategy.Stop">
            <summary>
            Stops prefetching.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.PrefetchingStrategy.ImageViewer">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.IImageViewer"/> for which data is to be prefetched.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.PrefetchingStrategy.Name">
            <summary>
            Gets the friendly name of the prefetching strategy.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.PrefetchingStrategy.Description">
            <summary>
            Gets the friendly description of the prefetching strategy.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.WeightedWindowPrefetchingStrategy.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">A unique name for the strategy, normally corresponding to the name of the parent <see cref="T:Macro.ImageViewer.StudyManagement.IStudyLoader"/>.</param>
            <param name="description">An informative description.</param>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.WeightedWindowPrefetchingStrategy.#ctor(Macro.ImageViewer.StudyManagement.ICorePrefetchingStrategy,System.String,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:Macro.ImageViewer.StudyManagement.WeightedWindowPrefetchingStrategy"/>.
            </summary>
            <param name="coreStrategy">The core prefetching strategy used to load images.</param>
            <param name="name">The name of the <see cref="T:Macro.ImageViewer.StudyManagement.IPrefetchingStrategy"/>.</param>
            <param name="description">The description of the <see cref="T:Macro.ImageViewer.StudyManagement.IPrefetchingStrategy"/>.</param>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.WeightedWindowPrefetchingStrategy.Enabled">
            <summary>
            Gets or sets a value indicating whether or not the strategy is enabled.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if an attempt was made to set the property when the strategy has already been started.</exception>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.WeightedWindowPrefetchingStrategy.RetrievalThreadPriority">
            <summary>
            Gets or sets the priority of the threads to be used for frame pixel data retrieval.
            </summary>
            <remarks>It is strongly recommended that <see cref="F:System.Threading.ThreadPriority.AboveNormal"/> and <see cref="F:System.Threading.ThreadPriority.Highest"/> not be used.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if an attempt was made to set the property when the strategy has already been started.</exception>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.WeightedWindowPrefetchingStrategy.DecompressionThreadPriority">
            <summary>
            Gets or sets the priority of the threads to be used for frame pixel data compression.
            </summary>
            <remarks>It is strongly recommended that <see cref="F:System.Threading.ThreadPriority.AboveNormal"/> and <see cref="F:System.Threading.ThreadPriority.Highest"/> not be used.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if an attempt was made to set the property when the strategy has already been started.</exception>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.WeightedWindowPrefetchingStrategy.RetrievalThreadConcurrency">
            <summary>
            Gets or sets the number of concurrent threads to be used for frame pixel data retrieval. Valid range is 1 or more.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if an attempt was made to set the property to an invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if an attempt was made to set the property when the strategy has already been started.</exception>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.WeightedWindowPrefetchingStrategy.DecompressionThreadConcurrency">
            <summary>
            Gets or sets the number of concurrent threads to be used for frame pixel data decompression. Valid range is 0 or more.
            </summary>
            <remarks>Setting the thread concurrency to 0 effectively means that decompression will not be done ahead of time.</remarks>
            <exception cref="T:System.ArgumentException">Thrown if an attempt was made to set the property to an invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if an attempt was made to set the property when the strategy has already been started.</exception>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.WeightedWindowPrefetchingStrategy.FrameLookAheadCount">
            <summary>
            Gets or sets the number of frames to process in advance. Valid range is 0 or more.
            </summary>
            <remarks>
            <para>The look-ahead is performed in both directions from the currently selected frame. The maximum possible window size would thus be 2 times the look-ahead size.</para>
            <para>Setting the look-ahead size to null specifies an infinite look-ahead scope.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if an attempt was made to set the property to an invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if an attempt was made to set the property when the strategy has already been started.</exception>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.WeightedWindowPrefetchingStrategy.SelectedImageBoxWeight">
            <summary>
            Gets or sets the relative weighting given to loading frames in the selected <see cref="T:Macro.ImageViewer.IImageBox"/>. Valid range is 1 or more.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if an attempt was made to set the property to an invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if an attempt was made to set the property when the strategy has already been started.</exception>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.WeightedWindowPrefetchingStrategy.UnselectedImageBoxWeight">
            <summary>
            Gets or sets the relative weighting given to loading frames in unselected <see cref="T:Macro.ImageViewer.IImageBox"/>. Valid range is 0 or more.
            </summary>
            <remarks>Setting the relative weight to 0 effectively means that only frames in the selected <see cref="T:Macro.ImageViewer.IImageBox"/> will be preloaded.</remarks>
            <exception cref="T:System.ArgumentException">Thrown if an attempt was made to set the property to an invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if an attempt was made to set the property when the strategy has already been started.</exception>
        </member>
        <member name="P:Macro.ImageViewer.Services.ServiceControlSettings.ServiceName">
            <summary>
            The name of the workstation service, as it would appear in the Service Control Manager.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.IHpLayoutDefinitionContext.PrimaryStudy">
            <summary>
            Gets the primary study.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.IHpLayoutDefinitionContext.StudyTree">
            <summary>
            Gets the study tree.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.IHpLayoutDefinitionContext.LogicalWorkspace">
            <summary>
            Gets the relevant logical workspace.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.IHpLayoutDefinitionContext.PhysicalWorkspace">
            <summary>
            Gets the relevant physical workspace.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.IHpImageBoxDefinitionContext.DisplaySetCaptured">
            <summary>
            Gets whether or not the display set itself was successfully captured.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.IHpImageBoxDefinitionContext.ImageBox">
            <summary>
            Gets the relevant image box.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Layout.IHpImageBoxDefinitionContributor">
            <summary>
            Defines the interface to an "imagebox definition" contributor.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Layout.IHpContributor">
            <summary>
            Defines the base interface to an HP "contributor".  A contributor is an object that contributes
            to a hanging protocol.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Layout.IHpSerializableElement">
            <summary>
            Defines the interface to an object that is serializable as part of a hanging protocol.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Layout.IHpSerializableElement.GetState">
            <summary>
            Gets the state to be saved in the HP.
            </summary>
            <returns>An instance of a data-contract class - see <see cref="T:Macro.ImageViewer.Layout.HpDataContractAttribute"/></returns>
        </member>
        <member name="M:Macro.ImageViewer.Layout.IHpSerializableElement.SetState(System.Object)">
            <summary>
            Populates this element's state from a saved HP.
            </summary>
            <param name="state">An instance of a data-contract class - see <see cref="T:Macro.ImageViewer.Layout.HpDataContractAttribute"/></param>
        </member>
        <member name="M:Macro.ImageViewer.Layout.IHpContributor.GetProperties">
            <summary>
            Called by the user-interface to obtain the set of properties that can be edited by the user.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macro.ImageViewer.Layout.IHpContributor.ContributorId">
            <summary>
            Gets a GUID identifying this class of contributor (must return a constant value) for serialization purposes.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.IHpContributor.Name">
            <summary>
            Gets a friendly name for the contributor that could be shown to the user, if needed.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.IHpContributor.Description">
            <summary>
            Gets a friendly description for the contributor that could be shown to the user, if needed.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.IHpContributor.RequiresPatientHistory">
            <summary>
            Gets a value indicating whether this contributor requires the patient history (prior studies)
            to be loaded.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Layout.IHpImageBoxDefinitionContributor.Capture(Macro.ImageViewer.Layout.IHpImageBoxDefinitionContext)">
            <summary>
            Captures the state from the specified context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Macro.ImageViewer.Layout.IHpImageBoxDefinitionContributor.ApplyTo(Macro.ImageViewer.Layout.IHpImageBoxDefinitionContext)">
            <summary>
            Applies the state to the specified context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.MammographyImageSpatialTransform">
            <summary>
            A custom <see cref="T:Macro.ImageViewer.Graphics.SpatialTransform"/> for mammography images.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.ImageSpatialTransform">
            <summary>
            An image specific <see cref="T:Macro.ImageViewer.Graphics.SpatialTransform"/>.
            </summary>
            <remarks>
            This <see cref="T:Macro.ImageViewer.Graphics.SpatialTransform"/> centers an image in a <see cref="T:Macro.ImageViewer.Tile"/>
            and provides <see cref="P:Macro.ImageViewer.Graphics.ImageSpatialTransform.ScaleToFit"/> functionality.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.SpatialTransform">
            <summary>
            Implements a 2D affine transformation
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.ISpatialTransform">
            <summary>
            Defines a 2D spatial transformation.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ISpatialTransform.FlipX">
            <summary>
            Gets or sets a value indicating that the object is flipped vertically
            (i.e. mirrored on the x-axis).
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ISpatialTransform.FlipY">
            <summary>
            Gets or sets a value indicating that the object is flipped horizontally
            (i.e. mirrored on the y-axis).
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ISpatialTransform.RotationXY">
            <summary>
            Gets or sets the rotation.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ISpatialTransform.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ISpatialTransform.TranslationX">
            <summary>
            Gets or sets the translation in the x-direction.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ISpatialTransform.TranslationY">
            <summary>
            Gets or sets the translation in the y-direction.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ISpatialTransform.CenterOfRotationXY">
            <summary>
            Gets or sets the center of rotation.
            </summary>
            <remarks>
            The point should be specified in terms of the coordinate system
            of the parent graphic, i.e. source coordinates.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ISpatialTransform.CumulativeScale">
            <summary>
            Gets the cumulative scale.
            </summary>
            <remarks>
            Gets the scale relative to the root of the scene graph.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.SpatialTransform.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.SpatialTransform"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.SpatialTransform.#ctor(Macro.ImageViewer.Graphics.SpatialTransform,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.SpatialTransform.Initialize">
            <summary>
            Resets all transform parameters to their defaults.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.SpatialTransform.ConvertToDestination(System.Drawing.PointF)">
            <summary>
            Converts a <see cref="T:System.Drawing.PointF"/> from source to destination coordinates.
            </summary>
            <param name="sourcePoint"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.SpatialTransform.ConvertToSource(System.Drawing.PointF)">
            <summary>
            Converts a <see cref="T:System.Drawing.PointF"/> from destination to source coordinates.
            </summary>
            <param name="destinationPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.SpatialTransform.ConvertToDestination(System.Drawing.RectangleF)">
            <summary>
            Converts a <see cref="T:System.Drawing.RectangleF"/> from source to destination coordinates.
            </summary>
            <param name="sourceRectangle"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.SpatialTransform.ConvertToSource(System.Drawing.RectangleF)">
            <summary>
            Converts a <see cref="T:System.Drawing.RectangleF"/> from destination to source coordinates.
            </summary>
            <param name="destinationRectangle"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.SpatialTransform.ConvertToDestination(System.Drawing.SizeF)">
            <summary>
            Converts a <see cref="T:System.Drawing.SizeF"/> from source to destination coordinates.
            </summary>
            <remarks>
            Only scale and rotation are applied when converting sizes; this is equivalent
            to converting a direction vector, as direction vectors have only magnitude
            and direction information, but no position.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.SpatialTransform.ConvertToSource(System.Drawing.SizeF)">
            <summary>
            Converts a <see cref="T:System.Drawing.SizeF"/> from destination to source coordinates.
            </summary>
            <remarks>
            Only scale and rotation are applied when converting sizes; this is equivalent
            to converting a direction vector, as direction vectors have only magnitude
            and direction information, but no position.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.SpatialTransform.CreateMemento">
            <summary>
            Creates a memento for this object.
            </summary>
            <remarks>Typically used in conjunction with <see cref="T:Macro.Desktop.MemorableUndoableCommand"/>
            to support undo/redo.</remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.SpatialTransform.SetMemento(System.Object)">
            <summary>
            Sets a memento for this object.
            </summary>
            <remarks>Typically used in conjunction with <see cref="T:Macro.Desktop.MemorableUndoableCommand"/>
            to support undo/redo.</remarks>
            <exception cref="T:System.ArgumentNullException"><b>memento</b>
            is <b>null</b>.</exception>
            <exception cref="T:System.InvalidCastException"><b>memento</b>
            is not of the type expected by the object.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.SpatialTransform.ForceRecalculation">
            <summary>
            Forces the <see cref="P:Macro.ImageViewer.Graphics.SpatialTransform.CumulativeTransform"/> to be recalculated.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.SpatialTransform.Calculate">
            <summary>
            Calculates the cumulative transform.
            </summary>
            <remarks>Once this method is executed, the <see cref="P:Macro.ImageViewer.Graphics.SpatialTransform.CumulativeTransform"/>
            property will reflect any changes in the transform parameters.</remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.SpatialTransform.CalculatePreTransform(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Gives subclasses an opportunity to perform a pre-transform transformation.
            </summary>
            <param name="cumulativeTransform"></param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.SpatialTransform.CalculatePostTransform(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Gives subclasses an opportunity to perform a post-transform transformation.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.SpatialTransform.UpdateScaleParameters">
            <summary>
            Gives derived classes an opportunity to update the scale parameters.
            </summary>
            <remarks>
            By default, sets <see cref="P:Macro.ImageViewer.Graphics.SpatialTransform.ScaleX"/> and <see cref="P:Macro.ImageViewer.Graphics.SpatialTransform.ScaleY"/> to the value of <see cref="P:Macro.ImageViewer.Graphics.SpatialTransform.Scale"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.SpatialTransform.RecalculationRequired">
            <summary>
            Gets whether or not we need to recalculate the <see cref="P:Macro.ImageViewer.Graphics.SpatialTransform.CumulativeTransform"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.SpatialTransform.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.SpatialTransform.ScaleX">
            <summary>
            Gets or sets the scale in the x-direction.
            </summary>
            <remarks>Usually, <see cref="P:Macro.ImageViewer.Graphics.SpatialTransform.Scale"/> = <see cref="P:Macro.ImageViewer.Graphics.SpatialTransform.ScaleX"/> = <see cref="P:Macro.ImageViewer.Graphics.SpatialTransform.ScaleY"/>.
            However, when pixels are non-square, <see cref="P:Macro.ImageViewer.Graphics.SpatialTransform.ScaleX"/> and <see cref="P:Macro.ImageViewer.Graphics.SpatialTransform.ScaleY"/>
            will differ.  Note that <see cref="P:Macro.ImageViewer.Graphics.SpatialTransform.ScaleX"/> does not account for flip and is
            thus always positive.</remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.SpatialTransform.ScaleY">
            <summary>
            Gets or sets the scale in the y-direction.
            </summary>
            <remarks>Usually, <see cref="P:Macro.ImageViewer.Graphics.SpatialTransform.Scale"/> = <see cref="P:Macro.ImageViewer.Graphics.SpatialTransform.ScaleX"/> = <see cref="P:Macro.ImageViewer.Graphics.SpatialTransform.ScaleY"/>.
            However, when pixels are non-square, <see cref="P:Macro.ImageViewer.Graphics.SpatialTransform.ScaleX"/> and <see cref="P:Macro.ImageViewer.Graphics.SpatialTransform.ScaleY"/>
            will differ.  Note that <see cref="P:Macro.ImageViewer.Graphics.SpatialTransform.ScaleY"/> does not account for flip and is
            thus always positive.</remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.SpatialTransform.TranslationX">
            <summary>
            Gets or sets the translation along the x-axis.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.SpatialTransform.TranslationY">
            <summary>
            Gets or sets the translation along the y-axis.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.SpatialTransform.FlipX">
            <summary>
            Gets or sets a value indicating whether images are flipped vertically
            (i.e., the x-axis as the axis of reflection)
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.SpatialTransform.FlipY">
            <summary>
            Gets or sets a value indicating whether images are flipped horizontally
            (i.e., the y-axis as the axis of reflection)
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.SpatialTransform.RotationXY">
            <summary>
            Gets or sets the rotation in the XY plane in degrees.
            </summary>
            <remarks>
            Values less than 0 or greater than 360 are converted to the equivalent
            angle between 0 and 360. For example, -5 becomes 355 and 390 becomes 30.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.SpatialTransform.CenterOfRotationXY">
            <summary>
            Gets or sets the center of rotation.
            </summary>
            <remarks>
            The point should be specified in terms of the coordinate system
            of the parent graphic, i.e. source coordinates.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.SpatialTransform.Transform">
            <summary>
            Gets the transform relative to the <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> object's
            immediate parent <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.SpatialTransform.CumulativeScale">
            <summary>
            Gets the cumulative scale.
            </summary>
            <remarks>
            Gets the scale relative to the root of the scene graph.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.SpatialTransform.CumulativeTransform">
            <summary>
            Gets the cumulative transform.
            </summary>
            <remarks>
            The <see cref="P:Macro.ImageViewer.Graphics.SpatialTransform.CumulativeTransform"/> is the product of an
            <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>'s <see cref="P:Macro.ImageViewer.Graphics.SpatialTransform.Transform"/> and the
            <see cref="P:Macro.ImageViewer.Graphics.SpatialTransform.Transform"/> of all of nodes above it (i.e., all of its
            ancestors).
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.SpatialTransform.ValidationPolicy">
            <summary>
            Gets or sets the associated <see cref="T:Macro.ImageViewer.Graphics.SpatialTransformValidationPolicy"/>.
            </summary>
            <remarks>
            It is not always desirable to allow an <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> to be transformed
            in arbitrary ways.  For example, at present, images can only be rotated in
            90 degree increments.  This property essentially allows a validation policy to be set on a
            per graphic basis.  If validation fails, an <see cref="T:System.ArgumentException"/> is thrown.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.IImageSpatialTransform">
            <summary>
            Defines a 2D spatial transformation specifically for images.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IImageSpatialTransform.ScaleToFit">
            <summary>
            Gets or sets a value indicating whether the image should
            be scaled to that it fits in the tile that hosts it.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ImageSpatialTransform.#ctor(Macro.ImageViewer.Graphics.IGraphic,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.ImageSpatialTransform"/> with
            the specified owner <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>, width, height, pixel spacing
            and pixel aspect ratio.
            </summary>
            <param name="ownerGraphic"></param>
            <param name="rows"></param>
            <param name="columns"></param>
            <param name="pixelSpacingX"></param>
            <param name="pixelSpacingY"></param>
            <param name="pixelAspectRatioX"></param>
            <param name="pixelAspectRatioY"></param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ImageSpatialTransform.#ctor(Macro.ImageViewer.Graphics.ImageSpatialTransform,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ImageSpatialTransform.CreateMemento">
            <summary>
            This methods overrides <see cref="M:Macro.ImageViewer.Graphics.SpatialTransform.CreateMemento"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ImageSpatialTransform.SetMemento(System.Object)">
            <summary>
            This method overrides <see cref="M:Macro.ImageViewer.Graphics.SpatialTransform.SetMemento(System.Object)"/>.
            </summary>
            <param name="memento"></param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ImageSpatialTransform.CalculatePreTransform(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Moves the origin to center of Tile.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ImageSpatialTransform.CalculatePostTransform(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Moves the origin to the center of the image.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ImageSpatialTransform.UpdateScaleParameters">
            <summary>
            Updates the scale parameters based on the values of <see cref="P:Macro.ImageViewer.Graphics.ImageSpatialTransform.ClientRectangle"/> and <see cref="P:Macro.ImageViewer.Graphics.ImageSpatialTransform.ScaleToFit"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ImageSpatialTransform.ScaleToFit">
            <summary>
            Gets or sets a value indicating whether images will be scaled to fit
            in a <see cref="T:Macro.ImageViewer.Tile"/>.
            </summary>
            <remarks>
            If set to <b>true</b>, the <see cref="P:Macro.ImageViewer.Graphics.SpatialTransform.Scale"/> property will be auto-calculated.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.MammographyImageSpatialTransform.#ctor(Macro.ImageViewer.Graphics.IGraphic,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,Macro.Dicom.Iod.PatientOrientation,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.MammographyImageSpatialTransform"/> with the specified image plane details.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.MammographyImageSpatialTransform.#ctor(Macro.ImageViewer.Graphics.MammographyImageSpatialTransform,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.MammographyImageSpatialTransform.GetEffectivePosteriorPatientOrientation(System.String@,System.String@)">
            <summary>
            Gets the effective posterior (or anterior) patient orientation after transforms have been applied.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.MammographyImageSpatialTransform.ScreenPosterior">
            <summary>
            Gets the patient posterior orientation vector in the screen coordinate space.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.InvariantSpatialTransform">
            <summary>
            Implements an <see cref="T:Macro.ImageViewer.Graphics.ISpatialTransform"/> which is invariant in the destination coordinate system with respect to scale, flip and rotation.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantSpatialTransform.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Initializes a new <see cref="T:Macro.ImageViewer.Graphics.InvariantSpatialTransform"/>.
            </summary>
            <param name="ownerGraphic">The graphic for which this <see cref="T:Macro.ImageViewer.Graphics.InvariantSpatialTransform"/> is being constructed.</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantSpatialTransform.#ctor(Macro.ImageViewer.Graphics.InvariantSpatialTransform,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantSpatialTransform.CalculatePostTransform(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Called by the base <see cref="T:Macro.ImageViewer.Graphics.SpatialTransform"/> to post-multiply an operation to the overall transformation matrix.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantSpatialTransform.CalculatePreTransform(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Called by the base <see cref="T:Macro.ImageViewer.Graphics.SpatialTransform"/> to pre-multiply an operation to the overall transformation matrix.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.DisplaySetCloningException">
            <summary>
            Thrown when an error occurs while cloning an <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationImageCloningException">
            <summary>
            Thrown when an error occurs while cloning an <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.CloningExceptionPolicy">
            <summary>
            Exception policy for cloning of <see cref="T:Macro.ImageViewer.IPresentationImage"/>s and <see cref="T:Macro.ImageViewer.IDisplaySet"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.CloningExceptionPolicy.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.CloningExceptionPolicy.Handle(System.Exception,Macro.Desktop.IExceptionHandlingContext)">
            <summary>
             Handles the specified exception.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.FocussedGraphicState">
            <summary>
            Represents the 'focussed' graphic state.
            </summary>
            <remarks>
            This state is entered when the mouse hovers over a 
            <see cref="T:Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic"/>.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.StandardGraphicState">
            <summary>
            Base class for standard graphic states.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.GraphicState">
            <summary>
            A base class for graphic states.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.GraphicState.#ctor(Macro.ImageViewer.InteractiveGraphics.IStatefulGraphic)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.InteractiveGraphics.GraphicState"/>.
            </summary>
            <param name="statefulGraphic"></param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.GraphicState.Start(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by the framework each time a mouse button is pressed.
            </summary>
            <remarks>
            As a general rule, if the <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> object did anything as a result of this call, it must 
            return true.  If false is returned, <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Start(Macro.ImageViewer.InputManagement.IMouseInformation)"/> is called on other <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/>s
            until one returns true.
            </remarks>
            <returns>
            True if the <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> did something as a result of the call, 
            and hence would like to receive capture.  Otherwise, false.
            </returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.GraphicState.Track(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by the framework when the mouse has moved.
            </summary>
            <remarks>
            A button does not necessarily have to be down for this message to be called.  The framework can
            call it any time the mouse moves.
            </remarks>
            <returns>True if the message was handled, otherwise false.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.GraphicState.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by the framework when the mouse button is released.
            </summary>
            <returns>
            True if the framework should <b>not</b> release capture, otherwise false.
            </returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.GraphicState.Cancel">
            <summary>
            Called by the framework to let <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> perform any necessary cleanup 
            when capture is going to be forcibly released.
            </summary>
            <remarks>
            It is important that this method is implemented correctly and doesn't simply do nothing when it is inappropriate
            to do so, otherwise odd behaviour may be experienced.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.GraphicState.StatefulGraphic">
            <summary>
            The <see cref="T:Macro.ImageViewer.InteractiveGraphics.IStatefulGraphic"/> associated with this
            <see cref="T:Macro.ImageViewer.InteractiveGraphics.GraphicState"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.GraphicState.LastPoint">
            <summary>
            Gets or sets the last location of the mouse.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.GraphicState.Behaviour">
            <summary>
            Allows the <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> to override certain default framework behaviour.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.StandardGraphicState.#ctor(Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.InteractiveGraphics.StandardGraphicState"/>.
            </summary>
            <param name="standardStatefulGraphic"></param>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.StandardGraphicState.StatefulGraphic">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic"/> associated with
            this state.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.FocussedGraphicState.#ctor(Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.InteractiveGraphics.FocussedGraphicState"/>.
            </summary>
            <param name="standardStatefulGraphic"></param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.FocussedGraphicState.Start(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by the framework when the associated <see cref="T:Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic"/>
            is clicked on and results in a transition to the <see cref="T:Macro.ImageViewer.InteractiveGraphics.FocussedSelectedGraphicState"/>.
            </summary>
            <param name="mouseInformation"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.FocussedGraphicState.Track(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by the framework when the mouse is moving and results in a transition 
            to the <see cref="T:Macro.ImageViewer.InteractiveGraphics.InactiveGraphicState"/> when
            the mouse is no longer hovering over the associated 
            <see cref="T:Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic"/>.
            </summary>
            <param name="mouseInformation"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic">
            <summary>
            Abstract base class for implementations of <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlPointsGraphic"/>.
            </summary>
            <remarks>
            The use of the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic"/> base class is for convenience, as much of the logic behind
            the control point graphics, handling user input and command history is implemented by default.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.IControlPointsGraphic">
            <summary>
            Defines an <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/> that consists of a number of individually adjustable control points.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.IControlPointsGraphic.HitTestControlPoint(System.Drawing.Point)">
            <summary>
            Performs a hit test on each <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPoint"/> and returns
            the index of the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPoint"/> for which the test is true.
            </summary>
            <param name="point">The screen coordinates to test for a control point.</param>
            <returns>The index of the control point or -1 if the hit test failed for all control points.</returns>
        </member>
        <member name="E:Macro.ImageViewer.InteractiveGraphics.IControlPointsGraphic.ControlPointChangedEvent">
            <summary>
            Occurs when the location of a control point has changed.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.IControlPointsGraphic.Count">
            <summary>
            Gets the number of control points in the <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.IControlPointsGraphic.Item(System.Int32)">
            <summary>
            Gets or sets the location of the specified control point.
            </summary>
            <param name="index">The zero-based index of the control point.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic"/> to control the given subject graphic.
            </summary>
            <param name="subject">The graphic to control.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.#ctor(Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.HitTestControlPoint(System.Drawing.Point)">
            <summary>
            Performs a hit test on each <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPoint"/> and returns
            the index of the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPoint"/> for which the test is true.
            </summary>
            <param name="point">The screen coordinates to test for a control point.</param>
            <returns>The index of the control point or -1 if the hit test failed for all control points.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ResetCoordinateSystem">
            <summary>
            Resets the <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.CoordinateSystem"/>.
            </summary>
            <remarks>
            <para>
            <see cref="M:Macro.ImageViewer.Graphics.CompositeGraphic.ResetCoordinateSystem"/> will reset the <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.CoordinateSystem"/>
            to what it was before the <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.CoordinateSystem"/> was last set.
            </para>
            <para>
            Calling <see cref="M:Macro.ImageViewer.Graphics.CompositeGraphic.ResetCoordinateSystem"/> will recursively call
            <see cref="M:Macro.ImageViewer.Graphics.CompositeGraphic.ResetCoordinateSystem"/> on <i>all</i> <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> 
            objects in the subtree.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.SuspendControlPointEvents">
            <summary>
            Temporarily suspends notification of control point change events.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ResumeControlPointEvents">
            <summary>
            Resumes notification of control point change events.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.OnControlPointChanged(System.Int32,System.Drawing.PointF)">
            <summary>
            Called to notify the derived class of a control point change event.
            </summary>
            <remarks>
            The <paramref name="point"/> parameter is given in the graphic's current <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/>.
            </remarks>
            <param name="index">The index of the point that changed.</param>
            <param name="point">The value of the point that changed.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ConstrainControlPointLocation(System.Int32,System.Drawing.PointF)">
            <summary>
            Computes a constrained control point location (in destination coordinates) given the location to which the cursor moved after starting drag on the control point.
            </summary>
            <param name="controlPointIndex">The index of the control point being dragged.</param>
            <param name="cursorLocation">The location to which the cursor moved.</param>
            <returns>The constrained control point location.</returns>
            <remarks>
            The default implementation is unconstrained. Subclasses can override this method to constrain the possible locations
            of a control point to a particular locus or to maintain some property such as aspect ratio.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.CreateMemento">
            <summary>
            Captures the current state of this <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic"/>.
            </summary>
            <remarks>
            <para>
            Any overriding implementation of <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.CreateMemento"/> should return an
            object containing enough state information so that, when <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.SetMemento(System.Object)"/> is called,
            the object can be restored to the original state.
            </para>
            <para>The default implementation returns null.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.SetMemento(System.Object)">
            <summary>
            Restores the state of this <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic"/>.
            </summary>
            <param name="memento">The object that was originally created with <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.CreateMemento"/>.</param>
            <remarks>
            <para>
            Any overriding implementation of <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.SetMemento(System.Object)"/> should return the 
            object to the original state captured by <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.CreateMemento"/>.
            </para>
            <para>The default implementation does nothing.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.GetCursorToken(System.Drawing.Point)">
            <summary>
            Called by <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> in response to the framework requesting the cursor token for a particular screen coordinate via <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.GetCursorToken(System.Drawing.Point)"/>.
            </summary>
            <param name="point">The screen coordinate for which the cursor is requested.</param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.OnColorChanged">
            <summary>
            Called when the <see cref="P:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Color"/> property changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.OnShowChanged">
            <summary>
            Called when the <see cref="P:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Show"/> property changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.Start(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> in response to a mouse button click via <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Start(Macro.ImageViewer.InputManagement.IMouseInformation)"/>.
            </summary>
            <param name="mouseInformation">The mouse input information.</param>
            <returns>True if the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> did something as a result of the call and hence would like to receive capture; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.Track(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> in response to the framework tracking mouse input via <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Track(Macro.ImageViewer.InputManagement.IMouseInformation)"/>.
            </summary>
            <param name="mouseInformation">The mouse input information.</param>
            <returns>True if the message was handled; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> in response a mouse button release via <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)"/>.
            </summary>
            <param name="mouseInformation">The mouse input information.</param>
            <returns>True if the framework should <b>not</b> release capture; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.Cancel">
            <summary>
            Called by <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> in response to an attempt to cancel the current operation via <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Cancel"/>.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPointChangedEvent">
            <summary>
            Occurs when the location of a control point has changed.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.StretchingToken">
            <summary>
            Gets or sets the cursor token to use when moving a control point.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.StretchCursorTokenStrategy">
            <summary>
            Gets or sets a strategy for selecting a cursor to show when hovering over a control point.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.Count">
            <summary>
            Gets the number of control points in the <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.Item(System.Int32)">
            <summary>
            Gets or sets the location of the specified control point.
            </summary>
            <param name="index">The zero-based index of the control point.</param>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPoints">
            <summary>
            Gets the collection of control points.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.CoordinateSystem">
            <summary>
            Gets or sets the <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.CoordinateSystem"/>.
            </summary>
            <remarks>
            Setting the <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.CoordinateSystem"/> property will recursively set the 
            <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.CoordinateSystem"/> property for <i>all</i> <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> 
            objects in the subtree.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPointGroup">
            <summary>
            A group of <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPoint"/>s. 
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPointGroup.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPointGroup"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPointGroup.Add(System.Drawing.PointF)">
            <summary>
            Adds a new <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPoint"/> to the
            <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPointGroup"/>.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPointGroup.RemoveAt(System.Int32)">
            <summary>
            Removes a <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPoint"/> from the group.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPointGroup.Clear">
            <summary>
            Removes all <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPoint"/>s from the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPointGroup"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPointGroup.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit test on the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPoint"/>s
            in the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPointGroup"/>.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPointGroup.HitTestControlPoint(System.Drawing.Point)">
            <summary>
            Performs a hit test on each <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPoint"/> and returns
            the index of the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPoint"/> for which the test is true.
            </summary>
            <param name="point"></param>
            <returns>The index of the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPoint"/> or
            -1 if the hit test failed for all <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPoint"/>s.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPointGroup.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPointGroup"/>.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPointGroup.ControlPointChangedEvent">
            <summary>
            Occurs when the location of a <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPoint"/> has changed.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPointGroup.Color">
            <summary>
            Gets or sets the colour of the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPointGroup"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPointGroup.Count">
            <summary>
            Returns the number of <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPoint"/>s in the
            <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPointGroup"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ControlPointsGraphic.ControlPointGroup.Item(System.Int32)">
            <summary>
            Gets or sets the location of the specified <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPoint"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPoint"/>.</param>
            <returns></returns>
        </member>
        <member name="T:Macro.ImageViewer.IImageBox">
            <summary>
            Defines a container for <see cref="T:Macro.ImageViewer.ITile"/> objects.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.IImageBox.SetTileGrid(System.Int32,System.Int32)">
            <summary>
            Creates a rectangular grid of tiles.
            </summary>
            <remarks>
            Each time this method is called, existing tiles in the <see cref="T:Macro.ImageViewer.ImageBox"/>
            are removed and new ones added.  The exception is when the number of rows
            and columns has not changed, in which case the method does nothing
            and returns immediately.
            </remarks>
            <param name="numberOfRows">Number of <see cref="T:Macro.ImageViewer.ImageBox"/> rows.</param>
            <param name="numberOfColumns">Number of <see cref="T:Macro.ImageViewer.ImageBox"/> columns.</param>
            <exception cref="T:System.ArgumentException"><paramref name="numberOfRows"/> or 
            <paramref name="numberOfColumns"/> is less than 1.</exception>
        </member>
        <member name="M:Macro.ImageViewer.IImageBox.SelectDefaultTile">
            <summary>
            Selects the top left tile.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageBox.ImageViewer">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
            <value>The associated <see cref="T:Macro.ImageViewer.IImageViewer"/> or <b>null</b> if the 
            <see cref="T:Macro.ImageViewer.IImageBox"/> is not part of the 
            physical workspace yet.</value>
        </member>
        <member name="P:Macro.ImageViewer.IImageBox.ParentPhysicalWorkspace">
            <summary>
            Gets the parent <see cref="T:Macro.ImageViewer.IPhysicalWorkspace"/>
            </summary>
            <value>The parent <see cref="T:Macro.ImageViewer.IPhysicalWorkspace"/> or <b>null</b> if the 
            <see cref="T:Macro.ImageViewer.ImageBox"/> has not
            been added to the <see cref="T:Macro.ImageViewer.IPhysicalWorkspace"/> yet.</value>
        </member>
        <member name="P:Macro.ImageViewer.IImageBox.Tiles">
            <summary>
            Gets the collection of <see cref="T:Macro.ImageViewer.ITile"/> objects that belong
            to this <see cref="T:Macro.ImageViewer.ImageBox"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageBox.SelectedTile">
            <summary>
            Gets the currently selected <see cref="T:Macro.ImageViewer.ITile"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageBox.NormalizedRectangle">
            <summary>
            Gets or sets this <see cref="T:Macro.ImageViewer.ImageBox"/>'s normalized rectangle.
            </summary>
            <remarks>
            Normalized coordinates specify the top-left corner,
            width and height of the <see cref="T:Macro.ImageViewer.IImageBox"/> as a 
            fraction of the physical workspace.  For example, if the
            <see cref="P:Macro.ImageViewer.IImageBox.NormalizedRectangle"/> is (left=0.25, top=0.0, width=0.5, height=0.5) 
            and the physical workspace has dimensions of (width=1000, height=800), the 
            <see cref="T:Macro.ImageViewer.IImageBox"/> rectangle would be (left=250, top=0, width=500, height=400)
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.IImageBox.DisplaySet">
            <summary>
            Gets or sets the <see cref="T:Macro.ImageViewer.IDisplaySet"/> associated with this <see cref="T:Macro.ImageViewer.IImageBox"/>.
            </summary>
            <value>The <see cref="T:Macro.ImageViewer.IDisplaySet"/> associated with this <see cref="T:Macro.ImageViewer.IImageBox"/>.
            <b>null</b> if the <see cref="T:Macro.ImageViewer.IImageBox"/> is empty.</value>
            <remarks>
            Setting this property to an <see cref="T:Macro.ImageViewer.IDisplaySet"/> automatically populates the tiles
            in this <see cref="T:Macro.ImageViewer.IImageBox"/> with presentation images contained in the 
            <see cref="T:Macro.ImageViewer.IDisplaySet"/>.  Any <see cref="T:Macro.ImageViewer.IDisplaySet"/> previously associated with
            this <see cref="T:Macro.ImageViewer.IImageBox"/> are removed.  Setting this property to <b>null</b>
            results in an empty <see cref="T:Macro.ImageViewer.IImageBox"/> and empty tiles.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="P:Macro.ImageViewer.IImageBox.DisplaySetLocked"/> is true.</exception>
        </member>
        <member name="P:Macro.ImageViewer.IImageBox.DisplaySetLocked">
            <summary>
            Gets or sets whether or not <see cref="P:Macro.ImageViewer.IImageBox.DisplaySet"/> is locked and cannot currently be changed.
            </summary>
            <remarks>
            The intended usage of this property is such that code responsible for the layout
            of the <see cref="T:Macro.ImageViewer.IImageViewer"/> manage this property's state, and other parts of the code,
            like tools for example, should simply check the value and respond appropriately.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.IImageBox.Selected">
            <summary>
            Gets a value indicating whether this <see cref="T:Macro.ImageViewer.IImageBox"/> is
            selected.
            </summary>
            <remarks>
            <see cref="T:Macro.ImageViewer.IImageBox"/> is selection is mutually exclusive.  That is,
            only one <see cref="T:Macro.ImageViewer.IImageBox"/> is ever selected at a given time.  
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.IImageBox.Rows">
            <summary>
            Gets the number of rows of tiles in this <see cref="T:Macro.ImageViewer.IImageBox"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageBox.Columns">
            <summary>
            Gets the number of columns of tiles in this <see cref="T:Macro.ImageViewer.IImageBox"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageBox.Item(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.ITile"/> at the specified row and column.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"><pararef name="row"/> or
            <pararef name="column"/> is less than 0 or is greater than or equal to 
            the <see cref="P:Macro.ImageViewer.IImageBox.Rows"/> or <see cref="P:Macro.ImageViewer.IImageBox.Columns"/> respectively.
            </exception>
        </member>
        <member name="P:Macro.ImageViewer.IImageBox.TopLeftPresentationImage">
            <summary>
            Gets or sets the <see cref="T:Macro.ImageViewer.IPresentationImage"/> in the top-left 
            <see cref="T:Macro.ImageViewer.Tile"/> of this <see cref="T:Macro.ImageViewer.ImageBox"/>.
            </summary>
            <remarks>
            Because a <see cref="T:Macro.ImageViewer.IDisplaySet"/> is an <i>ordered</i> set of 
            presentation images, setting this property to a specified
            <see cref="T:Macro.ImageViewer.IPresentationImage"/> image results in the images that follow 
            to "flow" into the other tiles from left to right, top to bottom so that
            order is preserved.
            </remarks>
            <exception cref="T:System.ArgumentException"><b>TopLeftPresentationImage</b>
            is not found this image box's <see cref="T:Macro.ImageViewer.IDisplaySet"/></exception>
        </member>
        <member name="P:Macro.ImageViewer.IImageBox.TopLeftPresentationImageIndex">
            <summary>
            Gets or sets the index of the <see cref="T:Macro.ImageViewer.IPresentationImage"/> that is
            to be placed in the top-left <see cref="T:Macro.ImageViewer.ITile"/> of this <see cref="T:Macro.ImageViewer.IImageBox"/>.
            </summary>
            <remarks>
            The index is the index of the <see cref="T:Macro.ImageViewer.IPresentationImage"/> in the
            <see cref="T:Macro.ImageViewer.IDisplaySet"/>.  Because a <see cref="T:Macro.ImageViewer.IDisplaySet"/> is an 
            <i>ordered</i> set of presentation images, setting this property to a specified
            <see cref="T:Macro.ImageViewer.IPresentationImage"/> image results in the images that follow 
            to "flow" into the other tiles from left to right, top to bottom so that
            order is preserved.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <see cref="P:Macro.ImageViewer.IImageBox.TopLeftPresentationImageIndex"/> is less than 0 or greater 
            than or equal to the number of presentation images in this
            image box's <see cref="T:Macro.ImageViewer.IDisplaySet"/></exception>
        </member>
        <member name="P:Macro.ImageViewer.IImageBox.Enabled">
            <summary>
            Gets or sets whether the image box is currently enabled.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageBox.ExtensionData">
            <summary>
            A place for extensions to store custom data about the tile.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.IImageBox.DisplaySetChanged">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.IImageBox.DisplaySet"/> property has changed.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.ImageBoxExtensionPoint">
            <summary>
            An extension point for ImageBox "tools" 
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.IImageBoxExtensionView">
            TODO: Now IImageBoxExtension is basically an extension to the ImageBoxControl instead of the ImageBox.
            Consider combining IImageBoxExtensionView and IImageBoxExtension.
            
            <summary>
            Defines interface to the view of an image box extension.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.IImageBoxExtensionView.UpdateLayout">
            <summary>
             Updates the view
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageBoxExtensionView.ParentSize">
            <summary>
             Sets the parent size for the view
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageBoxExtensionView.ActualSize">
            <summary>
            Gets the render size of the view
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageBoxExtensionView.Visible">
            <summary>
             Gets a boolean indicating whether the view is visible
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.IImageBoxExtension">
            TODO: Now IImageBoxExtension is basically an extension to the ImageBoxControl instead of the ImageBox.
            Consider combining IImageBoxExtensionView and IImageBoxExtension.
            
            <summary>
            Defines the interface of an extension to the <see cref="T:Macro.ImageViewer.IImageBox"/>
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.IImageBoxExtension.CreateView">
            <summary>
             Create an instance of the view for the plugin
            </summary>
             <remarks>
             Caller will be responsible for managing the view
             </remarks>
        </member>
        <member name="P:Macro.ImageViewer.IImageBoxExtension.Name">
            <summary>
            Name of the extension
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageBoxExtension.ImageBox">
            <summary>
             Sets the associated ImageBox
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageBoxExtension.Visible">
            <summary>
             Gets or sets a value indicating whether the extension wants its <see cref="!:View"/> to be visible.
            </summary>
             <remarks>
             It is up to the image box control implementation to decide whether it's feasible 
             to display the extension's view on the screen.
             The extension must fire <see cref="!:PropertyChanged"/> if it wants to change its visibility. 
             </remarks>
        </member>
        <member name="P:Macro.ImageViewer.IImageBoxExtension.IconSet">
            <summary>
             Gets the icons for the extension
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.BaseTools.ImageViewerTool">
            <summary>
            A base class for image viewer tools.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.ImageViewerTool.#ctor">
            <summary>
            Protected constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.ImageViewerTool.Dispose(System.Boolean)">
            <summary>
            Disposes of this object; override this method to do any necessary cleanup.
            </summary>
            <param name="disposing">True if this object is being disposed, false if it is being finalized.</param>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.ImageViewerTool.Initialize">
            <summary>
            Initializes the <see cref="T:Macro.ImageViewer.BaseTools.ImageViewerTool"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.ImageViewerTool.OnTileSelected(System.Object,Macro.ImageViewer.TileSelectedEventArgs)">
            <summary>
            Event Handler for <see cref="E:Macro.ImageViewer.EventBroker.TileSelected"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.ImageViewerTool.OnPresentationImageSelected(System.Object,Macro.ImageViewer.PresentationImageSelectedEventArgs)">
            <summary>
            Event Handler for <see cref="E:Macro.ImageViewer.EventBroker.PresentationImageSelected"/>.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.ImageViewerTool.Enabled">
            <summary>
            Gets or sets a value indicating whether the tool is enabled.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.BaseTools.ImageViewerTool.EnabledChanged">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.BaseTools.ImageViewerTool.Enabled"/> property has changed.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.ImageViewerTool.ImageViewer">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.IImageViewer"/> associated with this tool.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.ImageViewerTool.SelectedPresentationImage">
            <summary>
            Gets the selected <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
            <value>The selected <see cref="T:Macro.ImageViewer.IPresentationImage"/> or <b>null</b>
            if no <see cref="T:Macro.ImageViewer.IPresentationImage"/> is currently selected.</value>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.ImageViewerTool.SelectedImageGraphicProvider">
            <summary>
            Gets the selected <see cref="T:Macro.ImageViewer.Graphics.IImageGraphicProvider"/>.
            </summary>
            <value>The selected <see cref="T:Macro.ImageViewer.Graphics.IImageGraphicProvider"/> or <b>null</b>
            if no <see cref="T:Macro.ImageViewer.Graphics.IImageGraphicProvider"/> is currently selected.</value>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.ImageViewerTool.SelectedImageSopProvider">
            <summary>
            Gets the selected <see cref="T:Macro.ImageViewer.StudyManagement.IImageSopProvider"/>.
            </summary>
            <value>The selected <see cref="T:Macro.ImageViewer.StudyManagement.IImageSopProvider"/> or <b>null</b>
            if no <see cref="T:Macro.ImageViewer.StudyManagement.IImageSopProvider"/> is currently selected.</value>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.ImageViewerTool.SelectedSpatialTransformProvider">
            <summary>
            Gets the selected <see cref="T:Macro.ImageViewer.Graphics.ISpatialTransformProvider"/>.
            </summary>
            <value>The selected <see cref="T:Macro.ImageViewer.Graphics.ISpatialTransformProvider"/> or <b>null</b>
            if no <see cref="T:Macro.ImageViewer.Graphics.ISpatialTransformProvider"/> is currently selected.</value>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.ImageViewerTool.SelectedVoiLutProvider">
            <summary>
            Gets the selected <see cref="T:Macro.ImageViewer.Imaging.IVoiLutProvider"/>.
            </summary>
            <value>The selected <see cref="T:Macro.ImageViewer.Imaging.IVoiLutProvider"/> or <b>null</b>
            if no <see cref="T:Macro.ImageViewer.Imaging.IVoiLutProvider"/> is currently selected.</value>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.ImageViewerTool.SelectedOverlayGraphicsProvider">
            <summary>
            Gets the selected <see cref="T:Macro.ImageViewer.Graphics.IOverlayGraphicsProvider"/>.
            </summary>
            <value>The selected <see cref="T:Macro.ImageViewer.Graphics.IOverlayGraphicsProvider"/> or <b>null</b>
            if no <see cref="T:Macro.ImageViewer.Graphics.IOverlayGraphicsProvider"/> is currently selected.</value>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.ImageViewerTool.SelectedAnnotationLayoutProvider">
            <summary>
            Gets the selected <see cref="T:Macro.ImageViewer.Annotations.IAnnotationLayoutProvider"/>.
            </summary>
            <value>The selected <see cref="T:Macro.ImageViewer.Annotations.IAnnotationLayoutProvider"/> or <b>null</b>
            if no <see cref="T:Macro.ImageViewer.Annotations.IAnnotationLayoutProvider"/> is currently selected.</value>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.TrackMousePositionMessage">
            <summary>
            A message object created by the view layer to allow a controlling object 
            (e.g. <see cref="T:Macro.ImageViewer.InputManagement.TileController"/>) to handle mouse move messages.
            </summary>
            <remarks>
            This class is intended for internal framework use only.
            </remarks>
            <seealso cref="T:Macro.ImageViewer.InputManagement.TileController"/>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.TrackMousePositionMessage.#ctor(System.Drawing.Point)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.TrackMousePositionMessage.Location">
            <summary>
            Gets the mouse location.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.FocussedSelectedGraphicState">
            <summary>
            Represents the 'focussed-selected' graphic state.
            </summary>
            <remarks>
            This state is different from <see cref="T:Macro.ImageViewer.InteractiveGraphics.SelectedGraphicState"/> in 
            that it is entered when the
            <see cref="T:Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic"/> is selected (i.e. clicked on)
            <i>and</i> focussed (i.e. hovered over), whereas <see cref="T:Macro.ImageViewer.InteractiveGraphics.SelectedGraphicState"/>
            is entered only when a graphic is selected, but not focussed.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.FocussedSelectedGraphicState.#ctor(Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.InteractiveGraphics.FocussedSelectedGraphicState"/>.
            </summary>
            <param name="standardStatefulGraphic"></param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.FocussedSelectedGraphicState.Start(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by the framework when the associated <see cref="T:Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic"/>
            is clicked on.
            </summary>
            <param name="mouseInformation"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.FocussedSelectedGraphicState.Track(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by the framework when the mouse is moving and results in a transition 
            to the <see cref="T:Macro.ImageViewer.InteractiveGraphics.SelectedGraphicState"/> when
            the mouse is no longer hovering over the associated 
            <see cref="T:Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Comparers.ImageSetComparer">
            <summary>
            Base class for comparers that compare some aspect of <see cref="T:Macro.ImageViewer.IImageSet"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.ImageSetComparer.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.ImageSetComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.ImageSetComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.ImageSetComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.ImageSetComparer.Compare(Macro.ImageViewer.IImageSet,Macro.ImageViewer.IImageSet)">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.IImageSet"/>s.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.ImageViewer.Annotations.BasicTextAnnotationItem">
            <summary>
            An <see cref="T:Macro.ImageViewer.Annotations.AnnotationItem"/> that returns fixed text from <see cref="M:Macro.ImageViewer.Annotations.BasicTextAnnotationItem.GetAnnotationText(Macro.ImageViewer.IPresentationImage)"/>.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Annotations.AnnotationItem"/>
        </member>
        <member name="T:Macro.ImageViewer.Annotations.AnnotationItem">
            <summary>
            Base implementation of <see cref="T:Macro.ImageViewer.Annotations.IAnnotationItem"/>.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Annotations.IAnnotationItem"/>
        </member>
        <member name="T:Macro.ImageViewer.Annotations.IAnnotationItem">
            <summary>
            Provides text to be rendered to the overlay by an <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/>.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Annotations.AnnotationBox"/>
            <seealso cref="T:Macro.ImageViewer.Annotations.AnnotationItemConfigurationOptions"/>
            <seealso cref="T:Macro.ImageViewer.Annotations.IAnnotationItemProvider"/>
            <seealso cref="T:Macro.ImageViewer.Annotations.IAnnotationLayout"/>
            <seealso cref="T:Macro.ImageViewer.Annotations.IAnnotationLayoutProvider"/>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.IAnnotationItem.GetIdentifier">
            <summary>
            Gets a unique identifier.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.IAnnotationItem.GetDisplayName">
            <summary>
            Gets a user friendly display name.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.IAnnotationItem.GetLabel">
            <summary>
            Gets the label that can be shown on the overlay depending on the <see cref="T:Macro.ImageViewer.Annotations.AnnotationBox"/>'s 
            configuration (<see cref="T:Macro.ImageViewer.Annotations.AnnotationItemConfigurationOptions"/>).
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.IAnnotationItem.GetAnnotationText(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Gets the annotation text to display on the overlay for <paramref name="presentationImage"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationItem.#ctor(System.String,Macro.ImageViewer.Annotations.IAnnotationResourceResolver)">
            <summary>
            A constructor that uses the <see cref="T:Macro.ImageViewer.Annotations.AnnotationItem"/>'s unique identifier to determine
            the display name and label using an <see cref="T:Macro.ImageViewer.Annotations.IAnnotationResourceResolver"/>.
            </summary>
            <param name="identifier">The unique identifier of the <see cref="T:Macro.ImageViewer.Annotations.AnnotationItem"/>.</param>
            <param name="annotationResourceResolver">The object that will resolve the display name and label 
            from the <see cref="T:Macro.ImageViewer.Annotations.AnnotationItem"/>'s unique identifier.</param>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="identifier">The unique identifier of the <see cref="T:Macro.ImageViewer.Annotations.AnnotationItem"/>.</param>
            <param name="displayName">The <see cref="T:Macro.ImageViewer.Annotations.AnnotationItem"/>'s display name.</param>
            <param name="label">The <see cref="T:Macro.ImageViewer.Annotations.AnnotationItem"/>'s label.</param>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationItem.#ctor(System.String,System.String,System.String,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="identifier">The unique identifier of the <see cref="T:Macro.ImageViewer.Annotations.AnnotationItem"/>.</param>
            <param name="displayName">The <see cref="T:Macro.ImageViewer.Annotations.AnnotationItem"/>'s display name.</param>
            <param name="label">The <see cref="T:Macro.ImageViewer.Annotations.AnnotationItem"/>'s label.</param>
            <param name="resourceResolver">The object that will resolve the display name and label parameters as the keys representing localized strings.</param>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationItem.GetIdentifier">
            <summary>
            Gets a unique identifier.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationItem.GetDisplayName">
            <summary>
            Gets a user friendly display name.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationItem.GetLabel">
            <summary>
            Gets the label that can be shown on the overlay depending on the <see cref="T:Macro.ImageViewer.Annotations.AnnotationBox"/>'s 
            configuration (see <see cref="T:Macro.ImageViewer.Annotations.AnnotationItemConfigurationOptions"/>).
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationItem.GetAnnotationText(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Gets the annotation text to display on the overlay for <paramref name="presentationImage"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.BasicTextAnnotationItem.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="identifier">The unique identifier of the <see cref="T:Macro.ImageViewer.Annotations.BasicTextAnnotationItem"/>.</param>
            <param name="displayName">The <see cref="T:Macro.ImageViewer.Annotations.BasicTextAnnotationItem"/>'s display name.</param>
            <param name="label">The <see cref="T:Macro.ImageViewer.Annotations.BasicTextAnnotationItem"/>'s label.</param>
            <param name="annotationText">The text to return from <see cref="M:Macro.ImageViewer.Annotations.BasicTextAnnotationItem.GetAnnotationText(Macro.ImageViewer.IPresentationImage)"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.BasicTextAnnotationItem.GetAnnotationText(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Gets the annotation text for display on the overlay.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.BasicTextAnnotationItem.AnnotationText">
            <summary>
            Gets or sets the text to be returned from <see cref="M:Macro.ImageViewer.Annotations.BasicTextAnnotationItem.GetAnnotationText(Macro.ImageViewer.IPresentationImage)"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.StoredAnnotationBoxGroup.#ctor(Macro.ImageViewer.Annotations.StoredAnnotationBoxGroup,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">This parameter is unused.</param>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.DataLut">
            <summary>
            Base implementation of a <see cref="T:Macro.ImageViewer.Imaging.IDataLut"/> lookup table mapping input pixel values to output pixel values.
            </summary>
            <remarks>
            Normally, you should not have to inherit directly from this class.
            <see cref="T:Macro.ImageViewer.Imaging.SimpleDataLut"/> or <see cref="T:Macro.ImageViewer.Imaging.GeneratedDataLut"/> should cover
            most, if not all, common use cases.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.IDataLut">
            <summary>
            Defines the properties and methods of a lookup table mapping input pixel values to output pixel values.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IDataLut.GetKey">
            <summary>
            Gets a string key that identifies this particular lookup table's characteristics.
            </summary>
            <remarks>
            This method is not to be confused with <b>equality</b>, since some lookup tables can be
            dependent upon the actual image to which it belongs.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IDataLut.GetDescription">
            <summary>
            Gets an abbreviated description of the lookup table.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IDataLut.Clone">
            <summary>
            Creates a deep-copy of the <see cref="T:Macro.ImageViewer.Imaging.IDataLut"/>.
            </summary>
            <remarks>
            Implementations may return NULL from this method when appropriate.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IDataLut.FirstMappedPixelValue">
            <summary>
            Gets the first mapped pixel value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IDataLut.Data">
            <summary>
            Gets the lookup table data.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IDataLut.MinInputValue">
            <summary>
            Gets or sets the minimum input value.
            </summary>
            <remarks>
            This value should not be modified by your code.  It will be set internally by the framework.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IDataLut.MaxInputValue">
            <summary>
            Gets or sets the maximum input value.
            </summary>
            <remarks>
            This value should not be modified by your code.  It will be set internally by the framework.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IDataLut.MinOutputValue">
            <summary>
            Gets the minimum output value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IDataLut.MaxOutputValue">
            <summary>
            Gets the maximum output value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IDataLut.Item(System.Int32)">
            <summary>
            Gets the output value of the lookup table at a given input index.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Imaging.IDataLut.LutChanged">
            <summary>
            Fired when the lookup table has changed in some way.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.DataLut.OnLutChanged">
            <summary>
            Fires the <see cref="E:Macro.ImageViewer.Imaging.DataLut.LutChanged"/> event.
            </summary>
            <remarks>
            Inheritors should call this method when any property of the lookup table has changed.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.DataLut.CreateMemento">
            <summary>
            Captures the state of the lookup table.
            </summary>
            <remarks>
            <para>
            The implementation should return an object containing enough state information so that,
            when <see cref="M:Macro.ImageViewer.Imaging.DataLut.SetMemento(System.Object)"/> is called, the lookup table can be restored to the original state.
            </para>
            <para>
            If the method is implemented, <see cref="M:Macro.ImageViewer.Imaging.DataLut.SetMemento(System.Object)"/> must also be implemented.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.DataLut.SetMemento(System.Object)">
            <summary>
            Restores the state of the lookup table.
            </summary>
            <param name="memento">An object that was originally created by <see cref="M:Macro.ImageViewer.Imaging.DataLut.CreateMemento"/>.</param>
            <remarks>
            <para>
            The implementation should return the lookup table to the original state captured by <see cref="M:Macro.ImageViewer.Imaging.DataLut.CreateMemento"/>.
            </para>
            <para>
            If you implement <see cref="M:Macro.ImageViewer.Imaging.DataLut.CreateMemento"/> to capture the lookup table's state, you must also implement this method
            to allow the state to be restored. Failure to do so will result in a <see cref="T:System.InvalidOperationException"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.DataLut.Length">
            <summary>
             Gets the length of <see cref="P:Macro.ImageViewer.Imaging.DataLut.Data"/>.
            </summary>
             <remarks>
             The reason for this member's existence is that <see cref="P:Macro.ImageViewer.Imaging.DataLut.Data"/> may
             not yet exist; this value is based solely on <see cref="P:Macro.ImageViewer.Imaging.DataLut.FirstMappedPixelValue"/>
             and <see cref="P:Macro.ImageViewer.Imaging.DataLut.LastMappedPixelValue"/>.
             </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.DataLut.LastMappedPixelValue">
            <summary>
            Gets the last mapped pixel value.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.InvariantEllipsePrimitive">
            <summary>
            An elliptical <see cref="T:Macro.ImageViewer.Graphics.InvariantPrimitive"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantEllipsePrimitive.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.InvariantEllipsePrimitive"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantEllipsePrimitive.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit test on the <see cref="T:Macro.ImageViewer.Graphics.InvariantEllipsePrimitive"/> at a given point.
            </summary>
            <param name="point">The mouse position in destination coordinates.</param>
            <returns>
            <b>True</b> if <paramref name="point"/> "hits" the <see cref="T:Macro.ImageViewer.Graphics.InvariantEllipsePrimitive"/>,
            <b>false</b> otherwise.
            </returns>
            <remarks>
            A "hit" is defined as when the mouse position is <see cref="F:Macro.ImageViewer.Graphics.VectorGraphic.HitTestDistance"/>
            screen pixels away from any point on the arc.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantEllipsePrimitive.GetClosestPoint(System.Drawing.PointF)">
            <summary>
            Gets the point where the ellipse intersects the line whose end points
            are the center of the ellipse and the specified point.
            </summary>
            <param name="point">A point in either source or destination coordinates.</param>
            <returns>The point on the graphic closest to the given <paramref name="point"/>.</returns>
            <remarks>
            <para>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>,
            the computation will be carried out in either source
            or destination coordinates.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantEllipsePrimitive.Contains(System.Drawing.PointF)">
            <summary>
            Returns a value indicating whether the specified point is
            contained in the graphic.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.ImageViewer.DisplaySetChangingEventArgs">
            <summary>
            Provides data for the <see cref="E:Macro.ImageViewer.EventBroker.DisplaySetChanging"/> event.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySetChangingEventArgs.#ctor(Macro.ImageViewer.IDisplaySet,Macro.ImageViewer.IDisplaySet)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.DisplaySetChangingEventArgs"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySetChangingEventArgs.CurrentDisplaySet">
            <summary>
            Gets the current <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySetChangingEventArgs.NewDisplaySet">
            <summary>
            Gets the new <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState">
            <summary>
            Base class for DICOM Softcopy Presentation State objects, as defined in DICOM PS 3.3 A.33.
            </summary>
            <remarks>
            <para>
            At this time, the only supported softcopy presentation states are the following:
            </para>
            <list type="table">
            <listheader><dicom>Reference</dicom><pstate><see cref="T:Macro.ImageViewer.PresentationStates.PresentationState">Presentation State</see> Class</pstate><pimage><see cref="T:Macro.ImageViewer.IPresentationImage">Presentation Image</see> Class</pimage></listheader>
            <item><dicom>PS 3.3 A.33.1</dicom><pstate><see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomGrayscaleSoftcopyPresentationState">Grayscale Softcopy Presentation State</see></pstate><pimage><see cref="T:Macro.ImageViewer.DicomGrayscalePresentationImage"/></pimage></item>
            <item><dicom>PS 3.3 A.33.2</dicom><pstate><see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomColorSoftcopyPresentationState">Color Softcopy Presentation State</see></pstate><pimage><see cref="T:Macro.ImageViewer.DicomColorPresentationImage"/></pimage></item>
            </list>
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.PresentationState">
            <summary>
            The base presentation state class from which all specific presentation state implementations derive.
            </summary>
            <remarks>
            The objects that constitute the presentation state of a given <see cref="T:Macro.ImageViewer.IPresentationImage"/> are defined by the specific implementations.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.PresentationState.#ctor">
            <summary>
            Constructs a new presentation state.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.PresentationState.Serialize(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Serializes the presentation state of the image to the current state object.
            </summary>
            <param name="image">The image whose presentation state is to be serialized.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.PresentationState.Serialize(System.Collections.Generic.IEnumerable{Macro.ImageViewer.IPresentationImage})">
            <summary>
            Serializes the presentation state of the given images to the current state object.
            </summary>
            <param name="images">The images whose presentation states are to be serialized.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.PresentationState.Deserialize(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Deserializes the presentation state from the current state object into the given image.
            </summary>
            <param name="image">The image to which the presentation state is to be deserialized.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.PresentationState.Deserialize(System.Collections.Generic.IEnumerable{Macro.ImageViewer.IPresentationImage})">
            <summary>
            Deserializes the presentation state from the current state object into the given images.
            </summary>
            <param name="images">The images to which the presentation state is to be deserialized.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.PresentationState.Clear(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Clears the presentation state of the given image.
            </summary>
            <remarks>
            Whether all presentation state concepts defined by the implementation are cleared, or only the
            objects actually defined by this particular state object are cleared, is up to the implementation.
            </remarks>
            <param name="image">The image whose presentation state is to be cleared.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.PresentationState.Clear(System.Collections.Generic.IEnumerable{Macro.ImageViewer.IPresentationImage})">
            <summary>
            Clears the presentation states of the given images.
            </summary>
            <remarks>
            Whether all presentation state concepts defined by the implementation are cleared, or only the
            objects actually defined by this particular state object are cleared, is up to the implementation.
            </remarks>
            <param name="image">The images whose presentation states are to be cleared.</param>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.PresentationState.DicomDefault">
            <summary>
            Gets the default <see cref="T:Macro.ImageViewer.PresentationStates.PresentationState"/> for DICOM images.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.#ctor(Macro.Dicom.SopClass)">
            <summary>
            Constructs a serialization-capable DICOM softcopy presentation state object.
            </summary>
            <param name="presentationStateSopClass">The SOP class of this type of softcopy presentation state.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.#ctor(Macro.Dicom.SopClass,Macro.Dicom.DicomFile)">
            <summary>
            Constructs a deserialization-only DICOM softcopy presentation state object.
            </summary>
            <param name="psSopClass">The SOP class of this type of softcopy presentation state.</param>
            <param name="dicomFile">The presentation state file.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.#ctor(Macro.Dicom.SopClass,Macro.Dicom.DicomAttributeCollection)">
            <summary>
            Constructs a deserialization-only DICOM softcopy presentation state object.
            </summary>
            <param name="psSopClass">The SOP class of this type of softcopy presentation state.</param>
            <param name="dataSource">An attribute collection containing the presentation state.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.#ctor(Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.Serialize(System.Collections.Generic.IEnumerable{Macro.ImageViewer.IPresentationImage})">
            <summary>
            Serializes the presentation state of the given images to the current state object.
            </summary>
            <param name="images">The images whose presentation states are to be serialized.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the presentation state has already been serialized to a file.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.Deserialize(System.Collections.Generic.IEnumerable{Macro.ImageViewer.IPresentationImage})">
            <summary>
            Deserializes the presentation state from the current state object into the given images.
            </summary>
            <param name="images">The images to which the presentation state is to be deserialized.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the presentation state has not yet been serialized to a file.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.Clear(System.Collections.Generic.IEnumerable{Macro.ImageViewer.IPresentationImage})">
            <summary>
            Clears the presentation states of the given images.
            </summary>
            <remarks>
            Whether all presentation state concepts defined by the implementation are cleared, or only the
            objects actually defined by this particular state object are cleared, is up to the implementation.
            </remarks>
            <param name="image">The images whose presentation states are to be cleared.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the presentation state has not yet been serialized to a file.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.PerformSerialization(System.Collections.Generic.IEnumerable{Macro.ImageViewer.IPresentationImage})">
            <summary>
            Called by the base <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/> to invoke presentation state serialization of the specified images.
            </summary>
            <param name="images">The images whose presentation states are to be serialized.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.PerformDeserialization(System.Collections.Generic.IEnumerable{Macro.ImageViewer.IPresentationImage})">
            <summary>
            Called by the base <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/> to invoke presentation state deserialization to the specified images.
            </summary>
            <param name="images">The images to which the presentation state is to be deserialized.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.CreateImageSopInstanceReference(Macro.ImageViewer.StudyManagement.ImageSop)">
            <summary>
            Creates a <see cref="T:Macro.Dicom.Iod.Macros.ImageSopInstanceReferenceMacro"/> to the given <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>.
            </summary>
            <param name="sop">The image SOP to which a reference is to be constructed.</param>
            <returns>An image SOP instance reference macro item.</returns>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.CreateImageSopInstanceReference(Macro.ImageViewer.StudyManagement.Frame)">
            <summary>
            Creates a <see cref="T:Macro.Dicom.Iod.Macros.ImageSopInstanceReferenceMacro"/> to the given <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>.
            </summary>
            <param name="frame">The image SOP frame to which a reference is to be constructed.</param>
            <returns>An image SOP instance reference macro item.</returns>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.Create(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Creates a <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/> for a given image.
            </summary>
            <param name="image">The image for which the presentation state should be created.</param>
            <returns>One of the derived <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/> classes, depending on the type of the <paramref name="image"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if softcopy presentation states for the type of the given <paramref name="image"/> are not supported.</exception>
            <seealso cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.Create(Macro.ImageViewer.IPresentationImage,Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.InitializeDicomSoftcopyPresentationStateCallback)">
            <summary>
            Creates a <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/> for a given image.
            </summary>
            <param name="image">The image for which the presentation state should be created.</param>
            <param name="callback">A callback method that initializes the instance properties of the created <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/>.</param>
            <returns>One of the derived <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/> classes, depending on the type of the <paramref name="image"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if softcopy presentation states for the type of the given <paramref name="image"/> are not supported.</exception>
            <seealso cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.Create(System.Collections.Generic.IEnumerable{Macro.ImageViewer.IPresentationImage})">
            <summary>
            Creates a minimal number of <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/>s for the given images.
            </summary>
            <remarks>
            <para>
            Presentation state instances can contain information for multiple images, but the images must all be of the same type,
            and contain non-conflicting presentation state information. This method creates a minimal number of presentation
            state objects for the collection of given images.
            </para>
            </remarks>
            <param name="images">The images for which presentation states are to be created.</param>
            <returns>A dictionary mapping of presentation images to its associated presentation state instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown if softcopy presentation states are not supported for the type of any one of the given <paramref name="images"/>.</exception>
            <seealso cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.Create(System.Collections.Generic.IEnumerable{Macro.ImageViewer.IPresentationImage},Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.InitializeDicomSoftcopyPresentationStateCallback)">
            <summary>
            Creates a minimal number of <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/>s for the given images.
            </summary>
            <remarks>
            <para>
            Presentation state instances can contain information for multiple images, but the images must all be of the same type,
            and contain non-conflicting presentation state information. This method creates a minimal number of presentation
            state objects for the collection of given images.
            </para>
            </remarks>
            <param name="images">The images for which presentation states are to be created.</param>
            <param name="callback">A callback method that initializes the instance properties of the created <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/>s.</param>
            <returns>A dictionary mapping of presentation images to its associated presentation state instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown if softcopy presentation states are not supported for the type of any one of the given <paramref name="images"/>.</exception>
            <seealso cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.Load(Macro.Dicom.DicomFile)">
            <summary>
            Loads a presentation state from a file.
            </summary>
            <param name="presentationState">The DICOM file containing the presentation state SOP instance.</param>
            <returns>A <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/> object of the correct type.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the given <paramref name="presentationState"/> is not a supported presentation state SOP class.</exception>
            <seealso cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.Load(System.Collections.Generic.IEnumerable{Macro.Dicom.DicomFile})">
            <summary>
            Loads a number of presentation states from multiple files.
            </summary>
            <param name="presentationStates">The DICOM files containing the presentation state SOP instances.</param>
            <returns>An enumeration of <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/> objects.</returns>
            <exception cref="T:System.ArgumentException">Thrown if one of the given <paramref name="presentationStates"/> is not a supported presentation state SOP class.</exception>
            <seealso cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.Load(Macro.Dicom.IDicomAttributeProvider)">
            <summary>
            Loads a presentation state from a data set.
            </summary>
            <param name="presentationState">The data set containing the presentation state SOP instance.</param>
            <returns>A <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/> object of the correct type.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the given <paramref name="presentationState"/> is not a supported presentation state SOP class.</exception>
            <seealso cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.Load(System.Collections.Generic.IEnumerable{Macro.Dicom.IDicomAttributeProvider})">
            <summary>
            Loads a number of presentation states from multiple data sets.
            </summary>
            <param name="presentationStates">The data sets containing the presentation state SOP instances.</param>
            <returns>An enumeration of <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/> objects.</returns>
            <exception cref="T:System.ArgumentException">Thrown if one of the given <paramref name="presentationStates"/> is not a supported presentation state SOP class.</exception>
            <seealso cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.IsSupported(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Tests to see if softcopy presentation states are supported for the type of the given image.
            </summary>
            <param name="image">The image whose support for softcopy presentation states is to be checked.</param>
            <returns>True if softcopy presentation states are supported for the type of the given image; False otherwise.</returns>
            <seealso cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.PresentationSopClass">
            <summary>
            Gets the SOP class of this type of softcopy presentation state.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.PresentationSopClassUid">
            <summary>
            Gets the SOP class UID of this type of softcopy presentation state.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.SpecificCharacterSet">
            <summary>
            Gets the specific character set for the presentation state's data set.
            </summary>
            <remarks>
            <para>
            By default, text attribute values will be encoded using UTF-8 Unicode (ISO-IR 192).
            If set to NULL or empty, values will be encoded using the default character repertoire (ISO-IR 6).
            </para>
            This property may only be set if the presentation state has not yet been serialized to a file.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the presentation state has already been serialized to a file.</exception>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.PresentationSeriesInstanceUid">
            <summary>
            Gets or sets the presentation state series instance UID.
            </summary>
            <remarks>
            This property may only be set if the presentation state has not yet been serialized to a file.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the presentation state has already been serialized to a file.</exception>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.PresentationSopInstanceUid">
            <summary>
            Gets or sets the presentation state SOP instance UID.
            </summary>
            <remarks>
            This property may only be set if the presentation state has not yet been serialized to a file.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the presentation state has already been serialized to a file.</exception>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.PresentationInstanceNumber">
            <summary>
            Gets or sets the presentation state instance number.
            </summary>
            <remarks>
            This property may only be set if the presentation state has not yet been serialized to a file.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the presentation state has already been serialized to a file.</exception>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.PresentationSeriesNumber">
            <summary>
            Gets or sets the presentation state series number.
            </summary>
            <remarks>
            This property may only be set if the presentation state has not yet been serialized to a file.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the presentation state has already been serialized to a file.</exception>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.PresentationSeriesDateTime">
            <summary>
            Gets or sets the presentation state series date/time.
            </summary>
            <remarks>
            <para>This property affects only the SeriesDate and SeriesTime attributes. The PresentationCreationDateTime is always the timestamp from when the call to <see cref="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.Serialize(System.Collections.Generic.IEnumerable{Macro.ImageViewer.IPresentationImage})"/> is made.</para>
            <para>This property may only be set if the presentation state has not yet been serialized to a file.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the presentation state has already been serialized to a file.</exception>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.PresentationContentLabel">
            <summary>
            Gets or sets the presentation state content label.
            </summary>
            <remarks>
            This property may only be set if the presentation state has not yet been serialized to a file.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the presentation state has already been serialized to a file.</exception>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.SourceAETitle">
            <summary>
            Gets or sets the instance creator's workstation AE title.
            </summary>
            <remarks>
            This property may only be set if the presentation state has not yet been serialized to a file.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the presentation state has already been serialized to a file.</exception>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.StationName">
            <summary>
            Gets or sets the instance creator's workstation name.
            </summary>
            <remarks>
            This property may only be set if the presentation state has not yet been serialized to a file.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the presentation state has already been serialized to a file.</exception>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.Institution">
            <summary>
            Gets or sets the instance creator's institution.
            </summary>
            <remarks>
            This property may only be set if the presentation state has not yet been serialized to a file.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the presentation state has already been serialized to a file.</exception>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.Manufacturer">
            <summary>
            Gets or sets the workstation's manufacturer.
            </summary>
            <remarks>
            This property may only be set if the presentation state has not yet been serialized to a file.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the presentation state has already been serialized to a file.</exception>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.ManufacturersModelName">
            <summary>
            Gets or sets the workstation's model name.
            </summary>
            <remarks>
            This property may only be set if the presentation state has not yet been serialized to a file.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the presentation state has already been serialized to a file.</exception>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.DeviceSerialNumber">
            <summary>
            Gets or sets the workstation's serial number.
            </summary>
            <remarks>
            This property may only be set if the presentation state has not yet been serialized to a file.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the presentation state has already been serialized to a file.</exception>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.SoftwareVersions">
            <summary>
            Gets or sets the workstation's software version numbers (backslash-delimited for multiple values).
            </summary>
            <remarks>
            This property may only be set if the presentation state has not yet been serialized to a file.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the presentation state has already been serialized to a file.</exception>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.DicomFile">
            <summary>
            Gets the DICOM file containing the presentation state after serialization.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the presentation state has not yet been serialized to a file.</exception>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.DataSet">
            <summary>
            Gets the underlying DICOM data set.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState.InitializeDicomSoftcopyPresentationStateCallback">
            <summary>
            Represents the callback method to initialize the instance properties of a <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState"/>.
            </summary>
            <param name="presentationState">A new, uninitialized presentation state SOP instance.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationStateBase`1.ConvertToPixelAddressRectangle(System.Drawing.Rectangle)">
            <summary>
            Computes a rectangle specifying the 1-based pixel address and the row and column offset to get the pixel address of the opposite corner
            given a rectangle specifying the 0-based coordinate and size (whose width and height need not be positive).
            </summary>
            <param name="rectangle">The 0-based rectangle specified as a 0-based coordinate and a size.</param>
            <returns>An equivalent rectangle specifying the 1-based pixel address of the coordinate and row and column offset to get the pixel address of the opposite corner.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the given rectangle has zero-area, as it cannot be represented in a 1-based pixel address rectangle.</exception>
            <remarks>
            <para>In DICOM and certain other applications, areas of images are identified with the first pixel being at position row 1 and column 1.
            In most Windows graphics rendering systems, imaging coordinates are identified as an infinitesimal point at the top-left corner of a given pixel
            and the coordinates are given in a 0-based system (that is, the first pixel has a coordinate of (0,0)).</para>
            <para>It is trivial to compute the addresses of the pixels included within the rectangle when the rectangle is positively-oriented
            (has positive width and height) since the left most pixels are in column <see cref="P:System.Drawing.Rectangle.X"/>+1, the right most pixels are in
            column <see cref="P:System.Drawing.Rectangle.X"/>+<see cref="P:System.Drawing.Rectangle.Width"/>, and so on. It is somewhat more complicated to compute when the
            rectangle is not positively-oriented due to the singularities when either <see cref="P:System.Drawing.Rectangle.Width"/> or <see cref="P:System.Drawing.Rectangle.Height"/>
            is 0 (and hence rectangles having zero-area cannot be specified as a pixel address rectangle - a pixel address rectangle having size
            0x0 is considered as containing 1 row and 1 column).</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationStateBase`1.DeserializeBitmapDisplayShutter(Macro.Dicom.Iod.Modules.BitmapDisplayShutterModuleIod,`0)">
            <summary>
            Deserializes the specified bitmap display shutter module.
            </summary>
            <remarks>
            This method must be called after <see cref="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationStateBase`1.DeserializeOverlayPlane(Macro.Dicom.Iod.Modules.OverlayPlaneModuleIod,`0)">the overlay planes have been deserialized</see>.
            </remarks>
            <param name="bitmapDisplayShutterModule"></param>
            <param name="image"></param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationStateBase`1.DeserializeOverlayActivation(Macro.Dicom.Iod.Modules.OverlayActivationModuleIod,`0)">
            <summary>
            Deserializes the specified overlay activation module.
            </summary>
            <remarks>
            This method must be called after <see cref="M:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationStateBase`1.DeserializeOverlayPlane(Macro.Dicom.Iod.Modules.OverlayPlaneModuleIod,`0)">the overlay planes have been deserialized</see>.
            </remarks>
            <param name="overlayActivationModule"></param>
            <param name="image"></param>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationStateBase`1.RelationshipSets">
            <summary>
            Gets a <see cref="T:Macro.Dicom.Iod.Modules.PresentationStateRelationshipModuleIod"/> for this data set.
            </summary>
            <remarks>
            As of the 2008 version of the DICOM standard, only the Blended Softcopy Presentation State IOD defines
            multiple presentation state relationship modules (as part of the presentation state blending module).
            Thus, only the implementation of the Blended Softcopy Presentation State should override this member
            to provide all the individual relationship modules. The default implementation assumes the module
            is available as a root member of the IOD.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomGrayscaleSoftcopyPresentationState.SerializeSoftcopyPresentationLut(Macro.Dicom.Iod.Modules.SoftcopyPresentationLutModuleIod,Macro.ImageViewer.PresentationStates.Dicom.DicomPresentationImageCollection{Macro.ImageViewer.DicomGrayscalePresentationImage})">
            <summary>
            Serializes the Softcopy Presentation LUT IOD module (DICOM PS 3.3, C.11.6)
            </summary>
            <param name="module">The IOD module.</param>
            <param name="images">The images to be serialized.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomGrayscaleSoftcopyPresentationState.DeserializeSoftcopyPresentationLut(Macro.Dicom.Iod.Modules.SoftcopyPresentationLutModuleIod,Macro.ImageViewer.DicomGrayscalePresentationImage)">
            <summary>
            Deserializes the Softcopy Presentation LUT IOD module (DICOM PS 3.3, C.11.6)
            </summary>
            <param name="module">The IOD module.</param>
            <param name="image">The <see cref="T:Macro.ImageViewer.IPresentationImage"/> to deserialize to.</param>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic">
            <summary>
            A callout graphic.
            </summary>
            <remarks>
            A callout can be used to label something in the scene graph. It is
            composed of a text label and a line that extends from the label
            to some user defined point in the scene.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.ICalloutGraphic">
            <summary>
            Defines an <see cref="T:Macro.ImageViewer.Graphics.IVectorGraphic"/> that consists of some text content associated with a particular anchor point.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ICalloutGraphic.Text">
            <summary>
            Gets the callout text.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ICalloutGraphic.FontSize">
            <summary>
            Gets or sets the font size in points used to display the callout text.
            </summary>
            <remarks>
            The default font size is 10 points.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ICalloutGraphic.FontName">
            <summary>
            Gets or sets the font name used to display the callout text.
            </summary>
            <remarks>
            The default font is Arial.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ICalloutGraphic.TextBoundingBox">
            <summary>
            Gets the bounding rectangle of the text portion of the callout.
            </summary>
            <remarks>
            This property is in either source or destination coordinates depending on the value of <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ICalloutGraphic.TextLocation">
            <summary>
            Gets or sets the location of the center of the text.
            </summary>
            <remarks>
            This property is in either source or destination coordinates depending on the value of <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/>.
            </remarks>
        </member>
        <member name="E:Macro.ImageViewer.InteractiveGraphics.ICalloutGraphic.TextLocationChanged">
            <summary>
            Occurs when the value of the <see cref="P:Macro.ImageViewer.InteractiveGraphics.ICalloutGraphic.TextLocation"/> property changes.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ICalloutGraphic.AnchorPoint">
            <summary>
            Gets or sets the point where the callout is anchored.
            </summary>
            <remarks>
            This property is in either source or destination coordinates depending on the value of <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/>.
            </remarks>
        </member>
        <member name="E:Macro.ImageViewer.InteractiveGraphics.ICalloutGraphic.AnchorPointChanged">
            <summary>
            Occurs when the value of the <see cref="P:Macro.ImageViewer.InteractiveGraphics.ICalloutGraphic.AnchorPoint"/> property changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.#ctor">
            <summary>
            Instantiates a new instance of <see cref="T:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.#ctor(System.String)">
            <summary>
            Instantiates a new instance of <see cref="T:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic"/>.
            </summary>
            <param name="text">The label text to display on the callout.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.#ctor(Macro.ImageViewer.InteractiveGraphics.CalloutGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.Graphics.CompositeGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.InitializeTextControlGraphic(Macro.ImageViewer.Graphics.ITextGraphic)">
            <summary>
            Initializes the control chain for the text graphic portion of the callout.
            </summary>
            <remarks>
            The default implementation creates a <see cref="T:Macro.ImageViewer.InteractiveGraphics.MoveControlGraphic"/> to allow the user to independently control moving the text portion.
            </remarks>
            <param name="textGraphic">The text graphic to be controlled.</param>
            <returns>A control graphic chain controlling the text graphic.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.InitializePointControlGraphic(Macro.ImageViewer.Graphics.IPointGraphic)">
            <summary>
            Initializes the control chain for the anchor point of the callout.
            </summary>
            <remarks>
            The default implementation creates a pass-through <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> that has no user-interactive control methods of its own.
            </remarks>
            <param name="pointGraphic">The anchor point to be controlled.</param>
            <returns>A control graphic chain controlling the anchor point.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.GetTextClosestPoint(System.Drawing.PointF)">
            <summary>
            Gets the point on the text graphic closest to the specified point in either source or destination coordinates.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.OnDrawing">
            <summary>
            Fires the <see cref="E:Macro.ImageViewer.Graphics.Graphic.Drawing"/> event.  Should be called by an <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/>
            for each object just before it is drawn/rendered, hence the reason it is public.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.OnColorChanged">
            <summary>
            Called when the value of <see cref="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.Color"/> changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.OnTextChanged">
            <summary>
            Called when the value of <see cref="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.Text"/> changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.OnTextLocationChanged">
            <summary>
            Called when the value of <see cref="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.TextLocation"/> changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.OnAnchorPointChanged">
            <summary>
            Called when the value of <see cref="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.AnchorPoint"/> changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.CreateMemento">
            <summary>
            Creates a memento of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.SetMemento(System.Object)">
            <summary>
            Sets a memento for this object.
            </summary>
            <param name="memento"></param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.Macro#ImageViewer#InputManagement#IMouseButtonHandler#Start(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by the framework each time a mouse button is pressed.
            </summary>
            <remarks>
            As a general rule, if the <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> object did anything as a result of this call, it must 
            return true.  If false is returned, <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Start(Macro.ImageViewer.InputManagement.IMouseInformation)"/> is called on other <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/>s
            until one returns true.
            </remarks>
            <returns>
            True if the <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> did something as a result of the call, 
            and hence would like to receive capture.  Otherwise, false.
            </returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.Macro#ImageViewer#InputManagement#IMouseButtonHandler#Track(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by the framework when the mouse has moved.
            </summary>
            <remarks>
            A button does not necessarily have to be down for this message to be called.  The framework can
            call it any time the mouse moves.
            </remarks>
            <returns>True if the message was handled, otherwise false.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.Macro#ImageViewer#InputManagement#IMouseButtonHandler#Stop(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by the framework when the mouse button is released.
            </summary>
            <returns>
            True if the framework should <b>not</b> release capture, otherwise false.
            </returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.Macro#ImageViewer#InputManagement#IMouseButtonHandler#Cancel">
            <summary>
            Called by the framework to let <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> perform any necessary cleanup 
            when capture is going to be forcibly released.
            </summary>
            <remarks>
            It is important that this method is implemented correctly and doesn't simply do nothing when it is inappropriate
            to do so, otherwise odd behaviour may be experienced.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.GetExportedActions(System.String,Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Gets a set of exported <see cref="T:Macro.Desktop.Actions.IAction"/>s.
            </summary>
            <param name="site">The action model site at which the actions should reside.</param>
            <param name="mouseInformation">The mouse input when the action model was requested, such as in response to a context menu request.</param>
            <returns>A set of exported <see cref="T:Macro.Desktop.Actions.IAction"/>s.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.GetCursorToken(System.Drawing.Point)">
            <summary>
            Gets the cursor token to be shown at the current mouse position.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.TextGraphic">
            <summary>
            Gets the underlying <see cref="T:Macro.ImageViewer.Graphics.ITextGraphic"/> representing the text display of the callout.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.TextControlGraphic">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/> controlling the <see cref="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.TextGraphic"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.PointGraphic">
            <summary>
            Gets the underlying <see cref="T:Macro.ImageViewer.Graphics.IPointGraphic"/> representing the anchor point of the callout.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.PointControlGraphic">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/> controlling the M<see cref="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.PointGraphic"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.Text">
            <summary>
            Gets or sets the callout text.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.TextLocation">
            <summary>
            Gets or sets the location of the center of the text.
            </summary>
            <remarks>
            This property is in either source or destination coordinates depending on the value of <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.AnchorPoint">
            <summary>
            Gets or sets the point where the callout is anchored.
            </summary>
            <remarks>
            This property is in either source or destination coordinates depending on the value of <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.AttachmentPoint">
            <summary>
            Gets the point where the callout line attaches to the text graphic.
            </summary>
            <remarks>
            The attachment point of the callout line is automatically
            calculated so that it appears as though it starts
            from the center of the text label.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.FontName">
            <summary>
            Gets or sets the font name used to display the callout text.
            </summary>
            <remarks>
            The default font is Arial.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.FontSize">
            <summary>
            Gets or sets the font size in points used to display the callout text.
            </summary>
            <remarks>
            The default font size is 10 points.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.ShowArrowhead">
            <summary>
            Gets or sets a value indicating whether or not to show an arrowhead on the end of the callout line.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.TextBoundingBox">
            <summary>
            Gets the bounding rectangle of the text portion of the callout.
            </summary>
            <remarks>
            This property is in either source or destination coordinates depending on the value of <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.Color">
            <summary>
            Gets or sets the colour.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.TextLocationChanged">
            <summary>
            Occurs when the value of the <see cref="P:Macro.ImageViewer.InteractiveGraphics.ICalloutGraphic.TextLocation"/> property changes.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.AnchorPointChanged">
            <summary>
            Occurs when the value of the <see cref="P:Macro.ImageViewer.InteractiveGraphics.ICalloutGraphic.AnchorPoint"/> property changes.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.Macro#ImageViewer#InputManagement#IMouseButtonHandler#Behaviour">
            <summary>
            Allows the <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> to override certain default framework behaviour.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.IPointGraphic">
            <summary>
            Defines an <see cref="T:Macro.ImageViewer.Graphics.IVectorGraphic"/> that can be defined as a single point.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IPointGraphic.Point">
            <summary>
            Gets or sets the point associated with this graphic.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.IPointGraphic.PointChanged">
            <summary>
            Occurs when the value of <see cref="P:Macro.ImageViewer.Graphics.IPointGraphic.Point"/> changes.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.IDicomPresentationImage">
            <summary>
            The interface for all DICOM-based Presentation Images.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IDicomPresentationImage.DicomGraphics">
            <summary>
            Gets direct access to the presentation image's collection of domain-level graphics.
            Consider using <see cref="M:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicsPlane.GetDicomGraphicsPlane(Macro.ImageViewer.IDicomPresentationImage)"/> instead.
            </summary>
            <remarks>
            <para>
            Use <see cref="P:Macro.ImageViewer.IDicomPresentationImage.DicomGraphics"/> to add DICOM-defined graphics that you want to
            overlay the image at the domain-level. These graphics are rendered
            before any <see cref="P:Macro.ImageViewer.Graphics.IApplicationGraphicsProvider.ApplicationGraphics"/>
            and before any <see cref="P:Macro.ImageViewer.Graphics.IOverlayGraphicsProvider.OverlayGraphics"/>.
            </para>
            <para>
            This property gives direct access to all the domain-level graphics of a DICOM presentation image.
            However, most of the graphics concepts defined in the DICOM Standard are already supported
            by the <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicsPlane"/> which inserts itself into this domain-level collection.
            Consider using <see cref="M:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicsPlane.GetDicomGraphicsPlane(Macro.ImageViewer.IDicomPresentationImage)"/> to get
            a reference to a usable DicomGraphicsPlane object instead, since that provides all the logical support
            for layer activation and shutters in addition to enumerating all domain-level graphics. This property
            may change, be deprecated, and even outright removed in a future framework release.
            </para>
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicsFactory">
            <summary>
            Factory class to create the individual graphics components of a DICOM image for presentation.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic">
            <summary>
            A 1-bit bitmap overlay plane <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>.
            </summary>
            <remarks>
            This implementation does not support overlays embedded in the unused bits of the
            <see cref="F:Macro.Dicom.DicomTags.PixelData"/> attribute, a retired usage from previous versions
            of the DICOM Standard. 
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.#ctor(Macro.Dicom.Iod.Modules.OverlayPlane,System.Byte[],Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSource)">
            <summary>
            Constructs an <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic"/> for a single-frame overlay plane using a pre-processed overlay pixel data buffer.
            </summary>
            <remarks>
            <para>
            This overload should only be used for single-frame overlay planes. Multi-frame overlay planes should process the overlay data
            into separate buffers and then construct individual graphics using <see cref="M:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.#ctor(Macro.Dicom.Iod.Modules.OverlayPlane,System.Byte[],System.Int32,Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSource)"/>.
            </para>
            <para>
            The <paramref name="overlayPixelData"/> parameter allows for the specification of an alternate source of overlay pixel data, such
            as the unpacked contents of <see cref="F:Macro.Dicom.DicomTags.OverlayData"/> or the extracted, inflated overlay pixels of <see cref="F:Macro.Dicom.DicomTags.PixelData"/>.
            Although the format should be 8-bits per pixel, every pixel should either be 0 or 255. This will allow pixel interpolation algorithms
            sufficient range to produce a pleasant image. (If the data was either 0 or 1, regardless of the bit-depth, most interpolation algorithms
            will interpolate 0s for everything in between!)
            </para>
            </remarks>
            <param name="overlayPlaneIod">The IOD object containing properties of the overlay plane.</param>
            <param name="overlayPixelData">The overlay pixel data in 8-bits per pixel format, with each pixel being either 0 or 255.</param>
            <param name="source">A value identifying the source of the overlay plane.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="overlayPixelData"/> is NULL or 0-length.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.#ctor(Macro.Dicom.Iod.Modules.OverlayPlane,System.Byte[],System.Int32,Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSource)">
            <summary>
            Constructs an <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic"/> for a single or multi-frame overlay plane using a pre-processed overlay pixel data buffer.
            </summary>
            <remarks>
            <para>
            The <paramref name="overlayPixelData"/> parameter allows for the specification of an alternate source of overlay pixel data, such
            as the unpacked contents of <see cref="F:Macro.Dicom.DicomTags.OverlayData"/> or the extracted, inflated overlay pixels of <see cref="F:Macro.Dicom.DicomTags.PixelData"/>.
            Although the format should be 8-bits per pixel, every pixel should either be 0 or 255. This will allow pixel interpolation algorithms
            sufficient range to produce a pleasant image. (If the data was either 0 or 1, regardless of the bit-depth, most interpolation algorithms
            will interpolate 0s for everything in between!)
            </para>
            </remarks>
            <param name="overlayPlaneIod">The IOD object containing properties of the overlay plane.</param>
            <param name="overlayPixelData">The overlay pixel data in 8-bits per pixel format, with each pixel being either 0 or 255.</param>
            <param name="frameIndex">The overlay frame index (0-based). Single-frame overlays should specify 0.</param>
            <param name="source">A value identifying the source of the overlay plane.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="overlayPixelData"/> is NULL or 0-length.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new user-created <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic"/> with the specified dimensions.
            </summary>
            <param name="rows">The number of rows in the overlay.</param>
            <param name="columns">The number of columns in the overlay.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.#ctor(Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.CreateOverlayData(System.Boolean)">
            <summary>
            Creates a packed overlay data object from the contents of this overlay plane.
            </summary>
            <param name="bigEndianWords">A value indciating if the packed overlay data should be encoded as 16-bit words with big endian byte ordering.</param>
            <returns>A packed overlay data object.</returns>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.OverlayPixelData">
            <summary>
            Gets the raw overlay pixel data as an 8-bit grayscale pixel data buffer.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.Index">
            <summary>
            Gets the overlay group index in which the overlay was encoded.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.FrameIndex">
            <summary>
            Gets the frame index of this overlay frame within the original overlay data.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.Source">
            <summary>
            Gets a value indicating the source of the overlay plane.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.Label">
            <summary>
            Gets the label or name of the overlay plane.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.Description">
            <summary>
            Gets the description of the overlay plane.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.Type">
            <summary>
            Gets a value indicating the type of content represented by the overlay plane.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.Subtype">
            <summary>
            Gets a value identifying the intended purpose of the overlay.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.Origin">
            <summary>
            Gets the location of the top left corner of the overlay relative to the image.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.Rows">
            <summary>
            Gets the number of rows in the overlay plane.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.Columns">
            <summary>
            Gets the number of columns in the overlay plane.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.GrayPresentationValue">
            <summary>
            Gets or sets the 16-bit grayscale presentation value in which the overlay should be drawn.
            </summary>
            <remarks>
            DICOM overlays are strictly 1-bit images, so each overlay pixels is either present or not.
            The display of present pixels is no longer defined by the data source but is now
            implementation specific. The <see cref="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.GrayPresentationValue"/> and <see cref="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.Color"/>
            properties allows this display to be customized by client code. A null value for
            <see cref="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.Color"/> causes the <see cref="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.GrayPresentationValue"/> to be used.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.Color">
            <summary>
            Gets or sets the presentation color in which the overlay should be drawn.
            </summary>
            <remarks>
            DICOM overlays are strictly 1-bit images, so each overlay pixels is either present or not.
            The display of present pixels is no longer defined by the data source but is now
            implementation specific. The <see cref="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.GrayPresentationValue"/> and <see cref="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.Color"/>
            properties allows this display to be customized by client code. A null value for
            <see cref="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.Color"/> causes the <see cref="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.GrayPresentationValue"/> to be used.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.Macro#ImageViewer#PresentationStates#IShutterGraphic#PresentationValue">
            <summary>
            Gets or sets the 16-bit grayscale presentation value which should replace the shuttered pixels.
            </summary>
            <remarks>
            The display of shuttered pixels is no longer defined by the data source but is now
            implementation specific. The <see cref="P:Macro.ImageViewer.PresentationStates.IShutterGraphic.PresentationValue"/> and <see cref="P:Macro.ImageViewer.PresentationStates.IShutterGraphic.PresentationColor"/>
            properties allows this display to be customized by client code.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.Macro#ImageViewer#PresentationStates#IShutterGraphic#PresentationColor">
            <summary>
            Gets or sets the presentation color which should replace the shuttered pixels.
            </summary>
            <remarks>
            The display of shuttered pixels is no longer defined by the data source but is now
            implementation specific. The <see cref="P:Macro.ImageViewer.PresentationStates.IShutterGraphic.PresentationValue"/> and <see cref="P:Macro.ImageViewer.PresentationStates.IShutterGraphic.PresentationColor"/>
            properties allows this display to be customized by client code.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.GrayscaleColorMap">
            <summary>
            A Grayscale Color Map.
            </summary>
            <remarks>
            This class should not be instantiated directly, but through the corresponding factory.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.ColorMap">
            <summary>
            Implements a Color Map as a LUT.
            </summary>
            <remarks>
            The values in the LUT represent ARGB values that are used 
            by an <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/> to display the image.
            </remarks>
            <seealso cref="T:Macro.ImageViewer.Imaging.GeneratedDataLut"/>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.GeneratedDataLut">
            <summary>
            Abstract class providing the base implementation for Data Luts that are purely generated.
            </summary>
            <remarks>
            Often, Linear Luts are created by deriving from this class to improve performance so that
            the calculation is only performed once.  For an example, see <see cref="T:Macro.ImageViewer.Imaging.ModalityLutLinear"/>.
            </remarks>
            <seealso cref="T:Macro.ImageViewer.Imaging.DataLut"/>
            <seealso cref="T:Macro.ImageViewer.Imaging.IGeneratedDataLut"/>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.IGeneratedDataLut">
            <summary>
            An <see cref="T:Macro.ImageViewer.Imaging.IDataLut"/> that is purely generated.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Imaging.IDataLut"/>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IGeneratedDataLut.Clear">
            <summary>
            Called by the framework to release any data held by the lut; the Lut should be capable
            of recreating the data when it is needed.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.GeneratedDataLut.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.GeneratedDataLut.Create">
            <summary>
            Inheritors must implement this method and populate the Lut using an algorithm.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.GeneratedDataLut.OnLutChanged">
            <summary>
            Fires the <see cref="E:Macro.ImageViewer.Imaging.DataLut.LutChanged"/> event.
            </summary>
            <remarks>
            Inheritors should call this method when any property of the Lut has changed.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.GeneratedDataLut.Clear">
            <summary>
            Clears the data in the Lut; the Lut can be recreated at will by calling <see cref="M:Macro.ImageViewer.Imaging.GeneratedDataLut.Create"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.GeneratedDataLut.FirstMappedPixelValue">
            <summary>
            Since the data lut is generated, simply returns <see cref="P:Macro.ImageViewer.Imaging.IComposableLut.MinInputValue"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.GeneratedDataLut.LastMappedPixelValue">
            <summary>
            Since the data lut is generated, simply returns <see cref="P:Macro.ImageViewer.Imaging.IComposableLut.MaxInputValue"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.GeneratedDataLut.Data">
            <summary>
            Gets the Lut's data, lazily created.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.GeneratedDataLut.Item(System.Int32)">
            <summary>
            Looks up and returns a value at a particular index in the Lut.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.IColorMap">
            <summary>
            Defines the properties and methods to access a color map that defines the mapping of single-channel input pixel values to ARGB color values.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IColorMap.GetKey">
            <summary>
            Gets a string key that identifies this particular color map's characteristics.
            </summary>
            <remarks>
            This method is not to be confused with <b>equality</b>, since some color maps can be
            dependent upon the actual image to which it belongs.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IColorMap.GetDescription">
            <summary>
            Gets an abbreviated description of the color map.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IColorMap.Clone">
            <summary>
            Creates a deep-copy of the <see cref="T:Macro.ImageViewer.Imaging.IColorMap"/>.
            </summary>
            <remarks>
            Implementations may return NULL from this method when appropriate.	
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IColorMap.FirstMappedPixelValue">
            <summary>
            Gets the first mapped pixel value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IColorMap.Data">
            <summary>
            Gets the color map data as a lookup table.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IColorMap.MinInputValue">
            <summary>
            Gets or sets the minimum input value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IColorMap.MaxInputValue">
            <summary>
            Gets or sets the maximum input value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IColorMap.Item(System.Int32)">
            <summary>
            Gets the output ARGB color at a given input index.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Imaging.IColorMap.LutChanged">
            <summary>
            Fired when the color map has changed in some way.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorMap.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorMap.GetKey">
            <summary>
            Gets a string key that identifies this particular LUT's characteristics, so that 
            an image's <see cref="T:Macro.ImageViewer.Imaging.IComposedLut"/> can be more efficiently determined.
            </summary>
            <remarks>
            You should not have to override this method.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorMap.Clone">
            <summary>
            Creates a deep-copy of the <see cref="T:Macro.ImageViewer.Imaging.IColorMap"/>.
            </summary>
            <remarks>
            <see cref="T:Macro.ImageViewer.Imaging.IColorMap"/> implementations may return NULL from this method when appropriate.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.ColorMap.MinOutputValue">
            <summary>
            Not applicable.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown always.</exception>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.ColorMap.MaxOutputValue">
            <summary>
            Not applicable.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown always.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.GrayscaleColorMap.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.GrayscaleColorMap.Create">
            <summary>
            Generates the Lut.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.GrayscaleColorMap.GetDescription">
            <summary>
            Returns an abbreviated description of the Lut.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic.GrayscaleColorMap.#ctor">
            <summary>
            Cloning constructor
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicsFactory.ErrorOverlayPlaneGraphic.#ctor(Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DicomPresentationImageSettings.AllowWindowingOnColorImages">
            <summary>
            Enables or disables VOI windowing support on color images.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Rendering.FontFactory">
            <summary>
            Simple flyweight factory for fonts.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationLayoutStoreSettings.LayoutSettingsXml">
            <summary>
            XML document containing text overlay configurations.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Mathematics.RectangleUtilities">
            <summary>
            A collection of utility methods that operation on rectangles.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.RectangleUtilities.Intersect(System.Drawing.RectangleF,System.Drawing.RectangleF)">
             <summary>
             Computes the intersection between two rectangles.
             </summary>
             <param name="primaryRectangle"></param>
             <param name="secondaryRectangle"></param>
             <returns></returns>
             <remarks>
             .NET's Rectangle class does not properly compute intersections
             between rectangles when either the height and/or width is negative.
            
             NOTE: the order in which rectangles are passed into this function is IMPORTANT!
             The function maintains the sense/direction (of the width and height) of the first
             rectangle passed in.
             </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.RectangleUtilities.RoundInflate(System.Drawing.RectangleF)">
            <summary>
            Rounds the 4 sides (top, left, right, bottom) to integer values, but
            it does not do typical float-style rounding.  The values are rounded
            away from the center of the rectangle.
            </summary>
            <param name="rect"></param>
            <returns>A new rectangle that has been rounded away from the centre
            of the original input rectangle.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.RectangleUtilities.DoesIntersect(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Determines if the two input rectangles intersect at all.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.RectangleUtilities.MakeRectangleZeroBased(System.Drawing.Rectangle)">
            <summary>
            Shrinks the bottom and right coordinates of a rectangle by 1.
            </summary>
            <param name="rect"></param>
            <returns></returns>
            <remarks>
            When using a Rectangle's left, top, right, bottom paramters as coordinates,
            (say, when identifying pixel location in an image) it is often useful for the
            right and bottom parameters to be exactly one less.  For example, if a Bitmap
            is 10x10 and represented by Rectangle(0,0,10,10) calling Bitmap.GetPixel(right, bottom)
            won't work.  However, it does work if the bitmap is represented by Rectangle(0,0,9,9).
            Note that if the width and/or height of the rectangle is negative, this method
            will shrink the left and/or top values by one instead.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.RectangleUtilities.ComputeBoundingRectangle(System.Drawing.PointF[])">
            <summary>
            Computes the bounding rectangle of a collection of points.
            </summary>
            <param name="points">A collection of points.</param>
            <returns>The bounding rectangle of all the points.</returns>
            <exception cref="T:System.NullReferenceException">If the input array is null.</exception>
            <exception cref="T:System.ArgumentException">If the input array is empty.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.RectangleUtilities.ComputeBoundingRectangle(System.Collections.Generic.IEnumerable{System.Drawing.RectangleF})">
            <summary>
            Computes the bounding rectangle of a collection of rectangle.
            </summary>
            <param name="rectangles">A collection of rectangles.</param>
            <returns>The bounding rectangle that encompasses all the rectangles.</returns>
            <exception cref="T:System.NullReferenceException">If the input collection is null.</exception>
            <exception cref="T:System.ArgumentException">If the input collection is empty.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.RectangleUtilities.ComputeBoundingRectangle(System.Collections.Generic.IEnumerable{System.Drawing.PointF})">
            <summary>
            Computes the bounding rectangle of a collection of points.
            </summary>
            <param name="points">A collection of points.</param>
            <returns>The bounding rectangle of all the points.</returns>
            <exception cref="T:System.NullReferenceException">If the input collection is null.</exception>
            <exception cref="T:System.ArgumentException">If the input collection is empty.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.RectangleUtilities.IsRectangleNormalized(System.Drawing.RectangleF)">
            <summary>
            Returns a value indicating whether the specified rectangle is normalized.
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.RectangleUtilities.VerifyNormalizedRectangle(System.Drawing.RectangleF)">
            <summary>
            Verifies that the specified rectangle is normalized.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when the rectangle is not normalized.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.RectangleUtilities.CalculateSubRectangle(System.Drawing.Rectangle,System.Drawing.RectangleF)">
            <summary>
            Calculates a sub-rectangle of the <paramref name="parentRectangle"/> given a 
            normalized rectangle (see <paramref name="normalizedRectangle"/>).
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.RectangleUtilities.CalculateNormalizedSubRectangle(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Calculates the normalized rectangle of <paramref name="subRectangle"/> within <paramref name="parentRectangle"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.RectangleUtilities.ConvertToPositiveRectangle(System.Drawing.Rectangle)">
            <summary>
            Takes a rectangle whose width and/or height may be negative and converts it to
            an equivalent rectangle whose width and height are guaranteed to be positive
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
            <remarks>
            Some computations assume non-negative widths and heights. This function may be used in such cases
            to convert the rectangle.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.RectangleUtilities.ConvertToPositiveRectangle(System.Drawing.RectangleF)">
            <summary>
            Takes a rectangle whose width and/or height may be negative and converts it to
            an equivalent rectangle whose width and height are guaranteed to be positive
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
            <remarks>
            Some computations assume non-negative widths and heights. This function may be used in such cases
            to convert the rectangle.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.RectangleUtilities.ConvertToRectangle(System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Computes a rectangle from a centroid and a set of dimensions.
            </summary>
            <param name="centroid">The centroid of the rectangle.</param>
            <param name="dimensions">The dimensions of the rectangle.</param>
            <returns>A rectangle of given dimensions centered around the centroid.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.RectangleUtilities.ConvertToRectangle(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Computes a rectangle from a centroid and a set of dimensions.
            </summary>
            <param name="centroid">The centroid of the rectangle.</param>
            <param name="dimensions">The dimensions of the rectangle.</param>
            <returns>A rectangle of given dimensions centered around the centroid.</returns>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.GraphicCollection">
            <summary>
            A collection of <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> objects.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.GraphicCollection.#ctor">
            <summary>
            Instantiates a new instance of <see cref="T:Macro.ImageViewer.Graphics.GraphicCollection"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.ComposableLut">
            <summary>
            Abstract base implementation for a lookup table in the standard grayscale image display pipeline that performs any additional transformation prior to selecting the VOI range.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Imaging.LutComposer"/>
            <seealso cref="T:Macro.ImageViewer.Imaging.IComposableLut"/>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.ComposableLut.MinInputValue">
            <summary>
            Gets or sets the minimum input value.
            </summary>
            <remarks>
            This value is set internally by the framework and should not be modified by client code.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.ComposableLut.MaxInputValue">
            <summary>
            Gets or sets the maximum input value.
            </summary>
            <remarks>
            This value is set internally by the framework and should not be modified by client code.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.ComposableLut.MinOutputValue">
            <summary>
            Gets or sets the minimum output value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.ComposableLut.MaxOutputValue">
            <summary>
            Gets or sets the maximum output value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.ComposableLut.Item(System.Double)">
            <summary>
            Gets the output value of the lookup table for a given input value.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.ImageViewerComponentViewExtensionPoint">
            <summary>
            An <see cref="T:Macro.Common.ExtensionPoint"/> for views on to the 
            <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.ImageViewerToolExtensionPoint">
            <summary>
            An <see cref="T:Macro.Common.ExtensionPoint"/> for image viewer tools.
            </summary>
            <remarks>
            This <see cref="T:Macro.Common.ExtensionPoint"/> is the means by which tools
            are added to the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.WindowBehaviour">
            <summary>
            Specifies window launch options for the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.WindowBehaviour.Auto">
            <summary>
            Same as <see cref="F:Macro.ImageViewer.WindowBehaviour.Single"/> currently.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.WindowBehaviour.Single">
            <summary>
            Specifies that the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> should be launched
            in a single (e.g. active) desktop window.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.WindowBehaviour.Separate">
            <summary>
            Specifies that the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> should be launched
            in a separate desktop window.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.LaunchImageViewerArgs">
            <summary>
            Arguments for launching an <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.LaunchImageViewerArgs.#ctor(Macro.ImageViewer.WindowBehaviour)">
            <summary>
            Mandatory constructor.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.LaunchImageViewerArgs.WindowBehaviour">
            <summary>
            Gets the <see cref="F:Macro.ImageViewer.LaunchImageViewerArgs.WindowBehaviour"/> to be used to launch the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.LaunchImageViewerArgs.Title">
            <summary>
            Gets or sets the title to be used for the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> when launched.
            </summary>
            <remarks>
            Leave this value null if you want the title to be automatically determined.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.ImageViewerComponent">
            <summary>
            An <see cref="T:Macro.Desktop.ApplicationComponent"/> capable of image display.
            </summary>
            <remarks>
            The <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> (IVC) is an <see cref="T:Macro.Desktop.ApplicationComponent"/> 
            whose purpose is to display images and to allow users to interact with those images.
            It provides a number of core services, such as image loading, layout, selection,
            rendering, etc.  An API and a number of extension points allow plugin developers
            to extend the functionality of the IVC.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.IImageViewer">
            <summary>
            Defines an image viewer.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.IImageViewer.LoadStudy(Macro.ImageViewer.LoadStudyArgs)">
            <summary>
            Loads a study using the specified parameters.
            </summary>
            <remarks>After this method is executed, the image viewer's <see cref="P:Macro.ImageViewer.IImageViewer.StudyTree"/>
            will be populated with the appropriate <see cref="T:Macro.ImageViewer.StudyManagement.Study"/>, <see cref="T:Macro.ImageViewer.StudyManagement.Series"/> 
            and <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> objects.
            
            By default, the Framework provides an implementation of 
            <see cref="T:Macro.ImageViewer.StudyManagement.IStudyLoader"/> called <b>LocalStoreStudyLoader</b> which loads
            studies from the local database.  If you have implemented your own 
            <see cref="T:Macro.ImageViewer.StudyManagement.IStudyLoader"/> and want to load a study using that implementation,
            just pass in the name provided by <see cref="P:Macro.ImageViewer.StudyManagement.IStudyLoader.Name"/> as the source.
            </remarks>
            <param name="loadStudyArgs">A <see cref="T:Macro.ImageViewer.LoadStudyArgs"/> object containing information about the study to be loaded.</param>
            <exception cref="T:Macro.ImageViewer.InUseLoadStudyException">The specified study is in use and cannot be opened at this time.</exception>
            <exception cref="T:Macro.ImageViewer.NearlineLoadStudyException">The specified study is nearline and cannot be opened at this time.</exception>
            <exception cref="T:Macro.ImageViewer.OfflineLoadStudyException">The specified study is offline and cannot be opened at this time.</exception>
            <exception cref="T:Macro.ImageViewer.NotFoundLoadStudyException">The specified study could not be found.</exception>
            <exception cref="T:Macro.ImageViewer.LoadStudyException">One or more images could not be opened, or an unspecified error has occurred.</exception>
            <exception cref="T:Macro.ImageViewer.StudyManagement.StudyLoaderNotFoundException">The specified <see cref="T:Macro.ImageViewer.StudyManagement.IStudyLoader"/> could not be found.</exception>
        </member>
        <member name="M:Macro.ImageViewer.IImageViewer.LoadImages(System.String[])">
            <summary>
            Loads images with the specified file paths.
            </summary>
            <param name="path">The file path of the image.</param>
            <exception cref="T:Macro.ImageViewer.LoadSopsException">One or more images could not be opened.</exception>
            <exception cref="T:System.ArgumentNullException">A parameter is <b>null</b>.</exception>
        </member>
        <member name="M:Macro.ImageViewer.IImageViewer.LoadImages(System.String[],Macro.Desktop.IDesktopWindow,System.Boolean@)">
            <summary>
            Loads images with the specified file paths and displays a progress bar.
            </summary>
            <param name="files">A list of file paths.</param>
            <param name="desktop">The desktop window.  This is necessary for
            a progress bar to be shown.</param>
            <param name="cancelled">A value that indicates whether the operation
            was cancelled.</param>
            <exception cref="T:Macro.ImageViewer.LoadSopsException">One or more images could not be opened.</exception>
            <exception cref="T:System.ArgumentNullException">A parameter is <b>null</b>.</exception>
        </member>
        <member name="M:Macro.ImageViewer.IImageViewer.Layout">
            <summary>
            Lays out the images in the <see cref="T:Macro.ImageViewer.IImageViewer"/> using
            the current layout manager.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageViewer.DesktopWindow">
            <summary>
            Get the host <see cref="T:Macro.Desktop.IDesktopWindow"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageViewer.StudyTree">
            <summary>
            Gets the image viewer's <see cref="P:Macro.ImageViewer.IImageViewer.StudyTree"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageViewer.LayoutManager">
            <summary> 
            Gets the <see cref="T:Macro.ImageViewer.ILayoutManager"/> associated with this image viewer. 
            </summary> 
        </member>
        <member name="P:Macro.ImageViewer.IImageViewer.PhysicalWorkspace">
            <summary>
            Gets the <see cref="P:Macro.ImageViewer.IImageViewer.PhysicalWorkspace"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageViewer.LogicalWorkspace">
            <summary>
            Gets the <see cref="P:Macro.ImageViewer.IImageViewer.LogicalWorkspace"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageViewer.EventBroker">
            <summary>
            Gets the <see cref="P:Macro.ImageViewer.IImageViewer.EventBroker"/>.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.IImageViewer.Closing">
            <summary>
            Occurs when the <see cref="T:Macro.ImageViewer.IImageViewer"/> is about to close.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageViewer.SelectedImageBox">
            <summary>
            Gets the currently selected <see cref="T:Macro.ImageViewer.IImageBox"/>
            </summary>
            <value>The currently selected <see cref="T:Macro.ImageViewer.IImageBox"/>, or <b>null</b> if
            no <see cref="T:Macro.ImageViewer.IImageBox"/> is currently selected.</value>
        </member>
        <member name="P:Macro.ImageViewer.IImageViewer.SelectedTile">
            <summary>
            Gets the currently selected <see cref="T:Macro.ImageViewer.ITile"/>
            </summary>
            <value>The currently selected <see cref="T:Macro.ImageViewer.ITile"/>, or <b>null</b> if
            no <see cref="T:Macro.ImageViewer.ITile"/> is currently selected.</value>
        </member>
        <member name="P:Macro.ImageViewer.IImageViewer.SelectedPresentationImage">
            <summary>
            Gets the currently selected <see cref="T:Macro.ImageViewer.IPresentationImage"/>
            </summary>
            <value>The currently selected <see cref="T:Macro.ImageViewer.IPresentationImage"/>, or <b>null</b> if
            no <see cref="T:Macro.ImageViewer.IPresentationImage"/> is currently selected.</value>
        </member>
        <member name="P:Macro.ImageViewer.IImageViewer.CommandHistory">
            <summary>
            Gets the <see cref="P:Macro.ImageViewer.IImageViewer.CommandHistory"/> for this image viewer.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageViewer.PatientsLoadedLabel">
            <summary>
            Gets a string containing the patients currently loaded in this
            <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>		
        </member>
        <member name="P:Macro.ImageViewer.IImageViewer.ExportedActions">
            <summary>
            Gets the <see cref="T:Macro.Desktop.Actions.IAction"/>s exported by this <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageViewer.GlobalActionsNamespace">
            <summary>
            Gets the namespace that qualifies the global action models owned by this <see cref="T:Macro.ImageViewer.IImageViewer"/>. This value may not be null.
            </summary>
            <remarks>
            <para>
            This namespace only applies to the global action models (i.e. global menu and toolbar sites) when the
            <see cref="T:Macro.ImageViewer.IImageViewer"/> is launched as a <see cref="T:Macro.Desktop.IWorkspace"/>. In contrast, the namespace returned
            by <see cref="P:Macro.ImageViewer.IImageViewer.ActionsNamespace"/> applies to local action models such as the viewer context menu.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.IImageViewer.ActionsNamespace">
            <summary>
            Gets the namespace that qualifies the global action models owned by this <see cref="T:Macro.ImageViewer.IImageViewer"/>. This value may not be null.
            </summary>
            <remarks>
            <para>
            This namespace only applies to local action models such as the viewer context menu. In contrast,
            the namespace returned by <see cref="P:Macro.ImageViewer.IImageViewer.GlobalActionsNamespace"/> applies to the global action models
            (i.e. global menu and toolbar sites) when the <see cref="T:Macro.ImageViewer.IImageViewer"/> is launched as a <see cref="T:Macro.Desktop.IWorkspace"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.IImageViewer.PriorStudyLoader">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.IPriorStudyLoader"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageViewer.ExtensionData">
            <summary>
            A place for extensions to store custom data about the viewer.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.#ctor">
            <summary>
            Instantiates a new instance of <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>.
            </summary>
            This constructor creates an <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>
            that automatically lays out images according to how many 
            <see cref="T:Macro.ImageViewer.DisplaySet"/>s there are.  Use this constructor in 
            simple display scenarios where you don't require control over 
            how images are initially laid out.
            If you do require control over the initial layout, use
            <see cref="M:Macro.ImageViewer.ImageViewerComponent.#ctor(Macro.ImageViewer.ILayoutManager)"/> instead.
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.#ctor(Macro.ImageViewer.LayoutManagerCreationParameters)">
            <summary>
            Instantiates a new instance of <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>
            taking a <see cref="T:Macro.ImageViewer.LayoutManagerCreationParameters"/> to determine
            how the <see cref="P:Macro.ImageViewer.ImageViewerComponent.LayoutManager"/> should be created.
            </summary>
            <remarks>
            If <paramref name="creationParameters"/> is <see cref="F:Macro.ImageViewer.LayoutManagerCreationParameters.Extended"/>,
            then the <see cref="T:Macro.ImageViewer.LayoutManagerExtensionPoint"/> is used to create the <see cref="P:Macro.ImageViewer.ImageViewerComponent.LayoutManager"/>.  If
            no extension exists, a simple layout manager is used.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.#ctor(Macro.ImageViewer.ILayoutManager)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>
            with the specified <see cref="T:Macro.ImageViewer.ILayoutManager"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.#ctor(Macro.ImageViewer.LayoutManagerCreationParameters,Macro.ImageViewer.IPriorStudyFinder)">
            <summary>
            <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>
            taking a <see cref="T:Macro.ImageViewer.LayoutManagerCreationParameters"/> to determine
            how the <see cref="P:Macro.ImageViewer.ImageViewerComponent.LayoutManager"/> should be created, as well as an
            <see cref="T:Macro.ImageViewer.IPriorStudyFinder"/>.
            </summary>
            <remarks>
            <para>
            If <paramref name="creationParameters"/> is <see cref="F:Macro.ImageViewer.LayoutManagerCreationParameters.Extended"/>,
            then the <see cref="T:Macro.ImageViewer.LayoutManagerExtensionPoint"/> is used to create the <see cref="P:Macro.ImageViewer.ImageViewerComponent.LayoutManager"/>.  If
            no extension exists, a simple layout manager is used.
            </para>
            <para>If <paramref name="priorStudyFinder"/> is null or <see cref="F:Macro.ImageViewer.PriorStudyFinder.Null"/>, then the
            <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> will not automatically search for priors.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.#ctor(Macro.ImageViewer.ILayoutManager,Macro.ImageViewer.IPriorStudyFinder)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>
            with the specified <see cref="T:Macro.ImageViewer.ILayoutManager"/> and <see cref="T:Macro.ImageViewer.IPriorStudyFinder"/>.
            </summary>
            <remarks>
            <para>If <paramref name="priorStudyFinder"/> is null or <see cref="F:Macro.ImageViewer.PriorStudyFinder.Null"/>, then the
            <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> will not automatically search for priors.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.Start">
            <summary>
            Override of <see cref="M:Macro.Desktop.ApplicationComponent.Start"/>
            </summary>
            <remarks>
            For internal Framework use only.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.Stop">
            <summary>
            Override of <see cref="M:Macro.Desktop.ApplicationComponent.Stop"/>
            </summary>
            <remarks>
            For internal Framework use only.
            </remarks>
        </member>
        <!-- 对于成员“M:Macro.ImageViewer.ImageViewerComponent.Automate``1(System.Action{``0})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Macro.ImageViewer.ImageViewerComponent.Automate``2(System.Func{``0,``1})”忽略有格式错误的 XML 注释 -->
        <member name="M:Macro.ImageViewer.ImageViewerComponent.CreateTools">
            <summary>
            Creates a set of tools for this image viewer to load into its tool set.  Subclasses can override
            this to provide their own tools or cull the set of tools this creates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.CreateToolContext">
            <summary>
            Creates an <see cref="T:Macro.ImageViewer.IImageViewerToolContext"/> to provide to all the tools owned by this image viewer.
            </summary>
            <remarks>
            Subclasses can override this to provide their own custom implementation of an <see cref="T:Macro.ImageViewer.IImageViewerToolContext"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.Layout">
            <summary>
            Lays out the images in the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> using
            the current layout manager.
            </summary>
            <remarks>
            Immediately after <see cref="M:Macro.ImageViewer.ILayoutManager.Layout"/> is called, the
            <see cref="P:Macro.ImageViewer.ImageViewerComponent.PriorStudyLoader"/> then starts searching for priors
            and adding them to the <see cref="P:Macro.ImageViewer.ImageViewerComponent.StudyTree"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.FindStudy(Macro.ImageViewer.StudyManagement.QueryParameters,Macro.Dicom.Iod.IApplicationEntity,System.String)">
            <summary>
            Queries for studies matching a specified set of query parameters.
            </summary>
            <param name="queryParameters">The search criteria.</param>
            <param name="targetServer">The server to query. Can be null
            if the <paramref name="studyFinderName"/> does not support the querying
            of different servers.</param>
            <param name="studyFinderName">The name of the <see cref="T:Macro.ImageViewer.StudyManagement.IStudyFinder"/> to use, which is specified
            by <see cref="P:Macro.ImageViewer.StudyManagement.IStudyFinder.Name"/>.</param>
            <exception cref="T:Macro.ImageViewer.StudyManagement.StudyFinderNotFoundException">Thrown when a matching <see cref="T:Macro.ImageViewer.StudyManagement.IStudyFinder"/> does not exist.</exception>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.LoadStudy(Macro.ImageViewer.LoadStudyArgs)">
            <summary>
            Loads a study using the specified parameters.
            </summary>
            <remarks>After this method is executed, the image viewer's <see cref="P:Macro.ImageViewer.ImageViewerComponent.StudyTree"/>
            will be populated with the appropriate <see cref="T:Macro.ImageViewer.StudyManagement.Study"/>, <see cref="T:Macro.ImageViewer.StudyManagement.Series"/> 
            and <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> objects.
            
            By default, the Framework provides an implementation of 
            <see cref="T:Macro.ImageViewer.StudyManagement.IStudyLoader"/> called <b>LocalStoreStudyLoader</b> which loads
            studies from the local database.  If you have implemented your own 
            <see cref="T:Macro.ImageViewer.StudyManagement.IStudyLoader"/> and want to load a study using that implementation,
            just pass in the name provided by <see cref="P:Macro.ImageViewer.StudyManagement.IStudyLoader.Name"/> as the source.
            </remarks>
            <param name="loadStudyArgs">A <see cref="T:Macro.ImageViewer.LoadStudyArgs"/> object containing information about the study to be loaded.</param>
            <exception cref="T:Macro.ImageViewer.InUseLoadStudyException">The specified study is in use and cannot be opened at this time.</exception>
            <exception cref="T:Macro.ImageViewer.NearlineLoadStudyException">The specified study is nearline and cannot be opened at this time.</exception>
            <exception cref="T:Macro.ImageViewer.OfflineLoadStudyException">The specified study is offline and cannot be opened at this time.</exception>
            <exception cref="T:Macro.ImageViewer.NotFoundLoadStudyException">The specified study could not be found.</exception>
            <exception cref="T:Macro.ImageViewer.LoadStudyException">One or more images could not be opened, or an unspecified error has occurred.</exception>
            <exception cref="T:Macro.ImageViewer.StudyManagement.StudyLoaderNotFoundException">The specified <see cref="T:Macro.ImageViewer.StudyManagement.IStudyLoader"/> could not be found.</exception>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.LoadStudies(System.Collections.Generic.IList{Macro.ImageViewer.LoadStudyArgs})">
            <summary>
            Loads multiple studies, consolidating any errors that have occurred into a single
            <see cref="T:Macro.ImageViewer.LoadMultipleStudiesException"/>.
            </summary>
            <remarks>
            This method of loading studies allows studies to be partially loaded.  When an error
            has occurred, the exception is simply added to a list and studies continue to be loaded.
            Once complete, if any errors have occurred, a <see cref="T:Macro.ImageViewer.LoadMultipleStudiesException"/> is thrown.
            If only a single study was requested, the behaviour is identical to <see cref="M:Macro.ImageViewer.ImageViewerComponent.LoadStudy(Macro.ImageViewer.LoadStudyArgs)"/>
            and the exception will be one of those described for that method, not a <see cref="T:Macro.ImageViewer.LoadMultipleStudiesException"/>.
            </remarks>
            <exception cref="T:Macro.ImageViewer.InUseLoadStudyException">(When only a single study is requested) The specified study is in use and cannot be opened at this time.</exception>
            <exception cref="T:Macro.ImageViewer.NearlineLoadStudyException">(When only a single study is requested) The specified study is nearline and cannot be opened at this time.</exception>
            <exception cref="T:Macro.ImageViewer.OfflineLoadStudyException">(When only a single study is requested) The specified study is offline and cannot be opened at this time.</exception>
            <exception cref="T:Macro.ImageViewer.NotFoundLoadStudyException">(When only a single study is requested) The specified study could not be found.</exception>
            <exception cref="T:Macro.ImageViewer.LoadStudyException">(When only a single study is requested) One or more images could not be opened, or an unspecified error has occurred.</exception>
            <exception cref="T:Macro.ImageViewer.LoadMultipleStudiesException">Thrown when one or more of the specified studies has completely or partially failed to load.</exception>
            <exception cref="T:Macro.ImageViewer.StudyManagement.StudyLoaderNotFoundException">The specified <see cref="T:Macro.ImageViewer.StudyManagement.IStudyLoader"/> could not be found.</exception>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.LoadImages(System.String[])">
            <summary>
            Loads images from the specified file paths.
            </summary>
            <param name="files">An array of file paths.</param>
            <exception cref="T:Macro.ImageViewer.LoadSopsException">One or more images could not be opened.</exception>
            <exception cref="T:System.ArgumentNullException">A parameter is <b>null</b>.</exception>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.LoadImages(System.String[],Macro.Desktop.IDesktopWindow,System.Boolean@)">
            <summary>
            Loads images from the specified file paths and displays a progress bar.
            </summary>
            <param name="files">A list of file paths.</param>
            <param name="desktop">The desktop window.  This is necessary for
            a progress bar to be shown.  If <b>null</b>, no progress bar
            will be shown.</param>
            <param name="cancelled">A value that indicates whether the operation
            was cancelled.</param>
            <exception cref="T:Macro.ImageViewer.LoadSopsException">One or more images could not be opened.</exception>
            <exception cref="T:System.ArgumentNullException">A parameter is <b>null</b>.</exception>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.IsStudyFinderSupported(System.String)">
            <summary>
            Gets whether or not the specified, named, <see cref="T:Macro.ImageViewer.StudyManagement.IStudyFinder"/> is supported.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.IsStudyLoaderSupported(System.String)">
            <summary>
            Gets whether or not the specified, named, <see cref="T:Macro.ImageViewer.StudyManagement.IStudyLoader"/> is supported.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.CreateTitle(System.Collections.Generic.IEnumerable{Macro.Dicom.Iod.IPatientData})">
            <summary>
            Creates the default title for an <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>, based on the given patient information.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.GetAsImageViewer(Macro.Desktop.Workspace)">
            <summary>
            Tries to get a reference to an <see cref="T:Macro.ImageViewer.IImageViewer"/> hosted by a workspace.
            </summary>
            <returns>The active <see cref="T:Macro.ImageViewer.IImageViewer"/> or <b>null</b> if 
            the workspace does not host an <see cref="T:Macro.ImageViewer.IImageViewer"/>.</returns>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.Launch(Macro.ImageViewer.ImageViewerComponent,Macro.ImageViewer.LaunchImageViewerArgs)">
            <summary>
            Launches the specified <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> using the parameters specified in <paramref name="launchArgs"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.Launch(Macro.ImageViewer.ImageViewerComponent,Macro.Desktop.IDesktopWindow,System.String)">
            <summary>
            Launches the specified <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> using the <paramref name="window"/> parameter.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.LaunchInActiveWindow(Macro.ImageViewer.ImageViewerComponent)">
            <summary>
            Launches an <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> in the active desktop window.
            </summary>
            <param name="imageViewer"></param>
            <remarks>
            Subsequent <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>s will also be launched in workspaces in
            the same window.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.LaunchInSeparateWindow(Macro.ImageViewer.ImageViewerComponent)">
            <summary>
            Launches an <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> in a separate desktop window
            devoted strictly to image display.
            </summary>
            <param name="imageViewer"></param>
            <remarks>
            Subsequent <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>s will also be launched in workspaces in
            the same window.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.Dispose(System.Boolean)">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern
            </summary>
            <param name="disposing">True if this object is being disposed, false if it is being finalized</param>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.GetContextMenuModel(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Gets the context menu model for the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>.
            </summary>
            <param name="mouseInformation"></param>
            <returns>An <see cref="T:Macro.Desktop.Actions.ActionModelNode"/></returns>
            <remarks>
            This method is used by the tile's view class to generate the 
            <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> context menu when a user right-clicks
            on a tile.  It is unlikely that you will ever need to use this method.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.ImageViewerComponent.DesktopWindow">
            <summary>
            Gets the host <see cref="T:Macro.Desktop.IDesktopWindow"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageViewerComponent.ExportedActions">
            <summary>
            Gets actions associated with the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>'s
            <see cref="P:Macro.ImageViewer.ImageViewerComponent.ToolSet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageViewerComponent.GlobalActionsNamespace">
            <summary>
            Gets the namespace that qualifies the global action models owned by this <see cref="T:Macro.ImageViewer.IImageViewer"/>. This value may not be null.
            </summary>
            <remarks>
            <para>
            This namespace only applies to the global action models (i.e. global menu and toolbar sites) when the
            <see cref="T:Macro.ImageViewer.IImageViewer"/> is launched as a <see cref="T:Macro.Desktop.IWorkspace"/>. In contrast, the namespace returned
            by <see cref="P:Macro.ImageViewer.ImageViewerComponent.ActionsNamespace"/> applies to local action models such as the viewer context menu.
            </para>
            <para>
            The default implementation defers to <see cref="P:Macro.ImageViewer.ImageViewerComponent.ActionsNamespace"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.ImageViewerComponent.ActionsNamespace">
            <summary>
            Gets the namespace that qualifies the global action models owned by this <see cref="T:Macro.ImageViewer.IImageViewer"/>. This value may not be null.
            </summary>
            <remarks>
            <para>
            This namespace only applies to local action models such as the viewer context menu. In contrast,
            the namespace returned by <see cref="P:Macro.ImageViewer.ImageViewerComponent.GlobalActionsNamespace"/> applies to the global action models
            (i.e. global menu and toolbar sites) when the <see cref="T:Macro.ImageViewer.IImageViewer"/> is launched as a <see cref="T:Macro.Desktop.IWorkspace"/>.
            </para>
            <para>
            The default implementation uses the default viewer namespace.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.ImageViewerComponent.CommandHistory">
            <summary>
            Gets the command history.
            </summary>
            <remarks>
            Each <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> (IVC) maintains its own 
            <see cref="P:Macro.ImageViewer.ImageViewerComponent.CommandHistory"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.ImageViewerComponent.PhysicalWorkspace">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.IPhysicalWorkspace"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageViewerComponent.LogicalWorkspace">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.ILogicalWorkspace"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageViewerComponent.EventBroker">
            <summary>
            Gets the <see cref="P:Macro.ImageViewer.ImageViewerComponent.EventBroker"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageViewerComponent.SelectedImageBox">
            <summary>
            Gets the currently selected <see cref="T:Macro.ImageViewer.IImageBox"/>
            </summary>
            <value>The currently selected <see cref="T:Macro.ImageViewer.IImageBox"/>, or <b>null</b> if
            no <see cref="T:Macro.ImageViewer.IImageBox"/> is currently selected.</value>
        </member>
        <member name="P:Macro.ImageViewer.ImageViewerComponent.SelectedTile">
            <summary>
            Gets the currently selected <see cref="T:Macro.ImageViewer.Tile"/>
            </summary>
            <value>The currently selected <see cref="T:Macro.ImageViewer.ITile"/>, or <b>null</b> if
            no <see cref="T:Macro.ImageViewer.ITile"/> is currently selected.</value>
        </member>
        <member name="P:Macro.ImageViewer.ImageViewerComponent.SelectedPresentationImage">
            <summary>
            Gets the currently selected <see cref="T:Macro.ImageViewer.PresentationImage"/>
            </summary>
            <value>The currently selected <see cref="T:Macro.ImageViewer.IPresentationImage"/>, or <b>null</b> if
            no <see cref="T:Macro.ImageViewer.IPresentationImage"/> is currently selected.</value>
        </member>
        <member name="P:Macro.ImageViewer.ImageViewerComponent.ShortcutManager">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.InputManagement.IViewerShortcutManager"/>.
            </summary>
            <remarks>
            This property is intended for internal framework use only.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.ImageViewerComponent.StudyTree">
            <summary>
            Gets the <see cref="P:Macro.ImageViewer.ImageViewerComponent.StudyTree"/>.
            </summary>
            <remarks>
            Although each <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> (IVC) maintains its own
            <see cref="P:Macro.ImageViewer.ImageViewerComponent.StudyTree"/>, actual <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/> objects are shared
            between IVCs for efficient memory usage.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.ImageViewerComponent.LayoutManager">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.ILayoutManager"/> associated with this <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageViewerComponent.PriorStudyLoader">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.IPriorStudyLoader"/> that uses a given <see cref="T:Macro.ImageViewer.IPriorStudyFinder"/> to search
            for prior studies, and adds the studies to the <see cref="P:Macro.ImageViewer.IImageViewer.StudyTree"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageViewerComponent.PatientsLoadedLabel">
            <summary>
            Gets a string containing the patients currently loaded in this
            <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.ImageViewerComponent.Closing">
            <summary>
            Occurs when the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> is about to close.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageViewerComponent.ToolSet">
            <summary>
            Gets the <see cref="P:Macro.ImageViewer.ImageViewerComponent.ToolSet"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.ImageViewerComponent.ImageViewerToolContext">
            <summary>
            A basic implementation of <see cref="T:Macro.ImageViewer.IImageViewerToolContext"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.IImageViewerToolContext">
            <summary>
            Defines an image viewer tool context.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageViewerToolContext.Viewer">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageViewerToolContext.DesktopWindow">
            <summary>
            Gets the <see cref="T:Macro.Desktop.IDesktopWindow"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerComponent.ImageViewerToolContext.#ctor(Macro.ImageViewer.ImageViewerComponent)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.ImageViewerComponent.ImageViewerToolContext"/>.
            </summary>
            <param name="component">The <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> that owns the tools.</param>
        </member>
        <member name="P:Macro.ImageViewer.ImageViewerComponent.ImageViewerToolContext.Viewer">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageViewerComponent.ImageViewerToolContext.DesktopWindow">
            <summary>
            Gets the <see cref="T:Macro.Desktop.IDesktopWindow"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.IPriorStudyLoader">
            <summary>
            Defines the interface for automatic loading of related (or 'prior') studies.
            </summary>
            <remarks>
            The <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> automatically loads prior studies
            asynchronously in the background so that developers don't have to worry about such details.
            The only part of loading priors that can be customized is the search algorithm, by
            implementing <see cref="T:Macro.ImageViewer.IPriorStudyFinder"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.IPriorStudyLoader.IsActive">
            <summary>
            Gets whether or not the <see cref="T:Macro.ImageViewer.IPriorStudyLoader"></see> is actively searching for and/or loading priors.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.IPriorStudyLoader.IsActiveChanged">
            <summary>
            Occurs when <see cref="P:Macro.ImageViewer.IPriorStudyLoader.IsActive"/> has changed.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.ImageBoxCollection">
            <summary>
            A collection of <see cref="T:Macro.ImageViewer.IImageBox"/> objects.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageBoxCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.ImageBoxCollection"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageBoxCollection.#ctor(System.Collections.Generic.IEnumerable{Macro.ImageViewer.IImageBox})">
            <summary>
            Creates a copy of the object.
            </summary>
            <param name="collection"></param>
            <remarks>
            Creates a <i>shallow</i> copy.  That is, only references to objects
            in the collection are copied.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.ImageBoxCollection.Add(Macro.ImageViewer.IImageBox)">
            <summary>
            Adds the specified item to the list.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageBoxCollection.Insert(System.Int32,Macro.ImageViewer.IImageBox)">
            <summary>
            Inserts <paramref name="item"/> at the specified <paramref name="index"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageBoxCollection.Remove(Macro.ImageViewer.IImageBox)">
            <summary>
            Removes the specified <paramref name="item"/> from the list.
            </summary>
            <returns>True if the item was in the list and was removed.</returns>
        </member>
        <member name="M:Macro.ImageViewer.ImageBoxCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified <paramref name="index"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageBoxCollection.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageBoxCollection.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.DisplaySet">
            <summary>
            A container for <see cref="T:Macro.ImageViewer.IPresentationImage"/> objects.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.IDisplaySet">
            <summary>
            Defines a container for <see cref="T:Macro.ImageViewer.IPresentationImage"/> objects.
            </summary>
            <remarks>
            <para>
            <b>Disposal</b> of an <see cref="T:Macro.ImageViewer.IDisplaySet"/> and it's contained <see cref="T:Macro.ImageViewer.IPresentationImage"/>s
            is handled by the framework when the <see cref="T:Macro.ImageViewer.IDisplaySet"/> is part of the <see cref="T:Macro.ImageViewer.IImageViewer"/>
            hierarchy.  When an <see cref="T:Macro.ImageViewer.IImageViewer"/> is disposed, all its contained objects are disposed
            automatically.
            </para>
            <para>
            You may create copies of <see cref="T:Macro.ImageViewer.IDisplaySet"/>s and <see cref="T:Macro.ImageViewer.IPresentationImage"/>s
            (via the <see cref="M:Macro.ImageViewer.IDisplaySet.CreateFreshCopy"/> mechanism) without keeping track of the objects and
            disposing them, provided the following two conditions are met:
             <list type="bullet">
            <item>
            The 'source' <see cref="T:Macro.ImageViewer.IDisplaySet"/> (e.g. the one being copied) must be owned by an 
            <see cref="T:Macro.ImageViewer.IImageSet"/> at the time the copy is created; the owner <see cref="T:Macro.ImageViewer.IImageSet"/> must
            at some point become (or already be) part of the <see cref="T:Macro.ImageViewer.IImageViewer"/> hierarchy.
            </item>
            <item>
            Any <see cref="T:Macro.ImageViewer.IPresentationImage"/>s that are copied directly must be added to an <see cref="T:Macro.ImageViewer.IDisplaySet"/> 
            that at some point becomes (or is already) part of the <see cref="T:Macro.ImageViewer.IImageViewer"/> hierarchy.
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.IDisplaySet.CreateFreshCopy">
            <summary>
            Creates a fresh copy of the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
            <remarks>
            This will instantiate a fresh copy of this <see cref="T:Macro.ImageViewer.IDisplaySet"/>
            using the same construction parameters as the original.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.IDisplaySet.Clone">
            <summary>
            Creates a deep copy of the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
            <remarks>
            <see cref="T:Macro.ImageViewer.IDisplaySet"/>s may not return null from this method.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.IDisplaySet.ImageViewer">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
            <value>The associated <see cref="T:Macro.ImageViewer.IImageViewer"/> or <b>null</b> if the 
            <see cref="T:Macro.ImageViewer.IDisplaySet"/> is not part of the 
            logical workspace yet.</value>
        </member>
        <member name="P:Macro.ImageViewer.IDisplaySet.ParentImageSet">
            <summary>
            Gets the parent <see cref="T:Macro.ImageViewer.IImageSet"/>.
            </summary>
            <value>The parent <see cref="T:Macro.ImageViewer.ImageSet"/> or <b>null</b> if the 
            <see cref="T:Macro.ImageViewer.IDisplaySet"/> has not been added to an 
            <see cref="T:Macro.ImageViewer.IImageSet"/> yet.</value>
        </member>
        <member name="P:Macro.ImageViewer.IDisplaySet.PresentationImages">
            <summary>
            Gets the collection of <see cref="T:Macro.ImageViewer.IPresentationImage"/> objects belonging
            to this <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IDisplaySet.LinkedPresentationImages">
            <summary>
            Gets a collection of linked <see cref="T:Macro.ImageViewer.IPresentationImage"/> objects.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IDisplaySet.ImageBox">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.IImageBox"/> associated with this <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
            <value>The associated <see cref="T:Macro.ImageViewer.IImageBox"/> or <b>null</b> if the
            <see cref="T:Macro.ImageViewer.IDisplaySet"/> is not currently visible.</value>
        </member>
        <member name="P:Macro.ImageViewer.IDisplaySet.Linked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Macro.ImageViewer.IImageBox"/> is
            linked.
            </summary>
            <value><b>true</b> if linked; <b>false</b> otherwise.</value>
            <remarks>
            Multiple display sets may be linked, allowing tools that can operate on
            multiple display sets to operate on all linked display sets simultaneously.  
            Note that the concept of linkage is slightly different from selection:
            it is possible for an <see cref="T:Macro.ImageViewer.IDisplaySet"/> to be 1) selected but not linked
            2) linked but not selected and 3) selected and linked.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.IDisplaySet.Descriptor">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.IDisplaySetDescriptor"/> that describes this <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IDisplaySet.Name">
            <summary>
            Gets or sets the name of the display set.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IDisplaySet.Description">
            <summary>
            Gets a text description for the display set.
            </summary>
            <remarks>
            This value will normally correspond to the series description of the contained images.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.IDisplaySet.Number">
            <summary>
            Gets the numeric identifier for the display set.
            </summary>
            <remarks>
            This value will normally correspond to the series number of the contained DICOM images.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.IDisplaySet.Selected">
            <summary>
            Gets a value indicating whether the <see cref="T:Macro.ImageViewer.IDisplaySet"/> is selected.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IDisplaySet.Visible">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Macro.ImageViewer.IDisplaySet"/> is visible.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IDisplaySet.Uid">
            <summary>
            Gets a unique identifier for this <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySet.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.DisplaySet"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySet.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.DisplaySet"/> with
            the specified parameters.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySet.#ctor(Macro.ImageViewer.DisplaySetDescriptor)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.DisplaySet"/> with the given <see cref="T:Macro.ImageViewer.DisplaySetDescriptor"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySet.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.DisplaySet"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySet.Dispose(System.Boolean)">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern
            </summary>
            <param name="disposing">True if this object is being disposed, false if it is being finalized</param>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySet.CreateFreshCopy">
            <summary>
            Creates a fresh copy of the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
            <remarks>
            This will instantiate a fresh copy of this <see cref="T:Macro.ImageViewer.IDisplaySet"/>
            using the same construction parameters as the original.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySet.Clone">
            <summary>
            Creates a deep copy of the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
            <remarks>
            <see cref="T:Macro.ImageViewer.IDisplaySet"/>s may not return null from this method.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySet.ToString">
            <summary>
            Returns the name of the display set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySet.Draw">
            <summary>
            Draws the <see cref="T:Macro.ImageViewer.DisplaySet"/>.
            </summary>
            <remarks>The <see cref="T:Macro.ImageViewer.DisplaySet"/> will only be drawn
            if it is currently visible.</remarks>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySet.OnPresentationImageAdded(Macro.ImageViewer.PresentationImage)">
            <summary>
            Called when a <see cref="T:Macro.ImageViewer.PresentationImage"/> has been added to the display set.
            </summary>
            <param name="image">The image that was added to the display set.</param>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySet.OnPresentationImageRemoved(Macro.ImageViewer.PresentationImage)">
            <summary>
            Called when a <see cref="T:Macro.ImageViewer.PresentationImage"/> has been removed from the display set.
            </summary>
            <param name="image">The image that was removed from the display set.</param>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySet.OnDrawing">
            <summary>
            Raises the <see cref="E:Macro.ImageViewer.DisplaySet.Drawing"/> event.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySet.CreateMemento">
            <summary>
            Captures the state of an object.
            </summary>
            <remarks>
            The implementation of <see cref="M:Macro.Desktop.IMemorable.CreateMemento"/> should return an
            object containing enough state information so that
            when <see cref="M:Macro.Desktop.IMemorable.SetMemento(System.Object)"/> is called, the object can be restored
            to the original state.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySet.SetMemento(System.Object)">
            <summary>
            Restores the state of an object.
            </summary>
            <param name="memento">The object that was
            originally created with <see cref="M:Macro.Desktop.IMemorable.CreateMemento"/>.</param>
            <remarks>
            The implementation of <see cref="M:Macro.Desktop.IMemorable.SetMemento(System.Object)"/> should return the 
            object to the original state captured by <see cref="M:Macro.Desktop.IMemorable.CreateMemento"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySet.PresentationImages">
            <summary>
            Gets the collection of <see cref="T:Macro.ImageViewer.IPresentationImage"/> objects that belong
            to this <see cref="T:Macro.ImageViewer.DisplaySet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySet.LinkedPresentationImages">
            <summary>
            Gets a collection of linked <see cref="T:Macro.ImageViewer.IPresentationImage"/> objects.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySet.ImageViewer">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
            <value>The associated <see cref="T:Macro.ImageViewer.IImageViewer"/> or <b>null</b> if the 
            <see cref="T:Macro.ImageViewer.DisplaySet"/> is not part of the 
            logical workspace yet.</value>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySet.ParentImageSet">
            <summary>
            Gets the parent <see cref="T:Macro.ImageViewer.ImageSet"/>
            </summary>
            <value>The parent <see cref="T:Macro.ImageViewer.ImageSet"/> or <b>null</b> if the 
            <see cref="T:Macro.ImageViewer.DisplaySet"/> has not been added to an 
            <see cref="T:Macro.ImageViewer.ImageSet"/> yet.</value>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySet.ImageBox">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.IImageBox"/> associated with this <see cref="T:Macro.ImageViewer.DisplaySet"/>.
            </summary>
            <value>The associated <see cref="T:Macro.ImageViewer.IImageBox"/> or <b>null</b> if the
            <see cref="T:Macro.ImageViewer.DisplaySet"/> is not currently visible.</value>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySet.Descriptor">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.IDisplaySetDescriptor"/> that describes this <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySet.Name">
            <summary>
            Gets the name of the display set.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySet.Number">
            <summary>
            Gets the numeric identifier for the display set.
            </summary>
            <remarks>
            This value will normally correspond to the series number of the contained DICOM images.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySet.Description">
            <summary>
            Gets a text description for the display set.
            </summary>
            <remarks>
            This value will normally correspond to the series description of the contained images.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySet.Visible">
            <summary>
            Gets a value indicating whether the <see cref="T:Macro.ImageViewer.DisplaySet"/> is visible.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySet.Selected">
            <summary>
            Gets a value indicating whether the <see cref="T:Macro.ImageViewer.DisplaySet"/> is selected.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySet.Linked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Macro.ImageViewer.ImageBox"/> is
            linked.
            </summary>
            <value><b>true</b> if linked; <b>false</b> otherwise.</value>
            <remarks>
            Multiple display sets may be linked, allowing tools that can operate on
            multiple display sets to operate on all linked display sets simultaneously.  
            Note that the concept of linkage is slightly different from selection:
            it is possible for an <see cref="T:Macro.ImageViewer.DisplaySet"/> to be 1) selected but not linked
            2) linked but not selected and 3) selected and linked.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySet.Uid">
            <summary>
            Gets a unique identifier for this <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.DisplaySet.Drawing">
            <summary>
            Fires when the <see cref="T:Macro.ImageViewer.DisplaySet"/> is about the be drawn.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Mathematics.RectF">
            <summary>
            A float based rectangle.
            </summary>
            <remarks>
            This differs from <see cref="T:System.Drawing.RectangleF"/> in that it allows
            for negative widths and heights.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.RectF.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Mathematics.RectF"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.RectF.#ctor(Macro.ImageViewer.Mathematics.RectF)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Mathematics.RectF"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.RectF.Contains(System.Drawing.PointF)">
            <summary>
            Returns a value indicating whether a given point
            is within the rectangle.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.RectF.Contains(System.Single,System.Single)">
            <summary>
            Returns a value indicating whether a given point
            is within the rectangle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.RectF.ToString">
            <summary>
            Returns the rectangle's coordinates in string format.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.RectF.Top">
            <summary>
            Gets or sets the top coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.RectF.Left">
            <summary>
            Gets or sets the left coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.RectF.Bottom">
            <summary>
            Gets or sets the bottom coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.RectF.Right">
            <summary>
            Gets or sets the right coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.RectF.TopLeft">
            <summary>
            Gets or sets the top-left coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.RectF.BottomRight">
            <summary>
            Gets or sets the bottom-right coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.RectF.Width">
            <summary>
            Gets or sets the width of the rectangle.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.RectF.Height">
            <summary>
            Gets or sets the height of the rectangle.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.StudyLoader">
            <summary>
            Abstract base class for <see cref="T:Macro.ImageViewer.StudyManagement.IStudyLoader"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.IStudyLoader">
            <summary>
            Defines a study loader.
            </summary>
            <remarks>
            <see cref="T:Macro.ImageViewer.StudyManagement.IStudyLoader"/> abstracts the loading of studies,
            allowing different many means of loading studies (e.g., local file system,
            DICOM WADO, DICOMDIR CD, streaming, etc.) to be treated in the same way.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.IStudyLoader.Start(Macro.ImageViewer.StudyManagement.StudyLoaderArgs)">
            <summary>
            Starts the enumeration of images that match the specified
            Study Instance UID.
            </summary>
            <param name="studyLoaderArgs"></param>
            <returns>Number of images in study.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.IStudyLoader.LoadNextSop">
            <summary>
            Loads the next <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>.
            </summary>
            <returns>The next <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> or <b>null</b> if there are none remaining.</returns>
            <remarks>
            Implementers of <see cref="T:Macro.ImageViewer.StudyManagement.IStudyLoader"/> should avoid loading pixel data
            in this method for performance reasons.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.IStudyLoader.Name">
            <summary>
            Gets the name of the study loader.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.IStudyLoader.PrefetchingStrategy">
            <summary>
            Gets the study loader's pixel data prefetching strategy.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyLoader.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.StudyManagement.StudyLoader"/> with the given <paramref name="name"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyLoader.OnStart(Macro.ImageViewer.StudyManagement.StudyLoaderArgs)">
            <summary>
            Called by <see cref="M:Macro.ImageViewer.StudyManagement.StudyLoader.Start(Macro.ImageViewer.StudyManagement.StudyLoaderArgs)"/> to begin prefetching.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyLoader.CreateSop(Macro.ImageViewer.StudyManagement.ISopDataSource)">
            <summary>
            Creates a <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> from the given <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyLoader.LoadNextSopDataSource">
            <summary>
            Loads the next <see cref="T:Macro.ImageViewer.StudyManagement.SopDataSource"/> from which a
            <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> will be created.
            </summary>
            <returns>The next <see cref="T:Macro.ImageViewer.StudyManagement.SopDataSource"/> or <b>null</b> if there are none remaining.</returns>
            <remarks>
            Implementers of <see cref="T:Macro.ImageViewer.StudyManagement.StudyLoader"/> should avoid loading pixel data
            in this method for performance reasons.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyLoader.Start(Macro.ImageViewer.StudyManagement.StudyLoaderArgs)">
            <summary>
            Starts the enumeration of images that match the specified
            Study Instance UID.
            </summary>
            <param name="studyLoaderArgs"></param>
            <returns>Number of images in study.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyLoader.LoadNextSop">
            <summary>
            Loads the next <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>.
            </summary>
            <returns>The next <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> or <b>null</b> if there are none remaining.</returns>
            <remarks>
            Implementers of <see cref="T:Macro.ImageViewer.StudyManagement.IStudyLoader"/> should avoid loading pixel data
            in this method for performance reasons.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyLoader.CreateAll">
            <summary>
            Creates all available study loaders.
            </summary>
            <returns>All the loaders, or an empty array if none exist.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyLoader.Create(System.String)">
            <summary>
            Creates a single study loader, if it exists.
            </summary>
            <returns>The loader, or null if it doesn't exist.</returns>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.StudyLoader.Name">
            <summary>
            Gets the name of the study loader.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.StudyLoader.PrefetchingStrategy">
            <summary>
            Gets or sets the study loader's pixel data prefetching strategy.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.InputManagementSettings.ContextMenuDelay">
            <summary>
            The context menu delay, in milliseconds, if a tool is assigned the same button as that which normally invokes the context menu.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.IViewerShortcutManager">
            <summary>
            Used internally by the framework to lookup different interfaces registered by, say, an <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> 
            that correspond to different mouse/keyboard shortcuts.
            </summary>
            <remarks>
            <para>
            The shortcuts are usually associated with an <see cref="T:Macro.Desktop.Tools.ITool"/> having one or more of 
            the <see cref="T:Macro.Desktop.Actions.MenuActionAttribute"/> or <see cref="T:Macro.Desktop.Actions.KeyboardActionAttribute"/> attributes defined, or implementing
            either <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> or <see cref="T:Macro.ImageViewer.InputManagement.IMouseWheelHandler"/>.
            </para>
            <para>
            This interface is intended for internal framework use only.
            </para>
            </remarks>
            <seealso cref="T:Macro.Desktop.Actions.IClickAction"/>
            <seealso cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/>
            <seealso cref="T:Macro.ImageViewer.InputManagement.IMouseWheelHandler"/>
            <seealso cref="T:Macro.ImageViewer.InputManagement.KeyboardButtonShortcut"/>
            <seealso cref="T:Macro.ImageViewer.InputManagement.MouseButtonShortcut"/>
            <seealso cref="T:Macro.ImageViewer.InputManagement.MouseWheelShortcut"/>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.IViewerShortcutManager.GetKeyboardAction(Macro.ImageViewer.InputManagement.KeyboardButtonShortcut)">
            <summary>
            Gets the <see cref="T:Macro.Desktop.Actions.IClickAction"/> associated with the input <paramref name="shortcut"/>.
            </summary>
            <remarks>
            Will return null if there is no <see cref="T:Macro.Desktop.Actions.IClickAction"/> associated with the <paramref name="shortcut"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.IViewerShortcutManager.GetMouseButtonHandlers(Macro.ImageViewer.InputManagement.MouseButtonShortcut)">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/>s assigned to the given shortcut.
            </summary>
            <remarks>
            In the case of <see cref="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool"/>s, the tool assigned to the specified shortcut
            is returned first, followed by any whose default shortcut matches the one specified.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.IViewerShortcutManager.GetMouseWheelHandler(Macro.ImageViewer.InputManagement.MouseWheelShortcut)">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.InputManagement.IMouseWheelHandler"/> associated with the input <paramref name="shortcut"/>.
            </summary>
            <remarks>
            Will return null if there is no <see cref="T:Macro.ImageViewer.InputManagement.IMouseWheelHandler"/> associated with the <paramref name="shortcut"/>.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.SelectedGraphicState">
            <summary>
            Represents the 'selected' graphic state.
            </summary>
            <remarks>
            This state is different from <see cref="T:Macro.ImageViewer.InteractiveGraphics.FocussedSelectedGraphicState"/> in 
            that it is entered when the
            <see cref="T:Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic"/> is selected (i.e. clicked on)
            but <i>not</i> focussed (i.e. hovered over), whereas <see cref="T:Macro.ImageViewer.InteractiveGraphics.FocussedSelectedGraphicState"/>
            is entered only when a graphic is selected <i>and</i> focussed.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.SelectedGraphicState.#ctor(Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.InteractiveGraphics.SelectedGraphicState"/>.
            </summary>
            <param name="standardStatefulGraphic"></param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.SelectedGraphicState.Start(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by the framework when the user clicks away from the 
            associated <see cref="T:Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic"/>
            and results in a transition to the <see cref="T:Macro.ImageViewer.InteractiveGraphics.InactiveGraphicState"/>.
            </summary>
            <param name="mouseInformation"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.SelectedGraphicState.Track(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by the framework when the mouse is moving and results in a transition 
            to the <see cref="T:Macro.ImageViewer.InteractiveGraphics.FocussedGraphicState"/> when
            the mouse hovers over the associated 
            <see cref="T:Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic"/>.
            </summary>
            <param name="mouseInformation"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.NormalizedPixelSpacing">
            <summary>
            The pixel spacing appropriate to the modality.
            </summary>
            <remarks>
            For projection based modalities (i.e. CR, DX and MG), Imager Pixel Spacing is
            returned as the pixel spacing.  For all other modalities, the standard
            Pixel Spacing is returned.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.NormalizedPixelSpacing.#ctor(Macro.ImageViewer.StudyManagement.Frame)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.NormalizedPixelSpacing"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.NormalizedPixelSpacing.Calibrate(System.Double,System.Double)">
            <summary>
            Manually calibrates the pixel spacing.
            </summary>
            <param name="pixelSpacingRow">Pixel height.</param>
            <param name="pixelSpacingColumn">Pixel width.</param>
            <remarks>
            Using this method does not alter the original DICOM pixel spacing
            contained in the <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.NormalizedPixelSpacing.Reset">
            <summary>
            Resets any manual calibration of the pixel spacing back to the original DICOM pixel spacing
            contained in the <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.NormalizedPixelSpacing.OnCalibrated">
            <summary>
            Called when the pixel spacing is calibrated.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.StudyManagement.NormalizedPixelSpacing.Calibrated">
            <summary>
            Event fired when the pixel spacing is calibrated.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.NormalizedPixelSpacing.CalibrationType">
            <summary>
            Gets a value indicating the type of calibration represented by this pixel spacing.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.NormalizedPixelSpacing.CalibrationDetails">
            <summary>
            Gets a value providing additional details or parameters known about the calibration specified by <see cref="P:Macro.ImageViewer.StudyManagement.NormalizedPixelSpacing.CalibrationType"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.NormalizedPixelSpacingCalibrationType">
            <summary>
            Enumerated values indicating the type of calibration represented by pixel spacing, if any.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.NormalizedPixelSpacingCalibrationType.None">
            <summary>
            Indicates that the pixel spacing is not calibrated.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.NormalizedPixelSpacingCalibrationType.Manual">
            <summary>
            Indicates that the pixel spacing has been calibrated manually by the user.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.NormalizedPixelSpacingCalibrationType.Unknown">
            <summary>
            Indicates that the pixel spacing has been calibrated in some unspecified manner.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.NormalizedPixelSpacingCalibrationType.CrossSectionalSpacing">
            <summary>
            Indicates that the pixel spacing represents the actual spacing in the patient for the cross-sectional image.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.NormalizedPixelSpacingCalibrationType.Detector">
            <summary>
            Indicates that the pixel spacing represents the spacing at the detector plane for the projection image.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.NormalizedPixelSpacingCalibrationType.Geometry">
            <summary>
            Indicates that the pixel spacing has been calibrated for assumed or known
            geometric magnification effects at some unspecified depth within the patient for the projection image.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.NormalizedPixelSpacingCalibrationType.Fiducial">
            <summary>
            Indicates that the pixel spacing has been calibrated by measurement of an
            object (fiducial) of known size in the projection image.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.NormalizedPixelSpacingCalibrationType.Magnified">
            <summary>
            Indicates that the pixel spacing has been calibrated against the estimated
            radiographic magnification factor provided in the projection image.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.VoiLutManager">
            <summary>
            A VOI LUT Manager, which is responsible for managing installation and restoration
            of VOI LUTs via the Memento pattern.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.IVoiLutManager">
            <summary>
            A VOI LUT Manager, which is responsible for managing installation and restoration
            of VOI LUTs via the Memento pattern.
            </summary>
            <remarks>
            Implementors must not return null from the <see cref="P:Macro.ImageViewer.Imaging.IVoiLutInstaller.VoiLut"/> method.
            </remarks>
            <seealso cref="T:Macro.ImageViewer.Imaging.IVoiLutProvider"/>
            <seealso cref="T:Macro.ImageViewer.Imaging.IVoiLut"/>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IVoiLutManager.GetLut">
            <summary>
            Gets the currently installed Voi Lut.
            </summary>
            <returns>The Voi Lut as an <see cref="T:Macro.ImageViewer.Imaging.IVoiLut"/>.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IVoiLutManager.InstallLut(Macro.ImageViewer.Imaging.IVoiLut)">
            <summary>
            Installs a new Voi Lut.
            </summary>
            <param name="voiLut">The Lut to be installed.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IVoiLutManager.ToggleInvert">
            <summary>
            Toggles the state of the <see cref="P:Macro.ImageViewer.Imaging.IVoiLutInstaller.Invert"/> property.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IVoiLutManager.Enabled">
            <summary>
            Gets or sets a value indicating whether the LUT should be used in rendering the parent object.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiLutManager.#ctor(Macro.ImageViewer.Imaging.IVoiLutInstaller,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiLutManager.GetLut">
            <summary>
            Gets the currently installed Voi Lut.
            </summary>
            <returns>The Voi Lut as an <see cref="T:Macro.ImageViewer.Imaging.IVoiLut"/>.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiLutManager.InstallLut(Macro.ImageViewer.Imaging.IVoiLut)">
            <summary>
            Installs a new Voi Lut.
            </summary>
            <param name="lut">The Lut to be installed.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiLutManager.InstallVoiLut(Macro.ImageViewer.Imaging.IVoiLut)">
            <summary>
            Installs a new Voi Lut.
            </summary>
            <param name="lut">The Lut to be installed.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiLutManager.ToggleInvert">
            <summary>
            Toggles the state of the <see cref="P:Macro.ImageViewer.Imaging.IVoiLutInstaller.Invert"/> property.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiLutManager.CreateMemento">
            <summary>
            Captures enough information to restore the currently installed lut.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiLutManager.SetMemento(System.Object)">
            <summary>
            Restores the previously installed lut and/or it's state.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.VoiLutManager.VoiLut">
            <summary>
            Gets the currently installed Voi Lut.
            </summary>
            <returns>The Voi Lut as an <see cref="T:Macro.ImageViewer.Imaging.IVoiLut"/>.</returns>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.VoiLutManager.Invert">
            <summary>
            Gets or sets whether the output of the VOI LUT should be inverted for display.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.VoiLutManager.DefaultInvert">
            <summary>
            Gets the default value of <see cref="P:Macro.ImageViewer.Imaging.VoiLutManager.Invert"/>.  In DICOM, this would be true
            for all MONOCHROME1 images.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.VoiLutManager.Enabled">
            <summary>
            Gets or sets a value indicating whether the LUT should be used in rendering the parent object.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if LUTs may not be disabled for rendering the parent object.</exception>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.IColorMapProvider">
            <summary>
            A provider of a color map, accessed and manipulated via the <see cref="P:Macro.ImageViewer.Imaging.IColorMapProvider.ColorMapManager"/> property.
            </summary>
            <remarks>
            <para>
            The <see cref="P:Macro.ImageViewer.Imaging.IColorMapProvider.ColorMapManager"/> property allows access to and manipulation of the installed color map.
            </para>
            <para>
            Implementors should not return null for the <see cref="P:Macro.ImageViewer.Imaging.IColorMapProvider.ColorMapManager"/> property.
            </para>
            </remarks>
            <seealso cref="T:Macro.ImageViewer.Imaging.IColorMapManager"/>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IColorMapProvider.ColorMapManager">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.Imaging.IColorMapManager"/> associated with the provider.
            </summary>
            <remarks>
            This property should never return null.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.GrayscalePixelData">
            <summary>
            A grayscale pixel data wrapper.
            </summary>
            <remarks>
            <see cref="T:Macro.ImageViewer.Imaging.GrayscalePixelData"/> provides a number of convenience methods
            to make accessing and changing grayscale pixel data easier.  Use these methods
            judiciously, as the convenience comes at the expense of performance.
            For example, if you're doing complex image processing, using methods
            such as <see cref="M:Macro.ImageViewer.Imaging.PixelData.SetPixel(System.Int32,System.Int32,System.Int32)"/> is not recommended if you want
            good performance.  Instead, use the <see cref="P:Macro.ImageViewer.Imaging.PixelData.Raw"/> property 
            to get the raw byte array, then use unsafe code to do your processing.
            </remarks>
            <seealso cref="T:Macro.ImageViewer.Imaging.PixelData"/>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.PixelData">
            <summary>
            A pixel data wrapper.
            </summary>
            <remarks>
            <see cref="T:Macro.ImageViewer.Imaging.PixelData"/> provides a number of convenience methods
            to make accessing and changing pixel data easier.  Use these methods
            judiciously, as the convenience comes at the expense of performance.
            For example, if you're doing complex image processing, using methods
            such as <see cref="M:Macro.ImageViewer.Imaging.PixelData.SetPixel(System.Int32,System.Int32,System.Int32)"/> is not recommended if you want
            good performance.  Instead, use the <see cref="P:Macro.ImageViewer.Imaging.PixelData.Raw"/> property 
            to get the raw byte array, then use unsafe code to do your processing.
            </remarks>
            <seealso cref="T:Macro.ImageViewer.Imaging.PixelDataGetter"/>
        </member>
        <member name="F:Macro.ImageViewer.Imaging.PixelData._rows">
            <summary>
            The number of rows in the pixel data.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Imaging.PixelData._columns">
            <summary>
            The number of columns in the pixel data.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Imaging.PixelData._bitsAllocated">
            <summary>
            The number of bits allocated the pixel data.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Imaging.PixelData._pixelData">
            <summary>
            The pixel data.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Imaging.PixelData._pixelDataGetter">
            <summary>
            A delegate used to retrieve the pixel data.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Imaging.PixelData._bytesPerPixel">
            <summary>
            The number of bytes per pixel the pixel data.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.PixelData.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Imaging.PixelData"/> with the specified image parameters.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="bitsAllocated">The number of bits allocated in the <paramref name="pixelData"/>.</param>
            <param name="pixelData">The pixel data to be wrapped.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.PixelData.#ctor(System.Int32,System.Int32,System.Int32,Macro.ImageViewer.Imaging.PixelDataGetter)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Imaging.PixelData"/> with the specified image parameters.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="bitsAllocated">The number of bits allocated in the pixel data returned by <paramref name="pixelDataGetter"/>.</param>
            <param name="pixelDataGetter">A delegate that returns the pixel data.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.PixelData.Clone">
            <summary>
            Returns a copy of the object, including the pixel data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.PixelData.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets the pixel value at the specified location.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <returns>
            The value of the pixel.  If the pixel data is colour,
            an ARGB value is returned, where A is the most significant byte.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and/or
            <paramref name="y"/> are out of bounds.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.PixelData.GetPixel(System.Int32)">
            <summary>
            Gets the pixel value at the specific pixel index.
            </summary>
            <param name="pixelIndex">The index.</param>
            <remarks>
            If the pixel data is treated as a one-dimensional array
            where each row of pixels is concatenated, <paramref name="pixelIndex"/>
            is the index into that array.  This is useful when you know the
            index of the pixel that you want to get and don't want to 
            incur the needless computational overhead associated with specifying
            an x and y value.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.PixelData.SetPixel(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the pixel value at the specified location.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="value">The value of the pixel.  If the pixel
            data is colour, the value is in ARGB form, where A is the 
            most significant byte.</param>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and/or
            <paramref name="y"/> are out of bounds, or <paramref name="value"/>
            is out of range.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.PixelData.SetPixel(System.Int32,System.Int32)">
            <summary>
            Sets the pixel value at the specified pixel index.
            </summary>
            <param name="pixelIndex">The pixel index.</param>
            <param name="value">The value of the pixel.  If the pixel
            data is colour, the value is in ARGB form, where A is the 
            most significant byte.</param>
            <remarks>
            If the pixel data is treated as a one-dimensional array
            where each row of pixels is concatenated, <paramref name="pixelIndex"/>
            is the index into that array.  This is useful when you know the
            index of the pixel that you want to set and don't want to 
            incur the needless computational overhead associated with specifying
            an x and y value.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.PixelData.ForEachPixel(Macro.ImageViewer.Imaging.PixelData.PixelProcessor)">
            <summary>
            Iterates through all the pixels in the image.
            </summary>
            <param name="processor">Called for each pixel.</param>
            <remarks>
            It is often desirable to iterate through all the pixels in an image.
            This method encapsulates all the boilerplate code required to do that.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.PixelData.ForEachPixel(System.Int32,System.Int32,System.Int32,System.Int32,Macro.ImageViewer.Imaging.PixelData.PixelProcessor)">
            <summary>
            Iterates through all the pixels in a rectangular region of the image.
            </summary>
            <param name="left">The left edge of the rectangular region.</param>
            <param name="top">The top edge of the rectangular region.</param>
            <param name="right">The right edge of the rectangular region.</param>
            <param name="bottom">The bottom edge of the rectangular region.</param>
            <param name="processor">The <see cref="T:Macro.ImageViewer.Imaging.PixelData.PixelProcessor"/> delegate to call.</param>
            <remarks>
            It is often desirable to iterate through all the pixels in a rectangular
            region of an image. This method encapsulates all the boilerplate code 
            required to do that.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.PixelData.CloneInternal">
            <summary>
            Returns a copy of the object, including the pixel data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.PixelData.GetPixelInternal(System.Int32)">
            <summary>
            Gets the pixel value at the specified index.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.PixelData.SetPixelInternal(System.Int32,System.Int32)">
            <summary>
            Sets the pixel at a specified index.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.PixelData.GetPixelData">
            <summary>
            Gets the raw pixel data.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.PixelData.GetIndex(System.Int32,System.Int32)">
            <summary>
            Gets the index in the pixel data array given the x and y
            location.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.PixelData.Raw">
            <summary>
            Gets the raw pixel data.
            </summary>
            <remarks>
            <para>
            Use the byte array returned by this property to do unsafe processing.
            </para>
            <para>
            In general, you should avoid storing the byte array if at all possible.
            By storing it for say, the lifetime of an <see cref="T:Macro.ImageViewer.Graphics.ImageGraphic"/>, 
            future memory management schemes will be unable to release it, since
            a reference will have been created to it that such schemes may not
            be able to reach.  If you do need to store the byte array for some reason,
            do so only using local variables, since they have only method scope
            and can be garbage collected easily.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.PixelData.Rows">
            <summary>
            Gets the number of rows in the pixel data.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.PixelData.Columns">
            <summary>
            Gets the number of columns in the pixel data.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.PixelData.BitsAllocated">
            <summary>
            Gets the number of bits allocated per pixel in the pixel data.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.PixelData.BytesPerPixel">
            <summary>
            Gets the number of bytes per pixel in the pixel data.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.PixelData.PixelProcessor">
            <summary>
            Used in conjunction with <see cref="M:Macro.ImageViewer.Imaging.PixelData.ForEachPixel(System.Int32,System.Int32,System.Int32,System.Int32,Macro.ImageViewer.Imaging.PixelData.PixelProcessor)"/> for pixel processing.
            </summary>
            <param name="i">The ith pixel processed so far.  This is a zero based index.
            If iterating over the entire image, <paramref name="i"/>
            is the same as <paramref name="pixelIndex"/>.</param>
            <param name="x">The x value of the current pixel being processed.</param>
            <param name="y">The y value of the current pixel being processed</param>
            <param name="pixelIndex">The index of the pixel being processed.</param>
            <remarks>
            It is often desirable to iterate through the pixels in an image, or
            the pixels in a rectangular region in an image so that some kind of
            processing can be done.  When used in conjunction with 
            <see cref="M:Macro.ImageViewer.Imaging.PixelData.ForEachPixel(Macro.ImageViewer.Imaging.PixelData.PixelProcessor)"/> or
            <see cref="M:Macro.ImageViewer.Imaging.PixelData.ForEachPixel(System.Int32,System.Int32,System.Int32,System.Int32,Macro.ImageViewer.Imaging.PixelData.PixelProcessor)"/>,
            this delegate allows the client to focus on writing the processing code,
            not the boilerplate iteration code.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.GrayscalePixelData.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte[])">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Imaging.GrayscalePixelData"/> with the
            specified image parameters.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="bitsAllocated">The number of bits allocated in the <paramref name="pixelData"/>.</param>
            <param name="bitsStored">The number of bits stored in the <paramref name="pixelData"/>.</param>
            <param name="highBit">The high bit of the <paramref name="pixelData"/>.</param>
            <param name="isSigned">Indicates whether or not <paramref name="pixelData"/> contains signed data.</param>
            <param name="pixelData">The pixel data to be wrapped.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.GrayscalePixelData.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,Macro.ImageViewer.Imaging.PixelDataGetter)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Imaging.GrayscalePixelData"/> with the
            specified image parameters.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="bitsAllocated">The number of bits allocated in the pixel data returned by <paramref name="pixelDataGetter"/>.</param>
            <param name="bitsStored">The number of bits stored in the pixel data returned by <paramref name="pixelDataGetter"/>.</param>
            <param name="highBit">The high bit of the pixel data returned by <paramref name="pixelDataGetter"/>.</param>
            <param name="isSigned">Indicates whether or not the pixel data returned by <paramref name="pixelDataGetter"/> contains signed data.</param>
            <param name="pixelDataGetter">A delegate that returns the pixel data.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.GrayscalePixelData.Clone">
            <summary>
            Returns a copy of the object, including the pixel data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.GrayscalePixelData.CalculateMinMaxPixelValue(System.Int32@,System.Int32@)">
            <summary>
            Calculates the Minimum and Maximum pixel values from the pixel data efficiently, using unsafe code.
            </summary>
            <param name="minPixelValue">Returns the minimum pixel value.</param>
            <param name="maxPixelValue">Returns the maximum pixel value.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.GrayscalePixelData.CloneInternal">
            <summary>
            This method overrides <see cref="M:Macro.ImageViewer.Imaging.PixelData.CloneInternal"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.GrayscalePixelData.GetPixelInternal(System.Int32)">
            <summary>
            This method overrides <see cref="M:Macro.ImageViewer.Imaging.PixelData.GetPixelInternal(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.GrayscalePixelData.SetPixelInternal(System.Int32,System.Int32)">
            <summary>
            This method overrides <see cref="M:Macro.ImageViewer.Imaging.PixelData.SetPixelInternal(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.GrayscalePixelData.AbsoluteMinPixelValue">
            <summary>
            Returns the absolute minimum possible pixel value for the image based on PixelRepresentation and BitsAllocated.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.GrayscalePixelData.AbsoluteMaxPixelValue">
            <summary>
            Returns the absolute maximum possible pixel value for the image based on PixelRepresentation and BitsAllocated.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.GrayscalePixelData.BitsStored">
            <summary>
            Gets the number of bits stored per pixel in the pixel data.
            </summary>
            <remarks>
            In contrast to <see cref="P:Macro.ImageViewer.Imaging.PixelData.BitsAllocated"/> which indicates the number of bits that have been
            allocated for each pixel, the <see cref="P:Macro.ImageViewer.Imaging.GrayscalePixelData.BitsStored"/> describes the actual number of bits used
            to encode the data.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.GrayscalePixelData.HighBit">
            <summary>
            Gets the 0-based position of the most significant bit within the bits allocated for each pixel in the pixel data.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.GrayscalePixelData.IsSigned">
            <summary>
            Gets a value indicating if the pixel data is signed.
            </summary>
            <remarks>
            If the pixel data is signed, then each pixel is stored in 2's complement form with the sign bit starting at <see cref="P:Macro.ImageViewer.Imaging.GrayscalePixelData.HighBit"/>.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.IPriorStudyFinder">
            <summary>
            Defines the interface for finding related (or 'prior') studies
            based on the studies that are already loaded in an <see cref="T:Macro.ImageViewer.IImageViewer"/>'s <see cref="T:Macro.ImageViewer.StudyManagement.StudyTree"/>.
            </summary>
            <remarks>
            The <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> internally uses an <see cref="T:Macro.ImageViewer.IPriorStudyFinder"/> from within
            it's <see cref="T:Macro.ImageViewer.IPriorStudyLoader"/> to find and load prior related studies into the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.IPriorStudyFinder.SetImageViewer(Macro.ImageViewer.IImageViewer)">
            <summary>
            Sets the <see cref="T:Macro.ImageViewer.IImageViewer"/> for which prior studies are to found (and added/loaded).
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.IPriorStudyFinder.FindPriorStudies">
            <summary>
            Gets the list of prior studies.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.IPriorStudyFinder.Cancel">
            <summary>
            Cancels the search for prior studies.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.AddGeometricShutterUndoableCommand">
            <summary>
            <see cref="T:Macro.Desktop.UndoableCommand"/> for adding a <see cref="T:Macro.ImageViewer.PresentationStates.GeometricShutter"/> to a
            <see cref="T:Macro.ImageViewer.PresentationStates.GeometricShuttersGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.AddGeometricShutterUndoableCommand.#ctor(Macro.ImageViewer.PresentationStates.GeometricShuttersGraphic,Macro.ImageViewer.PresentationStates.GeometricShutter)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.PresentationStates.AddGeometricShutterUndoableCommand"/>.
            </summary>
            <param name="parent">The parent <see cref="T:Macro.ImageViewer.PresentationStates.GeometricShuttersGraphic"/>.</param>
            <param name="shutter">The <see cref="T:Macro.ImageViewer.PresentationStates.GeometricShutter"/> to add to <paramref name="parent"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.AddGeometricShutterUndoableCommand.Unexecute">
            <summary>
            Removes the <see cref="T:Macro.ImageViewer.PresentationStates.GeometricShutter"/> from the parent <see cref="T:Macro.ImageViewer.PresentationStates.GeometricShuttersGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.AddGeometricShutterUndoableCommand.Execute">
            <summary>
            Adds the <see cref="T:Macro.ImageViewer.PresentationStates.GeometricShutter"/> to the parent <see cref="T:Macro.ImageViewer.PresentationStates.GeometricShuttersGraphic"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.RemoveGeometricShutterUndoableCommand">
            <summary>
            <see cref="T:Macro.Desktop.UndoableCommand"/> for removing a <see cref="T:Macro.ImageViewer.PresentationStates.GeometricShutter"/> from a
            <see cref="T:Macro.ImageViewer.PresentationStates.GeometricShuttersGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.RemoveGeometricShutterUndoableCommand.#ctor(Macro.ImageViewer.PresentationStates.GeometricShuttersGraphic,Macro.ImageViewer.PresentationStates.GeometricShutter)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.PresentationStates.RemoveGeometricShutterUndoableCommand"/>.
            </summary>
            <param name="parent">The parent <see cref="T:Macro.ImageViewer.PresentationStates.GeometricShuttersGraphic"/>.</param>
            <param name="shutter">The <see cref="T:Macro.ImageViewer.PresentationStates.GeometricShutter"/> to add to <paramref name="parent"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.RemoveGeometricShutterUndoableCommand.Unexecute">
            <summary>
            Adds the <see cref="T:Macro.ImageViewer.PresentationStates.GeometricShutter"/> to the parent <see cref="T:Macro.ImageViewer.PresentationStates.GeometricShuttersGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.RemoveGeometricShutterUndoableCommand.Execute">
            <summary>
            Removes the <see cref="T:Macro.ImageViewer.PresentationStates.GeometricShutter"/> from the parent <see cref="T:Macro.ImageViewer.PresentationStates.GeometricShuttersGraphic"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.MoveControlGraphic">
            <summary>
            An interactive graphic that allows a subject graphic to be moved.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.MoveControlGraphic.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs a new instance of <see cref="T:Macro.ImageViewer.InteractiveGraphics.MoveControlGraphic"/>.
            </summary>
            <param name="subject">The subject graphic.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.MoveControlGraphic.#ctor(Macro.ImageViewer.InteractiveGraphics.MoveControlGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.MoveControlGraphic.GetCursorToken(System.Drawing.Point)">
            <summary>
            Called by <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> in response to the framework requesting the cursor token for a particular screen coordinate via <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.GetCursorToken(System.Drawing.Point)"/>.
            </summary>
            <param name="point">The screen coordinate for which the cursor is requested.</param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.MoveControlGraphic.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit test on the <see cref="T:Macro.ImageViewer.Graphics.CompositeGraphic"/> at given point.
            </summary>
            <param name="point">The mouse position in destination coordinates.</param>
            <returns>
            <b>True</b> if <paramref name="point"/> "hits" any <see cref="T:Macro.ImageViewer.Graphics.Graphic"/>
            in the subtree, <b>false</b> otherwise.
            </returns>
            <remarks>
            Calling <see cref="M:Macro.ImageViewer.Graphics.CompositeGraphic.HitTest(System.Drawing.Point)"/> will recursively call <see cref="M:Macro.ImageViewer.Graphics.CompositeGraphic.HitTest(System.Drawing.Point)"/> on
            <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> objects in the subtree.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.MoveControlGraphic.Move(System.Drawing.SizeF)">
            <summary>
            Moves the <see cref="T:Macro.ImageViewer.Graphics.CompositeGraphic"/> by a specified delta.
            </summary>
            <param name="delta">The distance to move.</param>
            <remarks>
            Depending on the value of <see cref="T:Macro.ImageViewer.Graphics.CoordinateSystem"/>,
            <paramref name="delta"/> will be interpreted in either source
            or destination coordinates.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.MoveControlGraphic.Start(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> in response to a mouse button click via <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Start(Macro.ImageViewer.InputManagement.IMouseInformation)"/>.
            </summary>
            <param name="mouseInformation">The mouse input information.</param>
            <returns>True if the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> did something as a result of the call and hence would like to receive capture; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.MoveControlGraphic.Track(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> in response to the framework tracking mouse input via <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Track(Macro.ImageViewer.InputManagement.IMouseInformation)"/>.
            </summary>
            <param name="mouseInformation">The mouse input information.</param>
            <returns>True if the message was handled; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.MoveControlGraphic.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> in response a mouse button release via <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)"/>.
            </summary>
            <param name="mouseInformation">The mouse input information.</param>
            <returns>True if the framework should <b>not</b> release capture; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.MoveControlGraphic.Cancel">
            <summary>
            Called by <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> in response to an attempt to cancel the current operation via <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Cancel"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.MoveControlGraphic.CreateMemento">
            <summary>
            Captures the state of an object.
            </summary>
            <remarks>
            The implementation of <see cref="M:Macro.Desktop.IMemorable.CreateMemento"/> should return an
            object containing enough state information so that
            when <see cref="M:Macro.Desktop.IMemorable.SetMemento(System.Object)"/> is called, the object can be restored
            to the original state.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.MoveControlGraphic.SetMemento(System.Object)">
            <summary>
            Restores the state of an object.
            </summary>
            <param name="memento">The object that was
            originally created with <see cref="M:Macro.Desktop.IMemorable.CreateMemento"/>.</param>
            <remarks>
            The implementation of <see cref="M:Macro.Desktop.IMemorable.SetMemento(System.Object)"/> should return the 
            object to the original state captured by <see cref="M:Macro.Desktop.IMemorable.CreateMemento"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.MoveControlGraphic.CommandName">
            <summary>
            Gets a string that describes the type of control operation that this graphic provides.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.MoveControlGraphic.Anchor">
            <summary>
            Gets a point that can be used as a landmark to quantify the difference in position of the controlled
            graphic when moved by this <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/>.
            </summary>
            <remarks>
            <para>This point has no meaning outside of the same instance of a <see cref="T:Macro.ImageViewer.InteractiveGraphics.MoveControlGraphic"/>.
            Specifically, there is no defined relationship between the <see cref="P:Macro.ImageViewer.InteractiveGraphics.MoveControlGraphic.Anchor"/> and the underlying
            <see cref="P:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Subject"/>. The typical usage is to take the difference between the current
            value and a previous reading of the value to determine the position delta between the two readings.</para>
            <para>This point is given in either source or destination coordinates depending on the current value
            of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>.</para>
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.MoveControlGraphic.Cursor">
            <summary>
            Gets or sets the cursor to show when hovering over the graphic.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Services.SR">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Services.SR.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Services.SR.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Services.SR.MenuRestart">
            <summary>
              查找类似 Restart 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Services.SR.MenuService">
            <summary>
              查找类似 Service 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Services.SR.MenuStart">
            <summary>
              查找类似 Start 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Services.SR.MenuStop">
            <summary>
              查找类似 Stop 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Services.SR.MessageControlServiceAccessDenied">
            <summary>
              查找类似 You don&apos;t have the appropriate permissions to start/stop the service. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Services.SR.MessageControlServiceTimeout">
            <summary>
              查找类似 A timeout has occurred while attempting to control the service. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Services.SR.MessageFailedToRestartService">
            <summary>
              查找类似 Failed to restart service. Please check the logs for more details. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Services.SR.MessageFailedToStartService">
            <summary>
              查找类似 Failed to start service. Please check the logs for more details. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Services.SR.MessageFailedToStopService">
            <summary>
              查找类似 Failed to stop service. Please check the logs for more details. 的本地化字符串。
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.SimpleDataModalityLut">
            <summary>
            An implementation of a <see cref="T:Macro.ImageViewer.Imaging.IDataModalityLut"/> whose size and data do not change.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.DataModalityLut">
            <summary>
            Base implementation of a lookup table in the standard grayscale image display pipeline used to transform stored pixel values to manufacturer-independent values implemented as an array of values.
            </summary>
            <remarks>
            Normally, you should not have to inherit directly from this class.
            <see cref="T:Macro.ImageViewer.Imaging.SimpleDataModalityLut"/> or <see cref="T:Macro.ImageViewer.Imaging.GeneratedDataModalityLut"/> should cover
            most, if not all, common use cases.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.DataModalityLut.OnLutChanged">
            <summary>
            Fires the <see cref="E:Macro.ImageViewer.Imaging.DataModalityLut.LutChanged"/> event.
            </summary>
            <remarks>
            Inheritors should call this method when any property of the lookup table has changed.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.DataModalityLut.CreateMemento">
            <summary>
            Captures the state of the lookup table.
            </summary>
            <remarks>
            <para>
            The implementation should return an object containing enough state information so that,
            when <see cref="M:Macro.ImageViewer.Imaging.DataModalityLut.SetMemento(System.Object)"/> is called, the lookup table can be restored to the original state.
            </para>
            <para>
            If the method is implemented, <see cref="M:Macro.ImageViewer.Imaging.DataModalityLut.SetMemento(System.Object)"/> must also be implemented.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.DataModalityLut.SetMemento(System.Object)">
            <summary>
            Restores the state of the lookup table.
            </summary>
            <param name="memento">An object that was originally created by <see cref="M:Macro.ImageViewer.Imaging.DataModalityLut.CreateMemento"/>.</param>
            <remarks>
            <para>
            The implementation should return the lookup table to the original state captured by <see cref="M:Macro.ImageViewer.Imaging.DataModalityLut.CreateMemento"/>.
            </para>
            <para>
            If you implement <see cref="M:Macro.ImageViewer.Imaging.DataModalityLut.CreateMemento"/> to capture the lookup table's state, you must also implement this method
            to allow the state to be restored. Failure to do so will result in a <see cref="T:System.InvalidOperationException"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.DataModalityLut.MinOutputValue">
            <summary>
            Gets or sets the minimum output value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.DataModalityLut.MaxOutputValue">
            <summary>
            Gets or sets the maximum output value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.DataModalityLut.Item(System.Int32)">
            <summary>
            Gets or sets the output value of the lookup table for a given input value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.DataModalityLut.Length">
            <summary>
             Gets the length of <see cref="P:Macro.ImageViewer.Imaging.DataModalityLut.Data"/>.
            </summary>
             <remarks>
             The reason for this member's existence is that <see cref="P:Macro.ImageViewer.Imaging.DataModalityLut.Data"/> is lazily-initialized, and thus may
             not yet exist; this value is based solely on <see cref="P:Macro.ImageViewer.Imaging.DataModalityLut.FirstMappedPixelValue"/>
             and <see cref="P:Macro.ImageViewer.Imaging.DataModalityLut.LastMappedPixelValue"/>.
             </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.DataModalityLut.LastMappedPixelValue">
            <summary>
            Gets the last mapped pixel value.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.SimpleDataModalityLut.#ctor(System.Int32,System.Double[],System.Double,System.Double,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Imaging.SimpleDataModalityLut"/>.
            </summary>
            <param name="firstMappedPixelValue">The value of the first stored pixel value mapped by <paramref name="data"/>.</param>
            <param name="data">The data table mapping stored pixel values to manfuacturer-independent values.</param>
            <param name="minOutputValue">The minimum output value of the lookup table.</param>
            <param name="maxOutputValue">The maximum output value of the lookup table.</param>
            <param name="key">A key string suitable for identifying the characteristics of the lookup table.</param>
            <param name="description">A description of the characteristics of the lookup table.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.SimpleDataModalityLut.#ctor(Macro.ImageViewer.Imaging.SimpleDataModalityLut,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.SimpleDataModalityLut.MinOutputValue">
            <summary>
            Gets the minimum output value.
            </summary>
            <remarks>
            This value is constant and cannot be changed.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.SimpleDataModalityLut.MaxOutputValue">
            <summary>
            Gets the maximum output value.
            </summary>
            <remarks>
            This value is constant and cannot be changed.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.SimpleDataModalityLut.FirstMappedPixelValue">
            <summary>
            Gets the first mapped pixel value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.SimpleDataModalityLut.LastMappedPixelValue">
            <summary>
            Gets the last mapped pixel value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.SimpleDataModalityLut.Data">
            <summary>
            Gets the lookup table data.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.DataVoiLut">
            <summary>
            Base implementation of a lookup table in the standard grayscale image display pipeline used to select a range from manufacturer-independent values for display implemented as an array of values.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Annotations.IAnnotationResourceResolver">
            <summary>
            Resolves the display name and label from an <see cref="T:Macro.ImageViewer.Annotations.IAnnotationItem"/>'s 
            unique identifier (<see cref="M:Macro.ImageViewer.Annotations.IAnnotationItem.GetIdentifier"/>, usually by looking the values
            up in assembly resources.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.IAnnotationResourceResolver.ResolveDisplayName(System.String)">
            <summary>
            Resolves the <see cref="T:Macro.ImageViewer.Annotations.IAnnotationItem"/>'s label (see <see cref="M:Macro.ImageViewer.Annotations.IAnnotationItem.GetLabel"/>).
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.IAnnotationResourceResolver.ResolveLabel(System.String)">
            <summary>
            Resolves the <see cref="T:Macro.ImageViewer.Annotations.IAnnotationItem"/>'s (or <see cref="T:Macro.ImageViewer.Annotations.IAnnotationItemProvider"/>'s) display name 
            (see <see cref="M:Macro.ImageViewer.Annotations.IAnnotationItem.GetDisplayName"/> and <see cref="M:Macro.ImageViewer.Annotations.IAnnotationItemProvider.GetDisplayName"/>).
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.TileController">
            <summary>
            This class controls the behaviour of objects in the <see cref="T:Macro.ImageViewer.ITile"/>, namely the <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>s 
            in the current <see cref="T:Macro.ImageViewer.IPresentationImage"/>'s SceneGraph (<see cref="P:Macro.ImageViewer.PresentationImage.SceneGraph"/>) and <see cref="T:Macro.Desktop.Tools.ITool"/>s 
            belonging to the current <see cref="T:Macro.ImageViewer.IPresentationImage"/>, specifically those that implement <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> and/or <see cref="T:Macro.ImageViewer.InputManagement.IMouseWheelHandler"/>.
            </summary>
            <remarks>
            <para>
            - The <see cref="T:Macro.ImageViewer.InputManagement.TileController"/> receives messages from the view layer, interprets them, and allows the appropriate domain objects to handle
            the messages in a prescribed manner.  Here is a (highly simplified) description of how it works:
            <list>
            <item>
            <description>
            - When the mouse moves without any buttons down, all <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>s 
            that implement <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> have their <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Track(Macro.ImageViewer.InputManagement.IMouseInformation)"/> method called.
            </description>
            </item>
            <item>
            <description>
            - When a mouse button is clicked, an <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> is searched for at the current mouse position
            that implements <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/>.  If one is found, it is given 'capture' until it releases capture or capture is canceled by the framework.
            If no <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> is found, then all of the current <see cref="T:Macro.ImageViewer.IPresentationImage"/>'s 
            <see cref="T:Macro.Desktop.Tools.ITool"/>s are searched for an <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> and the same rules are applied.
            </description>
            </item>
            <item>
            <description>
            - When the right mouse button is clicked, the same thing occurs as for the left mouse button, but when it is released, a context menu is shown
            provided the mouse didn't move more than a couple of pixels.
            </description>
            </item>
            <item>
            <description>
            When the mouse wheel is used, a similar approach is taken as mentioned above for <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/>s, but for <see cref="T:Macro.ImageViewer.InputManagement.IMouseWheelHandler"/>s.  
            However, only <see cref="T:Macro.Desktop.Tools.ITool"/>s are given the opportunity to handle the mouse wheel, not <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>s.
            </description>
            </item>
            </list>
            </para>
            <para>
            Note that this object is instantiated from within the view layer and cannot be accessed from application or domain level code.  
            This is deliberate as it is intended for internal framework use only.
            </para>
            </remarks>
            <seealso cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/>
            <seealso cref="T:Macro.ImageViewer.InputManagement.IMouseWheelHandler"/>
            <seealso cref="T:Macro.ImageViewer.InputManagement.IMouseInformation"/>
            <seealso cref="T:Macro.ImageViewer.ITile"/>
            <seealso cref="T:Macro.ImageViewer.IPresentationImage"/>
            <seealso cref="T:Macro.ImageViewer.PresentationImage"/>
            <seealso cref="P:Macro.ImageViewer.PresentationImage.SceneGraph"/>
            <seealso cref="T:Macro.Desktop.Tools.ITool"/>
            <seealso cref="T:Macro.ImageViewer.BaseTools.ImageViewerTool"/>
            <seealso cref="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool"/>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.IMouseInformation">
            <summary>
            Used by the framework to relay information about the mouse to domain objects.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.IMouseInformation.Tile">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.ITile"/> the mouse is currently in.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.IMouseInformation.Location">
            <summary>
            Gets the mouse's current location, in terms of the <see cref="T:Macro.ImageViewer.ITile"/>'s client rectangle coordinates.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.IMouseInformation.ActiveButton">
            <summary>
            Gets the currently depressed mouse button, if any.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.IMouseInformation.ClickCount">
            <summary>
            Gets the current mouse button click count.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.TileController.#ctor(Macro.ImageViewer.Tile,Macro.ImageViewer.InputManagement.IViewerShortcutManager)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.TileController.HasMoved(System.Drawing.Point)">
            <summary>
            Checks if <paramref name="point"/> has moved out of the tolerance zone from where the mouse button was pressed.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.TileController.ProcessMessage(System.Object)">
            <summary>
            Called by the view layer so that the <see cref="T:Macro.ImageViewer.InputManagement.TileController"/> can process the <paramref name="message"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.TileController.TileClientRectangle">
            <summary>
            Used by the view layer to tell this object what the <see cref="P:Macro.ImageViewer.InputManagement.TileController.Tile"/>'s client rectangle is.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.TileController.ContextMenuEnabled">
            <summary>
            Used by the view layer to decide whether or not to show the context menu.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.TileController.ContextMenuProvider">
            <summary>
            Used by the view layer to retrieve the <see cref="T:Macro.Desktop.Actions.ActionModelNode"/> in order to show a context menu.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.TileController.CursorToken">
            <summary>
            Used by the view layer to determine the <see cref="P:Macro.ImageViewer.InputManagement.TileController.CursorToken"/> to show.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.InputManagement.TileController.CursorTokenChanged">
            <summary>
            For use by the view layer, so it can detect when the <see cref="P:Macro.ImageViewer.InputManagement.TileController.CursorToken"/> has changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.InputManagement.TileController.ContextMenuRequested">
            <summary>
            Fired to request that the view layer show a context menu at the specified location.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.InputManagement.TileController.CaptureChanging">
            <summary>
            For use by the view layer, so it can detect when capture is changing.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.InputManagement.TileController.WheelCaptureChanging">
            <summary>
            For use by the view layer, so it can detect when capture is changing.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.TileController.Tile">
            <summary>
            The <see cref="T:Macro.ImageViewer.ITile"/> that is controlled by this <see cref="T:Macro.ImageViewer.InputManagement.TileController"/>.
            </summary>
            <remarks>
            For use by consumers of <see cref="T:Macro.ImageViewer.InputManagement.IMouseInformation"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.TileController.Location">
            <summary>
            The current mouse location, set by the view layer.
            </summary>
            <remarks>
            For use by consumers of <see cref="T:Macro.ImageViewer.InputManagement.IMouseInformation"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.TileController.ActiveButton">
            <summary>
            Gets the currently depressed (<see cref="T:Macro.Desktop.XMouseButtons"/>) mouse button, set internally by this class.
            </summary>
            <remarks>
            For use by consumers of <see cref="T:Macro.ImageViewer.InputManagement.IMouseInformation"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.TileController.ClickCount">
            <summary>
            Gets the current click count.
            </summary>
            <remarks>
            For use by consumers of <see cref="T:Macro.ImageViewer.InputManagement.IMouseInformation"/>.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.TileController.ActionModelProvider">
            <summary>
            A proxy class for providing an action model directly to the tile control in order to show
            a context menu without the user having to click.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.Series">
            <summary>
            A DICOM series.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Series.GetIdentifier">
            <summary>
            Gets an <see cref="T:Macro.Dicom.ServiceModel.Query.ISeriesIdentifier"/> for this <see cref="T:Macro.ImageViewer.StudyManagement.Series"/>.
            </summary>
            <remarks>An <see cref="T:Macro.Dicom.ServiceModel.Query.ISeriesIdentifier"/> can be used in situations where you only
            need some data about the <see cref="T:Macro.ImageViewer.StudyManagement.Series"/>, but not the <see cref="T:Macro.ImageViewer.StudyManagement.Series"/> itself.  It can be problematic
            to hold references to <see cref="T:Macro.ImageViewer.StudyManagement.Series"/> objects outside the context of an <see cref="T:Macro.ImageViewer.IImageViewer"/>
            because they are no longer valid when the viewer is closed; in these situations, it may be appropriate to
            use an identifier.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Series.ToString">
            <summary>
            Returns the series description and series instance UID in string form.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Series.ParentStudy">
            <summary>
            Gets the parent <see cref="T:Macro.ImageViewer.StudyManagement.Study"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Series.Sops">
            <summary>
            Gets the collection of <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> objects that belong
            to this <see cref="T:Macro.ImageViewer.StudyManagement.Study"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Series.StudyInstanceUid">
            <summary>
            Gets the Study Instance UID of the identified series.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Series.SeriesInstanceUid">
            <summary>
            Gets the Series Instance UID of the identified series.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Series.Modality">
            <summary>
            Gets the modality of the identified series.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Series.SeriesDescription">
            <summary>
            Gets the series description of the identified series.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Series.SeriesNumber">
            <summary>
            Gets the series number of the identified series.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Series.NumberOfSeriesRelatedInstances">
            <summary>
            Gets the number of composite object instances belonging to the identified series.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Series.Laterality">
            <summary>
            Gets the laterality.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Series.SeriesDate">
            <summary>
            Gets the series date.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Series.SeriesTime">
            <summary>
            Gets the series time.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Series.PerformingPhysiciansName">
            <summary>
            Gets the names of performing physicians.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Series.OperatorsName">
            <summary>
            Gets the names of operators.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Series.BodyPartExamined">
            <summary>
            Gets the body part examined.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Series.PatientPosition">
            <summary>
            Gets the patient position.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Series.Manufacturer">
            <summary>
            Gets the manufacturer.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Series.InstitutionName">
            <summary>
            Gets the institution name.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Series.StationName">
            <summary>
            Gets the station name.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Series.InstitutionalDepartmentName">
            <summary>
            Gets the institutional department name.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Series.ManufacturersModelName">
            <summary>
            Gets the manufacturer's model name.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.ImageInterpolatorBilinear.InterpolateBilinear(System.Byte*,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Single,System.Single,System.Single,System.Byte*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,Macro.ImageViewer.Rendering.ImageInterpolatorBilinear.LutData*)">
            <summary>
            Import the C++ DLL that implements the fixed point bilinear interpolation method.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationImageSelectedEventArgs">
            <summary>
            Provides data for the <see cref="E:Macro.ImageViewer.EventBroker.PresentationImageSelected"/> event.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationImageSelectedEventArgs.SelectedPresentationImage">
            <summary>
            Gets the selected <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PhysicalWorkspace">
            <summary>
            A container for image boxes.
            </summary>
            <remarks>
            <para>
            <see cref="T:Macro.ImageViewer.PhysicalWorkspace"/> and its related classes <see cref="T:Macro.ImageViewer.ImageBox"/> and
            <see cref="T:Macro.ImageViewer.Tile"/> collectively describe how images are positioned and sized
            on the screen.  A <see cref="T:Macro.ImageViewer.PhysicalWorkspace"/> contains zero or more image 
            boxes, which in turn each contain zero or more tiles.  Image boxes can be 
            arranged arbitrarily in a workspace whereas tiles in an image box must be laid 
            out as a rectangular grid. A tile contains a <see cref="T:Macro.ImageViewer.PresentationImage"/>.
            </para>
            <para>
            Physical workspace layouts are described in normalized coordinates.
            The top left corner of the workspace corresponds to (0,0) and the bottom right
            (1,1).  When an <see cref="T:Macro.ImageViewer.IImageBox"/> is defined and added to a workspace, 
            it is done using that coordinate system.  See 
            <see cref="P:Macro.ImageViewer.IImageBox.NormalizedRectangle"/> for an example.
            </para>
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.IPhysicalWorkspace">
            <summary>
            Defines a container for <see cref="T:Macro.ImageViewer.IImageBox"/> objects.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.IPhysicalWorkspace.SetImageBoxGrid(System.Int32,System.Int32)">
            <summary>
            Creates a rectangular <see cref="T:Macro.ImageViewer.IImageBox"/> grid.
            </summary>
            <param name="rows"></param>
            <param name="columns"></param>
            <remarks>
            <see cref="M:Macro.ImageViewer.IPhysicalWorkspace.SetImageBoxGrid(System.Int32,System.Int32)"/> is a convenience method that adds
            <see cref="T:Macro.ImageViewer.IImageBox"/> objects to the <see cref="T:Macro.ImageViewer.IPhysicalWorkspace"/>
            in a rectangular grid.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.IPhysicalWorkspace.OnLayoutCompleted">
            <summary>
            Raises the <see cref="E:Macro.ImageViewer.IPhysicalWorkspace.LayoutCompleted"/> event.
            </summary>
            <remarks>
            If you are adding/removing <see cref="T:Macro.ImageViewer.IImageBox"/> objects manually 
            (i.e., instead of using <see cref="M:Macro.ImageViewer.IPhysicalWorkspace.SetImageBoxGrid(System.Int32,System.Int32)"/>), you should call
            <see cref="M:Macro.ImageViewer.IPhysicalWorkspace.OnLayoutCompleted"/> to raise the <see cref="E:Macro.ImageViewer.IPhysicalWorkspace.LayoutCompleted"/> event.  
            This event is consumed by the view to reduce flicker when layouts are changed.  
            In that way, it is similar to the WinForms methods <b>SuspendLayout</b>
            and <b>ResumeLayout</b>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.IPhysicalWorkspace.SelectDefaultImageBox">
            <summary>
            Selects the first <see cref="T:Macro.ImageViewer.IImageBox"/> in the image box collection.
            </summary>
            <remarks>
            When <see cref="M:Macro.ImageViewer.IPhysicalWorkspace.SetImageBoxGrid(System.Int32,System.Int32)"/> has been used to setup the 
            <see cref="T:Macro.ImageViewer.IPhysicalWorkspace"/>, the first <see cref="T:Macro.ImageViewer.IImageBox"/> in the
            image box collection will be the top-left <see cref="T:Macro.ImageViewer.IImageBox"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.IPhysicalWorkspace.ImageViewer">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IPhysicalWorkspace.LogicalWorkspace">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.ILogicalWorkspace"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IPhysicalWorkspace.ImageBoxes">
            <summary>
            Gets the collection of <see cref="T:Macro.ImageViewer.IImageBox"/> objects that belong
            to this <see cref="T:Macro.ImageViewer.IPhysicalWorkspace"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IPhysicalWorkspace.SelectedImageBox">
            <summary>
            Gets the selected <see cref="T:Macro.ImageViewer.IImageBox"/>.
            </summary>
            <value>The currently selected <see cref="T:Macro.ImageViewer.IImageBox"/>, or <b>null</b> if
            no <see cref="T:Macro.ImageViewer.IImageBox"/> is currently selected.</value>
        </member>
        <member name="P:Macro.ImageViewer.IPhysicalWorkspace.Rows">
            <summary>
            Gets the number of rows of <see cref="T:Macro.ImageViewer.IImageBox"/> objects in the
            <see cref="T:Macro.ImageViewer.IPhysicalWorkspace"/>.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.IPhysicalWorkspace.Rows"/> is <i>only</i> valid if <see cref="M:Macro.ImageViewer.IPhysicalWorkspace.SetImageBoxGrid(System.Int32,System.Int32)"/> has
            been called.  Otherwise, the value is meaningless.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.IPhysicalWorkspace.Columns">
            <summary>
            Gets the number of columns of <see cref="T:Macro.ImageViewer.IImageBox"/> objects in the
            <see cref="T:Macro.ImageViewer.IPhysicalWorkspace"/>.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.IPhysicalWorkspace.Columns"/> is <i>only</i> valid if <see cref="M:Macro.ImageViewer.IPhysicalWorkspace.SetImageBoxGrid(System.Int32,System.Int32)"/> has
            been called.  Otherwise, the value is meaningless.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.IPhysicalWorkspace.Item(System.Int32,System.Int32)">
            <summary>
            Returns the image box at a specified row and column index.
            </summary>
            <param name="row">the zero-based row index of the image box to retrieve</param>
            <param name="column">the zero-based column index of the image box to retrieve</param>
            <returns>the image box at the specified row and column indices</returns>
            <remarks>This method is only valid if <see cref="M:Macro.ImageViewer.IPhysicalWorkspace.SetImageBoxGrid(System.Int32,System.Int32)"/> has been called and/or the 
            layout is, in fact, rectangular.</remarks>
        </member>
        <member name="P:Macro.ImageViewer.IPhysicalWorkspace.Enabled">
            <summary>
            Gets or sets whether the workspace is currently enabled.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.IPhysicalWorkspace.EnabledChanged">
            <summary>
            Occurs when <see cref="P:Macro.ImageViewer.IPhysicalWorkspace.Enabled"/> has changed.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IPhysicalWorkspace.Locked">
            <summary>
            Gets or sets whether or not the <see cref="T:Macro.ImageViewer.IPhysicalWorkspace"/>'s <see cref="T:Macro.ImageViewer.IImageBox"/> layout
            should be locked.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.IPhysicalWorkspace.LockedChanged">
            <summary>
            Occurs when <see cref="P:Macro.ImageViewer.IPhysicalWorkspace.Locked"/> has changed.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IPhysicalWorkspace.ScreenRectangle">
            <summary>
            Gets the rectangle that the <see cref="T:Macro.ImageViewer.IPhysicalWorkspace"/> occupies
            in virtual screen coordinates.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.IPhysicalWorkspace.ScreenRectangleChanged">
            <summary>
            Occurs when <see cref="P:Macro.ImageViewer.IPhysicalWorkspace.ScreenRectangle"/> changes.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.IPhysicalWorkspace.LayoutCompleted">
            <summary>
            Occurs when all changes to image box collection are complete.
            </summary>
            <remarks>
            <see cref="E:Macro.ImageViewer.IPhysicalWorkspace.LayoutCompleted"/> is raised by the Framework when
            <see cref="M:Macro.ImageViewer.IPhysicalWorkspace.SetImageBoxGrid(System.Int32,System.Int32)"/> has been called.  If you are adding/removing
            <see cref="T:Macro.ImageViewer.IImageBox"/> objects manually, you should raise this event when
            you're done by calling <see cref="M:Macro.ImageViewer.IPhysicalWorkspace.OnLayoutCompleted"/>.  This event is
            consumed by the view to reduce flicker when layouts are changed.  
            In that way, it is similar to the WinForms methods <b>SuspendLayout</b>
            and <b>ResumeLayout</b>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.PhysicalWorkspace.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.PhysicalWorkspace"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PhysicalWorkspace.Dispose(System.Boolean)">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern
            </summary>
            <param name="disposing">True if this object is being disposed, false if it is being finalized</param>
        </member>
        <member name="M:Macro.ImageViewer.PhysicalWorkspace.SetImageBoxGrid(System.Int32,System.Int32)">
            <summary>
            Creates a rectangular <see cref="T:Macro.ImageViewer.IImageBox"/> grid.
            </summary>
            <param name="rows"></param>
            <param name="columns"></param>
            <remarks>
            <see cref="M:Macro.ImageViewer.PhysicalWorkspace.SetImageBoxGrid(System.Int32,System.Int32)"/> is a convenience method that adds
            <see cref="T:Macro.ImageViewer.IImageBox"/> objects to the <see cref="T:Macro.ImageViewer.IPhysicalWorkspace"/>
            in a rectangular grid.
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="rows"/> or 
            <paramref name="columns"/> is less than 1.</exception>
        </member>
        <member name="M:Macro.ImageViewer.PhysicalWorkspace.OnLayoutCompleted">
            <summary>
            Raises the <see cref="E:Macro.ImageViewer.PhysicalWorkspace.LayoutCompleted"/> event.
            </summary>
            <remarks>
            If you are adding/removing <see cref="T:Macro.ImageViewer.IImageBox"/> objects manually 
            (i.e., instead of using <see cref="M:Macro.ImageViewer.PhysicalWorkspace.SetImageBoxGrid(System.Int32,System.Int32)"/>), you should call
            <see cref="M:Macro.ImageViewer.PhysicalWorkspace.OnLayoutCompleted"/> to raise the <see cref="E:Macro.ImageViewer.PhysicalWorkspace.LayoutCompleted"/> event.  
            This event is consumed by the view to reduce flicker when layouts are changed.  
            In that way, it is similar to the WinForms methods <b>SuspendLayout</b>
            and <b>ResumeLayout</b>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.PhysicalWorkspace.SelectDefaultImageBox">
            <summary>
            Selects the first <see cref="T:Macro.ImageViewer.IImageBox"/> in the image box collection.
            </summary>
            <remarks>
            When <see cref="M:Macro.ImageViewer.PhysicalWorkspace.SetImageBoxGrid(System.Int32,System.Int32)"/> has been used to setup the 
            <see cref="T:Macro.ImageViewer.IPhysicalWorkspace"/>, the first <see cref="T:Macro.ImageViewer.IImageBox"/> in the
            image box collection will be the top-left <see cref="T:Macro.ImageViewer.IImageBox"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.PhysicalWorkspace.Draw">
            <summary>
            Draws the <see cref="T:Macro.ImageViewer.IPhysicalWorkspace"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PhysicalWorkspace.CreateMemento">
            <summary>
            Creates a memento for this <see cref="T:Macro.ImageViewer.PhysicalWorkspace"/>.
            </summary>
            <returns>A memento for this <see cref="T:Macro.ImageViewer.PhysicalWorkspace"/>.</returns>
            <remarks>
            This method is used to remember the current state of a
            <see cref="T:Macro.ImageViewer.PhysicalWorkspace"/>.  The memento remembers the actual <see cref="T:Macro.ImageViewer.ImageBox"/>
            <i>instances</i> contained in the <see cref="T:Macro.ImageViewer.PhysicalWorkspace"/>.  Calling
            <see cref="M:Macro.ImageViewer.PhysicalWorkspace.SetMemento(System.Object)"/> at a later time restores 
            those instances.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.PhysicalWorkspace.SetMemento(System.Object)">
            <summary>
            Sets this <see cref="T:Macro.ImageViewer.PhysicalWorkspace"/> with a previously created memento.
            </summary>
            <param name="memento">Memento to set.</param>
            <remarks>
            This method restores the state of a <see cref="T:Macro.ImageViewer.PhysicalWorkspace"/> with
            a memento previously created by <see cref="M:Macro.ImageViewer.PhysicalWorkspace.CreateMemento"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.PhysicalWorkspace.ImageBoxes">
            <summary>
            Gets the collection of <see cref="T:Macro.ImageViewer.IImageBox"/> objects that belong
            to this <see cref="T:Macro.ImageViewer.PhysicalWorkspace"/>.
            </summary>
            <remarks>When a <see cref="T:Macro.ImageViewer.PhysicalWorkspace"/> is first instantiated,
            <see cref="P:Macro.ImageViewer.PhysicalWorkspace.ImageBoxes"/> is empty.</remarks>
        </member>
        <member name="P:Macro.ImageViewer.PhysicalWorkspace.Rows">
            <summary>
            Gets the number of rows of <see cref="T:Macro.ImageViewer.IImageBox"/> objects in the
            <see cref="T:Macro.ImageViewer.PhysicalWorkspace"/>.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.PhysicalWorkspace.Rows"/> is <i>only</i> valid if <see cref="M:Macro.ImageViewer.PhysicalWorkspace.SetImageBoxGrid(System.Int32,System.Int32)"/> has
            been called.  Otherwise, the value is meaningless.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.PhysicalWorkspace.Columns">
            <summary>
            Gets the number of columns of <see cref="T:Macro.ImageViewer.IImageBox"/> objects in the
            <see cref="T:Macro.ImageViewer.PhysicalWorkspace"/>.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.PhysicalWorkspace.Columns"/> is <i>only</i> valid if <see cref="M:Macro.ImageViewer.PhysicalWorkspace.SetImageBoxGrid(System.Int32,System.Int32)"/> has
            been called.  Otherwise, the value is meaningless.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.PhysicalWorkspace.Item(System.Int32,System.Int32)">
            <summary>
            Returns the image box at a specified row and column index.
            </summary>
            <param name="row">the zero-based row index of the image box to retrieve</param>
            <param name="column">the zero-based column index of the image box to retrieve</param>
            <returns>the image box at the specified row and column indices</returns>
            <remarks>This method is only valid if <see cref="M:Macro.ImageViewer.PhysicalWorkspace.SetImageBoxGrid(System.Int32,System.Int32)"/> has been called and/or the 
            layout is, in fact, rectangular.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the layout is not currently rectangular</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if either of the row/column indices are out of range</exception>
        </member>
        <member name="P:Macro.ImageViewer.PhysicalWorkspace.ImageViewer">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PhysicalWorkspace.LogicalWorkspace">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.ILogicalWorkspace"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PhysicalWorkspace.SelectedImageBox">
            <summary>
            Gets the selected <see cref="T:Macro.ImageViewer.IImageBox"/>.
            </summary>
            <value>The currently selected <see cref="T:Macro.ImageViewer.IImageBox"/>, or <b>null</b> if
            no <see cref="T:Macro.ImageViewer.IImageBox"/> is currently selected.</value>
        </member>
        <member name="P:Macro.ImageViewer.PhysicalWorkspace.Enabled">
            <summary>
            Gets or sets whether the workspace is currently enabled.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PhysicalWorkspace.Locked">
            <summary>
            Gets or sets whether the <see cref="T:Macro.ImageViewer.IPhysicalWorkspace"/>'s layout
            is locked.
            </summary>
            <remarks>
            This property is useful for cases where a read-only layout is appropriate/desired.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.PhysicalWorkspace.ScreenRectangle">
            <summary>
            Gets the rectangle that the <see cref="T:Macro.ImageViewer.IPhysicalWorkspace"/> occupies
            in virtual screen coordinates.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.PhysicalWorkspace.Drawing">
            <summary>
            Occurs when the <see cref="T:Macro.ImageViewer.PhysicalWorkspace"/> is drawn.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.PhysicalWorkspace.EnabledChanged">
            <summary>
            Occurs when <see cref="P:Macro.ImageViewer.PhysicalWorkspace.Enabled"/> has changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.PhysicalWorkspace.LockedChanged">
            <summary>
            Occurs when <see cref="P:Macro.ImageViewer.PhysicalWorkspace.Locked"/> has changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.PhysicalWorkspace.LayoutCompleted">
            <summary>
            Occurs when all changes to image box collection are complete.
            </summary>
            <remarks>
            <see cref="E:Macro.ImageViewer.PhysicalWorkspace.LayoutCompleted"/> is raised by the Framework when
            <see cref="M:Macro.ImageViewer.PhysicalWorkspace.SetImageBoxGrid(System.Int32,System.Int32)"/> has been called.  If you are adding/removing
            <see cref="T:Macro.ImageViewer.IImageBox"/> objects manually, you should raise this event when
            you're done by calling <see cref="M:Macro.ImageViewer.PhysicalWorkspace.OnLayoutCompleted"/>.  This event is
            consumed by the view to reduce flicker when layouts are changed.  
            In that way, it is similar to the WinForms methods <b>SuspendLayout</b>
            and <b>ResumeLayout</b>.
            </remarks>
        </member>
        <member name="E:Macro.ImageViewer.PhysicalWorkspace.ScreenRectangleChanged">
            <summary>
            Occurs when <see cref="P:Macro.ImageViewer.IPhysicalWorkspace.ScreenRectangle"/> changes.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.LineStyle">
            <summary>
            Specifies the line style to use when drawing the vector.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Graphics.LineStyle.Solid">
            <summary>
            A solid line.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Graphics.LineStyle.Dash">
            <summary>
            A dashed line.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Graphics.LineStyle.Dot">
            <summary>
            A dotted line.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Annotations.AnnotationBox">
            <summary>
            An <see cref="T:Macro.ImageViewer.Annotations.AnnotationBox"/> is rendered to the screen by an <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/>.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Annotations.AnnotationItemConfigurationOptions"/>
            <seealso cref="T:Macro.ImageViewer.Annotations.IAnnotationItem"/>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationBox.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationBox.#ctor(System.Drawing.RectangleF,Macro.ImageViewer.Annotations.IAnnotationItem)">
            <summary>
            Constructor that initializes the <see cref="P:Macro.ImageViewer.Annotations.AnnotationBox.NormalizedRectangle"/> and <see cref="P:Macro.ImageViewer.Annotations.AnnotationBox.AnnotationItem"/> properties.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when the input <paramref name="normalizedRectangle"/> is not normalized.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationBox.GetAnnotationText(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Gets the text to be rendered into the area defined by <see cref="P:Macro.ImageViewer.Annotations.AnnotationBox.NormalizedRectangle"/> for the input <paramref name="presentationImage"/>.
            </summary>
            <param name="presentationImage">The presentation image.</param>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationBox.Clone">
            <summary>
            Creates a deep clone of this object.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationBox.AnnotationItem">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.Annotations.IAnnotationItem"/> that provides the annotation text.
            </summary>
            <remarks>
            It is permissible for this value to be null.  A value of "" will always be returned from <see cref="M:Macro.ImageViewer.Annotations.AnnotationBox.GetAnnotationText(Macro.ImageViewer.IPresentationImage)"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationBox.NormalizedRectangle">
            <summary>
            Defines the normalized rectangle in which the <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/> should render the text.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when setting the property if the value is not normalized.</exception>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationBox.ConfigurationOptions">
            <summary>
            Defines configuration options for how <see cref="M:Macro.ImageViewer.Annotations.AnnotationBox.GetAnnotationText(Macro.ImageViewer.IPresentationImage)"/> should format its return value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationBox.DefaultFont">
            <summary>
            Gets the default font ("Arial") by name.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationBox.DefaultColor">
            <summary>
            Gets the default color ("WhiteSmoke") by name.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationBox.Font">
            <summary>
            Gets or sets the font (by name) that should be used to render the text.
            </summary>
            <remarks>
            The default value is "Arial".
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationBox.Color">
            <summary>
            Gets or sets the color (by name) that should be used to render the text.
            </summary>
            <remarks>
            The default value is "WhiteSmoke".
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationBox.Italics">
            <summary>
            Gets or sets whether the text should be in italics.
            </summary>
            <remarks>
            The default value is false.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationBox.Bold">
            <summary>
            Gets or sets whether the text should be in bold.
            </summary>
            <remarks>
            The default value is false.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationBox.NumberOfLines">
            <summary>
            Gets or sets the number of lines of to render.
            </summary>
            <remarks>
            The default value is 1.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationBox.FitWidth">
            <summary>
            Gets or sets whether the text should be fit to the width of the <see cref="P:Macro.ImageViewer.Annotations.AnnotationBox.NormalizedRectangle"/>.
            </summary>
            <remarks>
            The default value is false.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationBox.AlwaysVisible">
            <summary>
            Gets or sets whether or not the item can be made invisible.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationBox.Truncation">
            <summary>
            Gets or sets the <see cref="T:Macro.ImageViewer.Annotations.AnnotationBox.TruncationBehaviour"/>.
            </summary>
            <remarks>
            The default value is <see cref="F:Macro.ImageViewer.Annotations.AnnotationBox.TruncationBehaviour.Ellipsis"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationBox.Justification">
            <summary>
            Gets or sets the <see cref="T:Macro.ImageViewer.Annotations.AnnotationBox.JustificationBehaviour"/>.
            </summary>
            <remarks>
            The default value is <see cref="F:Macro.ImageViewer.Annotations.AnnotationBox.JustificationBehaviour.Left"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationBox.VerticalAlignment">
            <summary>
            Gets or sets the <see cref="T:Macro.ImageViewer.Annotations.AnnotationBox.VerticalAlignmentBehaviour"/>.
            </summary>
            <remarks>
            The default value is <see cref="F:Macro.ImageViewer.Annotations.AnnotationBox.VerticalAlignmentBehaviour.Center"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationBox.Visible">
            <summary>
            Gets or sets whether or not the item is visible.
            </summary>
            <remarks>Takes into account the value of <see cref="P:Macro.ImageViewer.Annotations.AnnotationBox.AlwaysVisible"/> when returning a value;
            however, internally, the value is always set.</remarks>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationBox.VisibleInternal">
            <summary>
            Gets the internal value of <see cref="P:Macro.ImageViewer.Annotations.AnnotationBox.Visible"/>.
            </summary>
            <returns>Returns the true value of <see cref="P:Macro.ImageViewer.Annotations.AnnotationBox.Visible"/> regardless of the value of <see cref="P:Macro.ImageViewer.Annotations.AnnotationBox.AlwaysVisible"/>.</returns>
        </member>
        <member name="T:Macro.ImageViewer.Annotations.AnnotationBox.TruncationBehaviour">
            <summary>
            Defines the available truncation behaviours for strings that will extend beyond <see cref="P:Macro.ImageViewer.Annotations.AnnotationBox.NormalizedRectangle"/>.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Annotations.AnnotationBox.TruncationBehaviour.Truncate">
            <summary>
            Specifies that the string should just be cut off at the edge of the <see cref="P:Macro.ImageViewer.Annotations.AnnotationBox.NormalizedRectangle"/>.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Annotations.AnnotationBox.TruncationBehaviour.Ellipsis">
            <summary>
            Specifies that the string should have an ellipses (...) at the edge of the <see cref="P:Macro.ImageViewer.Annotations.AnnotationBox.NormalizedRectangle"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Annotations.AnnotationBox.JustificationBehaviour">
            <summary>
            Defines the available horizontal justifications.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Annotations.AnnotationBox.JustificationBehaviour.Left">
            <summary>
            Specifies that the string should be left-justified in the <see cref="P:Macro.ImageViewer.Annotations.AnnotationBox.NormalizedRectangle"/>.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Annotations.AnnotationBox.JustificationBehaviour.Center">
            <summary>
            Specifies that the string should be centred horizontally in the <see cref="P:Macro.ImageViewer.Annotations.AnnotationBox.NormalizedRectangle"/>.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Annotations.AnnotationBox.JustificationBehaviour.Right">
            <summary>
            Specifies that the string should be right-justified in the <see cref="P:Macro.ImageViewer.Annotations.AnnotationBox.NormalizedRectangle"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Annotations.AnnotationBox.VerticalAlignmentBehaviour">
            <summary>
            Defines the available vertical alignments.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Annotations.AnnotationBox.VerticalAlignmentBehaviour.Top">
            <summary>
            Specifies that the string should be aligned along the top of the <see cref="P:Macro.ImageViewer.Annotations.AnnotationBox.NormalizedRectangle"/>.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Annotations.AnnotationBox.VerticalAlignmentBehaviour.Center">
            <summary>
            Specifies that the string should be centered in the <see cref="P:Macro.ImageViewer.Annotations.AnnotationBox.NormalizedRectangle"/>.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Annotations.AnnotationBox.VerticalAlignmentBehaviour.Bottom">
            <summary>
            Specifies that the string should be aligned along the bottom of the <see cref="P:Macro.ImageViewer.Annotations.AnnotationBox.NormalizedRectangle"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Mathematics.FloatComparer">
            <summary>
            A utility class to facilitate error-tolerant comparison of floating point values.
            </summary>
            <remarks>
            <para>
            Floating point variables store decimal numbers as a significand (the significant
            figures part of the number) and an exponent. As a result, floating point arithmetic
            has the potential to introduce errors in computation due to the inability to
            represent certain values as a floating point variable.
            </para>
            <para>
            In order to compare floating point values in a robust manner, it is necessary to
            compare such values while allowing for a limited amount of error. The actual amount
            of acceptible tolernace that should be used will depend on the context of the computation.
            </para>
            <para>
            Throughout this class, tolerance may be expressed in terms of the number of ULPs
            ("Unit in Last Place"), a unit based on the minimum representable value of the significand.
            Alternatively, tolerance may also be expressed as an &quot;absolute&quot; value,
            in which case the equality comparision is carried out &#177; absolute tolerance.
            </para>
            <para>
            The comparison algorithms used in this class are based on the code presented
            at http://www.windojitsu.com/code/floatcomparer.html.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.FloatComparer.Compare(System.Single,System.Single,System.Int32)">
            <summary>
            Compares two floating point values within a specified tolerance in ULPs.
            </summary>
            <param name="x">One floating point value to be compared.</param>
            <param name="y">Other floating point value to be compared.</param>
            <param name="tolerance">The tolerance for equality in terms of ULPs.</param>
            <returns>0 if <paramref name="x"/> equals <paramref name="y"/> ± <paramref name="tolerance"/> ULPs; +1 if x &gt; y + tolerance ULPs; -1 if x &lt; y - tolerance ULPs.</returns>
            <remarks>
            <list>
            <item> 0 if x = y ± tolerance ULPs</item>
            <item>+1 if x &gt; y + tolerance ULPs</item>
            <item>-1 if x &lt; y - tolerance ULPs</item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="tolerance"/> is negative or in excess of 2<sup>22</sup> (the limit of the significand in a single-precision floating point value).</exception>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.FloatComparer.Compare(System.Single,System.Single,System.Int32,System.Int32@)">
            <summary>
            Compares two floating point values within a specified tolerance in ULPs.
            </summary>
            <param name="x">One floating point value to be compared.</param>
            <param name="y">Other floating point value to be compared.</param>
            <param name="tolerance">The tolerance for equality in terms of ULPs.</param>
            <param name="difference">The difference between the values in terms of ULPs.</param>
            <returns>0 if <paramref name="x"/> = <paramref name="y"/> ± <paramref name="tolerance"/> ULPs; +1 if x &gt; y + tolerance ULPs; -1 if x &lt; y - tolerance ULPs.</returns>
            <remarks>
            <list>
            <item> 0 if x = y ± tolerance ULPs</item>
            <item>+1 if x &gt; y + tolerance ULPs</item>
            <item>-1 if x &lt; y - tolerance ULPs</item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="tolerance"/> is negative or in excess of 2<sup>22</sup> (the limit of the significand in a single-precision floating point value).</exception>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.FloatComparer.AreEqual(System.Single,System.Single,System.Single)">
            <summary>
            Compares two floating point values for equality within a specified absolute tolerance.
            </summary>
            <param name="x">One floating point value to be compared.</param>
            <param name="y">Other floating point value to be compared.</param>
            <param name="tolerance">The absolute tolerance.</param>
            <returns>True if <paramref name="x"/> = <paramref name="y"/> &#177; <paramref name="tolerance"/>; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.FloatComparer.AreEqual(System.Single,System.Single)">
            <summary>
            Compares two floating point values for equality within 100 ULPs.
            </summary>
            <param name="x">One floating point value to be compared.</param>
            <param name="y">Other floating point value to be compared.</param>
            <returns>True if <paramref name="x"/> = <paramref name="y"/> &#177; 100 ULPs; False otherwise.</returns>
            <remarks>A tolerance of 100 ULPs is assumed.</remarks>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.FloatComparer.IsGreaterThan(System.Single,System.Single)">
            <summary>
            Compares two floating point values to see if <paramref name="x"/> is greater than <paramref name="y"/> within 100 ULPs.
            </summary>
            <param name="x">One floating point value to be compared.</param>
            <param name="y">Other floating point value to be compared.</param>
            <returns>True if <paramref name="x"/> &gt; <paramref name="y"/> + 100 ULPs; False otherwise.</returns>
            <remarks>A tolerance of 100 ULPs is assumed.</remarks>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.FloatComparer.IsLessThan(System.Single,System.Single)">
            <summary>
            Compares two floating point values to see if <paramref name="x"/> is less than <paramref name="y"/> within 100 ULPs.
            </summary>
            <param name="x">One floating point value to be compared.</param>
            <param name="y">Other floating point value to be compared.</param>
            <returns>True if <paramref name="x"/> &lt; <paramref name="y"/> - 100 ULPs; False otherwise.</returns>
            <remarks>A tolerance of 100 ULPs is assumed.</remarks>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.FloatComparer.Compare(System.Double,System.Double,System.Int64)">
            <summary>
            Compares two floating point values within a specified tolerance in ULPs.
            </summary>
            <param name="x">One floating point value to be compared.</param>
            <param name="y">Other floating point value to be compared.</param>
            <param name="tolerance">The tolerance for equality in terms of ULPs.</param>
            <returns>0 if <paramref name="x"/> equals <paramref name="y"/> ± <paramref name="tolerance"/> ULPs; +1 if x &gt; y + tolerance ULPs; -1 if x &lt; y - tolerance ULPs.</returns>
            <remarks>
            <list>
            <item> 0 if x = y ± tolerance ULPs</item>
            <item>+1 if x &gt; y + tolerance ULPs</item>
            <item>-1 if x &lt; y - tolerance ULPs</item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="tolerance"/> is negative or in excess of 2<sup>51</sup> (the limit of the significand in a double-precision floating point value).</exception>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.FloatComparer.Compare(System.Double,System.Double,System.Int64,System.Int64@)">
            <summary>
            Compares two floating point values within a specified tolerance in ULPs.
            </summary>
            <param name="x">One floating point value to be compared.</param>
            <param name="y">Other floating point value to be compared.</param>
            <param name="tolerance">The tolerance for equality in terms of ULPs.</param>
            <param name="difference">The difference between the values in terms of ULPs.</param>
            <returns>0 if <paramref name="x"/> = <paramref name="y"/> ± <paramref name="tolerance"/> ULPs; +1 if x &gt; y + tolerance ULPs; -1 if x &lt; y - tolerance ULPs.</returns>
            <remarks>
            <list>
            <item> 0 if x = y ± tolerance ULPs</item>
            <item>+1 if x &gt; y + tolerance ULPs</item>
            <item>-1 if x &lt; y - tolerance ULPs</item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="tolerance"/> is negative or in excess of 2<sup>51</sup> (the limit of the significand in a double-precision floating point value).</exception>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.FloatComparer.AreEqual(System.Double,System.Double,System.Double)">
            <summary>
            Compares two floating point values for equality within a specified absolute tolerance.
            </summary>
            <param name="x">One floating point value to be compared.</param>
            <param name="y">Other floating point value to be compared.</param>
            <param name="tolerance">The absolute tolerance.</param>
            <returns>True if <paramref name="x"/> = <paramref name="y"/> &#177; <paramref name="tolerance"/>; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.FloatComparer.AreEqual(System.Double,System.Double)">
            <summary>
            Compares two floating point values for equality within 100 ULPs.
            </summary>
            <param name="x">One floating point value to be compared.</param>
            <param name="y">Other floating point value to be compared.</param>
            <returns>True if <paramref name="x"/> = <paramref name="y"/> &#177; 100 ULPs; False otherwise.</returns>
            <remarks>A tolerance of 100 ULPs is assumed.</remarks>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.FloatComparer.IsGreaterThan(System.Double,System.Double)">
            <summary>
            Compares two floating point values to see if <paramref name="x"/> is greater than <paramref name="y"/> within 100 ULPs.
            </summary>
            <param name="x">One floating point value to be compared.</param>
            <param name="y">Other floating point value to be compared.</param>
            <returns>True if <paramref name="x"/> &gt; <paramref name="y"/> + 100 ULPs; False otherwise.</returns>
            <remarks>A tolerance of 100 ULPs is assumed.</remarks>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.FloatComparer.IsLessThan(System.Double,System.Double)">
            <summary>
            Compares two floating point values to see if <paramref name="x"/> is less than <paramref name="y"/> within 100 ULPs.
            </summary>
            <param name="x">One floating point value to be compared.</param>
            <param name="y">Other floating point value to be compared.</param>
            <returns>True if <paramref name="x"/> &lt; <paramref name="y"/> - 100 ULPs; False otherwise.</returns>
            <remarks>A tolerance of 100 ULPs is assumed.</remarks>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.FloatComparer.AreEqual(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Compares two <see cref="T:System.Drawing.PointF"/> values for equality within 100 ULPs in each dimension.
            </summary>
            <param name="pt1">One <see cref="T:System.Drawing.PointF"/> value to be compared.</param>
            <param name="pt2">Other <see cref="T:System.Drawing.PointF"/> value to be compared.</param>
            <returns>True if <paramref name="pt1"/> = <paramref name="pt2"/> ± 100 ULPs for both <see cref="P:System.Drawing.PointF.X"/> and <see cref="P:System.Drawing.PointF.Y"/> dimensions separately; False otherwise.</returns>
            <remarks>A tolerance of 100 ULPs is assumed.</remarks>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.FloatComparer.AreEqual(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Compares two <see cref="T:System.Drawing.SizeF"/> values for equality within 100 ULPs in each dimension.
            </summary>
            <param name="size1">One <see cref="T:System.Drawing.SizeF"/> value to be compared.</param>
            <param name="size2">Other <see cref="T:System.Drawing.SizeF"/> value to be compared.</param>
            <returns>True if <paramref name="size1"/> = <paramref name="size2"/> ± 100 ULPs for both <see cref="P:System.Drawing.SizeF.Width"/> and <see cref="P:System.Drawing.SizeF.Height"/> dimensions separately; False otherwise.</returns>
            <remarks>A tolerance of 100 ULPs is assumed.</remarks>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.GdiRenderingSurface.Dispose(System.Boolean)">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern
            </summary>
            <param name="disposing">True if this object is being disposed, false if it is being finalized</param>
        </member>
        <member name="P:Macro.ImageViewer.Rendering.GdiRenderingSurface.ClientRectangle">
            <summary>
            Gets or sets the rectangle of the surface.
            </summary>
            <remarks>
            This is the rectangle of the view onto the <see cref="T:Macro.ImageViewer.ITile"/>.
            The top-left corner is always (0,0).  This rectangle changes as the
            view (i.e., the hosting window) changes size.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Rendering.GdiRenderingSurface.ClipRectangle">
            <summary>
            Gets or sets the rectangle that requires repainting.
            </summary>
            <remarks>
            The implementer of <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/> should use this rectangle
            to intelligently perform the <see cref="F:Macro.ImageViewer.Rendering.DrawMode.Refresh"/> operation.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Comparers.InstanceAndFrameNumberComparer">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>s based on instance number and frame number.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Comparers.DicomFrameComparer">
            <summary>
            Base class for comparing <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>s.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Comparers.PresentationImageComparer">
            <summary>
            Base class for comparing <see cref="T:Macro.ImageViewer.IPresentationImage"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.PresentationImageComparer.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.PresentationImageComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.PresentationImageComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.PresentationImageComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.PresentationImageComparer.Compare(Macro.ImageViewer.IPresentationImage,Macro.ImageViewer.IPresentationImage)">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.IPresentationImage"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DicomFrameComparer.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.DicomFrameComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DicomFrameComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.DicomFrameComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DicomFrameComparer.Compare(Macro.ImageViewer.IPresentationImage,Macro.ImageViewer.IPresentationImage)">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.IPresentationImage"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DicomFrameComparer.Compare(Macro.ImageViewer.StudyManagement.Frame,Macro.ImageViewer.StudyManagement.Frame)">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.InstanceAndFrameNumberComparer.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.InstanceAndFrameNumberComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.InstanceAndFrameNumberComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.InstanceAndFrameNumberComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.InstanceAndFrameNumberComparer.Compare(Macro.ImageViewer.StudyManagement.Frame,Macro.ImageViewer.StudyManagement.Frame)">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>s based on instance number and frame number.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyLoadFailedEventArgs">
            <summary>
            Event args for <see cref="E:Macro.ImageViewer.EventBroker.StudyLoadFailed"/>.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyLoadFailedEventArgs.LoadArgs">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.LoadStudyArgs"/> that were used to attempt to load the study.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyLoadFailedEventArgs.Study">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.StudyManagement.StudyItem"/> that failed to load.
            </summary>
            <remarks>
            This object is generated via a query mechanism, such as <see cref="T:Macro.ImageViewer.StudyManagement.IStudyFinder"/>
            or <see cref="T:Macro.ImageViewer.IPriorStudyFinder"/>.
            </remarks>
        </member>
        <member name="F:Macro.ImageViewer.StudyLoadFailedEventArgs.Error">
            <summary>
            Gets the <see cref="T:System.Exception"/> that occurred.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyLoadedEventArgs">
            <summary>
            Event args for <see cref="E:Macro.ImageViewer.EventBroker.StudyLoaded"/>.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyLoadedEventArgs.Study">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.StudyManagement.Study"/> that was loaded.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyLoadedEventArgs.Error">
            <summary>
            If <see cref="F:Macro.ImageViewer.StudyLoadedEventArgs.Study"/> was only partially loaded, this
            will contain the <see cref="T:System.Exception"/> that describes the
            partial load failure.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PriorStudyFinderExtensionPoint">
            <summary>
            Defines an extension point for image layout management.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PriorStudyFinder">
            <summary>
            Abstract base class for an <see cref="T:Macro.ImageViewer.IPriorStudyFinder"/>.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.PriorStudyFinder.Null">
            <summary>
            Convenient static property for an <see cref="T:Macro.ImageViewer.IPriorStudyFinder"/> that does nothing.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PriorStudyFinder.#ctor">
            <summary>
            Protected constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PriorStudyFinder.SetImageViewer(Macro.ImageViewer.IImageViewer)">
            <summary>
            Sets the <see cref="T:Macro.ImageViewer.IImageViewer"/> for which prior studies are to found (and added/loaded).
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PriorStudyFinder.FindPriorStudies">
            <summary>
            Gets the list of prior studies.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PriorStudyFinder.Cancel">
            <summary>
            Cancels the search for prior studies.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PriorStudyFinder.Viewer">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.AdjustableDataLut">
            <summary>
            A class that wraps a <see cref="P:Macro.ImageViewer.Imaging.AdjustableDataLut.DataLut"/> inside an <see cref="T:Macro.ImageViewer.Imaging.IBasicVoiLutLinear"/>, in
            order to allow 'window/levelling' of the <see cref="P:Macro.ImageViewer.Imaging.AdjustableDataLut.DataLut"/>.  
            </summary>
            <remarks>
            Internally, this will be treated like any other linear lut, except that
            <see cref="M:Macro.ImageViewer.Imaging.AdjustableDataLut.GetDescription"/> expresses the Window Width/Center as a percentage of 
            the full window, since the true values won't necessarily have any real meaning.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.AdjustableDataLut.#ctor(Macro.ImageViewer.Imaging.DataLut)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.AdjustableDataLut.#ctor(Macro.ImageViewer.Imaging.AdjustableDataLut,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.AdjustableDataLut.Reset">
            <summary>
            Resets the 
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.AdjustableDataLut.GetKey">
            <summary>
            Gets a string key that identifies this particular Lut's characteristics, so that 
            an image's <see cref="T:Macro.ImageViewer.Imaging.IComposedLut"/> can be more efficiently determined.
            </summary>
            <remarks>
            This method is not to be confused with <b>equality</b>, since some Luts can be
            dependent upon the actual image to which it belongs.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.AdjustableDataLut.GetDescription">
            <summary>
            Gets an abbreviated description of the Lut.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.AdjustableDataLut.CreateMemento">
            <summary>
            Returns null.
            </summary>
            <remarks>
            Override this member only when necessary.  If this method is overridden, <see cref="M:Macro.ImageViewer.Imaging.ComposableLutBase.SetMemento(System.Object)"/> must also be overridden.
             </remarks>
            <returns>null, unless overridden.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.AdjustableDataLut.SetMemento(System.Object)">
            <summary>
            Does nothing unless overridden.
            </summary>
            <remarks>
            If you override <see cref="M:Macro.ImageViewer.Imaging.ComposableLutBase.CreateMemento"/> to capture the Lut's state, you must also override this method
            to allow the state to be restored.
            </remarks>
            <param name="memento">The memento object from which to restore the Lut's state.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="memento"/> is <B>not</B> null, 
            which would indicate that <see cref="M:Macro.ImageViewer.Imaging.ComposableLutBase.CreateMemento"/> has been overridden, but <see cref="M:Macro.ImageViewer.Imaging.ComposableLutBase.SetMemento(System.Object)"/> has not.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.AdjustableDataLut.OnLutChanged">
            <summary>
            Fires the <see cref="E:Macro.ImageViewer.Imaging.ComposableLutBase.LutChanged"/> event.
            </summary>
            <remarks>
            Inheritors should call this method when any property of the Lut has changed.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.AdjustableDataLut.Macro#ImageViewer#Imaging#IBasicVoiLutLinear#WindowWidth">
            <summary>
            Gets or sets the Window Width.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.AdjustableDataLut.Macro#ImageViewer#Imaging#IBasicVoiLutLinear#WindowCenter">
            <summary>
            Gets or sets the Window Center.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.AdjustableDataLut.Macro#ImageViewer#Imaging#IVoiLutLinear#WindowWidth">
            <summary>
            Gets or sets the Window Width.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.AdjustableDataLut.Macro#ImageViewer#Imaging#IVoiLutLinear#WindowCenter">
            <summary>
            Gets or sets the Window Center.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.AdjustableDataLut.DataLut">
            <summary>
            Gets the underlying data lut.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.AdjustableDataLut.MinInputValue">
            <summary>
            Gets or sets the minimum input value.
            </summary>
            <remarks>
            This value should not be modified by your code.  It will be set internally by the framework.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.AdjustableDataLut.MaxInputValue">
            <summary>
            Gets the maximum input value.
            </summary>
            <remarks>
            This value should not be modified by your code.  It will be set internally by the framework.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.AdjustableDataLut.MinOutputValue">
            <summary>
            Gets the minimum output value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.AdjustableDataLut.MaxOutputValue">
            <summary>
            Gets the maximum output value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.AdjustableDataLut.BrightnessPercent">
            <summary>
            The brightness as a percentage.
            </summary>
            <remarks>
            This property is currently only settable by casting to <see cref="T:Macro.ImageViewer.Imaging.IBasicVoiLutLinear"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.AdjustableDataLut.ContrastPercent">
            <summary>
            The contrast as a percentage.
            </summary>
            <remarks>
            This property is currently only settable by casting to <see cref="T:Macro.ImageViewer.Imaging.IBasicVoiLutLinear"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.AdjustableDataLut.Item(System.Double)">
            <summary>
            Gets the output value of the lut at a given input.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.RoiGraphic">
            <summary>
            An <see cref="T:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic"/> specifically for scenarios where the
            subject of interest is an actual region of interest on an image.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiGraphic.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs a new instance of <see cref="T:Macro.ImageViewer.RoiGraphics.RoiGraphic"/>.
            </summary>
            <param name="roi">The graphic or control chain graphic representing the region of interest.</param>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiGraphic.#ctor(Macro.ImageViewer.Graphics.IGraphic,Macro.ImageViewer.InteractiveGraphics.IAnnotationCalloutLocationStrategy)">
            <summary>
            Constructs a new instance of <see cref="T:Macro.ImageViewer.RoiGraphics.RoiGraphic"/>.
            </summary>
            <param name="roi">The graphic or control chain graphic representing the region of interest.</param>
            <param name="calloutLocationStrategy">An <see cref="T:Macro.ImageViewer.InteractiveGraphics.IAnnotationCalloutLocationStrategy"/> to automatically place the callout.</param>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiGraphic.#ctor(Macro.ImageViewer.RoiGraphics.RoiGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiGraphic.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiGraphic.CreateCalloutGraphic">
            <summary>
            Called by <see cref="T:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic"/> to create the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ICalloutGraphic"/> to be used by this annotation.
            </summary>
            <remarks>
            <para>This implementation creates a <see cref="T:Macro.ImageViewer.RoiGraphics.RoiCalloutGraphic"/> which displays values analyzed from the region of interest by a set of <see cref="T:Macro.ImageViewer.RoiGraphics.Analyzers.IRoiAnalyzer"/>s.</para>
            </remarks>
            <returns>The <see cref="T:Macro.ImageViewer.InteractiveGraphics.ICalloutGraphic"/> to be used.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiGraphic.GetRoi">
            <summary>
            Gets an object describing the region of interest on the <see cref="P:Macro.ImageViewer.Graphics.Graphic.ParentPresentationImage"/> selected by the <see cref="P:Macro.ImageViewer.Graphics.DecoratorCompositeGraphic.DecoratedGraphic"/>.
            </summary>
            <remarks>
            Decorated graphics that do not describe a region of interest may return null.
            </remarks>
            <returns>A <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/> describing this region of interest, or null if the decorated graphic does not describe a region of interest.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiGraphic.OnNameChanged">
            <summary>
            Called when the value of the <see cref="P:Macro.ImageViewer.Graphics.Graphic.Name"/> property changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiGraphic.Refresh">
            <summary>
            Refreshes the annotation graphic by recomputing the callout position and redrawing the graphic.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiGraphic.OnParentPresentationImageChanged(Macro.ImageViewer.IPresentationImage,Macro.ImageViewer.IPresentationImage)">
            <summary>
            Called when the value of the <see cref="P:Macro.ImageViewer.Graphics.Graphic.ParentPresentationImage"/> property changes.
            </summary>
            <param name="oldParentPresentationImage">A reference to the old parent presentation image.</param>
            <param name="newParentPresentationImage">A reference to the new parent presentation image.</param>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiGraphic.OnImageCalibrated">
            <summary>
            Called when the underlying image's pixel spacing is recalibrated.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiGraphic.OnSubjectChanged">
            <summary>
            Called when properties on the <see cref="P:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Subject"/> have changed.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiGraphic.OnStateChanged(Macro.ImageViewer.InteractiveGraphics.GraphicStateChangedEventArgs)">
            <summary>
            Called when the value of <see cref="P:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.State"/> changes.
            </summary>
            <param name="e">An object containing data describing the specific state change.</param>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiGraphic.OnRoiChanged">
            <summary>
            Called when the region of interest changes, thereby changing the data and invalidating any existing, computed statistics.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiGraphic.CreateEllipse">
            <summary>
            Convenience method to create a common elliptical, interactive region of interest.
            </summary>
            <returns>A new interactive region of interest graphic.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiGraphic.CreateRectangle">
            <summary>
            Convenience method to create a common rectangular, interactive region of interest.
            </summary>
            <returns>A new interactive region of interest graphic.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiGraphic.CreatePolygon">
            <summary>
            Convenience method to create a common polygonal, interactive region of interest.
            </summary>
            <returns>A new interactive region of interest graphic.</returns>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.RoiGraphic.Callout">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.RoiGraphics.RoiCalloutGraphic"/> associated with the region of interest.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.RoiGraphic.Roi">
            <summary>
            Gets an object representing the data of the current region of interest.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.RoiGraphics.RoiGraphic.RoiChanged">
            <summary>
            Occurs when the region of interest changes, thereby changing the data and invalidating any existing, computed statistics.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.RoiGraphics.RoiGraphic.NameChanged">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.Graphics.IGraphic.Name"/> of the graphic changes.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.Dicom.UserOverlayPlaneGraphic">
            <summary>
            A dynamically created 1-bit bitmap overlay plane <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.UserOverlayPlaneGraphic.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs an empty <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.UserOverlayPlaneGraphic"/> with the specified image dimensions.
            </summary>
            <param name="rows">The number of rows to allocate to the overlay.</param>
            <param name="columns">The number of columns to allocate to the overlay.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.UserOverlayPlaneGraphic.#ctor(Macro.ImageViewer.PresentationStates.Dicom.UserOverlayPlaneGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.UserOverlayPlaneGraphic.Label">
            <summary>
            Gets or sets a user-defined text string which may be used to label or name the overlay.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.UserOverlayPlaneGraphic.Description">
            <summary>
            Gets or sets user-defined comments about the overlay.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.UserOverlayPlaneGraphic.Type">
            <summary>
            Gets or sets a value indicating the type of content represented by the overlay plane.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.UserOverlayPlaneGraphic.Subtype">
            <summary>
            Gets or sets a value identifying the intended purpose of the overlay.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.UserOverlayPlaneGraphic.Origin">
            <summary>
            Gets or sets the location of the top left corner of the overlay relative to the image.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.UserOverlayPlaneGraphic.Item(System.Drawing.Point)">
            <summary>
            Gets or sets the presence of the overlay pixel at the specified coordinate.
            </summary>
            <param name="point">The coordinate of the pixel.</param>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.UserOverlayPlaneGraphic.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the presence of the overlay pixel at the specified coordinate.
            </summary>
            <param name="x">The x-coordinate of the pixel.</param>
            <param name="y">The y-coordinate of the pixel.</param>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder">
            <summary>
            Base class for builder objects to which mouse input can be forwarded in order to build graphics in a standardized manner.
            </summary>
            <remarks>
            In order to standardize the way in which common-shaped graphics are created based on user input, it is recommended that
            tools collecting a successive series of user mouse inputs to create a graphic (such as <see cref="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool"/>s)
            instantiate an <see cref="T:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder"/> and forward to it the mouse information.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder"/> to operate on the specified graphic.
            </summary>
            <param name="graphic">The graphic on which the builder will operate.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.NotifyGraphicComplete">
            <summary>
            Notifies listeners that the builder is done building the <see cref="P:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.Graphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.NotifyGraphicCancelled">
            <summary>
            Notifies listeners that the builder is cancelling building the <see cref="P:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.Graphic"/> due to user cancellation.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.OnGraphicComplete">
            <summary>
            Called when the builder is done building the <see cref="P:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.Graphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.OnGraphicCancelled">
            <summary>
            Called when the builder is cancelling building the <see cref="P:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.Graphic"/> due to user cancellation.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.Start(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Passes user input to the builder when <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Start(Macro.ImageViewer.InputManagement.IMouseInformation)"/> is called on the owning tool.
            </summary>
            <param name="mouseInformation">The user input data.</param>
            <returns>True if the builder did something as a result of the call, and hence would like to receive capture; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.Track(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Passes user input to the builder when <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Track(Macro.ImageViewer.InputManagement.IMouseInformation)"/> is called on the owning tool.
            </summary>
            <param name="mouseInformation">The user input data.</param>
            <returns>True if the builder handled the message; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Passes user input to the builder when <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)"/> is called on the owning tool.
            </summary>
            <param name="mouseInformation">The user input data.</param>
            <returns>True if the tool should not release capture; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.Cancel">
            <summary>
            Cancels the building of the graphic.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.Reset">
            <summary>
            Resets any internal state of the builder, allowing the same graphic to be rebuilt.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.Rollback">
            <summary>
            Rolls back the internal state of the builder by one mouse click, allowing the same graphic to be rebuilt by resuming from an earlier state.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.GetCursorToken(System.Drawing.Point)">
            <summary>
            Gets the builder-recommended cursor that the owning tool should use.
            </summary>
            <param name="point">The cursor location, in destination coordinates.</param>
            <returns>The recommended cursor.</returns>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.Graphic">
            <summary>
            Gets the graphic that the builder is operating on.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.GraphicComplete">
            <summary>
            Occurs when the builder is done building the <see cref="P:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.Graphic"/>.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.GraphicCancelled">
            <summary>
            Occurs when the builder is cancelling building the <see cref="P:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.Graphic"/> due to user cancellation.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.Behaviour">
            <summary>
            Gets the builder-recommended behaviour that the owning tool should use.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.InteractivePolygonGraphicBuilder">
            <summary>
            Interactive builder class that interprets mouse clicks as ordered
            vertices to setup a closed <see cref="T:Macro.ImageViewer.Graphics.IPointsGraphic"/>.
            </summary>
            <remarks>
            This builder takes input until the the maximum number of
            vertices is reached, the user clicks near the first point
            or the user double clicks anywhere, after which the graphic is complete
            and control is released. A visual cue is shown when the cursor is close
            enough to the first point to snap and close the polygon.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractivePolygonGraphicBuilder.#ctor(Macro.ImageViewer.Graphics.IPointsGraphic)">
            <summary>
            Constructs an interactive builder for the specified graphic.
            </summary>
            <param name="pointsGraphic">The graphic to be interactively built.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractivePolygonGraphicBuilder.#ctor(System.Int32,Macro.ImageViewer.Graphics.IPointsGraphic)">
            <summary>
            Constructs an interactive builder for the specified graphic.
            </summary>
            <param name="maximumVertices">The maximum number of vertices to accept.</param>
            <param name="pointsGraphic">The graphic to be interactively built.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="maximumVertices"/> is less than 3.</exception>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractivePolygonGraphicBuilder.Reset">
            <summary>
            Resets any internal state of the builder, allowing the same graphic to be rebuilt.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractivePolygonGraphicBuilder.Rollback">
            <summary>
            Rolls back the internal state of the builder by one mouse click, allowing the same graphic to be rebuilt by resuming from an earlier state.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractivePolygonGraphicBuilder.OnGraphicCancelled">
            <summary>
            Called when the builder is cancelling building the <see cref="P:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.Graphic"/> due to user cancellation.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractivePolygonGraphicBuilder.OnGraphicComplete">
            <summary>
            Called when the builder is done building the <see cref="P:Macro.ImageViewer.InteractiveGraphics.InteractiveGraphicBuilder.Graphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractivePolygonGraphicBuilder.Start(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Passes user input to the builder when <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Start(Macro.ImageViewer.InputManagement.IMouseInformation)"/> is called on the owning tool.
            </summary>
            <param name="mouseInformation">The user input data.</param>
            <returns>True if the builder did something as a result of the call, and hence would like to receive capture; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractivePolygonGraphicBuilder.Track(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Passes user input to the builder when <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Track(Macro.ImageViewer.InputManagement.IMouseInformation)"/> is called on the owning tool.
            </summary>
            <param name="mouseInformation">The user input data.</param>
            <returns>True if the builder handled the message; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractivePolygonGraphicBuilder.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Passes user input to the builder when <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)"/> is called on the owning tool.
            </summary>
            <param name="mouseInformation">The user input data.</param>
            <returns>True if the tool should not release capture; False otherwise.</returns>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.InteractivePolygonGraphicBuilder.Graphic">
            <summary>
            Gets the graphic that the builder is operating on.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.InteractivePolygonGraphicBuilder.SnapRadius">
            <summary>
            Gets or the sets the radius of the snap-to feature in destination pixels.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.InteractivePolygonGraphicBuilder.SnapPointGraphic">
            <summary>
            A graphic for indicating that the cursor is close enough to an existing point to snap to it.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractivePolygonGraphicBuilder.SnapPointGraphic.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit test on the snap graphic at given point.
            </summary>
            <param name="point">The mouse position in destination coordinates.</param>
            <returns>
            <b>True</b> if <paramref name="point"/> is inside the snap graphic's radius, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.InteractivePolygonGraphicBuilder.SnapPointGraphic.Location">
            <summary>
            Gets the coordinates of the point.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.InteractivePolygonGraphicBuilder.SnapPointGraphic.Radius">
            <summary>
            Gets or sets the radius of the snap graphic.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.InteractivePolygonGraphicBuilder.SnapPointGraphic.Color">
            <summary>
            Gets or sets the colour of the snap graphic.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.BaseTools.DefaultMouseToolButtonAttribute">
            <summary>
            An attribute used by <see cref="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool"/> to specify it's default <see cref="T:Macro.ImageViewer.InputManagement.MouseButtonShortcut"/>.
            </summary>
            <seealso cref="T:Macro.ImageViewer.InputManagement.MouseButtonShortcut"/>
            <seealso cref="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool"/>
            <seealso cref="T:Macro.ImageViewer.InputManagement.IViewerShortcutManager"/>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.DefaultMouseToolButtonAttribute.#ctor(Macro.Desktop.XMouseButtons)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.DefaultMouseToolButtonAttribute.#ctor(Macro.Desktop.XMouseButtons,Macro.Desktop.ModifierFlags)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.DefaultMouseToolButtonAttribute.Shortcut">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.InputManagement.MouseButtonShortcut"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.Patient">
            <summary>
            A DICOM patient.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Patient.ToString">
            <summary>
            Returns the patient's name and patient ID in string form.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Patient.Studies">
            <summary>
            Gets the collection of <see cref="T:Macro.ImageViewer.StudyManagement.Study"/> objects that belong
            to this <see cref="T:Macro.ImageViewer.StudyManagement.Patient"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Patient.PatientId">
            <summary>
            Gets the patient ID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Patient.PatientsName">
            <summary>
            Gets the patient's name.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Patient.PatientsBirthDate">
            <summary>
            Gets the patient's birthdate.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Patient.PatientsBirthTime">
            <summary>
            Gets the patient's birthdate.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Patient.PatientsSex">
            <summary>
            Gets the patient's sex.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Patient.PatientSpeciesDescription">
            <summary>
            Gets the patient species description.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Patient.PatientSpeciesCodeSequenceCodingSchemeDesignator">
            <summary>
            Gets the coding scheme designator of the patient species code sequence.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Patient.PatientSpeciesCodeSequenceCodeValue">
            <summary>
            Gets the code value of the patient species code sequence.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Patient.PatientSpeciesCodeSequenceCodeMeaning">
            <summary>
            Gets the code meaning of the patient species code sequence.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Patient.PatientBreedDescription">
            <summary>
            Gets the patient breed description.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Patient.PatientBreedCodeSequenceCodingSchemeDesignator">
            <summary>
            Gets the coding scheme designator of the patient breed code sequence.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Patient.PatientBreedCodeSequenceCodeValue">
            <summary>
            Gets the code value of the patient breed code sequence.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Patient.PatientBreedCodeSequenceCodeMeaning">
            <summary>
            Gets the code meaning of the patient breed code sequence.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Patient.ResponsiblePerson">
            <summary>
            Gets the responsible person for the patient.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Patient.ResponsiblePersonRole">
            <summary>
            Gets the role of the responsible person for the patient.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Patient.ResponsibleOrganization">
            <summary>
            Gets the organization responsible for the patient.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.SeriesCollection">
            <summary>
            A collection of <see cref="T:Macro.ImageViewer.StudyManagement.Series"/> objects.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.SeriesCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.SeriesCollection"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.ColorSpaceConverter">
            <summary>
            Converts between colour spaces.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorSpaceConverter.YbrFullToRgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a YBR_FULL value to RGB.
            </summary>
            <returns>A 32-bit ARGB value.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorSpaceConverter.YbrFull422ToRgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a YBR_FULL422 value to RGB.
            </summary>
            <returns>A 32-bit ARGB value.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorSpaceConverter.YbrPartial422ToRgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a YBR_PARTIAL422 value to RGB.
            </summary>
            <returns>A 32-bit ARGB value.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorSpaceConverter.YbrIctToRgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a YBR_ICT value to RGB.
            </summary>
            <returns>A 32-bit ARGB value.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorSpaceConverter.YbrRctToRgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a YBR_RCT value to RGB.
            </summary>
            <returns>A 32-bit ARGB value.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorSpaceConverter.ToArgb(Macro.Dicom.Iod.PhotometricInterpretation,System.Int32,System.Byte[],System.Byte[])">
            <summary>
            Converts pixel data of a particular photometric interpretation
            to ARGB.
            </summary>
            <param name="photometricInterpretation">The <see cref="T:Macro.Dicom.Iod.PhotometricInterpretation"/> of <paramref name="srcPixelData"/>.</param>
            <param name="planarConfiguration">The planar configuration of <paramref name="srcPixelData"/>.</param>
            <param name="srcPixelData">The input pixel data to be converted.</param>
            <param name="argbPixelData">The converted output pixel data in ARGB format.</param>
            <remarks>
            Only RGB and YBR variants can be converted.  For PALETTE COLOR, use <see cref="!:ToArgb(int,bool,byte[],byte[],IDataLut)"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorSpaceConverter.ToArgb(System.Int32,System.Boolean,System.Byte[],System.Byte[],Macro.ImageViewer.Imaging.IColorMap)">
            <summary>
            Converts indexed pixel data to ARGB using the specified colour map.
            </summary>
            <param name="bitsAllocated">Number of bits allocated in <paramref name="srcPixelData"/>.</param>
            <param name="isSigned">Indicates whether <paramref name="srcPixelData"/> is signed.</param>
            <param name="srcPixelData">The input pixel data to be converted.</param>
            <param name="argbPixelData">The converted output pixel data in ARGB format.</param>
            <param name="map">The colour map to be used.</param>
            <remarks>
            Internally, this method is used to convert PALETTE COLOR images to ARGB.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.EventBroker">
            <summary>
            A central place from where image viewer events are raised.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.EventBroker.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.EventBroker"/>.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.EventBroker.ImageDrawing">
            <summary>
            Occurs when a <see cref="T:Macro.ImageViewer.PresentationImage"/> is about to be drawn.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.EventBroker.ImageBoxDrawing">
            <summary>
            Occurs when a <see cref="T:Macro.ImageViewer.IImageBox"/> is about to be drawn.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.EventBroker.ImageBoxSelected">
            <summary>
            Occurs when an <see cref="T:Macro.ImageViewer.IImageBox"/> is selected.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.EventBroker.DisplaySetSelected">
            <summary>
            Occurs when an <see cref="T:Macro.ImageViewer.IDisplaySet"/> is selected.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.EventBroker.TileSelected">
            <summary>
            Occurs when an <see cref="T:Macro.ImageViewer.ITile"/> is selected.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.EventBroker.PresentationImageSelected">
            <summary>
            Occurs when an <see cref="T:Macro.ImageViewer.IPresentationImage"/> is selected.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.EventBroker.GraphicSelectionChanged">
            <summary>
            Occurs when the selected <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> in the currently selected
            <see cref="T:Macro.ImageViewer.PresentationImage"/>'s scene graph has changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.EventBroker.GraphicFocusChanged">
            <summary>
            Occurs when the focused <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> in the currently selected
            <see cref="T:Macro.ImageViewer.PresentationImage"/>'s scene graph has changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.EventBroker.StudyLoaded">
            <summary>
            Occurs when a DICOM study is loaded.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.EventBroker.StudyLoadFailed">
            <summary>
            Occurs when a DICOM study has failed to load.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.EventBroker.ImageLoaded">
            <summary>
            Occurs when a DICOM image is loaded.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.EventBroker.MouseCaptureChanged">
            <summary>
            Occurs when an object has gained or lost mouse capture.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.EventBroker.MouseWheelCaptureChanged">
            <summary>
            Occurs when an object has gained or lost mouse wheel capture.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.EventBroker.DisplaySetChanging">
            <summary>
            Occurs when a display set is about to change.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.EventBroker.DisplaySetChanged">
            <summary>
            Occurs when a display set has changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.EventBroker.CloneCreated">
            <summary>
            Fires when objects are cloned; only certain objects
            publish the fact that they have been cloned.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.MouseWheelMessage">
            <summary>
            A message object created by the view layer to allow a controlling object 
            (e.g. <see cref="T:Macro.ImageViewer.InputManagement.TileController"/>) to handle mouse wheel messages.
            </summary>
            <remarks>
            This class is intended for internal framework use only.
            </remarks>
            <seealso cref="T:Macro.ImageViewer.InputManagement.MouseWheelShortcut"/>
            <seealso cref="T:Macro.ImageViewer.InputManagement.TileController"/>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseWheelMessage.#ctor(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseWheelMessage.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.MouseWheelMessage.WheelDelta">
            <summary>
            Gets the wheel delta.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.MouseWheelMessage.Shortcut">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.InputManagement.MouseWheelShortcut"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.ImageViewerToolComponent">
            <summary>
            A base class for image viewer related application components.
            </summary>
            <remarks>
            There is often a need for an <see cref="T:Macro.Desktop.ApplicationComponent"/> that will
            listen for changes in <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>activation.  
            For example, the shelf that appears when the image layout tool activated 
            has UI elements which should be enabled/disabled depending on whether the 
            active workspace contains an <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>.
            This base class encapsulates that functionality.  If you are developing an 
            <see cref="T:Macro.Desktop.ApplicationComponent"/> that requires that kind of functionality,
            use this as your base class.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerToolComponent.#ctor(Macro.Desktop.IDesktopWindow)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.ImageViewerToolComponent"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerToolComponent.OnActiveImageViewerChanging(Macro.ImageViewer.ActiveImageViewerChangedEventArgs)">
            <summary>
            Called when the active image viewer is about to change.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerToolComponent.OnActiveImageViewerChanged(Macro.ImageViewer.ActiveImageViewerChangedEventArgs)">
            <summary>
            Called when the active image viewer has changed.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerToolComponent.Start">
            <summary>
            Override of <see cref="M:Macro.Desktop.ApplicationComponent.Start"/>
            </summary>
            <remarks>
            For internal Framework use only.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.ImageViewerToolComponent.Stop">
            <summary>
            Override of <see cref="M:Macro.Desktop.ApplicationComponent.Stop"/>
            </summary>
            <remarks>
            For internal Framework use only.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.ImageViewerToolComponent.DesktopWindow">
            <summary>
            Gets the <see cref="T:Macro.Desktop.IDesktopWindow"/> associated with this object.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageViewerToolComponent.ImageViewer">
            <summary>
            Gets the subject <see cref="T:Macro.ImageViewer.IImageViewer"/> that this component is associated with.
            </summary>
            <remarks>
            <value>
            The currently active <see cref="T:Macro.ImageViewer.IImageViewer"/> or <b>null</b> if the
            there is no currently active <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </value>
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.ColorPixelData">
            <summary>
            A colour pixel wrapper.
            </summary>
            <remarks>
            <see cref="T:Macro.ImageViewer.Imaging.ColorPixelData"/> provides a number of convenience methods
            to make accessing and changing colour pixel data easier.  Use these methods
            judiciously, as the convenience comes at the expense of performance.
            For example, if you're doing complex image processing, using methods
            such as <see cref="M:Macro.ImageViewer.Imaging.PixelData.SetPixel(System.Int32,System.Int32,System.Int32)"/> is not recommended if you want
            good performance.  Instead, use the <see cref="P:Macro.ImageViewer.Imaging.PixelData.Raw"/> property 
            to get the raw byte array, then use unsafe code to do your processing.
            </remarks>
            <seealso cref="T:Macro.ImageViewer.Imaging.PixelData"/>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorPixelData.#ctor(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Imaging.ColorPixelData"/> with the specified image parameters.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="pixelData">The pixel data to be wrapped.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorPixelData.#ctor(System.Int32,System.Int32,Macro.ImageViewer.Imaging.PixelDataGetter)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Imaging.ColorPixelData"/> with the specified image parameters.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="pixelDataGetter">A delegate that returns the pixel data.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorPixelData.Clone">
            <summary>
            Returns a copy of the object, including the pixel data.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorPixelData.GetPixelAsColor(System.Int32,System.Int32)">
            <summary>
            Gets the ARGB pixel value at the specified location.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="x"/> and/or <paramref name="y"/> are out of bounds.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorPixelData.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the ARGB pixel value at the specified location.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="color">The color to set.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="x"/> and/or <paramref name="y"/> are out of bounds.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorPixelData.SetPixel(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the ARGB pixel value at a specific pixel index.
            </summary>
            <param name="pixelIndex">The pixel index.</param>
            <param name="color">The color to set.</param>
            <remarks>
            If the pixel data is treated as a one-dimensional array
            where each row of pixels is concatenated, <paramref name="pixelIndex"/>
            is the index into that array.  This is useful when you know the
            index of the pixel that you want to set and don't want to 
            incur the needless computational overhead associated with specifying
            an x and y value.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorPixelData.SetPixel(System.Int32,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the ARGB pixel value at the specified location.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="x"/> and/or <paramref name="y"/> are out of bounds.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorPixelData.SetPixel(System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the ARGB pixel value at a particular pixel index.
            </summary>
            <param name="pixelIndex">The pixel index</param>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <remarks>
            If the pixel data is treated as a one-dimensional array
            where each row of pixels is concatenated, <paramref name="pixelIndex"/>
            is the index into that array.  This is useful when you know the
            index of the pixel that you want to set and don't want to 
            incur the needless computational overhead associated with specifying
            an x and y value.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorPixelData.CloneInternal">
            <summary>
            This method overrides <see cref="M:Macro.ImageViewer.Imaging.PixelData.CloneInternal"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorPixelData.GetPixelInternal(System.Int32)">
            <summary>
            This method overrides <see cref="M:Macro.ImageViewer.Imaging.PixelData.GetPixelInternal(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorPixelData.SetPixelInternal(System.Int32,System.Int32)">
            <summary>
            This method overrides <see cref="M:Macro.ImageViewer.Imaging.PixelData.SetPixelInternal(System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Comparers.StudyDateComparer">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>s based on study date.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Comparers.DicomStudyComparer">
            <summary>
            Base class for comparers that compare some aspect of
            DICOM studies.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DicomStudyComparer.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.DicomStudyComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DicomStudyComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.DicomStudyComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DicomStudyComparer.Compare(Macro.ImageViewer.IImageSet,Macro.ImageViewer.IImageSet)">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.IImageSet"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DicomStudyComparer.Compare(Macro.ImageViewer.StudyManagement.Study,Macro.ImageViewer.StudyManagement.Study)">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.StudyManagement.Study"/> instances.
            </summary>
            <remarks>Simply calls <see cref="M:Macro.ImageViewer.Comparers.DicomStudyComparer.Compare(Macro.ImageViewer.StudyManagement.Sop,Macro.ImageViewer.StudyManagement.Sop)"/>,
            passing the first <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> in each <see cref="T:Macro.ImageViewer.StudyManagement.Study"/>.</remarks>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DicomStudyComparer.Compare(Macro.ImageViewer.StudyManagement.Sop,Macro.ImageViewer.StudyManagement.Sop)">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>s.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
            <remarks>
            The relevant DICOM study property to be compared
            is taken from the <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.StudyDateComparer.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.StudyDateComparer"/>.
            </summary>
            <remarks>
            By default, the <see cref="P:Macro.ImageViewer.Comparers.ComparerBase.Reverse"/> property is set
            to true because, normally, we want the image sets sorted with the
            most recent studies at the beginning.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.StudyDateComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.StudyDateComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.StudyDateComparer.Compare(Macro.ImageViewer.IImageSet,Macro.ImageViewer.IImageSet)">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.IImageSet"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.StudyDateComparer.Compare(Macro.ImageViewer.StudyManagement.Sop,Macro.ImageViewer.StudyManagement.Sop)">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>s.
            </summary>
            <remarks>
            The relevant DICOM study property to be compared
            is taken from the <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.StudyDateComparer.Compare(Macro.Dicom.Iod.IStudyData,Macro.Dicom.Iod.IStudyData)">
            <summary>
            Compares two <see cref="T:Macro.Dicom.Iod.IStudyData"/> objects.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.KeyObjects.KeyImageDeserializer">
            <summary>
            A class for deserializing a key image series into the constituent images and associated presentation states.
            </summary>
            <remarks>
            <para>Due to the relatively new nature of key object support in the Macro Framework, this API may be more prone to changes in the next release.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.KeyObjects.KeyImageDeserializer.#ctor(Macro.ImageViewer.StudyManagement.Sop)">
            <summary>
            Constructs a new instance of <see cref="T:Macro.ImageViewer.KeyObjects.KeyImageDeserializer"/>.
            </summary>
            <remarks>
            <para>Due to the relatively new nature of key object support in the Macro Framework, this API may be more prone to changes in the next release.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.KeyObjects.KeyImageDeserializer.#ctor(Macro.Dicom.Iod.Iods.KeyObjectSelectionDocumentIod)">
            <summary>
            Constructs a new instance of <see cref="T:Macro.ImageViewer.KeyObjects.KeyImageDeserializer"/>.
            </summary>
            <remarks>
            <para>Due to the relatively new nature of key object support in the Macro Framework, this API may be more prone to changes in the next release.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.KeyObjects.KeyImageDeserializer.Deserialize">
            <summary>
            Deserializes the key object selection SOP instance into a list of constituent images and associated presentation states.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic">
            <summary>
            A dialog-like graphic for displaying the current progress of some abstract operation in a scene graph.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic.#ctor(Macro.ImageViewer.InteractiveGraphics.IProgressProvider,System.Boolean,Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphicStyle)">
            <summary>
            Initializes a new <see cref="T:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic"/>.
            </summary>
            <param name="progressProvider">The provider of progress information for which the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic"/> will display updates.</param>
            <param name="autoClose">A value indicating whether or not the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic"/> should automatically remove and dispose itself when the progress provider reports task completion or cancellation.</param>
            <param name="progressBarStyle">The style of progress bar to be displayed.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic.#ctor(Macro.ImageViewer.InteractiveGraphics.IProgressGraphicProgressProvider,System.Boolean,Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphicStyle)">
            <summary>
            Initializes a new <see cref="T:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic"/>.
            </summary>
            <param name="progressProvider">The provider of progress information for which the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic"/> will display updates.</param>
            <param name="autoClose">A value indicating whether or not the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic"/> should automatically remove and dispose itself when the progress provider reports task completion or cancellation.</param>
            <param name="progressBarStyle">The style of progress bar to be displayed.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic.Close">
            <summary>
            Forces the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic"/> to remove and dispose itself immediately.
            </summary>
            <remarks>
            Calling this method will invoke <see cref="M:Macro.ImageViewer.IDrawable.Draw"/> on the scene graph, so do not call this method from a drawing operation.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic.OnDrawing">
            <summary>
            Called by the framework just before the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic"/> is rendered.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic.Show(Macro.Common.Utilities.BackgroundTask,System.Collections.Generic.IEnumerable{Macro.ImageViewer.Graphics.GraphicCollection},System.Boolean,Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphicStyle)">
            <summary>
            Creates and displays <see cref="T:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic"/>.
            </summary>
            <remarks>
            This method will invoke each graphic's <see cref="M:Macro.ImageViewer.IDrawable.Draw"/> method, so do not call it from a draw routine in the same scene graph!
            </remarks>
            <param name="task">The <see cref="T:Macro.Common.Utilities.BackgroundTask"/> to execute. The task is automatically started if it is not already running.</param>
            <param name="parentCollections">The graphics collections on which the progress graphic should be shown.</param>
            <param name="autoClose">A value indicating whether or not the progress graphic should be automatically removed when the task is terminated.</param>
            <param name="progressBarStyle">The style of the progress bar.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic.Show(Macro.Common.Utilities.BackgroundTask,Macro.ImageViewer.Graphics.GraphicCollection,System.Boolean,Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphicStyle)">
            <summary>
            Creates and displays a <see cref="T:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic"/>.
            </summary>
            <remarks>
            This method will invoke the graphic's <see cref="M:Macro.ImageViewer.IDrawable.Draw"/> method, so do not call it from a draw routine in the same scene graph!
            </remarks>
            <param name="task">The <see cref="T:Macro.Common.Utilities.BackgroundTask"/> to execute. The task is automatically started if it is not already running.</param>
            <param name="parentCollection">The graphics collection on which the progress graphic should be shown.</param>
            <param name="autoClose">A value indicating whether or not the progress graphic should be automatically removed when the task is terminated.</param>
            <param name="progressBarStyle">The style of the progress bar.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic.Show(Macro.ImageViewer.InteractiveGraphics.IProgressProvider,Macro.ImageViewer.Graphics.GraphicCollection,System.Boolean,Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphicStyle)">
            <summary>
            Creates and displays a <see cref="T:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic"/>.
            </summary>
            <remarks>
            This method will invoke the graphic's <see cref="M:Macro.ImageViewer.IDrawable.Draw"/> method, so do not call it from a draw routine in the same scene graph!
            </remarks>
            <param name="source">The source from which progress information is retrieved and displayed.</param>
            <param name="parentCollection">The graphics collection on which the progress graphic should be shown.</param>
            <param name="autoClose">A value indicating whether or not the progress graphic should be automatically removed when the task is terminated.</param>
            <param name="progressBarStyle">The style of the progress bar.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic.Show(Macro.ImageViewer.InteractiveGraphics.IProgressGraphicProgressProvider,Macro.ImageViewer.Graphics.GraphicCollection,System.Boolean,Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphicStyle)">
            <summary>
            Creates and displays a <see cref="T:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic"/>.
            </summary>
            <remarks>
            This method will invoke the graphic's <see cref="M:Macro.ImageViewer.IDrawable.Draw"/> method, so do not call it from a draw routine in the same scene graph!
            </remarks>
            <param name="source">The source from which progress information is retrieved and displayed.</param>
            <param name="parentCollection">The graphics collection on which the progress graphic should be shown.</param>
            <param name="autoClose">A value indicating whether or not the progress graphic should be automatically removed when the task is terminated.</param>
            <param name="progressBarStyle">The style of the progress bar.</param>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic.AnimationTick">
            <summary>
            This property value is no longer used.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic.AutoClose">
            <summary>
            Gets a value indicating whether or not the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic"/> will remove and dispose itself when the progress provider reports task completion or cancellation.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.IProgressProvider">
            <summary>
            Interface for providers of progress information about some abstract operation.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.IProgressProvider.GetProgress(System.Single@,System.String@)">
            <summary>
            Called to get progress information about the abstract operation.
            </summary>
            <param name="progress">A fractional number between 0 and 1 inclusive indicating the current progress of the abstract operation.</param>
            <param name="message">An optional message describing the current progress of the abstract operation.</param>
            <returns>A value indicating whether or not the abstract operation is currently running.</returns>
        </member>
        <member name="E:Macro.ImageViewer.InteractiveGraphics.IProgressProvider.ProgressUpdated">
            <summary>
            Fires when updated progress information is available.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ProgressGraphic.ProgressCompositeGraphic.#ctor(Macro.ImageViewer.InteractiveGraphics.ProgressGraphic.ProgressCompositeGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.IProgressGraphicProgressProvider">
            <summary>
            Interface for providers of progress information about some abstract operation.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.IProgressGraphicProgressProvider.IsRunning(System.Single@,System.String@)">
            <summary>
            Called to get progress information about the abstract operation.
            </summary>
            <param name="progress">A fractional number between 0 and 1 inclusive indicating the current progress of the abstract operation.</param>
            <param name="message">An optional message describing the current progress of the abstract operation.</param>
            <returns>A value indicating whether or not the abstract operation is currently running.</returns>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphic">
            <summary>
            A graphic depicting a progress bar for the indication of work in progress.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphic.Create(Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphicStyle)">
            <summary>
            Creates a new <see cref="T:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphic"/> in the specified style.
            </summary>
            <param name="style">The <see cref="T:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphicStyle">style</see> of the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphic"/> to be created.</param>
            <returns>A new <see cref="T:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphic"/> in the specified style.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphic.OnProgressChanged">
            <summary>
            Called when the current progress value has changed.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphic.OnDrawing">
            <summary>
            Called by the framework just before the progress bar is rendered.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphic.Update">
            <summary>
            Forces an update of the progress bar bitmap.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphic.DrawImageCentered(System.Drawing.Graphics,System.Drawing.Image)">
            <summary>
            Draws an image centred on the specified graphics context.
            </summary>
            <param name="g">The graphics context on which the image is to be centred and drawn.</param>
            <param name="image">The image to be centred and drawn.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphic.RenderProgressBar(System.Single,System.Drawing.Graphics)">
            <summary>
            Called to render a progress bar depicting the specified progress value.
            </summary>
            <param name="progress">The progress value for which a progress bar is to be rendered.</param>
            <param name="g">The graphics context on which the progress bar is to be rendered.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphic.GetImageResource(System.String)">
            <summary>
            Gets a statically cached image resource.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphic.Progress">
            <summary>
            Gets or sets the current progress value as a fractional number between 0 and 1, inclusive.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the value is not between 0 and 1, inclusive.</exception>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphic.ProgressInt">
            <summary>
            Gets or sets the current progress value as an integer between 0 and 100, inclusive.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the value is not between 0 and 100, inclusive.</exception>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphic.ProgressPercent">
            <summary>
            Gets or sets the current progress value as an integer between 0 and 100, inclusive.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the value is not between 0 and 100, inclusive.</exception>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphic.Style">
            <summary>
            Gets a value indicating the animation <see cref="T:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphicStyle">style</see> of this progress bar.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphic.Size">
            <summary>
            Gets the size of this progress bar graphic.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.UserCalloutGraphic">
            <summary>
            A user-interactive version of <see cref="T:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.UserCalloutGraphic.#ctor">
            <summary>
            Instantiates a new instance of <see cref="T:Macro.ImageViewer.InteractiveGraphics.UserCalloutGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.UserCalloutGraphic.#ctor(Macro.ImageViewer.InteractiveGraphics.UserCalloutGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.UserCalloutGraphic.InitializeTextControlGraphic(Macro.ImageViewer.Graphics.ITextGraphic)">
            <summary>
            Initializes the control chain for the text graphic portion of the callout.
            </summary>
            <remarks>
            This implementation creates a <see cref="T:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic"/> and a <see cref="T:Macro.ImageViewer.InteractiveGraphics.MoveControlGraphic"/> to allow the
            user to interactively edit and move the callout text.
            </remarks>
            <param name="textGraphic">The text graphic to be controlled.</param>
            <returns>A control graphic chain controlling the text graphic.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.UserCalloutGraphic.InitializePointControlGraphic(Macro.ImageViewer.Graphics.IPointGraphic)">
            <summary>
            Initializes the control chain for the anchor point of the callout.
            </summary>
            <remarks>
            This implementation creates an <see cref="T:Macro.ImageViewer.InteractiveGraphics.AnchorPointControlGraphic"/> to allow the user to
            interactively move the <see cref="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.AnchorPoint"/> of the callout.
            </remarks>
            <param name="pointGraphic">The anchor point to be controlled.</param>
            <returns>A control graphic chain controlling the anchor point.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.UserCalloutGraphic.StartEdit">
            <summary>
            Starts the interactive edit mode of the callout.
            </summary>
            <returns>True if the callout successfully entered interactive edit mode.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.UserCalloutGraphic.EndEdit">
            <summary>
            Ends the interactive edit mode of the callout.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.UserCalloutGraphic.Text">
            <summary>
            Gets or sets the callout text label.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.UserCalloutGraphic.TextControlGraphic">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/> controlling the <see cref="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.TextGraphic"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.InteractivePolylineGraphicBuilder">
            <summary>
            Interactive builder class that interprets mouse clicks as ordered
            vertices to setup an open <see cref="T:Macro.ImageViewer.Graphics.IPointsGraphic"/>.
            </summary>
            <remarks>
            This builder takes input until the maximum number of vertices is reached.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractivePolylineGraphicBuilder.#ctor(Macro.ImageViewer.Graphics.IPointsGraphic)">
            <summary>
            Constructs an interactive builder for the specified graphic.
            </summary>
            <param name="pointsGraphic">The graphic to be interactively built.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractivePolylineGraphicBuilder.#ctor(System.Int32,Macro.ImageViewer.Graphics.IPointsGraphic)">
            <summary>
            Constructs an interactive builder for the specified graphic.
            </summary>
            <param name="maximumVertices">The maximum number of vertices to accept.</param>
            <param name="pointsGraphic">The graphic to be interactively built.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractivePolylineGraphicBuilder.#ctor(System.Int32,System.Int32,Macro.ImageViewer.Graphics.IPointsGraphic)">
            <summary>
            Constructs an interactive builder for the specified graphic.
            </summary>
            <param name="maximumVertices">The maximum number of vertices to accept.</param>
            <param name="minimumVertices">The minimum number of vertices to accept.</param>
            <param name="pointsGraphic">The graphic to be interactively built.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractivePolylineGraphicBuilder.Reset">
            <summary>
            Resets any internal state of the builder, allowing the same graphic to be rebuilt.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractivePolylineGraphicBuilder.Rollback">
            <summary>
            Rolls back the internal state of the builder by one mouse click, allowing the same graphic to be rebuilt by resuming from an earlier state.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractivePolylineGraphicBuilder.Start(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Passes user input to the builder when <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Start(Macro.ImageViewer.InputManagement.IMouseInformation)"/> is called on the owning tool.
            </summary>
            <param name="mouseInformation">The user input data.</param>
            <returns>True if the builder did something as a result of the call, and hence would like to receive capture; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractivePolylineGraphicBuilder.Track(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Passes user input to the builder when <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Track(Macro.ImageViewer.InputManagement.IMouseInformation)"/> is called on the owning tool.
            </summary>
            <param name="mouseInformation">The user input data.</param>
            <returns>True if the builder handled the message; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractivePolylineGraphicBuilder.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Passes user input to the builder when <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)"/> is called on the owning tool.
            </summary>
            <param name="mouseInformation">The user input data.</param>
            <returns>True if the tool should not release capture; False otherwise.</returns>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.InteractivePolylineGraphicBuilder.StopOnDoubleClick">
            <summary>
            Indicates whether or not to stop drawing the polyline when the user double-clicks.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.InteractivePolylineGraphicBuilder.Graphic">
            <summary>
            Gets the graphic that the builder is operating on.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.ContextMenuControlGraphic">
            <summary>
            An interactive graphic that adds a context menu to a subject graphic.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ContextMenuControlGraphic.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs an instance of a <see cref="T:Macro.ImageViewer.InteractiveGraphics.ContextMenuControlGraphic"/> with no initial context menu actions.
            </summary>
            <param name="subject">The subject graphic.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ContextMenuControlGraphic.#ctor(System.String,Macro.Desktop.Actions.IActionSet,Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs an instance of a <see cref="T:Macro.ImageViewer.InteractiveGraphics.ContextMenuControlGraphic"/> with the specified initial context menu actions.
            </summary>
            <param name="site">The action model site for the context menu (see <see cref="P:Macro.Desktop.Actions.ActionPath.Site"/>).</param>
            <param name="actions">The set of actions on the context menu.</param>
            <param name="subject">The subject graphic.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ContextMenuControlGraphic.#ctor(System.String,System.String,Macro.Desktop.Actions.IActionSet,Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs an instance of a <see cref="T:Macro.ImageViewer.InteractiveGraphics.ContextMenuControlGraphic"/> with the specified initial context menu actions.
            </summary>
            <param name="namespace">The namespace to qualify the <paramref name="site"/>.</param>
            <param name="site">The action model site for the context menu (see <see cref="P:Macro.Desktop.Actions.ActionPath.Site"/>).</param>
            <param name="actions">The set of actions on the context menu.</param>
            <param name="subject">The subject graphic.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ContextMenuControlGraphic.#ctor(Macro.ImageViewer.InteractiveGraphics.ContextMenuControlGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ContextMenuControlGraphic.Start(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> in response to a mouse button click via <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Start(Macro.ImageViewer.InputManagement.IMouseInformation)"/>.
            </summary>
            <param name="mouseInformation">The mouse input information.</param>
            <returns>True if the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> did something as a result of the call and hence would like to receive capture; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ContextMenuControlGraphic.GetExportedActions(System.String,Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Gets a set of exported <see cref="T:Macro.Desktop.Actions.IAction"/>s.
            </summary>
            <remarks>
            <para>
            This mechanism is useful when a particular component defines generally useful <see cref="T:Macro.Desktop.Actions.IAction"/>s
            without requiring specific knowledge of the action model sites that the client code uses.
            </para>
            <para>
            Overriding implementations should generally call the base implementation and invoke a <see cref="M:Macro.Desktop.Actions.IActionSet.Union(Macro.Desktop.Actions.IActionSet)"/>
            with any new actions the derived class wishes to provide in order to maintain full functionality of any
            control graphics further down in the chain.
            </para>
            </remarks>
            <param name="site">The action model site at which the actions should reside.</param>
            <param name="mouseInformation">The mouse input when the action model was requested, such as in response to a context menu request.</param>
            <returns>A set of exported <see cref="T:Macro.Desktop.Actions.IAction"/>s.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ContextMenuControlGraphic.GetContextMenuModel(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Gets the context menu <see cref="T:Macro.Desktop.Actions.ActionModelNode"/> based on the current state of the mouse.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ContextMenuControlGraphic.Actions">
            <summary>
            Gets or sets the actions to include on the context menu.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ContextMenuControlGraphic.Namespace">
            <summary>
            Gets the namespace with which to qualify the action model <see cref="P:Macro.ImageViewer.InteractiveGraphics.ContextMenuControlGraphic.Site"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ContextMenuControlGraphic.Site">
            <summary>
            Gets the action model site.
            </summary>
            <seealso cref="P:Macro.Desktop.Actions.ActionPath.Site"/>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.ArrowGraphic">
            <summary>
            An arrow graphic.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.ILineSegmentGraphic">
            <summary>
            Defines an <see cref="T:Macro.ImageViewer.Graphics.IVectorGraphic"/> that can be described by two endpoints.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ILineSegmentGraphic.Point1">
            <summary>
            Gets or sets one endpoint of the line in either source or destination coordinates.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ILineSegmentGraphic.Point2">
            <summary>
            Gets or sets the other endpoint of the line in either source or destination coordinates.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.ILineSegmentGraphic.Point1Changed">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.Graphics.ILineSegmentGraphic.Point1"/> property changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.ILineSegmentGraphic.Point2Changed">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.Graphics.ILineSegmentGraphic.Point2"/> property changed.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ArrowGraphic.#ctor">
            <summary>
            Constructs an arrow graphic.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ArrowGraphic.#ctor(System.Boolean)">
            <summary>
            Constructs a arrow graphic with an optional arrowhead.
            </summary>
            <param name="showArrow">A value indicating if the arrowhead should be shown.</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ArrowGraphic.#ctor(Macro.ImageViewer.Graphics.ArrowGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ArrowGraphic.Move(System.Drawing.SizeF)">
            <summary>
            Moves the <see cref="T:Macro.ImageViewer.Graphics.ArrowGraphic"/> by a specified delta.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this property is in source or destination coordinates.
            </remarks>
            <param name="delta">The offset by which the graphic is to be moved.</param>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ArrowGraphic.StartPoint">
            <summary>
            Gets or sets the tail endpoint of the arrow.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ArrowGraphic.EndPoint">
            <summary>
            Gets or sets the tip endpoint of the arrow.
            </summary>
            <remarks>
            <para>This point is the location to which the arrow points.</para>
            <para><see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.</para>
            </remarks>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.ArrowGraphic.StartPointChanged">
            <summary>
            Event fired when the value of <see cref="P:Macro.ImageViewer.Graphics.ArrowGraphic.StartPoint"/> changes.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.ArrowGraphic.EndPointChanged">
            <summary>
            Event fired when the value of <see cref="P:Macro.ImageViewer.Graphics.ArrowGraphic.EndPoint"/> changes.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ArrowGraphic.ArrowheadLineStyle">
            <summary>
            Gets or sets the line style of the arrowhead.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ArrowGraphic.ShowArrowhead">
            <summary>
            Gets or sets a value indicating if the arrowhead should be visible.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ArrowGraphic.Color">
            <summary>
            Gets or sets the colour of the arrow.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ArrowGraphic.LineStyle">
            <summary>
            Gets or sets the line style of the shaft of the arrow.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ArrowGraphic.Visible">
            <summary>
            Gets or sets a value indicating whether or not the arrow is visible.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ArrowGraphic.Macro#ImageViewer#Graphics#ILineSegmentGraphic#Point1">
            <summary>
            Gets or sets the tail endpoint of the line in either source or destination coordinates.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ArrowGraphic.Macro#ImageViewer#Graphics#ILineSegmentGraphic#Point2">
            <summary>
            Gets or sets the tip endpoint of the line in either source or destination coordinates.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.ArrowGraphic.Macro#ImageViewer#Graphics#ILineSegmentGraphic#Point1Changed">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.Graphics.ILineSegmentGraphic.Point1"/> property changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.ArrowGraphic.Macro#ImageViewer#Graphics#ILineSegmentGraphic#Point2Changed">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.Graphics.ILineSegmentGraphic.Point2"/> property changed.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.CurvePrimitive">
            <summary>
            A primitive curve graphic.
            </summary>
            <remarks>
            <para>Unlike the <see cref="T:Macro.ImageViewer.Graphics.ArcPrimitive"/>, this graphic is defined as a series of points with
            an cubic-spline-interpolated curve between the data points. The resulting curve will pass through
            all the specified points.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.CurvePrimitive.#ctor">
            <summary>
            Constructs a curve graphic.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.CurvePrimitive.#ctor(Macro.ImageViewer.Graphics.CurvePrimitive,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.CurvePrimitive.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit test on the <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> at a given point.
            </summary>
            <param name="point">The mouse position in destination coordinates.</param>
            <returns>
            <b>True</b> if <paramref name="point"/> "hits" the <see cref="T:Macro.ImageViewer.Graphics.Graphic"/>,
            <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.CurvePrimitive.GetClosestPoint(System.Drawing.PointF)">
            <summary>
            Gets the point on the <see cref="T:Macro.ImageViewer.Graphics.CurvePrimitive"/> closest to the specified point.
            </summary>
            <param name="point">A point in either source or destination coordinates.</param>
            <returns>The point on the graphic closest to the given <paramref name="point"/>.</returns>
            <remarks>
            <para>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>,
            the computation will be carried out in either source
            or destination coordinates.</para>
            <para>Since the interpolation between nodes of the curve is not explicitly
            defined, this method returns the closest node to the specified point, and
            ignores the individual curve segments for the purposes of this calculation.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.CurvePrimitive.Move(System.Drawing.SizeF)">
            <summary>
            Moves the <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> by a specified delta.
            </summary>
            <param name="delta">The distance to move.</param>
            <remarks>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>,
            <paramref name="delta"/> will be interpreted in either source
            or destination coordinates.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.CurvePrimitive.Points">
            <summary>
            Gets the ordered list of points that defines the graphic.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.CurvePrimitive.BoundingBox">
            <summary>
            Gets the tightest bounding box that encloses the graphic in either source or destination coordinates.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.GraphicEventArgs">
            <summary>
            Provides data for events on an <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Graphics.GraphicEventArgs.Graphic">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> to which the event applies.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.GraphicEventArgs.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.Graphics.GraphicEventArgs"/>.
            </summary>
            <param name="graphic">The graphic to which the event applies.</param>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.IGraphicVoiLutFactory">
            <summary>
            Defines a factory for getting a VOI LUT appropriate for an <see cref="T:Macro.ImageViewer.Graphics.ImageGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.IGraphicVoiLutFactory.CreateVoiLut(Macro.ImageViewer.Graphics.ImageGraphic)">
            <summary>
            Creates a Voi LUT suitable for the given <paramref name="imageGraphic"/>.
            </summary>
            <returns>The VOI LUT as an <see cref="T:Macro.ImageViewer.Imaging.IVoiLut"/>.</returns>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.GraphicVoiLutFactory">
            <summary>
            A base class defines a factory for getting a VOI LUT appropriate for an <see cref="T:Macro.ImageViewer.Graphics.ImageGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.GraphicVoiLutFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.GraphicVoiLutFactory.CreateVoiLut(Macro.ImageViewer.Graphics.ImageGraphic)">
            <summary>
            Creates a Voi LUT suitable for the given <paramref name="imageGraphic"/>.
            </summary>
            <returns>The VOI LUT as an <see cref="T:Macro.ImageViewer.Imaging.IVoiLut"/>.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.GraphicVoiLutFactory.Create(Macro.ImageViewer.Graphics.GraphicVoiLutFactory.CreateVoiLutDelegate)">
            <summary>
            Creates a new factory that wraps the given delegate.
            </summary>
            <param name="createVoiLutDelegate">A <see cref="T:Macro.ImageViewer.Graphics.GraphicVoiLutFactory.CreateVoiLutDelegate"/> delegate to
            get a VOI LUT appropriate for the given <see cref="T:Macro.ImageViewer.Graphics.ImageGraphic"/>.
            This method should generally be static, as the factory may only be reference-copied when the parent graphic is cloned.</param>
            <returns>The VOI LUT as an <see cref="T:Macro.ImageViewer.Imaging.IVoiLut"/>.</returns>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.GraphicVoiLutFactory.CreateVoiLutDelegate">
            <summary>
            Defines the method for creating a Voi LUT suitable for the given <paramref name="imageGraphic"/>.
            </summary>
            <returns>The VOI LUT as an <see cref="T:Macro.ImageViewer.Imaging.IVoiLut"/>.</returns>
        </member>
        <member name="T:Macro.ImageViewer.Comparers.InstanceNumberComparer">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s based on Instance Number.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Comparers.DicomSopComparer">
            <summary>
            Base class for comparing <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DicomSopComparer.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.DicomSopComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DicomSopComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.DicomSopComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DicomSopComparer.Compare(Macro.ImageViewer.IPresentationImage,Macro.ImageViewer.IPresentationImage)">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.IPresentationImage"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DicomSopComparer.Compare(Macro.ImageViewer.StudyManagement.Sop,Macro.ImageViewer.StudyManagement.Sop)">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.InstanceNumberComparer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.InstanceNumberComparer.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.InstanceNumberComparer.Compare(Macro.ImageViewer.StudyManagement.Sop,Macro.ImageViewer.StudyManagement.Sop)">
            <summary>
            Compares 2 <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s based on Instance Number.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.NormalizationLutLinear.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Imaging.NormalizationLutLinear"/>.
            </summary>
            <param name="rescaleSlope">Original frame rescale slope to be inverted.</param>
            <param name="rescaleIntercept">Original frame rescale intercept to be inverted.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.NormalizationLutLinear.#ctor(Macro.ImageViewer.Imaging.NormalizationLutLinear,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="T:Macro.ImageViewer.AuthorityTokens">
            <summary>
            Common viewer authority tokens.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.AuthorityTokens.ViewerVisible">
            <summary>
            Permission required in order to see any viewer components (e.g. without this, all viewer components are hidden).
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.AuthorityTokens.ViewerClinical">
            <summary>
            Permission to use clinical tools with the viewer (users with this token will require a license seat).
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.AuthorityTokens.Study">
            <summary>
            Study tokens.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.AuthorityTokens.Study.Open">
            <summary>
            Permission to open a study in the viewer.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.StudyLoaderExtensionPoint">
            <summary>
            Defines an a study loader extension point.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.StudyLoaderNotFoundException">
            <summary>
            Exception thrown when an <see cref="T:Macro.ImageViewer.StudyManagement.IStudyLoader"/> with the specified
            <see cref="F:Macro.ImageViewer.StudyManagement.StudyLoaderNotFoundException.LoaderName">name</see> could not be found.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.StudyLoaderNotFoundException.LoaderName">
            <summary>
            Gets the name of the requested <see cref="T:Macro.ImageViewer.StudyManagement.IStudyLoader"/>, if it was specified.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.StudyLoaderOptions">
            <summary>
            Basic study loader options; it's up to the implementation of the study loader to decide how to handle the instructions. 
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyLoaderOptions.#ctor(System.Boolean)">
            <summary>
            Create an instance of <see cref="T:Macro.ImageViewer.StudyManagement.StudyLoaderOptions"/> with the given instructions
            </summary>
            <param name="ignoreIfStudyInUse"></param>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.StudyLoaderOptions.IgnoreInUse">
            <summary>
            Indicates if the study loader should attempt to ignore if the study is in use
            and try to load the study anyway.
            </summary>
            <remarks>Note that it depends on the study loader whether it is even possible to ignore
            the fact that the study is in use and load it anyway. Just because this option is set
            does not mean the loader will not still throw an <see cref="T:Macro.ImageViewer.InUseLoadStudyException"/>.</remarks>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.StudyLoaderArgs">
            <summary>
            Holds the parameters that specify the study to be loaded.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyLoaderArgs.#ctor(System.String,Macro.Dicom.Iod.IApplicationEntity,Macro.ImageViewer.StudyManagement.StudyLoaderOptions)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.StudyManagement.StudyLoaderArgs"/> using the specified parameters.
            </summary>
            <param name="studyInstanceUid">The Study Instance UID of the study to be loaded.</param>
            <param name="server">The server from which the study should be loaded.</param>
            <param name="options"> </param>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.StudyLoaderArgs.StudyInstanceUid">
            <summary>
            Gets the Study Instance UID of the study to be loaded.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.StudyLoaderArgs.Server">
            <summary>
            Gets the server to load the study from.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.PointChangedEventArgs">
            <summary>
            Provides data for "point changed" events.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PointChangedEventArgs.#ctor(System.Drawing.PointF)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.PointChangedEventArgs"/>
            with the specified point.
            </summary>
            <param name="point"></param>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.PointChangedEventArgs.Point">
            <summary>
            Gets the point.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Annotations.AnnotationItemProviderExtensionPoint">
            <summary>
            An <see cref="T:Macro.Common.ExtensionPoint"/> for <see cref="T:Macro.ImageViewer.Annotations.IAnnotationItemProvider"/>s.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Annotations.IAnnotationItemProvider">
            <summary>
            An <see cref="T:Macro.ImageViewer.Annotations.IAnnotationItemProvider"/> provides a logical grouping of 
            <see cref="T:Macro.ImageViewer.Annotations.IAnnotationItem"/>s simply because there can be so many of them.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Annotations.AnnotationBox"/>
            <seealso cref="T:Macro.ImageViewer.Annotations.IAnnotationItem"/>
            <seealso cref="T:Macro.ImageViewer.Annotations.AnnotationItemConfigurationOptions"/>
            <seealso cref="T:Macro.ImageViewer.Annotations.IAnnotationLayout"/>
            <seealso cref="T:Macro.ImageViewer.Annotations.IAnnotationLayoutProvider"/>
            <seealso cref="T:Macro.ImageViewer.Annotations.AnnotationItemProviderExtensionPoint"/>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.IAnnotationItemProvider.GetIdentifier">
            <summary>
            Gets a unique identifier.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.IAnnotationItemProvider.GetDisplayName">
            <summary>
            Gets a user friendly display name.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.IAnnotationItemProvider.GetAnnotationItems">
            <summary>
            Gets the logical group of <see cref="T:Macro.ImageViewer.Annotations.IAnnotationItem"/>s.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.InactiveGraphicState">
            <summary>
            Represents the 'inactive' graphic state.
            </summary>
            <remarks>
            This state is entered when the mouse has moved away from a
            <see cref="T:Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic"/> that is not currently
            selected.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InactiveGraphicState.#ctor(Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.InteractiveGraphics.InactiveGraphicState"/>.
            </summary>
            <param name="standardStatefulGraphic"></param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InactiveGraphicState.Track(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by the framework when the mouse is moving and results in a transition 
            to the <see cref="T:Macro.ImageViewer.InteractiveGraphics.FocussedGraphicState"/> when
            the mouse hovers over the associated <see cref="T:Macro.ImageViewer.InteractiveGraphics.IStandardStatefulGraphic"/>.
            </summary>
            <param name="mouseInformation"></param>
            <returns></returns>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ValidationSettings.DisableSopValidation">
            <summary>
            Specifies whether or not to disable validation of sop instance data when it is loaded into a viewer.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.ImageSet">
            <summary>
            A container for <see cref="T:Macro.ImageViewer.IDisplaySet"/> objects.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.IImageSet">
            <summary>
            Defines a container for <see cref="T:Macro.ImageViewer.IDisplaySet"/> objects.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageSet.ImageViewer">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
            <value>The associated <see cref="T:Macro.ImageViewer.IImageViewer"/> or <b>null</b> if the 
            <see cref="T:Macro.ImageViewer.IImageSet"/> is not part of the 
            logical workspace yet.</value>
        </member>
        <member name="P:Macro.ImageViewer.IImageSet.ParentLogicalWorkspace">
            <summary>
            Gets the parent <see cref="T:Macro.ImageViewer.ILogicalWorkspace"/>
            </summary>
            <value>The parent <see cref="T:Macro.ImageViewer.ILogicalWorkspace"/> or <b>null</b> if the 
            <see cref="T:Macro.ImageViewer.IImageSet"/> has not been added to an 
            <see cref="T:Macro.ImageViewer.ILogicalWorkspace"/> yet.</value>
        </member>
        <member name="P:Macro.ImageViewer.IImageSet.DisplaySets">
            <summary>
            Gets the collection of <see cref="T:Macro.ImageViewer.IDisplaySet"/> objects that belong
            to this <see cref="T:Macro.ImageViewer.IImageSet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageSet.LinkedDisplaySets">
            <summary>
            Gets a collection of linked <see cref="T:Macro.ImageViewer.IDisplaySet"/> objects.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageSet.Descriptor">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.IImageSetDescriptor"/> describing this <see cref="T:Macro.ImageViewer.IImageSet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageSet.Name">
            <summary>
            Gets the name of the image set.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageSet.PatientInfo">
            <summary>
            Gets the patient information associated with the image set.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageSet.Uid">
            <summary>
            Gets the unique identifier for this <see cref="T:Macro.ImageViewer.IImageSet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.IImageSet.ExtensionData">
            <summary>
            A place for extensions to store custom data about the image set.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageSet.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.ImageSet"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageSet.#ctor(Macro.ImageViewer.ImageSetDescriptor)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.ImageSet"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageSet.Draw">
            <summary>
            Draws the <see cref="T:Macro.ImageViewer.ImageSet"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageSet.ToString">
            <summary>
            Returns the name of the image set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.ImageSet.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.ImageSet"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageSet.Dispose(System.Boolean)">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern
            </summary>
            <param name="disposing">True if this object is being disposed, false if it is being finalized</param>
        </member>
        <member name="M:Macro.ImageViewer.ImageSet.OnDisplaySetAdded(Macro.ImageViewer.DisplaySet)">
            <summary>
            Called when a new <see cref="T:Macro.ImageViewer.DisplaySet"/> has been added.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageSet.OnDisplaySetRemoved(Macro.ImageViewer.DisplaySet)">
            <summary>
            Called when a <see cref="T:Macro.ImageViewer.DisplaySet"/> has been removed.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageSet.ImageViewer">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
            <value>The associated <see cref="T:Macro.ImageViewer.IImageViewer"/> or <b>null</b> if the 
            <see cref="T:Macro.ImageViewer.ImageSet"/> is not part of the 
            logical workspace yet.</value>
        </member>
        <member name="P:Macro.ImageViewer.ImageSet.ParentLogicalWorkspace">
            <summary>
            Gets the parent <see cref="T:Macro.ImageViewer.LogicalWorkspace"/>
            </summary>
            <value>The parent <see cref="T:Macro.ImageViewer.ILogicalWorkspace"/> or <b>null</b> if the 
            <see cref="T:Macro.ImageViewer.ImageSet"/> has not been added to an 
            <see cref="T:Macro.ImageViewer.ILogicalWorkspace"/> yet.</value>
        </member>
        <member name="P:Macro.ImageViewer.ImageSet.DisplaySets">
            <summary>
            Gets the collection of <see cref="T:Macro.ImageViewer.IDisplaySet"/> objects that belong
            to this <see cref="T:Macro.ImageViewer.ImageSet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageSet.LinkedDisplaySets">
            <summary>
            Gets a collection of linked <see cref="T:Macro.ImageViewer.IDisplaySet"/> objects.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageSet.Descriptor">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.IImageSetDescriptor"/> describing this <see cref="T:Macro.ImageViewer.IImageSet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageSet.Name">
            <summary>
            Gets or sets the name of the image set.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageSet.PatientInfo">
            <summary>
            Gets or sets the patient information associated with the image set.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageSet.Uid">
            <summary>
            Gets or sets unique identifier for this <see cref="T:Macro.ImageViewer.IImageSet"/>.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.ImageSet.Drawing">
            <summary>
            Fires just before the <see cref="T:Macro.ImageViewer.ImageSet"/> is actually drawn/rendered.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.ISopDataSource">
            <summary>
            Defines the methods and properties of the data source for a <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>.
            </summary>
            <remarks>
            <para>
            A sop 'data source' is merely an abstraction of what is essentially just
            a <see cref="T:Macro.Dicom.DicomFile"/>.  However, because the data is not always a simple
            local file, we have to account for the fact that there may be parts
            of the implementation that must be specialized because, for example,
            the data exists on a remote server and might be retrieved on demand
            or in stages.  An example of this is the Macro Streaming implementation
            where:
            <list type="bullet">
            <item>A <see cref="T:Macro.Dicom.DicomFile"/> is initially constructed from an xml
            document retrieved from the server.</item>
            <item>The xml document often will contain the entire image header, but
            unknown, private and large tags are excluded.  When it is determined that
            a tag being requested is one of these tags, the <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/>
            will silently retrieve the entire image header on-demand.</item>
            <item>Pixel data is always loaded on-demand in streaming and local cases.</item>
            </list>
            </para>
            <para>
            Note that there is a significant shift in the design from previous versions
            of the framework, where <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> did not exist and
            any specializations had to be done by deriving from <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>.
            This caused a number of problems, the main one being that,
            when we added support for non-image <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s (like Key Objects) and
            <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> became non-abstract, all of a sudden we had to create 2 specialized
            classes, one for <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> and one for <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>; there
            was no way around it because client code depended on checking the type (<see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> or <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>)
            in order to know whether or not it was an image.  Also, <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> and <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>
            are rather large classes, and ultimately we realized that all they do
            is provide a convenient interface to a <see cref="T:Macro.Dicom.DicomFile"/>.  So, why
            make developers inherit from <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>, <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/> and <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>
            and force them to have to figure out which of the many properties and methods to override when
            it's really not necessary?  Also, now that we support non-image <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s, how come
            there's just <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> and <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>?  Where's KeyImageSop and PresentationStateSop?
            All of a sudden, we were headed down a very bad road.  Such is development.
            </para>
            <para>
            So how does <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> make it easier?  The biggest way
            has already been mentioned, which is that it unifies all sop instances, image or otherwise, under
            a single interface, so you only have to implement <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> (and possibly <see cref="T:Macro.ImageViewer.StudyManagement.ISopFrameData"/>).
            <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> has a few specialized bits of functionality for handling of <b>large</b> image data,
            such as pixel data and overlays, but that's it - everything else is the same as for non-images.  The other
            nice thing about <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> is that it can be used with the various convenient
            wrapper classes in <see cref="N:Macro.Dicom.Iod.Modules"/>, such as <see cref="T:Macro.Dicom.Iod.Modules.KeyObjectDocumentModuleIod"/>.
            The answer to the question "why isn't there a Key Object Sop?" is: there doesn't need to be.  You
            can simply wrap the <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> in whichever convenient IOD wrapper you need for
            a particular <see cref="T:Macro.Dicom.SopClass">SOP class</see>.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ISopDataSource.GetFrameData(System.Int32)">
            <summary>
            Gets the data for a particular frame in the SOP instance, if it is an image.
            </summary>
            <param name="frameNumber">The 1-based number of the frame for which the data is to be retrieved.</param>
            <returns>An <see cref="T:Macro.ImageViewer.StudyManagement.ISopFrameData"/> containing frame-specific data.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if this <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> is not an image
            (e.g. <see cref="P:Macro.ImageViewer.StudyManagement.ISopDataSource.IsImage"/> returns false).</exception>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ISopDataSource.PatientId">
            <summary>
            Gets the Patient ID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ISopDataSource.StudyInstanceUid">
            <summary>
            Gets the study instance UID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ISopDataSource.SeriesInstanceUid">
            <summary>
            Gets the series instance UID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ISopDataSource.SopInstanceUid">
            <summary>
            Gets the SOP instance UID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ISopDataSource.InstanceNumber">
            <summary>
            Gets the instance number.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ISopDataSource.SopClassUid">
            <summary>
            Gets the SOP class UID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ISopDataSource.TransferSyntaxUid">
            <summary>
            Gets the transfer syntax UID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ISopDataSource.IsStored">
            <summary>
            Gets a value indicating whether or not the SOP instance is 'stored',
            for example in the local store or on a remote PACS server.
            </summary>
            <remarks>
            This would normally be used to determine whether an <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource">data source</see>
            is one that is generated and only exists in memory, as the treatment of such a sop
            might be different in some cases.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ISopDataSource.Server">
            <summary>
            Gets the source server where this data source was loaded from.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ISopDataSource.IsImage">
            <summary>
            Gets a value indicating whether or not the SOP instance is an image.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ISopDataSource.NumberOfFrames">
            <summary>
            Gets the number of frames in this SOP instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the SOP instance is not an image.</exception>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.ISopFrameData">
            <summary>
            Defines the methods and properties of the data source for a <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ISopFrameData.GetNormalizedPixelData">
            <summary>
            Gets pixel data in normalized form (8 or 16-bit grayscale, or 32-bit ARGB).
            </summary>
            <remarks>
            <i>Normalized</i> pixel data means that:
            <list type="Bullet">
            <item>
            <description>Grayscale pixel data has embedded overlays removed and each pixel value
            is padded so that it can be cast directly to the appropriate type (e.g. byte, sbyte, ushort, short).</description>
            </item>
            <item>
            <description>Colour pixel data is always converted into ARGB format.</description>
            </item>
            <item>
            <description>Pixel data is always uncompressed.</description>
            </item>
            </list>
            <para>
            Ensuring that the pixel data always meets the above criteria
            allows clients to easily consume pixel data without having
            to worry about the the multitude of DICOM photometric interpretations
            and transfer syntaxes.
            </para>
            <para>
            Pixel data is reloaded when this method is called after a 
            call to <see cref="M:Macro.ImageViewer.StudyManagement.ISopFrameData.Unload"/>.
            </para>
            </remarks>		
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ISopFrameData.GetNormalizedOverlayData(System.Int32)">
            <summary>
            Gets the normalized overlay data buffer for a particular overlay group (8-bit grayscale).
            </summary>
            <remarks>
            <para>
            <i>Normalized</i> overlay data means that the 1-bit overlay pixel data is extracted and
            unpacked as necessary to form an 8-bit-per-pixel buffer with values of either 0 or 255.
            </para>
            <para>
            Ensuring that the overlay data always meets the above criteria allows clients to easily
            consume overlay data without having to worry about the storage of overlay data, whether
            embedded in unused bits of the pixel data or in a separate packed bits buffer.
            </para>
            <para>
            Overlay data is reloaded when this method is called after a call to <see cref="M:Macro.ImageViewer.StudyManagement.ISopFrameData.Unload"/>.
            The pixel data will also be reloaded if this method is called before
            <see cref="M:Macro.ImageViewer.StudyManagement.ISopFrameData.GetNormalizedPixelData"/> and there are overlays stored in unused bits of the
            pixel data.
            </para>
            </remarks>
            <param name="overlayNumber">The 1-based overlay plane number.</param>
            <returns>A byte buffer containing the normalized overlay pixel data.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="overlayNumber"/> is not a positive non-zero number.</exception>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ISopFrameData.Unload">
            <summary>
            Unloads any cached byte buffers owned by this <see cref="T:Macro.ImageViewer.StudyManagement.ISopFrameData"/>.
            </summary>
            <remarks>
            It is sometimes necessary to manage the memory used by unloading the pixel data. 
            Calling this method will not necessarily result in an immediate decrease in memory
            usage, since it merely releases the reference to the pixel data; it is up to the
            garbage collector to free the memory.  Calling <see cref="M:Macro.ImageViewer.StudyManagement.ISopFrameData.GetNormalizedPixelData"/>
            will reload the pixel data.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ISopFrameData.Parent">
            <summary>
            Gets the parent <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> to which this frame belongs.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ISopFrameData.FrameNumber">
            <summary>
            Gets the 1-based numeric identifier of this frame.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.SopFrameData">
            <summary>
            Base implementation of <see cref="T:Macro.ImageViewer.StudyManagement.ISopFrameData"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.SopFrameData.#ctor(System.Int32,Macro.ImageViewer.StudyManagement.SopDataSource)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.StudyManagement.SopFrameData"/>.
            </summary>
            <param name="frameNumber">The 1-based number of this frame.</param>
            <param name="parent">The parent <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> that this frame belongs to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="parent"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="frameNumber"/> is zero or negative.</exception>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.SopFrameData.GetNormalizedPixelData">
            <summary>
            Gets pixel data in normalized form (8 or 16-bit grayscale, or 32-bit ARGB).
            </summary>
            <returns></returns>
            <remarks>
            <i>Normalized</i> pixel data means that:
            <list type="Bullet">
            <item>
            <description>Grayscale pixel data has embedded overlays removed and each pixel value
            is padded so that it can be cast directly to the appropriate type (e.g. byte, sbyte, ushort, short).</description>
            </item>
            <item>
            <description>Colour pixel data is always converted into ARGB format.</description>
            </item>
            <item>
            <description>Pixel data is always uncompressed.</description>
            </item>
            </list>
            <para>
            Ensuring that the pixel data always meets the above criteria
            allows clients to easily consume pixel data without having
            to worry about the the multitude of DICOM photometric interpretations
            and transfer syntaxes.
            </para>
            <para>
            Pixel data is reloaded when this method is called after a 
            call to <see cref="M:Macro.ImageViewer.StudyManagement.ISopFrameData.Unload"/>.
            </para>
            </remarks>		
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.SopFrameData.GetNormalizedOverlayData(System.Int32)">
            <summary>
            Gets the normalized overlay data buffer for a particular overlay group (8-bit grayscale).
            </summary>
            <remarks>
            <para>
            <i>Normalized</i> overlay data means that the 1-bit overlay pixel data is extracted and
            unpacked as necessary to form an 8-bit-per-pixel buffer with values of either 0 or 255.
            </para>
            <para>
            Ensuring that the overlay data always meets the above criteria allows clients to easily
            consume overlay data without having to worry about the storage of overlay data, whether
            embedded in unused bits of the pixel data or in a separate packed bits buffer.
            </para>
            <para>
            Overlay data is reloaded when this method is called after a call to <see cref="M:Macro.ImageViewer.StudyManagement.ISopFrameData.Unload"/>.
            The pixel data will also be reloaded if this method is called before
            <see cref="M:Macro.ImageViewer.StudyManagement.ISopFrameData.GetNormalizedPixelData"/> and there are overlays stored in unused bits of the
            pixel data.
            </para>
            </remarks>
            <param name="overlayNumber">The 1-based overlay plane number.</param>
            <returns>A byte buffer containing the normalized overlay pixel data.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="overlayNumber"/> is not a positive non-zero number.</exception>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.SopFrameData.Unload">
            <summary>
            Unloads any cached byte buffers owned by this <see cref="T:Macro.ImageViewer.StudyManagement.ISopFrameData"/>.
            </summary>
            <remarks>
            It is sometimes necessary to manage the memory used by unloading the pixel data. 
            Calling this method will not necessarily result in an immediate decrease in memory
            usage, since it merely releases the reference to the pixel data; it is up to the
            garbage collector to free the memory.  Calling <see cref="M:Macro.ImageViewer.StudyManagement.ISopFrameData.GetNormalizedPixelData"/>
            will reload the pixel data.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.SopFrameData.Dispose">
            <summary>
            Releases resources owned by this <see cref="T:Macro.ImageViewer.StudyManagement.SopFrameData"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.SopFrameData.Dispose(System.Boolean)">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern.
            </summary>
            <param name="disposing">A value indicating whether or not the object is being disposed.</param>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SopFrameData.Parent">
            <summary>
            Gets the parent <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> to which this frame belongs.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SopFrameData.FrameNumber">
            <summary>
            Gets the 1-based number of this frame.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.IColorMapManager">
            <summary>
            A Color Map Manager, which is responsible for managing installation and restoration
            of color maps via the Memento pattern.
            </summary>
            <remarks>
            <para>
            Implementors can maintain the named color maps any way they choose.
            However, the <see cref="T:Macro.ImageViewer.Imaging.ColorMapFactoryExtensionPoint"/> is the preferred method of 
            creating new color maps.
            </para>
            <para>
            Implementors must not return null from the <see cref="P:Macro.ImageViewer.Imaging.IColorMapInstaller.ColorMap"/> property.
            </para>
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.IColorMapInstaller">
            <summary>
            Interface to an entity responsible for managing installation of color maps.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IColorMapInstaller.InstallColorMap(System.String)">
            <summary>
            Installs a color map by name.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IColorMapInstaller.InstallColorMap(Macro.ImageViewer.Imaging.ColorMapDescriptor)">
            <summary>
            Installs a color map by <see cref="T:Macro.ImageViewer.Imaging.ColorMapDescriptor">descriptor</see>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IColorMapInstaller.InstallColorMap(Macro.ImageViewer.Imaging.IColorMap)">
            <summary>
            Installs a color map.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IColorMapInstaller.ColorMap">
            <summary>
            Gets the currently installed color map.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IColorMapInstaller.AvailableColorMaps">
            <summary>
            Gets <see cref="T:Macro.ImageViewer.Imaging.ColorMapDescriptor"/>s for all the different types of available color maps.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IColorMapManager.GetColorMap">
            <summary>
            Gets the currently installed color map.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.ColorMapDescriptor">
            <summary>
            Provides a description of a color map.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Imaging.IColorMapFactory"/>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorMapDescriptor.FromFactory(Macro.ImageViewer.Imaging.IColorMapFactory)">
            <summary>
            Creates a <see cref="T:Macro.ImageViewer.Imaging.ColorMapDescriptor"/> given an input <see cref="T:Macro.ImageViewer.Imaging.IColorMapFactory"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.ColorMapDescriptor.Name">
            <summary>
            Gets the name of the factory.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.ColorMapDescriptor.Description">
            <summary>
            Gets a brief description of the factory.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.Units">
            <summary>
            Enumerated values defining the units of measurement used in various calculations in the <see cref="N:Macro.ImageViewer.RoiGraphics"/> namespace.
            </summary>
            <remarks>
            Depending on the specific context, the enumerated values can also represent areas or volumes. For example, if a method that computes area
            is given an argument of <see cref="F:Macro.ImageViewer.RoiGraphics.Units.Centimeters"/>, then the output should be interpreted to be in square centimetres. Similarly, if a
            method that computes volume is given <see cref="F:Macro.ImageViewer.RoiGraphics.Units.Pixels"/>, then the output should be interpreted to be in cubic pixels.
            </remarks>
        </member>
        <member name="F:Macro.ImageViewer.RoiGraphics.Units.Pixels">
            <summary>
            Indicates that the measurement is in units of image pixels (or square pixels, or cubic pixels).
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.RoiGraphics.Units.Millimeters">
            <summary>
            Indicates that the measurement is in units of millimetres (or square millimetres, or cubic millimetres).
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.RoiGraphics.Units.Centimeters">
            <summary>
            Indicates that the measurement is int units of centimetres (or square centimetres, or cubic centimetres).
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.EllipticalRoi">
            <summary>
            Represents a static, elliptical region of interest for the purposes of computing statistics on the contained pixels.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.IRoiAreaProvider">
            <summary>
            Defines the property to get the area of a region of interest.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.IRoiAreaProvider.Units">
            <summary>
            Gets or sets the units of area with which to compute the value of <see cref="P:Macro.ImageViewer.RoiGraphics.IRoiAreaProvider.Area"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.IRoiAreaProvider.Area">
            <summary>
            Gets the area of the region of interest in the units of area as specified by <see cref="P:Macro.ImageViewer.RoiGraphics.IRoiAreaProvider.Units"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">If <see cref="P:Macro.ImageViewer.RoiGraphics.IRoiAreaProvider.Units"/> is a physical
            unit of measurement and the image has no pixel spacing information, nor has it been calibrated.</exception>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.IRoiAreaProvider.IsCalibrated">
            <summary>
            Gets a value indicating that the image has pixel spacing information or has
            previously been calibrated with physical dimensions.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.IRoiStatisticsProvider">
            <summary>
            Defines the properties to get the mean and standard deviation of a
            region of interest.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.IRoiStatisticsProvider.StandardDeviation">
            <summary>
            Gets the standard deviation of the values over the <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/>.
            </summary>
            <remarks>
            All stored pixel values are passed through the modality LUT function if it exists before any computation takes place.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.IRoiStatisticsProvider.Mean">
            <summary>
            Gets the mean of the values over the <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/>.
            </summary>
            <remarks>
            All stored pixel values are passed through the modality LUT function if it exists before any computation takes place.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.EllipticalRoi.#ctor(System.Drawing.RectangleF,Macro.ImageViewer.IPresentationImage)">
            <summary>
            Constructs a new elliptical region of interest.
            </summary>
            <param name="boundingBox">The rectangle that bounds the elliptical region of interest.</param>
            <param name="presentationImage">The image containing the source pixel data.</param>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.EllipticalRoi.#ctor(Macro.ImageViewer.Graphics.IBoundableGraphic)">
            <summary>
            Constructs a new elliptical region of interest, specifying an <see cref="T:Macro.ImageViewer.Graphics.IBoundableGraphic"/> as the source of the definition and pixel data.
            </summary>
            <param name="ellipse">The elliptical graphic that represents the region of interest.</param>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.EllipticalRoi.ComputeBounds">
            <summary>
            Called by <see cref="P:Macro.ImageViewer.RoiGraphics.Roi.BoundingBox"/> to compute the tightest bounding box of the region of interest.
            </summary>
            <remarks>
            <para>This method is only called once and the result is cached for future accesses.</para>
            <para>
            Regions of interest have no notion of coordinate system. All coordinates are inherently
            given relative to the image pixel space (i.e. <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Source"/>.)
            </para>
            </remarks>
            <returns>A rectangle defining the bounding box.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.EllipticalRoi.CopyTo(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Creates a copy of this <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/> using the same region of interest shape but using a different image as the source pixel data.
            </summary>
            <param name="presentationImage">The image upon which to copy this region of interest.</param>
            <returns>A new <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/> of the same type and shape as the current region of interest.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.EllipticalRoi.Contains(System.Drawing.PointF)">
            <summary>
            Tests to see if the given point is contained within the region of interest.
            </summary>
            <remarks>
            Regions of interest have no notion of coordinate system. All coordinates are inherently
            given relative to the image pixel space (i.e. <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Source"/>.)
            </remarks>
            <param name="point">The point to test.</param>
            <returns>True if the point is defined as within the region of interest; False otherwise.</returns>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.EllipticalRoi.Units">
            <summary>
            Gets or sets the units of area with which to compute the value of <see cref="P:Macro.ImageViewer.RoiGraphics.IRoiAreaProvider.Area"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.EllipticalRoi.IsCalibrated">
            <summary>
            Gets a value indicating that the image has pixel spacing information or has
            previously been calibrated with physical dimensions.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.EllipticalRoi.StandardDeviation">
            <summary>
            Gets the standard deviation of the values over the <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.EllipticalRoi.Mean">
            <summary>
            Gets the mean of the values over the <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.EllipticalRoi.Area">
            <summary>
            Gets the area of the region of interest in the units of area as specified by <see cref="P:Macro.ImageViewer.RoiGraphics.IRoiAreaProvider.Units"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">If <see cref="P:Macro.ImageViewer.RoiGraphics.IRoiAreaProvider.Units"/> is a physical
            unit of measurement and the image has no pixel spacing information, nor has it been calibrated.</exception>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSource">
            <summary>
            Enumeration to indicate the source of an <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic"/>.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSource.Image">
            <summary>
            Indicates that the associated <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic"/> was defined in the image SOP or the image SOP referenced by the presentation state SOP.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSource.PresentationState">
            <summary>
            Indicates that the associated <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic"/> was defined in the presentation state SOP.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSource.User">
            <summary>
            Indicates that the associated <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneGraphic"/> was user-created.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.Dicom.DicomPresentationState">
            <summary>
            DICOM images without a real, concrete presentation state SOP should
            install this pseudo presentation state to recover shutter and overlay
            components from the image header.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomPresentationState.ShowGrayscaleInverted">
            <summary>
            Specifies whether or not to show grayscale images inverted.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.IAnnotationCalloutLocationStrategy">
            <summary>
            A strategy for automatically calculating the location of a <see cref="T:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic"/>'s callout.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.IAnnotationCalloutLocationStrategy.SetAnnotationGraphic(Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic)">
            <summary>
            Sets the <see cref="T:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic"/> that owns this strategy.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.IAnnotationCalloutLocationStrategy.OnCalloutLocationChangedExternally">
            <summary>
            Called when the <see cref="T:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic"/>'s callout location has been changed externally; for example, by the user.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.IAnnotationCalloutLocationStrategy.CalculateCalloutLocation(System.Drawing.PointF@,Macro.ImageViewer.Graphics.CoordinateSystem@)">
            <summary>
            Called by the owning <see cref="T:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic"/> to get the callout's new location.
            </summary>
            <param name="location">The new location of the callout.</param>
            <param name="coordinateSystem">The <see cref="T:Macro.ImageViewer.Graphics.CoordinateSystem"/> of <paramref name="location"/>.</param>
            <returns>True if the callout location needs to change, false otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.IAnnotationCalloutLocationStrategy.CalculateCalloutEndPoint(System.Drawing.PointF@,Macro.ImageViewer.Graphics.CoordinateSystem@)">
            <summary>
            Called by the owning <see cref="T:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic"/> to get the callout's end point.
            </summary>
            <param name="endPoint">The callout end point.</param>
            <param name="coordinateSystem">The <see cref="T:Macro.ImageViewer.Graphics.CoordinateSystem"/> of <paramref name="endPoint"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.IAnnotationCalloutLocationStrategy.Clone">
            <summary>
            Creates a deep copy of this strategy object.
            </summary>
            <remarks>
            <see cref="T:Macro.ImageViewer.InteractiveGraphics.IAnnotationCalloutLocationStrategy"/>s should not return null from this method.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.ImageSetSpecification">
            <summary>
            A <see cref="T:Macro.Common.Specifications.ISpecification"/> class for use with <see cref="T:Macro.ImageViewer.IImageSet"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageSetSpecification.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageSetSpecification.Test(Macro.ImageViewer.IImageSet)">
            <summary>
            Tests the given <see cref="T:Macro.ImageViewer.IImageSet"/> against this specification.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.ImageSetGroups">
            <summary>
            A convenient class that can be used to filter <see cref="T:Macro.ImageViewer.IImageSet"/>s into related groups.
            </summary>
            <remarks>
            The real power of this class is that it responds to changes in <see cref="P:Macro.ImageViewer.ImageSetGroups.SourceImageSets"/>,
            which is an <see cref="T:Macro.Common.Utilities.ObservableList`1">observable list</see> of <see cref="T:Macro.ImageViewer.IImageSet"/>s.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.ImageSetGroups.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageSetGroups.#ctor(Macro.Common.Utilities.ObservableList{Macro.ImageViewer.IImageSet})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageSetGroups.Dispose(System.Boolean)">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageSetGroups.Dispose">
            <summary>
            Releases any resources used by this object.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageSetGroups.Root">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.Common.RootFilteredGroup`1">root</see> <see cref="T:Macro.ImageViewer.Common.FilteredGroup`1">filtered group</see>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageSetGroups.SourceImageSets">
            <summary>
            Gets or sets the underlying list of <see cref="T:Macro.ImageViewer.IImageSet"/>s to be observed and filtered.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.ActivityMonitorFailureWatcher">
            <summary>
            Responsible for alerting the user about failed work items.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Annotations.AnnotationResourceResolver">
            <summary>
            Base implementation of <see cref="T:Macro.ImageViewer.Annotations.IAnnotationResourceResolver"/>.
            </summary>
            <remarks>
            <para>
            Uses assembly resources to look up the display name and label 
            for an <see cref="T:Macro.ImageViewer.Annotations.IAnnotationItem"/> (and <see cref="T:Macro.ImageViewer.Annotations.IAnnotationItemProvider"/>) based on it's 
            unique identifier.
            </para>
            <para>
            The algorithm used is quite simple; all '.' characters in the unique identifier are replaced with '_' because
            the resource editor doesn't like '.'s, and one of the keywords "_DisplayName" or "_Label" is appended, giving
            the resource identifier to lookup.
            </para>
            <para>
            An example would be a unique identifier of "Dicom.GeneralSeries.SeriesDescription".  The resource identifiers
            to lookup would be "Dicom_GeneralSeries_SeriesDescription_DisplayName" and "Dicom_GeneralSeries_SeriesDescription_Label", 
            respectively.
            </para>
            </remarks>
            <seealso cref="T:Macro.ImageViewer.Annotations.IAnnotationResourceResolver"/>
            <seealso cref="T:Macro.Common.Utilities.ResourceResolver"/>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationResourceResolver.#ctor(System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="target">The target object from which to determine the <see cref="T:System.Reflection.Assembly"/> 
            whose resources are to be used to lookup the display name and label.</param>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationResourceResolver.#ctor(System.Reflection.Assembly)">
            <summary>
            Constructor.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> whose resources 
            are to be used to lookup the display name and label.</param>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationResourceResolver.ResolveLabel(System.String)">
            <summary>
            Resolves the <see cref="T:Macro.ImageViewer.Annotations.IAnnotationItem"/>'s label (see <see cref="M:Macro.ImageViewer.Annotations.IAnnotationItem.GetLabel"/>).
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationResourceResolver.ResolveDisplayName(System.String)">
            <summary>
            Resolves the <see cref="T:Macro.ImageViewer.Annotations.IAnnotationItem"/>'s (or <see cref="T:Macro.ImageViewer.Annotations.IAnnotationItemProvider"/>'s) display name 
            (see <see cref="M:Macro.ImageViewer.Annotations.IAnnotationItem.GetDisplayName"/> and <see cref="M:Macro.ImageViewer.Annotations.IAnnotationItemProvider.GetDisplayName"/>).
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the display name cannot be resolved.</exception>
        </member>
        <member name="T:Macro.ImageViewer.Annotations.AnnotationItemProvider">
            <summary>
            Base implementation of <see cref="T:Macro.ImageViewer.Annotations.IAnnotationItemProvider"/>.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Annotations.IAnnotationItemProvider"/>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationItemProvider.#ctor(System.String,Macro.ImageViewer.Annotations.IAnnotationResourceResolver)">
            <summary>
            A constructor that uses the <see cref="T:Macro.ImageViewer.Annotations.AnnotationItemProvider"/>'s unique identifier to determine
            the display name using an <see cref="T:Macro.ImageViewer.Annotations.IAnnotationResourceResolver"/>.
            </summary>
            <param name="identifier">The unique identifier of the <see cref="T:Macro.ImageViewer.Annotations.AnnotationItemProvider"/>.</param>
            <param name="resolver">The object that will resolve the display name from 
            the <see cref="T:Macro.ImageViewer.Annotations.AnnotationItemProvider"/>'s unique identifier.</param>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationItemProvider.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="identifier">The unique identifier of the <see cref="T:Macro.ImageViewer.Annotations.AnnotationItemProvider"/>.</param>
            <param name="displayName">The <see cref="T:Macro.ImageViewer.Annotations.AnnotationItemProvider"/>'s display name.</param>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationItemProvider.GetIdentifier">
            <summary>
            Gets a unique identifier.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationItemProvider.GetDisplayName">
            <summary>
            Gets a user friendly display name.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationItemProvider.GetAnnotationItems">
            <summary>
            Gets the logical group of <see cref="T:Macro.ImageViewer.Annotations.IAnnotationItem"/>s.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.StudyFinderExtensionPoint">
            <summary>
            Defines a study finder extension point.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.StudyFinderNotFoundException">
            <summary>
            Exception thrown when an <see cref="T:Macro.ImageViewer.StudyManagement.IStudyFinder"/> with the specified
            <see cref="F:Macro.ImageViewer.StudyManagement.StudyFinderNotFoundException.FinderName">name</see> could not be found.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.StudyFinderNotFoundException.FinderName">
            <summary>
            Gets the name of the requested <see cref="T:Macro.ImageViewer.StudyManagement.IStudyFinder"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.StudyFinderMap">
            <summary>
            A map of <see cref="T:Macro.ImageViewer.StudyManagement.IStudyFinder"/> objects.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.StudyFinderMap.Item(System.String)">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.StudyManagement.IStudyFinder"/> with the specified name.
            </summary>
            <param name="studyFinderName"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.ImageViewer.PresentationImageCollection">
            <summary>
            A collection of <see cref="T:Macro.ImageViewer.IPresentationImage"/> objects.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationImageCollection.#ctor">
            <summary>
            Instantiates a new instance of <see cref="T:Macro.ImageViewer.PresentationImageCollection"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationImageCollection.Sort">
            <summary>
            Sorts the collection using <see cref="P:Macro.ImageViewer.PresentationImageCollection.SortComparer"/>.
            </summary>
            <remarks>
            If <see cref="P:Macro.ImageViewer.PresentationImageCollection.SortComparer"/> is null, it is first set to a default one.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.PresentationImageCollection.Sort(System.Collections.Generic.IComparer{Macro.ImageViewer.IPresentationImage})">
            <summary>
            Sorts the collection with the given comparer.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationImageCollection.SortComparer">
            <summary>
            The comparer that was last used to sort the collection, via <see cref="M:Macro.ImageViewer.PresentationImageCollection.Sort"/>.
            </summary>
            <remarks>
            When an item is added to or replaced, this value is set to null.  When an item is
            simply removed, the sort order is maintained, so this value also will not change.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.LinkageChangedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LinkageChangedEventArgs.IsLinked">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.ILayoutManager">
            <summary>
            Defines an interface for image layout management.
            </summary>
            <remarks>
            If you want to implement your own hanging protocol engine,
            you need to 1) implement this interface and 2) mark your class
            with the <code>[ExtensionOf(typeof(LayoutManagerExtensionPoint))]</code>
            attribute.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.ILayoutManager.SetImageViewer(Macro.ImageViewer.IImageViewer)">
            <summary>
            Sets the owning <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
            <param name="imageViewer"></param>
        </member>
        <member name="M:Macro.ImageViewer.ILayoutManager.Layout">
            <summary>
            Lays out the images on the image viewer specified by <see cref="M:Macro.ImageViewer.ILayoutManager.SetImageViewer(Macro.ImageViewer.IImageViewer)"/>.
            </summary>
            <remarks>
            This is invoked by the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> when images are
            first displayed, or anytime when <see cref="M:Macro.ImageViewer.IImageViewer.Layout"/> is called.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.MouseButtonMessage">
            <summary>
            A message object created by the view layer to allow a controlling object 
            (e.g. <see cref="T:Macro.ImageViewer.InputManagement.TileController"/>) to handle mouse button messages.
            </summary>
            <remarks>
            This class is intended for internal framework use only.
            </remarks>
            <seealso cref="T:Macro.ImageViewer.InputManagement.MouseButtonShortcut"/>
            <seealso cref="T:Macro.ImageViewer.InputManagement.TileController"/>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseButtonMessage.#ctor(System.Drawing.Point,Macro.Desktop.XMouseButtons,Macro.ImageViewer.InputManagement.MouseButtonMessage.ButtonActions,System.UInt32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseButtonMessage.#ctor(System.Drawing.Point,Macro.Desktop.XMouseButtons,Macro.ImageViewer.InputManagement.MouseButtonMessage.ButtonActions,System.UInt32,Macro.Desktop.ModifierFlags)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseButtonMessage.#ctor(System.Drawing.Point,Macro.Desktop.XMouseButtons,Macro.ImageViewer.InputManagement.MouseButtonMessage.ButtonActions,System.UInt32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.MouseButtonMessage.Location">
            <summary>
            Gets the mouse location.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.MouseButtonMessage.ButtonAction">
            <summary>
            Gets the current button state.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.MouseButtonMessage.Shortcut">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.InputManagement.MouseButtonShortcut"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.MouseButtonMessage.ClickCount">
            <summary>
            Gets the current mouse button click count.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.MouseButtonMessage.ButtonActions">
            <summary>
            An enum used to indicate the button state.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.InputManagement.MouseButtonMessage.ButtonActions.Down">
            <summary>
            Indicates that the button is down.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.InputManagement.MouseButtonMessage.ButtonActions.Up">
            <summary>
            Indicates that the button has been released.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.MouseButtonShortcut">
            <summary>
            Represents the current message object's (e.g. <see cref="T:Macro.ImageViewer.InputManagement.MouseButtonMessage"/>) state.
            </summary>
            <seealso cref="T:Macro.ImageViewer.InputManagement.MouseButtonMessage"/>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseButtonShortcut.#ctor(Macro.Desktop.XMouseButtons,Macro.Desktop.ModifierFlags)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseButtonShortcut.#ctor(Macro.Desktop.XMouseButtons,Macro.ImageViewer.InputManagement.Modifiers)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseButtonShortcut.#ctor(Macro.Desktop.XMouseButtons,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseButtonShortcut.#ctor(Macro.Desktop.XMouseButtons)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseButtonShortcut.Equals(System.Object)">
            <summary>
            Determines if this object instance is equal to another.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseButtonShortcut.Equals(Macro.ImageViewer.InputManagement.MouseButtonShortcut)">
            <summary>
            Gets whether or not this object is equal to <paramref name="other"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseButtonShortcut.Equals(Macro.Desktop.XMouseButtons)">
            <summary>
            Gets whether or not this object is equal to <paramref name="other"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseButtonShortcut.GetHashCode">
            <summary>
            Gets a hash code for this object instance.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseButtonShortcut.ToString">
            <summary>
            Gets a string describing this object instance.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.MouseButtonShortcut.MouseButton">
            <summary>
            Gets the currently depressed mouse button, if any.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.MouseButtonShortcut.Modifiers">
            <summary>
            Gets the current state of the modifier keys as a <see cref="P:Macro.ImageViewer.InputManagement.MouseButtonShortcut.Modifiers"/> object.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.MouseButtonShortcut.IsModified">
            <summary>
            Returns whether or not the shortcut is modified (any modifier keys pressed).
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.IPresentationImageFactory">
            <summary>
            Defines the factory methods for creating <see cref="T:Macro.ImageViewer.IPresentationImage"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.IPresentationImageFactory.SetStudyTree(Macro.ImageViewer.StudyManagement.StudyTree)">
            <summary>
            Sets the <see cref="T:Macro.ImageViewer.StudyManagement.StudyTree"/> to be used by the <see cref="T:Macro.ImageViewer.IPresentationImageFactory"/> when resolving referenced SOPs.
            </summary>
            <param name="studyTree">The <see cref="T:Macro.ImageViewer.StudyManagement.StudyTree"/> to be used for resolving referenced SOPs.</param>
        </member>
        <member name="M:Macro.ImageViewer.IPresentationImageFactory.CreateImages(Macro.ImageViewer.StudyManagement.Sop)">
            <summary>
            Creates the presentation images for a given image SOP.
            </summary>
            <param name="sop">The image SOP from which presentation images are to be created.</param>
            <returns>A list of created presentation images.</returns>
        </member>
        <member name="M:Macro.ImageViewer.IPresentationImageFactory.CreateImage(Macro.ImageViewer.StudyManagement.Frame)">
            <summary>
            Creates the presentation image for a given image frame.
            </summary>
            <param name="frame">The image frame from which a presentation image is to be created.</param>
            <returns>The created presentation image.</returns>
        </member>
        <member name="T:Macro.ImageViewer.PresentationImageFactory">
            <summary>
            A factory class which creates <see cref="T:Macro.ImageViewer.IPresentationImage"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationImageFactory.#ctor">
            <summary>
            Constructs a <see cref="T:Macro.ImageViewer.PresentationImageFactory"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationImageFactory.CreateImage(Macro.ImageViewer.StudyManagement.Frame)">
            <summary>
            Creates the presentation image for a given image frame.
            </summary>
            <param name="frame">The image frame from which a presentation image is to be created.</param>
            <returns>The created presentation image.</returns>
        </member>
        <member name="M:Macro.ImageViewer.PresentationImageFactory.CreateImages(Macro.ImageViewer.StudyManagement.ImageSop)">
            <summary>
            Creates the presentation images for a given image SOP.
            </summary>
            <param name="imageSop">The image SOP from which presentation images are to be created.</param>
            <returns>A list of created presentation images.</returns>
        </member>
        <member name="M:Macro.ImageViewer.PresentationImageFactory.CreateImages(Macro.ImageViewer.StudyManagement.Sop)">
            <summary>
            Creates the presentation images for a given image SOP.
            </summary>
            <param name="sop">The image SOP from which presentation images are to be created.</param>
            <returns>A list of created presentation images.</returns>
        </member>
        <member name="M:Macro.ImageViewer.PresentationImageFactory.CreateImages(Macro.Dicom.Iod.Iods.KeyObjectSelectionDocumentIod)">
            <summary>
            Creates the presentation images for a given key object selection document.
            </summary>
            <param name="keyObjectDocument">The key object selection document from which presentation images are to be created.</param>
            <returns>A list of created presentation images.</returns>
        </member>
        <member name="M:Macro.ImageViewer.PresentationImageFactory.Create(Macro.ImageViewer.StudyManagement.ImageSop)">
            <summary>
            Creates an appropriate subclass of <see cref="T:Macro.ImageViewer.BasicPresentationImage"/>
            for each <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/> in the input <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationImageFactory.Create(Macro.ImageViewer.StudyManagement.Frame)">
            <summary>
            Creates an appropriate subclass of <see cref="T:Macro.ImageViewer.BasicPresentationImage"/>
            based on the <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>'s photometric interpretation.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationImageFactory.StudyTree">
            <summary>
            Gets the <see cref="P:Macro.ImageViewer.PresentationImageFactory.StudyTree"/> used by the factory to resolve referenced SOPs.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.IModalityLutProvider">
            <summary>
            A provider of a modality lut.
            </summary>
            <remarks>
            Implementors should not return null from the <see cref="P:Macro.ImageViewer.Imaging.IModalityLutProvider.ModalityLut"/> property.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IModalityLutProvider.ModalityLut">
            <summary>
            Gets the modality lut owned by the provider.
            </summary>
            <remarks>
            This property should never return null.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.RoiTransformPolicy">
            <summary>
            Defines a <see cref="T:Macro.ImageViewer.Graphics.SpatialTransformValidationPolicy"/> for <see cref="T:Macro.ImageViewer.RoiGraphics.RoiGraphic"/>s.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.SpatialTransformValidationPolicy">
            <summary>
            Base class for validating <see cref="T:Macro.ImageViewer.Graphics.SpatialTransform"/> objects.
            </summary>
            <remarks>
            It is not always desirable to allow an <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> to be transformed
            in arbitrary ways.  For example, at present, images can only be rotated in
            90 degree increments.  This class allows a validation policy to be defined on a
            per graphic basis.  If validation fails, an <see cref="T:System.ArgumentException"/> is thrown.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.SpatialTransformValidationPolicy.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.SpatialTransformValidationPolicy"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.SpatialTransformValidationPolicy.Validate(Macro.ImageViewer.Graphics.ISpatialTransform)">
            <summary>
            Performs validation on the specified <see cref="T:Macro.ImageViewer.Graphics.ISpatialTransform"/>.
            </summary>
            <param name="transform"></param>
            <remarks>
            Implementors should throw an <see cref="T:System.ArgumentException"/> if validation fails.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiTransformPolicy.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiTransformPolicy.Validate(Macro.ImageViewer.Graphics.ISpatialTransform)">
            <summary>
            Performs validation on the specified <see cref="T:Macro.ImageViewer.Graphics.ISpatialTransform"/>.
            </summary>
            <param name="transform"></param>
            <remarks>
            At present, validation amounts to ensuring the rotation is always zero. 
            <see cref="T:Macro.ImageViewer.RoiGraphics.RoiGraphic"/>s are prohibited from being rotated
            because calculation of ROI related statistics, such as mean and standard deviation,
            currently only work with unrotated ROIs.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.SimpleDataLut">
            <summary>
            Abstract base class for <see cref="T:Macro.ImageViewer.Imaging.IDataLut"/>s whose size and data
            do not change.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.SimpleDataLut.#ctor(System.Int32,System.Int32[],System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.SimpleDataLut.#ctor(Macro.ImageViewer.Imaging.SimpleDataLut,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.SimpleDataLut.GetKey">
            <summary>
            Gets a string key that identifies this particular Lut's characteristics, so that 
            an image's <see cref="T:Macro.ImageViewer.Imaging.IComposedLut"/> can be more efficiently determined.
            </summary>
            <remarks>
            This method is not to be confused with <b>equality</b>, since some Luts can be
            dependent upon the actual image to which it belongs.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.SimpleDataLut.GetDescription">
            <summary>
            Gets an abbreviated description of the Lut.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.SimpleDataLut.MinOutputValue">
            <summary>
            Gets the minimum output value.
            </summary>
            <remarks>
            This value is constant and cannot be changed.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.SimpleDataLut.MaxOutputValue">
            <summary>
            Gets the maximum output value.
            </summary>
            <remarks>
            This value is constant and cannot be changed.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.SimpleDataLut.FirstMappedPixelValue">
            <summary>
            Gets the first mapped pixel value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.SimpleDataLut.LastMappedPixelValue">
            <summary>
            Gets the last mapped pixel value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.SimpleDataLut.Data">
            <summary>
            Gets the lut data.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.ArcPrimitive">
            <summary>
            A primitive arc graphic.
            </summary>
            <remarks>
            An arc is defined by a portion of the perimeter of an ellipse.
            The ellipse is defined by a bounding rectangle defined by the
            base class, <see cref="T:Macro.ImageViewer.Graphics.BoundableGraphic"/>.  The portion of the
            ellipse is defined by the <see cref="P:Macro.ImageViewer.Graphics.ArcPrimitive.StartAngle"/>
            and <see cref="P:Macro.ImageViewer.Graphics.ArcPrimitive.SweepAngle"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ArcPrimitive.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.ArcPrimitive"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ArcPrimitive.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit test on the <see cref="T:Macro.ImageViewer.Graphics.ArcPrimitive"/> at a given point.
            </summary>
            <param name="point">The mouse position in destination coordinates.</param>
            <returns>
            <b>True</b> if <paramref name="point"/> "hits" the <see cref="T:Macro.ImageViewer.Graphics.ArcPrimitive"/>,
            <b>false</b> otherwise.
            </returns>
            <remarks>
            A "hit" is defined as when the mouse position is <see cref="F:Macro.ImageViewer.Graphics.VectorGraphic.HitTestDistance"/>
            screen pixels away from any point on the arc.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ArcPrimitive.GetClosestPoint(System.Drawing.PointF)">
            <summary>
            Gets the point on the <see cref="T:Macro.ImageViewer.Graphics.ArcPrimitive"/> closest to the specified point.
            </summary>
            <param name="point">A point in either source or destination coordinates.</param>
            <returns>The point on the graphic closest to the given <paramref name="point"/>.</returns>
            <remarks>
            <para>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>,
            the computation will be carried out in either source
            or destination coordinates.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ArcPrimitive.Contains(System.Drawing.PointF)">
            <summary>
            Returns a value indicating whether the specified point is
            contained in the graphic.
            </summary>
            <param name="point"></param>
            <returns>Always returns <b>false</b>, since an arc cannot
            contain a point.</returns>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ArcPrimitive.StartAngle">
            <summary>
            Gets or sets the angle in degrees at which the arc begins.
            </summary>
            <remarks>
            It is good practice to set the <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.StartAngle"/> before the <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.SweepAngle"/>
            because in the case where a graphic is scaled differently in x than in y, the conversion
            of the <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.SweepAngle"/> from <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Source"/> to
            <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Destination"/> coordinates is dependent upon the <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.StartAngle"/>.
            However, under normal circumstances, where the scale in x and y are the same, the <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.StartAngle"/>
            and <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.SweepAngle"/> can be set independently.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ArcPrimitive.SweepAngle">
            <summary>
            Gets or sets the angle in degrees that the arc sweeps out.
            </summary>
            <remarks>
            See <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.StartAngle"/> for information on setting the <see cref="P:Macro.ImageViewer.Graphics.IArcGraphic.SweepAngle"/>.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.Analyzers.RoiAnalyzerExtensionPoint">
            <summary>
            Extension point for <see cref="T:Macro.ImageViewer.RoiGraphics.Analyzers.IRoiAnalyzer"/>s that are automatically discovered and invoked by the <see cref="T:Macro.ImageViewer.RoiGraphics.RoiCalloutGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Analyzers.RoiAnalyzerExtensionPoint.CreateRoiAnalyzers">
            <summary>
            Creates new instances of all available <see cref="T:Macro.ImageViewer.RoiGraphics.Analyzers.IRoiAnalyzer"/>s extending <see cref="T:Macro.ImageViewer.RoiGraphics.Analyzers.RoiAnalyzerExtensionPoint"/>.
            </summary>
            <returns>An enumeration of <see cref="T:Macro.ImageViewer.RoiGraphics.Analyzers.IRoiAnalyzer"/>s.</returns>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.Analyzers.RoiAnalysisMode">
            <summary>
            Enumerated values for the type of ROI analysis to perform.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.RoiGraphics.Analyzers.RoiAnalysisMode.Normal">
            <summary>
            Indicates that normal analysis should be performed.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.RoiGraphics.Analyzers.RoiAnalysisMode.Responsive">
            <summary>
            Indicates that the analysis is being performed in response to live changes, and that only fast analysis should be performed.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.Analyzers.IRoiAnalyzerResult">
            <summary>
            Result generated by Roi Analyzers
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Analyzers.IRoiAnalyzerResult.SerializedAsString">
            <summary>
            Converts the result into a string
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.Analyzers.IRoiAnalyzerResult.Name">
            <summary>
            Name of the result (eg, Area)
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.Analyzers.IRoiAnalyzerResult.Value">
            <summary>
            The raw value
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.Analyzers.RoiAnalyzerResultBase.Name">
            <summary>
            Name of the result (eg, Area, StdDev)
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.Analyzers.SingleValueRoiAnalyzerResult">
            <summary>
            Special class of analyzing results which have a signle value
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.Analyzers.RoiAnalyzerResultNoValue">
            <summary>
            Special class of analyzing results which have no value and unit, usually because of an error
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.Analyzers.MultiValueRoiAnalyzerResult">
            <summary>
            Special class of analyzing results which contains multiple values
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.Analyzers.IRoiAnalyzer">
            <summary>
            Interface for all ROI analyzers.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Analyzers.IRoiAnalyzer.SupportsRoi(Macro.ImageViewer.RoiGraphics.Roi)">
            <summary>
            Checks if this analyzer class can analyze the given ROI.
            </summary>
            <remarks>
            Implementations should return a result based on the type of ROI, not on the particular current state of the ROI.
            </remarks>
            <param name="roi">The ROI to analyze.</param>
            <returns>True if this class can analyze the given ROI; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Analyzers.IRoiAnalyzer.Analyze(Macro.ImageViewer.RoiGraphics.Roi,Macro.ImageViewer.RoiGraphics.Analyzers.RoiAnalysisMode)">
            <summary>
            Analyzes the given ROI.
            </summary>
            <param name="roi">The ROI being analyzed.</param>
            <param name="mode"></param>
            <returns><see cref="T:Macro.ImageViewer.RoiGraphics.Analyzers.IRoiAnalyzerResult"/> containing the analysis result, if one is proceduced.</returns>
            <remarks>
            The other overload returns the same information in a formatted string.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.Analyzers.IRoiAnalyzer.Units">
            <summary>
            Gets or sets the base unit of measurement in which analysis is performed.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.PresentationStateGraphic">
            <summary>
            The graphic at the root of the scene graph that handles deserializing of the image's presentation state.
            </summary>
            <remarks>
            <para>
            <see cref="T:Macro.ImageViewer.IPresentationImage"/>s can insert this graphic at the root of the scene graphic <i>before</i>
            the <see cref="T:Macro.ImageViewer.Graphics.ImageGraphic"/> and other <see cref="T:Macro.ImageViewer.Graphics.CompositeGraphic"/>s in order to give the
            presentation state a first chance to set up the display and other graphics further down the scene graph
            before it is drawn for the first time.
            </para>
            <para>
            The presentation state is only deserialized on the first draw after construction or after the
            <see cref="P:Macro.ImageViewer.PresentationStates.PresentationStateGraphic.PresentationState"/> property changes.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.PresentationStateGraphic.#ctor">
            <summary>
            Constructs a new presentation state graphic.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.PresentationStateGraphic.#ctor(Macro.ImageViewer.PresentationStates.PresentationState)">
            <summary>
            Constructs a new presentation state graphic with the given initial presentation state.
            </summary>
            <param name="presentationState">The initial presentation state.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.PresentationStateGraphic.Reset">
            <summary>
            Resets the graphic so that the presentation state will be deserialized on the next <see cref="M:Macro.ImageViewer.IDrawable.Draw"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.PresentationStateGraphic.HitTest(System.Drawing.Point)">
            <summary>
            This method doesn't apply to this class.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.PresentationStateGraphic.Move(System.Drawing.SizeF)">
            <summary>
            This method doesn't apply to this class.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.PresentationStateGraphic.OnPresentationStateChanged">
            <summary>
            Called when the value of <see cref="P:Macro.ImageViewer.PresentationStates.PresentationStateGraphic.PresentationState"/> changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.PresentationStateGraphic.OnDrawing">
            <summary>
            Fires the <see cref="E:Macro.ImageViewer.Graphics.Graphic.Drawing"/> event.  Should be called by an <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/>
            for each object just before it is drawn/rendered, hence the reason it is public.
            </summary>
            <remarks>
            When this graphic is drawn, the <see cref="P:Macro.ImageViewer.PresentationStates.PresentationStateGraphic.PresentationState"/> is deserialized. Any exceptions are caught
            and drawn to an exception text graphic placed at the <see cref="T:Macro.ImageViewer.Graphics.IApplicationGraphicsProvider">application-level</see>,
            if available. If no such in-grahic exception reporting mechanism is available, then the exception is thrown and
            the renderer will handle it according to its specific implementation.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.PresentationStateGraphic.PresentationState">
            <summary>
            Gets or sets the presentation state.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.PresentationStateGraphic.Applied">
            <summary>
            Gets a value indicating if the presentation state has been deserialized to the image yet.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.PresentationStateGraphic.ExceptionGraphic.#ctor(Macro.ImageViewer.PresentationStates.PresentationStateGraphic.ExceptionGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.VisualStateChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Macro.ImageViewer.Graphics.IGraphic.VisualStateChanged"/> event raised
            when a property is changed on a graphic, resulting in a change in the graphic's visual state.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Macro.ImageViewer.Graphics.VisualStateChangedEventArgs"/> that contains the event data. </param>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.VisualStateChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Macro.ImageViewer.Graphics.IGraphic.VisualStateChanged"/> event. 
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Graphics.VisualStateChangedEventArgs.Graphic">
            <summary>
            Gets the graphic whose visual state changed.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.VisualStateChangedEventArgs.#ctor(Macro.ImageViewer.Graphics.IGraphic,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Macro.ImageViewer.Graphics.VisualStateChangedEventArgs"/> class. 
            </summary>
            <param name="graphic">The graphic whose visual state changed.</param>
            <param name="propertyName">The name of the property that changed. </param>
        </member>
        <member name="M:Macro.ImageViewer.Layout.IHpPropertyEditContext.ShowModalEditor(Macro.Desktop.IApplicationComponent)">
            <summary>
            Launches the specified editor component as a modal dialog.
            </summary>
            <param name="editorComponent"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.ImageViewer.Layout.IHpProperty">
            <summary>
            Defines the interface to a single HP "property", displayed in one of the HP editor property tables.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Layout.IHpProperty.EditProperty(Macro.ImageViewer.Layout.IHpPropertyEditContext)">
            <summary>
            Called to invoke custom editing of this property, if <see cref="P:Macro.ImageViewer.Layout.IHpProperty.HasEditor"/> returns true. 
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Macro.ImageViewer.Layout.IHpProperty.Type">
            <summary>
            The type of the underlying property.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.IHpProperty.DisplayName">
            <summary>
            Gets the display name of this property for display in the user-interface.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.IHpProperty.Description">
            <summary>
            Gets the description of this property for display in the user-interface.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.IHpProperty.Category">
            <summary>
            Gets the category of this property for display in the user-interface.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.IHpProperty.Converter">
            <summary>
            Gets the type converter for this property, or null if this property does not require a custom converter.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.IHpProperty.CanSetValue">
            <summary>
            Gets whether or not <see cref="P:Macro.ImageViewer.Layout.IHpProperty.Value"/> can be set.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.IHpProperty.Value">
            <summary>
            Gets the value for this property.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.IHpProperty.HasEditor">
            <summary>
            Gets a value indicating whether this property can be edited by a custom dialog box.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.NamedVoiLutLinear.GetWindowWidth">
            <summary>
            Gets the <see cref="P:Macro.ImageViewer.Imaging.NamedVoiLutLinear.WindowWidth"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.NamedVoiLutLinear.GetWindowCenter">
            <summary>
            Gets the <see cref="P:Macro.ImageViewer.Imaging.NamedVoiLutLinear.WindowCenter"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.MouseToolSettings.DefaultProfile">
            <summary>
            User preferences for mouse tools, such as mouse button assignments and whether or not to automatically select the tool when the viewer first opens.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.MouseToolSettings.ShowMouseButtonIconOverlay">
            <summary>
            Specifies whether or not to show the mouse button assignment in the tool&apos;s icon.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Annotations.Dicom.ResultFormatterDelegate`1">
            <summary>
            A delegate used to format data of type <typeparamref name="T"/> as a string.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Annotations.Dicom.DicomDataFormatHelper">
            <summary>
            A Helper class providing standard methods (<see cref="T:Macro.ImageViewer.Annotations.Dicom.ResultFormatterDelegate`1"/>) 
            for formatting various types of Dicom tag data for display on the screen.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.Dicom.DicomDataFormatHelper.RawStringFormat(System.String)">
            <summary>
            Returns the input value, unchanged.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.Dicom.DicomDataFormatHelper.StringListFormat(System.String[])">
            <summary>
            Returns the input values combined into a single string, separated by ",\n".
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.Dicom.DicomDataFormatHelper.DateFormat(System.String)">
            <summary>
            Returns the input value formatted according to <see cref="P:Macro.Desktop.Format.DateFormat"/>.
            </summary>
            <param name="input">A date value taken from a Dicom Header.</param>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.Dicom.DicomDataFormatHelper.TimeFormat(System.String)">
            <summary>
            Returns the input value formatted according to <see cref="P:Macro.Desktop.Format.TimeFormat"/>.
            </summary>
            <param name="input">A time value taken from a Dicom Header.</param>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.Dicom.DicomDataFormatHelper.DateTimeFormat(System.String)">
            <summary>
            Returns the input value formatted according to <see cref="P:Macro.Desktop.Format.DateTimeFormat"/>.
            </summary>
            <param name="input">A date/time value taken from a Dicom Header.</param>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.Dicom.DicomDataFormatHelper.BooleanFormatter(System.String)">
            <summary>
            Returns <see cref="P:Macro.ImageViewer.SR.BoolNo"/> if the input value converts to a byte value of zero, otherwise <see cref="P:Macro.ImageViewer.SR.BoolYes"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.Dicom.DicomDataFormatHelper.PersonNameFormatter(Macro.Dicom.Iod.PersonName)">
            <summary>
            Returns the <see cref="P:Macro.Dicom.Iod.PersonName.FormattedName"/> property of the input <see cref="T:Macro.Dicom.Iod.PersonName"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.Dicom.DicomDataFormatHelper.PersonNameListFormatter(System.Collections.Generic.IEnumerable{Macro.Dicom.Iod.PersonName})">
            <summary>
            Returns the <see cref="P:Macro.Dicom.Iod.PersonName.FormattedName"/> property of each input value, separated by ",\n".
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.TileViewExtensionPoint">
            <summary>
            Extension point for views onto <see cref="T:Macro.ImageViewer.Tile"/>
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Tile">
            <summary>
            TileComponent class
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.ITile">
            <summary>
            Defines a container for a single <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ITile.Select">
            <summary>
            Selects the <see cref="T:Macro.ImageViewer.ITile"/>.
            </summary>
            <remarks>
            Selecting a <see cref="T:Macro.ImageViewer.ITile"/> also selects the containing <see cref="T:Macro.ImageViewer.IImageBox"/>
            and deselects any other currently seleccted <see cref="T:Macro.ImageViewer.ITile"/> 
            and <see cref="T:Macro.ImageViewer.IImageBox"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.ITile.ShowContextMenu(System.Nullable{System.Drawing.Point},Macro.Desktop.Actions.ActionModelNode)">
            <summary>
            Invokes a context menu showing the given <paramref name="actionModel"/>, at the given point in the tile.
            </summary>
            <param name="tileLocation">If provided, this is the point where the context menu is shown. Otherwise, the
            current mouse position within the tile is used.</param>
            <param name="actionModel">If provided, this is the action model shown in the context menu. Otherwise, it's
            the action model of the the graphic at the given location.</param>
        </member>
        <member name="P:Macro.ImageViewer.ITile.ImageViewer">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
            <value>The associated <see cref="T:Macro.ImageViewer.IImageViewer"/> or <b>null</b> if the 
            <see cref="T:Macro.ImageViewer.ITile"/> is not part of the 
            physical workspace yet.</value>
        </member>
        <member name="P:Macro.ImageViewer.ITile.ParentImageBox">
            <summary>
            Gets the parent <see cref="T:Macro.ImageViewer.IImageBox"/>
            </summary>
            <value>The parent <see cref="T:Macro.ImageViewer.IImageBox"/> or <b>null</b> if the 
            <see cref="T:Macro.ImageViewer.ITile"/> has not
            been added to the <see cref="T:Macro.ImageViewer.IImageBox"/> yet.</value>
        </member>
        <member name="P:Macro.ImageViewer.ITile.PresentationImage">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.IPresentationImage"/> associated with this
            <see cref="T:Macro.ImageViewer.ITile"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ITile.NormalizedRectangle">
            <summary>
            Gets this <see cref="T:Macro.ImageViewer.ITile"/>'s normalized rectangle.
            </summary>
            <remarks>
            Normalized coordinates specify the top-left corner,
            width and height of the <see cref="T:Macro.ImageViewer.ITile"/> as a 
            fraction of the image box.  For example, if the
            <see cref="P:Macro.ImageViewer.ITile.NormalizedRectangle"/> is (left=0.25, top=0.0, width=0.5, height=0.5) 
            and the image box has dimensions of (width=1000, height=800), the 
            <see cref="T:Macro.ImageViewer.ITile"/> rectangle would be (left=250, top=0, width=500, height=400)
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.ITile.ClientRectangle">
            <summary>
            Gets this <see cref="T:Macro.ImageViewer.ITile"/>'s client rectangle.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ITile.PresentationImageIndex">
            <summary>
            Gets the presentation image index.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ITile.Selected">
            <summary>
            Gets a value indicating whether this <see cref="T:Macro.ImageViewer.ITile"/> is
            selected.
            </summary>
            <remarks>
            <see cref="T:Macro.ImageViewer.ITile"/> selection is mutually exclusive.  That is,
            only one <see cref="T:Macro.ImageViewer.ITile"/> is ever selected at a given time.  
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.ITile.Enabled">
            <summary>
            Gets or sets whether the tile is currently enabled.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ITile.InformationBox">
            <summary>
            Gets or sets this <see cref="T:Macro.ImageViewer.ITile"/>'s <see cref="T:Macro.ImageViewer.InformationBox">InformationBox</see>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ITile.EditBox">
            <summary>
            Gets or sets this <see cref="T:Macro.ImageViewer.ITile"/>'s <see cref="T:Macro.ImageViewer.EditBox">EditBox</see>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ITile.ExtensionData">
            <summary>
            A place for extensions to store custom data about the tile.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.ITile.InformationBoxChanged">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.ITile.InformationBox"/> property has changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.ITile.EditBoxChanged">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.ITile.EditBox"/> property has changed.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Tile.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Tile.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.Tile"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Tile.Dispose(System.Boolean)">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern
            </summary>
            <param name="disposing">True if this object is being disposed, false if it is being finalized</param>
        </member>
        <member name="M:Macro.ImageViewer.Tile.Select">
            <summary>
            Selects the <see cref="T:Macro.ImageViewer.Tile"/>.
            </summary>
            <remarks>
            Selecting a <see cref="T:Macro.ImageViewer.Tile"/> also selects the containing <see cref="T:Macro.ImageViewer.ImageBox"/>
            and deselects any other currently seleccted <see cref="T:Macro.ImageViewer.Tile"/> 
            and <see cref="T:Macro.ImageViewer.ImageBox"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Tile.Draw">
            <summary>
            Draws the <see cref="P:Macro.ImageViewer.Tile.PresentationImage"/> in this <see cref="T:Macro.ImageViewer.Tile"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Tile.Draw(Macro.ImageViewer.Rendering.DrawArgs)">
            <summary>
            Draws the <see cref="P:Macro.ImageViewer.Tile.PresentationImage"/> in this <see cref="T:Macro.ImageViewer.Tile"/>.
            </summary>
            <param name="drawArgs"></param>
            <remarks>This is called by the GUI control associated with this
            component.  Never call this method directly.  Instead, use
            <see cref="M:Macro.ImageViewer.Tile.Draw"/>.</remarks>
            <exception cref="T:Macro.ImageViewer.Rendering.RenderingException">Thrown if any <see cref="T:System.Exception"/> is encountered while rendering the image.</exception>
        </member>
        <member name="P:Macro.ImageViewer.Tile.ImageViewer">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
            <value>The associated <see cref="T:Macro.ImageViewer.IImageViewer"/> or <b>null</b> if the 
            <see cref="T:Macro.ImageViewer.Tile"/> is not part of the 
            physical workspace yet.</value>
        </member>
        <member name="P:Macro.ImageViewer.Tile.ParentImageBox">
            <summary>
            Gets the parent <see cref="T:Macro.ImageViewer.IImageBox"/>
            </summary>
            <value>The parent <see cref="T:Macro.ImageViewer.IImageBox"/> or <b>null</b> if the 
            <see cref="T:Macro.ImageViewer.Tile"/> has not
            been added to the <see cref="T:Macro.ImageViewer.IImageBox"/> yet.</value>
        </member>
        <member name="P:Macro.ImageViewer.Tile.PresentationImage">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.IPresentationImage"/> associated with this
            <see cref="T:Macro.ImageViewer.Tile"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Tile.PresentationImageIndex">
            <summary>
            Gets the presentation image index.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Tile.Enabled">
            <summary>
            Gets or sets whether the tile is currently enabled.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Tile.Selected">
            <summary>
            Gets a value indicating whether this <see cref="T:Macro.ImageViewer.Tile"/> is
            selected.
            </summary>
            <remarks>
            <see cref="T:Macro.ImageViewer.Tile"/> selection is mutually exclusive.  That is,
            only one <see cref="T:Macro.ImageViewer.Tile"/> is ever selected at a given time.  
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Tile.SelectedColor">
            <summary>
            Gets or sets the colour of the border when the tile
            is selected.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Tile.UnselectedColor">
            <summary>
            Gets or sets the colour of the border when the tile
            is not selected.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Tile.BorderColor">
            <summary>
            Gets the current border colour.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Tile.BorderWidth">
            <summary>
            Gets or sets the width of the border in pixels.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Tile.InsetWidth">
            <summary>
            Gets or sets the inset width of the border in pixels.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Tile.NormalizedRectangle">
            <summary>
            Gets this <see cref="T:Macro.ImageViewer.Tile"/>'s normalized rectangle.
            </summary>
            <remarks>
            Normalized coordinates specify the top-left corner,
            width and height of the <see cref="T:Macro.ImageViewer.Tile"/> as a 
            fraction of the image box.  For example, if the
            <see cref="P:Macro.ImageViewer.Tile.NormalizedRectangle"/> is (left=0.25, top=0.0, width=0.5, height=0.5) 
            and the image box has dimensions of (width=1000, height=800), the 
            <see cref="T:Macro.ImageViewer.Tile"/> rectangle would be (left=250, top=0, width=500, height=400)
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Tile.ClientRectangle">
            <summary>
            Gets this <see cref="T:Macro.ImageViewer.Tile"/>'s client rectangle.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Tile.InformationBox">
            <summary>
            Gets or sets this <see cref="T:Macro.ImageViewer.Tile"/>'s <see cref="T:Macro.ImageViewer.InformationBox">InformationBox</see>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Tile.EditBox">
            <summary>
            Gets or sets this <see cref="T:Macro.ImageViewer.Tile"/>'s <see cref="T:Macro.ImageViewer.EditBox">EditBox</see>.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Tile.RendererChanged">
            <summary>
            Occurs when the <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/> of a new 
            <see cref="P:Macro.ImageViewer.Tile.PresentationImage"/> is different from that of 
            the previous <see cref="P:Macro.ImageViewer.Tile.PresentationImage"/> that occupied this
            <see cref="T:Macro.ImageViewer.Tile"/>.
            </summary>
            <remarks>
            <para>
            When a different <see cref="T:Macro.ImageViewer.IPresentationImage"/> occupies this
            <see cref="T:Macro.ImageViewer.Tile"/>, it's possible that the image renderer maybe different
            as well and the view needs to know this.
            </para>
            <para>
            For internal Framework use only.
            </para>
            </remarks>
        </member>
        <member name="E:Macro.ImageViewer.Tile.Drawing">
            <summary>
            Occurs when the <see cref="T:Macro.ImageViewer.Tile"/> is about to be drawn.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Tile.SelectionChanged">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.Tile.Selected"/> property has changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Tile.PresentationImageChanged">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.Tile.PresentationImage"/> property has changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Tile.InformationBoxChanged">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.Tile.InformationBox"/> property has changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Tile.EditBoxChanged">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.Tile.EditBox"/> property has changed.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Mathematics.Vector">
            <summary>
            A collection vector related methods.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector.SubtendedAngle(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Calculates the angle subtended by two line segments that meet at a vertex.
            </summary>
            <param name="start">The end of one of the line segments.</param>
            <param name="vertex">The vertex of the angle formed by the two line segments.</param>
            <param name="end">The end of the other line segment.</param>
            <returns>The angle subtended by the two line segments in degrees.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector.Distance(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Calculates the distance between two points.
            </summary>
            <param name="pt1">One end of the distance to be computed.</param>
            <param name="pt2">The other end of the distance to be computed.</param>
            <returns>The distance between the two points.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector.Midpoint(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Finds the midpoint between two points.
            </summary>
            <param name="pt1">One end of the span.</param>
            <param name="pt2">The other end of the span.</param>
            <returns>The midpoint between the two points.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector.CreateUnitVector(System.Drawing.PointF)">
            <summary>
            Computes the unit vector of the vector defined by <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector given as a point relative to the origin.</param>
            <returns>The unit vector in the same direction as the given vector.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="vector"/> is equal to the origin.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector.CreateUnitVector(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Computes the unit vector of the vector defined by <paramref name="startingPoint"/> to <paramref name="endingPoint"/>.
            </summary>
            <param name="startingPoint">The starting point of the vector.</param>
            <param name="endingPoint">The ending point of the vector.</param>
            <returns>The unit vector in the same direction as the given vector.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="startingPoint"/> is equal to <paramref name="endingPoint"/>.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector.DistanceFromPointToLine(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            Calculates the shortest distance from a point to a line segment.
            </summary>
            <param name="ptTest">Point to be tested.</param>
            <param name="pt1">One end of the line segment.</param>
            <param name="pt2">The other end of the line segement.</param>
            <param name="ptNearest">Returns the point on the line segment nearest to the <paramref name="ptTest">test point</paramref>.</param>
            <returns>The distance from the <paramref name="ptTest">test point</paramref> to the <paramref name="ptNearest">nearest point</paramref> on the line segment.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector.LineSegmentIntersection(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            Determines whether two line segments intersect, do not intersect or are colinear.
            </summary>
            <remarks>
            This function used to perform unwarranted rounding of the intersection point.
            It has now been rewritten to take advantage of <see cref="M:Macro.ImageViewer.Mathematics.Vector.IntersectLineSegments(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)"/> and
            <see cref="M:Macro.ImageViewer.Mathematics.Vector.AreColinear(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)"/>, which do not perform any automatic rounding of the intersection.
            </remarks>
            <param name="p1">One endpoint of one line segment.</param>
            <param name="p2">The other endpoint of one line segment.</param>
            <param name="q1">One endpoint of the other line segment.</param>
            <param name="q2">The other endpoint of the other line segment.</param>
            <param name="intersectionPoint">The intersection between the two line segments, if a solution exists.</param>
            <returns>A value indicating whether the two line segments are colinear, intersect, or do not intersect.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector.IntersectLineSegments(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            Computes the intersection between two line segments, if a solution exists.
            </summary>
            <param name="p1">One endpoint of one line segment.</param>
            <param name="p2">The other endpoint of one line segment.</param>
            <param name="q1">One endpoint of the other line segment.</param>
            <param name="q2">The other endpoint of the other line segment.</param>
            <param name="intersection">The intersection between the two line segments, if a solution exists.</param>
            <returns>True if the intersection exists; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector.IntersectLines(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            Computes the intersection between two lines, if a solution exists.
            </summary>
            <param name="p1">One endpoint of one line.</param>
            <param name="p2">The other endpoint of one line.</param>
            <param name="q1">One endpoint of the other line.</param>
            <param name="q2">The other endpoint of the other line.</param>
            <param name="intersection">The intersection between the two lines, if a solution exists.</param>
            <returns>True if the intersection exists and is distinct; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector.AreParallel(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Determines whether or not two lines are parallel.
            </summary>
            <param name="p1">One endpoint of one line.</param>
            <param name="p2">The other endpoint of one line.</param>
            <param name="q1">One endpoint of the other line.</param>
            <param name="q2">The other endpoint of the other line.</param>
            <returns>True if the lines are parallel; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector.AreColinear(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Determines whether or not two lines are colinear.
            </summary>
            <remarks>
            Colinearity here is defined as whether or not you can draw a single line through all given points.
            This definition is used because it explicitly provides for classification of degenerate cases
            where one or both &quot;lines&quot; are actually coincident points.
            </remarks>
            <param name="p1">One endpoint of one line.</param>
            <param name="p2">The other endpoint of one line.</param>
            <param name="q1">One endpoint of the other line.</param>
            <param name="q2">The other endpoint of the other line.</param>
            <returns>True if the lines are colinear; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector.CalculatePositionDelta(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Computes the difference between two points as a delta offset.
            </summary>
            <param name="previousPosition">The point from which the offset is to be computed.</param>
            <param name="currentPosition">The point to which the offset is to be computed.</param>
            <returns>The offset to get from <paramref name="previousPosition"/> to <paramref name="currentPosition"/>.</returns>
        </member>
        <member name="T:Macro.ImageViewer.Mathematics.Vector.LineSegments">
            <summary>
            Possible arrangements of two line segments.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Mathematics.Vector.LineSegments.DoNotIntersect">
            <summary>
            The line segments do not interesect.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Mathematics.Vector.LineSegments.Intersect">
            <summary>
            The line segments intersect.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Mathematics.Vector.LineSegments.Colinear">
            <summary>
            The line segments are colinear.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.DicomMessageSopDataSource">
            <summary>
            An implementation of a <see cref="T:Macro.ImageViewer.StudyManagement.StandardSopDataSource"/> where a <see cref="T:Macro.Dicom.DicomMessageBase"/>
            provides all the SOP instance data.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.StandardSopDataSource">
            <summary>
            Base implementation of a <see cref="T:Macro.ImageViewer.StudyManagement.SopDataSource"/> with built-in resource management.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.SopDataSource">
            <summary>
            Abstract base implementation of an <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.SopDataSource.#ctor">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.StudyManagement.SopDataSource"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.SopDataSource.Macro#ImageViewer#StudyManagement#ISopDataSource#GetFrameData(System.Int32)">
            <summary>
            Gets the data for a particular frame in the SOP instance, if it is an image.
            </summary>
            <param name="frameNumber">The 1-based number of the frame for which the data is to be retrieved.</param>
            <returns>An <see cref="T:Macro.ImageViewer.StudyManagement.ISopFrameData"/> containing frame-specific data.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if this <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> is not an image
            (e.g. <see cref="P:Macro.ImageViewer.StudyManagement.ISopDataSource.IsImage"/> returns false).</exception>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.SopDataSource.CheckIsImage">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the SOP instance is not an image.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the SOP instance is not an image.</exception>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.SopDataSource.GetFrameData(System.Int32)">
            <summary>
            Gets the data for a particular frame in the SOP instance.
            </summary>
            <param name="frameNumber">The 1-based number of the frame for which the data is to be retrieved.</param>
            <returns>An <see cref="T:Macro.ImageViewer.StudyManagement.ISopFrameData"/> containing frame-specific data.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.SopDataSource.TryGetAttribute(Macro.Dicom.DicomTag,Macro.Dicom.DicomAttribute@)">
            <summary>
            Attempts to get the attribute specified by <paramref name="tag"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.SopDataSource.TryGetAttribute(System.UInt32,Macro.Dicom.DicomAttribute@)">
            <summary>
            Attempts to get the attribute specified by <paramref name="tag"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.SopDataSource.Dispose(System.Boolean)">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern.
            </summary>
            <param name="disposing">A value indicating whether or not the object is being disposed.</param>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.SopDataSource.Dispose">
            <summary>
            Releases resources owned by this <see cref="T:Macro.ImageViewer.StudyManagement.SopDataSource"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SopDataSource.PatientId">
            <summary>
            Gets the Patient ID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SopDataSource.StudyInstanceUid">
            <summary>
            Gets the study instance UID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SopDataSource.SeriesInstanceUid">
            <summary>
            Gets the series instance UID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SopDataSource.SopInstanceUid">
            <summary>
            Gets the SOP instance UID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SopDataSource.SopClassUid">
            <summary>
            Gets the SOP class UID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SopDataSource.TransferSyntaxUid">
            <summary>
            Gets the transfer syntax UID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SopDataSource.InstanceNumber">
            <summary>
            Gets the instance number.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SopDataSource.IsStored">
            <summary>
            Gets a value indicating whether or not the SOP instance is 'stored',
            for example in the local store or on a remote PACS server.
            </summary>
            <remarks>
            This would normally be used to determine whether an <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource">data source</see>
            is one that is generated and only exists in memory, as the treatment of such a sop
            might be different in some cases.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SopDataSource.IsImage">
            <summary>
            Gets a value indicating whether or not the SOP instance is an image.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SopDataSource.NumberOfFrames">
            <summary>
            Gets the number of frames in this SOP instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the SOP instance is not an image.</exception>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SopDataSource.Item(Macro.Dicom.DicomTag)">
            <summary>
            Gets the <see cref="T:Macro.Dicom.DicomAttribute"/> for the given tag.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SopDataSource.Item(System.UInt32)">
            <summary>
            Gets the <see cref="T:Macro.Dicom.DicomAttribute"/> for the given tag.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SopDataSource.Macro#Dicom#IDicomAttributeProvider#Item(Macro.Dicom.DicomTag)">
            <summary>
            Gets the <see cref="T:Macro.Dicom.DicomAttribute"/> for the given tag.
            </summary>
            <exception cref="T:System.NotSupportedException">If the setter is accessed.</exception>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SopDataSource.Macro#Dicom#IDicomAttributeProvider#Item(System.UInt32)">
            <summary>
            Gets the <see cref="T:Macro.Dicom.DicomAttribute"/> for the given tag.
            </summary>
            <exception cref="T:System.NotSupportedException">If the setter is accessed.</exception>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.StandardSopDataSource.SyncLock">
            <summary>
            Gets a lock object suitable for synchronizing access to the data source.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StandardSopDataSource.#ctor">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.StudyManagement.StandardSopDataSource"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StandardSopDataSource.CreateFrameData(System.Int32)">
            <summary>
            Called by the base class to create a new <see cref="T:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData"/> containing the data for a particular frame in the SOP instance.
            </summary>
            <param name="frameNumber">The 1-based number of the frame for which the data is to be retrieved.</param>
            <returns>A new <see cref="T:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData"/> containing the data for a particular frame in the SOP instance.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StandardSopDataSource.GetFrameData(System.Int32)">
            <summary>
            Gets the data for a particular frame in the SOP instance.
            </summary>
            <param name="frameNumber">The 1-based number of the frame for which the data is to be retrieved.</param>
            <returns>An <see cref="T:Macro.ImageViewer.StudyManagement.ISopFrameData"/> containing frame-specific data.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StandardSopDataSource.Dispose(System.Boolean)">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern.
            </summary>
            <param name="disposing">A value indicating whether or not the object is being disposed.</param>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.StandardSopDataSource.IsImage">
            <summary>
            Gets a value indicating whether or not the SOP instance is an image.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData">
            <summary>
            Base implementation of a <see cref="T:Macro.ImageViewer.StudyManagement.SopFrameData"/> with built-in resource mamangement.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData.SyncLock">
            <summary>
            Gets a lock object suitable for synchronizing access to the frame data.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData.#ctor(System.Int32,Macro.ImageViewer.StudyManagement.StandardSopDataSource)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData"/>
            </summary>
            <param name="frameNumber">The 1-based number of this frame.</param>
            <param name="parent">The parent <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> that this frame belongs to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="parent"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="frameNumber"/> is zero or negative.</exception>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData.#ctor(System.Int32,Macro.ImageViewer.StudyManagement.StandardSopDataSource,Macro.ImageViewer.Common.RegenerationCost)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData"/>.
            </summary>
            <param name="frameNumber">The 1-based number of this frame.</param>
            <param name="parent">The parent <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> that this frame belongs to.</param>
            <param name="regenerationCost">The approximate cost to regenerate the pixel and/or overlay data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="parent"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="frameNumber"/> is zero or negative.</exception>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData.GetNormalizedPixelData">
            <summary>
            Gets pixel data in normalized form (8 or 16-bit grayscale, or ARGB).
            </summary>
            <returns></returns>
            <remarks>
            <i>Normalized</i> pixel data means that:
            <list type="Bullet">
            <item>
            <description>Grayscale pixel data has embedded overlays removed and each pixel value
            is padded so that it can be cast directly to the appropriate type (e.g. byte, sbyte, ushort, short).</description>
            </item>
            <item>
            <description>Colour pixel data is always converted into ARGB format.</description>
            </item>
            <item>
            <description>Pixel data is always uncompressed.</description>
            </item>
            </list>
            <para>
            Ensuring that the pixel data always meets the above criteria
            allows clients to easily consume pixel data without having
            to worry about the the multitude of DICOM photometric interpretations
            and transfer syntaxes.
            </para>
            <para>
            Pixel data is reloaded when this method is called after a 
            call to <see cref="M:Macro.ImageViewer.StudyManagement.ISopFrameData.Unload"/>.
            </para>
            </remarks>		
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData.CreateNormalizedPixelData">
            <summary>
            Called by <see cref="M:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData.GetNormalizedPixelData"/> to create a new byte buffer
            containing normalized pixel data for this frame (8 or 16-bit grayscale, or 32-bit ARGB).
            </summary>
            <remarks>
            See <see cref="M:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData.GetNormalizedPixelData"/> for details on the expected format of the byte buffer.
            </remarks>
            <returns>A new byte buffer containing the normalized pixel data.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData.GetNormalizedOverlayData(System.Int32)">
            <summary>
            Gets the normalized overlay data buffer for a particular overlay group (8-bit grayscale).
            </summary>
            <remarks>
            <para>
            <i>Normalized</i> overlay data means that the 1-bit overlay pixel data is extracted and
            unpacked as necessary to form an 8-bit-per-pixel buffer with values of either 0 or 255.
            </para>
            <para>
            Ensuring that the overlay data always meets the above criteria allows clients to easily
            consume overlay data without having to worry about the storage of overlay data, whether
            embedded in unused bits of the pixel data or in a separate packed bits buffer.
            </para>
            <para>
            Overlay data is reloaded when this method is called after a call to <see cref="M:Macro.ImageViewer.StudyManagement.ISopFrameData.Unload"/>.
            The pixel data will also be reloaded if this method is called before
            <see cref="M:Macro.ImageViewer.StudyManagement.ISopFrameData.GetNormalizedPixelData"/> and there are overlays stored in unused bits of the
            pixel data.
            </para>
            </remarks>
            <param name="overlayNumber">The 1-based overlay plane number.</param>
            <returns>A byte buffer containing the normalized overlay pixel data.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="overlayNumber"/> is not a positive non-zero number.</exception>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData.CreateNormalizedOverlayData(System.Int32)">
            <summary>
            Called by <see cref="M:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData.GetNormalizedOverlayData(System.Int32)"/> to create a new byte buffer containing normalized 
            overlay pixel data for a particular overlay plane.
            </summary>
            <remarks>
            See <see cref="M:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData.GetNormalizedOverlayData(System.Int32)"/> for details on the expected format of the byte buffer.
            </remarks>
            <param name="overlayNumber">The 1-based overlay plane number.</param>
            <returns>A new byte buffer containing the normalized overlay pixel data.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData.Unload">
            <summary>
            Unloads any cached byte buffers owned by this <see cref="T:Macro.ImageViewer.StudyManagement.ISopFrameData"/>.
            </summary>
            <remarks>
            It is sometimes necessary to manage the memory used by unloading the pixel data. 
            Calling this method will not necessarily result in an immediate decrease in memory
            usage, since it merely releases the reference to the pixel data; it is up to the
            garbage collector to free the memory.  Calling <see cref="M:Macro.ImageViewer.StudyManagement.ISopFrameData.GetNormalizedPixelData"/>
            will reload the pixel data.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData.OnUnloaded">
            <summary>
            Called by the base class when the cached byte buffers are being unloaded.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData.Dispose(System.Boolean)">
            <summary>
            Called by the base <see cref="T:Macro.ImageViewer.StudyManagement.SopFrameData"/> to release any owned resources.
            </summary>
            <param name="disposing">A value indicating whether or not the object is being disposed.</param>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData.Parent">
            <summary>
            Gets the parent <see cref="T:Macro.ImageViewer.StudyManagement.StandardSopDataSource"/> to which this frame belongs.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData.RegenerationCost">
            <summary>
            Gets or sets the approximate cost to regenerate the pixel and/or overlay data.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.IDicomMessageSopDataSource">
            <summary>
            Interface to an <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> whose internal
            storage structure is a <see cref="T:Macro.Dicom.DicomMessageBase"/>.
            </summary>
            <remarks>
            This interface should be considered unstable and may be removed in a future
            version.  See the remarks for <see cref="P:Macro.ImageViewer.StudyManagement.IDicomMessageSopDataSource.SourceMessage"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.IDicomMessageSopDataSource.SourceMessage">
            <summary>
            Gets the source <see cref="T:Macro.Dicom.DicomMessageBase"/>.
            </summary>
            <remarks>
            See the remarks for <see cref="T:Macro.ImageViewer.StudyManagement.IDicomMessageSopDataSource"/>.
            Accessing this property is entirely unsafe, as the framework performs
            a lot of asynchronous operations on the <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> objects.
            All implementations of <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> must be thread-safe, and
            this property cannot be, as it directly exposes an underlying data structure.
            This property will likely be removed in a future version due to thread-safety concerns.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.DicomMessageSopDataSource.#ctor(Macro.Dicom.DicomMessageBase)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.StudyManagement.DicomMessageSopDataSource"/>.
            </summary>
            <param name="sourceMessage">The source <see cref="T:Macro.Dicom.DicomMessageBase"/> which provides all the SOP instance data.</param>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.DicomMessageSopDataSource.EnsureLoaded">
            <summary>
            Called by the base class to ensure that all DICOM data attributes are loaded.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.DicomMessageSopDataSource.TryGetAttribute(Macro.Dicom.DicomTag,Macro.Dicom.DicomAttribute@)">
            <summary>
            Attempts to get the attribute specified by <paramref name="tag"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.DicomMessageSopDataSource.TryGetAttribute(System.UInt32,Macro.Dicom.DicomAttribute@)">
            <summary>
            Attempts to get the attribute specified by <paramref name="tag"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.DicomMessageSopDataSource.CreateFrameData(System.Int32)">
            <summary>
            Called by the base class to create a new <see cref="T:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData"/>
            containing the data for a particular frame in the SOP instance.
            </summary>
            <param name="frameNumber">The 1-based number of the frame for which the data is to be retrieved.</param>
            <returns>A new <see cref="T:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData"/> containing the data for a particular frame in the SOP instance.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.DicomMessageSopDataSource.NormalizeGrayscalePixels(Macro.Dicom.IDicomAttributeProvider,System.Byte[])">
            <summary>
            Normalizes grayscale pixel data by masking out non-data bits and shifting the data bits to start at the lowest bit position.
            </summary>
            <remarks>
            <para>
            The pixel data is normalized such that the effective high bit is precisely 1 less than bits stored.
            Filling of the high-order non-data bits is performed according to the sign of the pixel value when
            the pixel representation is signed, and always with 0 when the pixel reresentation is unsigned.
            </para>
            <para>
            The provided <paramref name="dicomAttributeProvider"/> is <b>not</b> updated with the effective high bit,
            nor is the <see cref="F:Macro.Dicom.DicomTags.PixelData"/> attribute updated in any way. The only change is to the given
            pixel data buffer such that pixels can be read, 8 or 16 bits at a time, and interpreted immediately as
            <see cref="T:System.Byte"/> or <see cref="T:System.UInt16"/> (or their signed equivalents <see cref="T:System.SByte"/> and <see cref="T:System.Int16"/>).
            </para>
            </remarks>
            <param name="dicomAttributeProvider">A dataset containing information about the representation of pixels in the <paramref name="pixelData"/>.</param>
            <param name="pixelData">The pixel data buffer to normalize.</param>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.DicomMessageSopDataSource.ToArgb(Macro.Dicom.IDicomAttributeProvider,System.Byte[],Macro.Dicom.Iod.PhotometricInterpretation)">
            <summary>
            Converts colour pixel data to ARGB.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.DicomMessageSopDataSource.SourceMessage">
            <summary>
            Gets the source <see cref="T:Macro.Dicom.DicomMessageBase"/>.
            </summary>
            <remarks>
            See the remarks for <see cref="T:Macro.ImageViewer.StudyManagement.IDicomMessageSopDataSource"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.DicomMessageSopDataSource.Item(Macro.Dicom.DicomTag)">
            <summary>
            Gets the <see cref="T:Macro.Dicom.DicomAttribute"/> for the given tag.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.DicomMessageSopDataSource.Item(System.UInt32)">
            <summary>
            Gets the <see cref="T:Macro.Dicom.DicomAttribute"/> for the given tag.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.DicomMessageSopDataSource.DicomMessageSopFrameData">
            <summary>
            An implementation of a <see cref="T:Macro.ImageViewer.StudyManagement.StandardSopDataSource.StandardSopFrameData"/>
            where a <see cref="T:Macro.Dicom.DicomMessageBase"/> provides all the frame data.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.DicomMessageSopDataSource.DicomMessageSopFrameData.#ctor(System.Int32,Macro.ImageViewer.StudyManagement.DicomMessageSopDataSource)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.StudyManagement.DicomMessageSopDataSource.DicomMessageSopFrameData"/>
            </summary>
            <param name="frameNumber">The 1-based number of this frame.</param>
            <param name="parent">The parent <see cref="T:Macro.ImageViewer.StudyManagement.DicomMessageSopDataSource"/> that this frame belongs to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="parent"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="frameNumber"/> is zero or negative.</exception>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.DicomMessageSopDataSource.DicomMessageSopFrameData.CreateNormalizedPixelData">
            <summary>
            Called by the base class to create a new byte buffer containing normalized pixel data
            for this frame (8 or 16-bit grayscale, or 32-bit ARGB).
            </summary>
            <returns>A new byte buffer containing the normalized pixel data.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.DicomMessageSopDataSource.DicomMessageSopFrameData.CreateNormalizedOverlayData(System.Int32)">
            <summary>
            Called by <see cref="!:StandardSopFrameData.GetNormalizedOverlayData"/> to create a new byte buffer containing normalized 
            overlay pixel data for a particular overlay plane.
            </summary>
            <remarks>
            See <see cref="!:StandardSopFrameData.GetNormalizedOverlayData"/> for details on the expected format of the byte buffer.
            </remarks>
            <param name="overlayNumber">The 1-based overlay plane number.</param>
            <returns>A new byte buffer containing the normalized overlay pixel data.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.DicomMessageSopDataSource.DicomMessageSopFrameData.OnUnloaded">
            <summary>
            Called by the base class when the cached byte buffers are being unloaded.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.DicomMessageSopDataSource.DicomMessageSopFrameData.Parent">
            <summary>
            Gets the parent <see cref="T:Macro.ImageViewer.StudyManagement.DicomMessageSopDataSource"/> to which this frame belongs.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InformationBoxChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Macro.ImageViewer.Tile.InformationBoxChanged"/> event.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InformationBoxChangedEventArgs.InformationBox">
            <summary>
            Gets the <see cref="P:Macro.ImageViewer.InformationBoxChangedEventArgs.InformationBox"/> that has changed.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.MouseLeaveMessage">
            <summary>
            A message object created by the view layer to notify a controlling object 
            (e.g. <see cref="T:Macro.ImageViewer.InputManagement.TileController"/>) that the mouse has left the current <see cref="T:Macro.ImageViewer.ITile"/>'s 
            client rectangle.
            </summary>
            <remarks>
            This class is intended for internal framework use only.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseLeaveMessage.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.IMouseWheelHandler">
            <summary>
            An interface for objects that handle mouse wheel input.
            </summary>
            <remarks>
            <para>
            The framework will look for this interface on <see cref="T:Macro.Desktop.Tools.ITool"/>s belonging to the current
            <see cref="T:Macro.ImageViewer.IImageViewer"/> (via <see cref="M:Macro.ImageViewer.InputManagement.IViewerShortcutManager.GetMouseWheelHandler(Macro.ImageViewer.InputManagement.MouseWheelShortcut)"/>) and if an appropriate one 
            is found it will be given capture until a short period of time has expired.
            </para>
            </remarks>
            <seealso cref="T:Macro.ImageViewer.IImageViewer"/>
            <seealso cref="T:Macro.ImageViewer.ImageViewerComponent"/>
            <seealso cref="T:Macro.ImageViewer.ITile"/>
            <seealso cref="T:Macro.ImageViewer.InputManagement.TileController"/>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.IMouseWheelHandler.StartWheel">
            <summary>
            Called by the framework when mouse wheel input has started.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.IMouseWheelHandler.Wheel(System.Int32)">
            <summary>
            Called by the framework each time the mouse wheel is moved.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.IMouseWheelHandler.StopWheel">
            <summary>
            Called by the framework to indicate that mouse wheel activity has stopped 
            (a short period of time has elapsed without any activity).
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.RemoveGraphicUndoableCommand">
            <summary>
            An <see cref="T:Macro.Desktop.UndoableCommand"/> for removing an <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> from a <see cref="T:Macro.ImageViewer.Graphics.GraphicCollection"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.RemoveGraphicUndoableCommand.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            The <paramref name="graphic"/>'s <see cref="P:Macro.ImageViewer.Graphics.IGraphic.ParentGraphic"/> must not be null.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.RemoveGraphicUndoableCommand.Execute">
            <summary>
            <see cref="M:Macro.ImageViewer.Graphics.RemoveGraphicUndoableCommand.Execute"/>s the remove command.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.RemoveGraphicUndoableCommand.Unexecute">
            <summary>
            <see cref="M:Macro.ImageViewer.Graphics.RemoveGraphicUndoableCommand.Unexecute"/>s the remove command (e.g. re-inserts the graphic).
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.RoiSettings.ShowAnalysisByDefault">
            <summary>
            Controls whether or not ROI stats should be shown on new ROI objects by default.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.RoiSettings.AnalysisUnits">
            <summary>
            Controls the preferred linear, area and volume units of ROI analysis output. (Pixels, Millimeters, Centimeters)
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.Analyzers.RoiLengthAnalyzer">
            <summary>
            An <see cref="T:Macro.ImageViewer.RoiGraphics.Analyzers.IRoiAnalyzer"/> that displays the length of a <see cref="T:Macro.ImageViewer.RoiGraphics.RoiGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Analyzers.RoiLengthAnalyzer.SupportsRoi(Macro.ImageViewer.RoiGraphics.Roi)">
            <summary>
            Checks if this analyzer class can analyze the given ROI.
            </summary>
            <param name="roi">The ROI to analyze.</param>
            <returns>True if this class can analyze the given ROI; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Analyzers.RoiLengthAnalyzer.Analyze(Macro.ImageViewer.RoiGraphics.Roi,Macro.ImageViewer.RoiGraphics.Analyzers.RoiAnalysisMode)">
            <summary>
            Analyzes the given ROI.
            </summary>
            <param name="roi">The ROI being analyzed.</param>
            <param name="mode">The analysis mode.</param>
            <returns>A string containing the analysis results, which can be appended to the analysis
            callout of the associated <see cref="T:Macro.ImageViewer.RoiGraphics.RoiGraphic"/>, if one exists.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Analyzers.RoiLengthAnalyzer.CalculateLength(System.Drawing.PointF,System.Drawing.PointF,Macro.Dicom.Iod.PixelSpacing,Macro.ImageViewer.RoiGraphics.Units@)">
            <summary>
            Helper method to compute the physical distance between two pixels.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <param name="normalizedPixelSpacing">The normalized pixel spacing of the image.</param>
            <param name="units">The units in which the resultant distance is given, passed by reference. If <paramref name="normalizedPixelSpacing"/> is not calibrated, then the passed variable will change to <see cref="F:Macro.ImageViewer.RoiGraphics.Units.Pixels"/>.</param>
            <returns>The distance between the two points, in units of <paramref name="units"/>.</returns>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.Analyzers.RoiLengthAnalyzer.Units">
            <summary>
            Gets or sets the base unit of measurement in which analysis is performed.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.PolygonControlGraphic">
            <summary>
            An interactive graphic that controls the vertices of an <see cref="T:Macro.ImageViewer.Graphics.IPointsGraphic"/> as if it were a closed polygon.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic">
            <summary>
            An interactive graphic that controls the vertices of an <see cref="T:Macro.ImageViewer.Graphics.IPointsGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic"/>.
            </summary>
            <param name="subject">An <see cref="T:Macro.ImageViewer.Graphics.IPointsGraphic"/> or an <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/> chain whose subject is an <see cref="T:Macro.ImageViewer.Graphics.IPointsGraphic"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic.#ctor(System.Boolean,Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic"/>.
            </summary>
            <param name="canAddRemoveVertices">A value indicating whether or not the user can dynamically add or remove vertices on the subject.</param>
            <param name="subject">An <see cref="T:Macro.ImageViewer.Graphics.IPointsGraphic"/> or an <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/> chain whose subject is an <see cref="T:Macro.ImageViewer.Graphics.IPointsGraphic"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic.#ctor(Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic.InsertVertex">
            <summary>
            Called to insert a vertex at the point where the context menu was last invoked.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic.DeleteVertex">
            <summary>
            Called to remove the vertex at the point where the context menu was last invoked.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic.IndexOfNextClosestPoint(Macro.ImageViewer.Graphics.IPointsGraphic,System.Drawing.PointF)">
            <summary>
            Computes the index for insertion of a new point on an existing <see cref="T:Macro.ImageViewer.Graphics.IPointsGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic.OnCanAddRemoveVerticesChanged">
            <summary>
            Called when the value of <see cref="P:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic.CanAddRemoveVertices"/> changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic.GetExportedActions(System.String,Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Gets a set of exported <see cref="T:Macro.Desktop.Actions.IAction"/>s.
            </summary>
            <param name="site">The action model site at which the actions should reside.</param>
            <param name="mouseInformation">The mouse input when the action model was requested, such as in response to a context menu request.</param>
            <returns>A set of exported <see cref="T:Macro.Desktop.Actions.IAction"/>s.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic.CreateMemento">
            <summary>
            Captures the current state of this <see cref="T:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic.SetMemento(System.Object)">
            <summary>
            Restores the state of this <see cref="T:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic"/>.
            </summary>
            <param name="memento">The object that was originally created with <see cref="M:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic.CreateMemento"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic.OnSubjectPointsChanged">
            <summary>
            Called to notify that multiple vertices in the subject graphic have changed.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic.OnSubjectPointChanged(System.Int32)">
            <summary>
            Called to notify that a vertex in the subject graphic has changed.
            </summary>
            <param name="index">The index of the vertex that changed.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic.OnControlPointChanged(System.Int32,System.Drawing.PointF)">
            <summary>
            Called to notify the derived class of a control point change event.
            </summary>
            <param name="index">The index of the point that changed.</param>
            <param name="point">The value of the point that changed.</param>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic.Subject">
            <summary>
            Gets the subject graphic that this graphic controls.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic.CommandName">
            <summary>
            Gets a string that describes the type of control operation that this graphic provides.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic.CanAddRemoveVertices">
            <summary>
            Gets or sets a value indicating whether or not the user can dynamically add or remove vertices on the subject.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.PolygonControlGraphic.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.InteractiveGraphics.PolygonControlGraphic"/>.
            </summary>
            <param name="subject">An <see cref="T:Macro.ImageViewer.Graphics.IPointsGraphic"/> or an <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/> chain whose subject is an <see cref="T:Macro.ImageViewer.Graphics.IPointsGraphic"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.PolygonControlGraphic.#ctor(System.Boolean,Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.InteractiveGraphics.PolygonControlGraphic"/>.
            </summary>
            <param name="canAddRemoveVertices">A value indicating whether or not the user can dynamically add or remove vertices on the subject.</param>
            <param name="subject">An <see cref="T:Macro.ImageViewer.Graphics.IPointsGraphic"/> or an <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/> chain whose subject is an <see cref="T:Macro.ImageViewer.Graphics.IPointsGraphic"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.PolygonControlGraphic.#ctor(Macro.ImageViewer.InteractiveGraphics.PolygonControlGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.PolygonControlGraphic.InsertVertex">
            <summary>
            Called to insert a vertex at the point where the context menu was last invoked.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.PolygonControlGraphic.DeleteVertex">
            <summary>
            Called to remove the vertex at the point where the context menu was last invoked.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.PolygonControlGraphic.SetMemento(System.Object)">
            <summary>
            Restores the state of this <see cref="T:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic"/>.
            </summary>
            <param name="memento">The object that was originally created with <see cref="M:Macro.ImageViewer.InteractiveGraphics.VerticesControlGraphic.CreateMemento"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.PolygonControlGraphic.OnSubjectPointChanged(System.Int32)">
            <summary>
            Called to notify that a vertex in the subject graphic has changed.
            </summary>
            <param name="index">The index of the vertex that changed.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.PolygonControlGraphic.OnControlPointChanged(System.Int32,System.Drawing.PointF)">
            <summary>
            Called to notify the derived class of a control point change event.
            </summary>
            <param name="index">The index of the point that changed.</param>
            <param name="point">The value of the point that changed.</param>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.AnchorPointControlGraphic">
            <summary>
            An interactive graphic that controls the single point of an <see cref="T:Macro.ImageViewer.Graphics.IPointGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnchorPointControlGraphic.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.InteractiveGraphics.AnchorPointControlGraphic"/>.
            </summary>
            <param name="subject">An <see cref="T:Macro.ImageViewer.Graphics.IPointGraphic"/> or an <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/> chain whose subject is an <see cref="T:Macro.ImageViewer.Graphics.IPointGraphic"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnchorPointControlGraphic.#ctor(Macro.ImageViewer.InteractiveGraphics.AnchorPointControlGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnchorPointControlGraphic.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnchorPointControlGraphic.GetCursorToken(System.Drawing.Point)">
            <summary>
            Called by <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> in response to the framework requesting the cursor token for a particular screen coordinate via <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.GetCursorToken(System.Drawing.Point)"/>.
            </summary>
            <param name="point">The screen coordinate for which the cursor is requested.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnchorPointControlGraphic.CreateMemento">
            <summary>
            Captures the current state of this <see cref="T:Macro.ImageViewer.InteractiveGraphics.AnchorPointControlGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnchorPointControlGraphic.SetMemento(System.Object)">
            <summary>
            Restores the state of this <see cref="T:Macro.ImageViewer.InteractiveGraphics.AnchorPointControlGraphic"/>.
            </summary>
            <param name="memento">The object that was originally created with <see cref="M:Macro.ImageViewer.InteractiveGraphics.AnchorPointControlGraphic.CreateMemento"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnchorPointControlGraphic.OnControlPointChanged(System.Int32,System.Drawing.PointF)">
            <summary>
            Called to notify the derived class of a control point change event.
            </summary>
            <param name="index">The index of the point that changed.</param>
            <param name="point">The value of the point that changed.</param>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.AnchorPointControlGraphic.Subject">
            <summary>
            Gets the subject graphic that this graphic controls.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.AnchorPointControlGraphic.CommandName">
            <summary>
            Gets a string that describes the type of control operation that this graphic provides.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.AnchorPointControlGraphic.MoveCursor">
            <summary>
            Gets or sets the cursor token to show when the mouse is hovering over the control point.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.IndexEventArgs">
            <summary>
            Provides data for the <see cref="T:Macro.ImageViewer.Graphics.IPointsList"/> events.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Graphics.IndexEventArgs.Index">
            <summary>
            Gets the index of the point to which the event occurred.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.IndexEventArgs.#ctor(System.Int32)">
            <summary>
            Constructs a new object to hold data for the <see cref="T:Macro.ImageViewer.Graphics.IPointsList"/> events.
            </summary>
            <param name="index">The index of the point to which the event occurred.</param>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.IPointsList">
            <summary>
            An observable list of points defining an <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>.
            </summary>
            <remarks>
            The coordinate space of points in this list varies depending on the <see cref="T:Macro.ImageViewer.Graphics.CoordinateSystem"/> of the owning graphic.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.IPointsList.SuspendEvents">
            <summary>
            Suspends notification of the <see cref="E:Macro.ImageViewer.Graphics.IPointsList.PointAdded"/>, <see cref="E:Macro.ImageViewer.Graphics.IPointsList.PointChanged"/>, <see cref="E:Macro.ImageViewer.Graphics.IPointsList.PointRemoved"/> and <see cref="E:Macro.ImageViewer.Graphics.IPointsList.PointsCleared"/> events.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.IPointsList.ResumeEvents">
            <summary>
            Resumes notification of the <see cref="E:Macro.ImageViewer.Graphics.IPointsList.PointAdded"/>, <see cref="E:Macro.ImageViewer.Graphics.IPointsList.PointChanged"/>, <see cref="E:Macro.ImageViewer.Graphics.IPointsList.PointRemoved"/> and <see cref="E:Macro.ImageViewer.Graphics.IPointsList.PointsCleared"/> events.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IPointsList.IsClosed">
            <summary>
            Gets a value indicating if the first and last points of the list are coincident.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.IPointsList.PointAdded">
            <summary>
            Occurs when a point is added to the list.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.IPointsList.PointChanged">
            <summary>
            Occurs when the value of a point in the list has changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.IPointsList.PointRemoved">
            <summary>
            Occurs when a point is removed from the list.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.IPointsList.PointsCleared">
            <summary>
            Occurs when the list is cleared.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.PatientOrientationHelper.AngleTolerance">
            <summary>
            Angle tolerance for the 
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Layout.HpDataContractAttribute">
            <summary>
            Identifies a class as a data-contract for HP serialization, and assigns it a GUID.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Layout.HpDataContractAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="dataContractGuid"></param>
        </member>
        <member name="P:Macro.ImageViewer.Layout.HpDataContractAttribute.ContractId">
            <summary>
            Gets the ID that identifies the data-contract.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.ComposableModalityLut">
            <summary>
            Abstract base implementation for a lookup table in the standard grayscale image display pipeline that transforms stored pixel values to manufacturer-independent values.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Imaging.LutComposer"/>
            <seealso cref="T:Macro.ImageViewer.Imaging.IModalityLut"/>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.ColorMapBase">
            <summary>
            Abstract class providing a base <see cref="T:Macro.ImageViewer.Imaging.IColorMap"/> implementation that defines the mapping of single-channel input pixel values to ARGB color values..
            </summary>
            <seealso cref="T:Macro.ImageViewer.Imaging.IColorMap"/>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorMapBase.OnLutChanged">
            <summary>
            Fires the <see cref="E:Macro.ImageViewer.Imaging.ColorMapBase.LutChanged"/> event.
            </summary>
            <remarks>
            Inheritors should call this method when any property of the color map has changed.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorMapBase.GetKey">
            <summary>
            Gets a string key that identifies this particular color map's characteristics.
            </summary>
            <remarks>
            This method is not to be confused with <b>equality</b>, since some color maps can be
            dependent upon the actual image to which it belongs.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorMapBase.GetDescription">
            <summary>
            Gets an abbreviated description of the color map.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorMapBase.Clone">
            <summary>
            Creates a deep-copy of the <see cref="T:Macro.ImageViewer.Imaging.IColorMap"/>.
            </summary>
            <remarks>
            <see cref="T:Macro.ImageViewer.Imaging.IColorMap"/> implementations may return NULL from this method when appropriate.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorMapBase.CreateMemento">
            <summary>
            Captures the state of the color map.
            </summary>
            <remarks>
            <para>
            The implementation should return an object containing enough state information so that,
            when <see cref="M:Macro.ImageViewer.Imaging.ColorMapBase.SetMemento(System.Object)"/> is called, the color map can be restored to the original state.
            </para>
            <para>
            If the method is implemented, <see cref="M:Macro.ImageViewer.Imaging.ColorMapBase.SetMemento(System.Object)"/> must also be implemented.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorMapBase.SetMemento(System.Object)">
            <summary>
            Restores the state of the color map.
            </summary>
            <param name="memento">An object that was originally created by <see cref="M:Macro.ImageViewer.Imaging.ColorMapBase.CreateMemento"/>.</param>
            <remarks>
            <para>
            The implementation should return the color map to the original state captured by <see cref="M:Macro.ImageViewer.Imaging.ColorMapBase.CreateMemento"/>.
            </para>
            <para>
            If you implement <see cref="M:Macro.ImageViewer.Imaging.ColorMapBase.CreateMemento"/> to capture the color map's state, you must also implement this method
            to allow the state to be restored. Failure to do so will result in a <see cref="T:System.InvalidOperationException"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.ColorMapBase.MinInputValue">
            <summary>
            Gets or sets the minimum input value.
            </summary>
            <remarks>
            This value should not be modified by your code.  It will be set internally by the framework.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.ColorMapBase.MaxInputValue">
            <summary>
            Gets or sets the maximum input value.
            </summary>
            <remarks>
            This value should not be modified by your code.  It will be set internally by the framework.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.ColorMapBase.Item(System.Int32)">
            <summary>
            Gets the output ARGB color at a given input index.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.ColorMapBase.FirstMappedPixelValue">
            <summary>
            Gets the first mapped pixel value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.ColorMapBase.Data">
            <summary>
            Gets the color map data as a lookup table.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Imaging.ColorMapBase.LutChanged">
            <summary>
            Fired when the color map has changed in some way.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool">
            <summary>
            Extends the <see cref="T:Macro.ImageViewer.BaseTools.ImageViewerTool"/> class to provide functionality that is common to mouse tools.
            </summary>
            <remarks>
            <para>
            A mouse tool is a tool that, when activated, is assigned to a specific mouse button 
            (see <see cref="T:Macro.ImageViewer.BaseTools.MouseToolButtonAttribute"/>) and is given the opportunity to respond to 
            mouse events for that button.  Developers implementing mouse tools should subclass this class.
            </para>
            <para>
            Typically, a mouse tool needs to be decorated with certain attributes in order to work properly.  For
            example:
            <example>
            <code>
            [C#]
             	[MenuAction("activate", "imageviewer-contextmenu/My Tool", "Select", Flags = ClickActionFlags.CheckAction)]
            	[MenuAction("activate", "global-menus/MenuTools/MenuStandard/My Tool", "Select", Flags = ClickActionFlags.CheckAction)]
            	[ButtonAction("activate", "global-toolbars/ToolbarStandard/My Tool", "Select", Flags = ClickActionFlags.CheckAction)]
            	[KeyboardAction("activate", "imageviewer-keyboard/ToolsStandard/My Tool", "Select", KeyStroke = XKeys.R)]
            	[CheckedStateObserver("activate", "Active", "ActivationChanged")]
            	[IconSet("activate", "Icons.MyToolSmall.png", "Icons.MyToolToolMedium.png", "Icons.MyToolToolLarge.png")]
            	[MouseToolButton(XMouseButtons.Left, true)]
            </code>
            The "Select" parameter in each of the 'Action' attributes refers to the <see cref="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Select"/> method
            which activates (and checks) the tool.  All other tools with the same <see cref="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButton"/> are deactivated.
            </example>
            </para>
            <para>
            When a tool does not implement the typical mouse button handling behaviour, it should <b>not</b> be 
            decorated with any of the above attributes as it will result in unexpected behaviour with regards to the toolbars and menus.
            </para>
            <para>
            A mouse tool can also have an additional mouse button shortcut specified 
            (see <see cref="T:Macro.ImageViewer.BaseTools.DefaultMouseToolButtonAttribute"/>) that does not require the mouse 
            tool to be activated in order to use it.  The value of <see cref="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.DefaultMouseButtonShortcut"/> need not be 
            modified (e.g. Ctrl, Shift),  however if another tool's <see cref="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButton"/> has the same value and is active,
            it will supersede any <see cref="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.DefaultMouseButtonShortcut"/> assignments.  Therefore, <see cref="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.DefaultMouseButtonShortcut"/>
            should typically only be assigned a non-modified value when no other <see cref="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool"/> has the same
            <see cref="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButton"/> value.
            </para>
            <para>
            One further piece of functionality that subclasses of <see cref="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool"/> can choose to implement
            is handling of the mouse wheel.  When decorated with a <see cref="T:Macro.ImageViewer.BaseTools.MouseWheelHandlerAttribute"/>, the tool's
            <see cref="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseWheelShortcut"/> will be set upon construction.  The subclass must override the mouse wheel-related
            methods in order for the tool to have any effect (see <see cref="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.StartWheel"/>, <see cref="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.StopWheel"/>, <see cref="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.WheelForward"/>,
            <see cref="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.WheelBack"/>).
            </para>
            </remarks>
            <seealso cref="T:Macro.ImageViewer.BaseTools.MouseToolButtonAttribute"/>
            <seealso cref="T:Macro.ImageViewer.BaseTools.DefaultMouseToolButtonAttribute"/>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="tooltipPrefix">The tooltip prefix, which usually describes the tool's function.</param>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.#ctor">
            <summary>
            Gets or sets the tooltip prefix, which is usually a string describing the tool's function.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.RegisterActivationActionId(System.String)">
            <summary>
            Registers the specified action as a tool activation action.
            </summary>
            <remarks>
            It is unecessary to call register an action if it calls the <see cref="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Select"/> method directly.
            If the action invokes another method that calls <see cref="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Select"/> in turn, use this method
            to register that action's ID during or before the tool initialization phase.
            </remarks>
            <param name="actionId">The unqualified action ID of the action that selects and activates this tool.</param>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.OnActivationChanged">
            <summary>
            Called when the <see cref="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Active"/> property changes, thereby firing the <see cref="E:Macro.ImageViewer.BaseTools.MouseImageViewerTool.ActivationChanged"/> event.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.OnTooltipChanged">
            <summary>
            Called when the <see cref="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Tooltip"/> property changes, thereby firing the <see cref="E:Macro.ImageViewer.BaseTools.MouseImageViewerTool.TooltipChanged"/> event.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Initialize">
            <summary>
            Overrides <see cref="M:Macro.Desktop.Tools.ToolBase.Initialize"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.OnMouseToolSettingsChanged(Macro.ImageViewer.BaseTools.MouseToolSettingsProfile.Setting)">
            <summary>
            Called when the mouse tool settings entry for this tool has changed.
            </summary>
            <remarks>
            The default implementation reloads all mouse button and shortcut assignments from the setting.
            Override this method to provide custom behaviour for attempting to change assignments on a live tool.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Select">
            <summary>
            Requests that this mouse tool be the active tool for the mouse button to which it
            is assigned.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.OnMouseButtonChanged">
            <summary>
            Called when the <see cref="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButton"/> property changes, thereby firing the <see cref="E:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButtonChanged"/> event.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.OnDefaultMouseButtonShortcutChanged">
            <summary>
            Called when the <see cref="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.DefaultMouseButtonShortcut"/> property changes, thereby firing the <see cref="E:Macro.ImageViewer.BaseTools.MouseImageViewerTool.DefaultMouseButtonShortcutChanged"/> event.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.OnMouseWheelShortcutChanged">
            <summary>
            Called when the <see cref="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseWheelShortcut"/> property changes, thereby firing the <see cref="E:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseWheelShortcutChanged"/> event.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Start(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Handles a "start mouse" message from the Framework.
            </summary>
            <param name="mouseInformation"></param>
            <returns>A value indicating whether the start message was handled.</returns>
            <remarks>
            <para>
            In most cases, <see cref="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Start(Macro.ImageViewer.InputManagement.IMouseInformation)"/> corresponds to "mouse down".
            </para>
            <para>
            As a developer, you need to override this method in your 
            <see cref="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool"/> subclass to add your custom functionality, 
            but you should never have to call it; it should only ever have to be 
            called by the Framework.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Track(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Handles a "track mouse" message from the Framework.
            </summary>
            <param name="mouseInformation"></param>
            <returns>A value indicating whether the track message was handled.</returns>
            <remarks>
            <para>
            In most cases, <see cref="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Track(Macro.ImageViewer.InputManagement.IMouseInformation)"/> corresponds to "mouse move".
            </para>
            <para>
            As a developer, you need to override this method in your 
            <see cref="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool"/> subclass to add your custom functionality, 
            but you should never have to call it; it should only ever have to be 
            called by the Framework.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Handles a "stop mouse" message from the Framework.
            </summary>
            <param name="mouseInformation"></param>
            <returns>A value indicating whether the stop message was handled.</returns>
            <remarks>
            <para>
            In most cases, <see cref="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)"/> corresponds to "mouse up".
            </para>
            <para>
            As a developer, you need to override this method in your 
            <see cref="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool"/> subclass to add your custom functionality, 
            but you should never have to call it; it should only ever have to be 
            called by the Framework.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Cancel">
            <summary>
            Called by the framework when it needs to unexpectedly release capture on the tool, allowing it to do 
            any necessary cleanup.  This method should be overridden by any derived classes that need to do cleanup.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.StartWheel">
            <summary>
            Called by the framework when mouse wheel activity starts.
            </summary>
            <remarks>
            This method does nothing unless overridden.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Wheel(System.Int32)">
            <summary>
            Called by the framework each time the mouse wheel is moved.
            </summary>
            <remarks>
            Unless overridden, this method simply calls <see cref="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.WheelForward"/> and <see cref="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.WheelBack"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.StopWheel">
            <summary>
            Called by the framework to indicate that mouse wheel activity has stopped 
            (a short period of time has elapsed without any activity).
            </summary>
            <remarks>
            This method does nothing unless overridden.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.WheelForward">
            <summary>
            Called when the mouse wheel has moved forward.
            </summary>
            <remarks>
            This method does nothing unless overridden.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.WheelBack">
            <summary>
            Called when the mouse wheel has moved back.
            </summary>
            <remarks>
            This method does nothing unless overridden.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.GetCursorToken(System.Drawing.Point)">
            <summary>
            Gets the cursor token associated with the tool.
            </summary>
            <param name="point">The point in destination (view) coordinates.</param>
            <returns>a <see cref="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.CursorToken"/> object that is used to construct the cursor in the view.</returns>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.TooltipPrefix">
            <summary>
            Gets or sets the tooltip prefix for this <see cref="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.CursorToken">
            <summary>
            Gets the cursor token associated with this mouse tool.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.LastX">
            <summary>
            Gets the previous x coordinate of the mouse pointer.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.LastY">
            <summary>
            Gets the previous y coordinate of the mouse pointer.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.DeltaX">
            <summary>
            Gets the change in the x position of the mouse pointer since the previous 
            call to <see cref="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Track(Macro.ImageViewer.InputManagement.IMouseInformation)"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.DeltaY">
            <summary>
            Gets the change in the y position of the mouse pointer since the previous 
            call to <see cref="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Track(Macro.ImageViewer.InputManagement.IMouseInformation)"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Tooltip">
            <summary>
            Gets the tooltip associated with this tool.
            </summary>
            <remarks>
            For mouse tools, this is a combination of <see cref="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.TooltipPrefix"/> 
            and <see cref="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButton"/> in the form "Prefix (button)".
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.InitiallyActive">
            <summary>
            Gets whether or not this tool should be automatically selected/activated when the viewer opens initially.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Active">
            <summary>
            Gets or sets a value indicating whether this tool is currently active or not.  
            </summary>
            <remarks>
            Any number of mouse tools may be assigned to a given mouse button, but 
            only one such tool can be active at any given time.
            </remarks>
        </member>
        <member name="E:Macro.ImageViewer.BaseTools.MouseImageViewerTool.TooltipChanged">
            <summary>
            Notifies observer(s) that the tooltip has changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.BaseTools.MouseImageViewerTool.ActivationChanged">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Active"/> property has changed.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Actions">
            <summary>
            Gets the set of actions that act on this tool.
            </summary>
            <remarks>
            <see cref="P:Macro.Desktop.Tools.ITool.Actions"/> mentions that this property should not be considered dynamic.
            This implementation assumes that the actions are <b>not</b> dynamic by lazily initializing
            the actions and storing them.  If you wish to return actions dynamically, you must override
            this property.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButton">
            <summary>
            Gets or sets the mouse button assigned to this tool.
            </summary>
            <remarks>
            It is expected that on creation of this tool, this property will be set to
            something other than 'None'.  Currently this is done in the overridden <see cref="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Initialize"/> method.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.DefaultMouseButtonShortcut">
            <summary>
            Gets or sets the default mouse button shortcut assigned to this tool.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.ModifiedMouseButtonShortcut">
            <summary>
            Gets or sets the modified mouse button shortcut assigned to this tool.
            </summary>
            <seealso cref="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.DefaultMouseButtonShortcut"/>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseWheelShortcut">
            <summary>
            Gets or sets the <see cref="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseWheelShortcut"/>.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButtonChanged">
            <summary>
            Fired when the <see cref="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButton"/> property has changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.BaseTools.MouseImageViewerTool.ModifiedMouseButtonShortcutChanged">
            <summary>
            Fired when the <see cref="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.ModifiedMouseButtonShortcut"/> property has changed.
            </summary>
            <seealso cref="E:Macro.ImageViewer.BaseTools.MouseImageViewerTool.DefaultMouseButtonShortcutChanged"/>
        </member>
        <member name="E:Macro.ImageViewer.BaseTools.MouseImageViewerTool.DefaultMouseButtonShortcutChanged">
            <summary>
            Fired when the <see cref="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.DefaultMouseButtonShortcut"/> property has changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseWheelShortcutChanged">
            <summary>
            Fired when the <see cref="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseWheelShortcut"/> property has changed.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.Behaviour">
            <summary>
            Allows the <see cref="T:Macro.ImageViewer.InputManagement.IMouseButtonHandler"/> to override certain default framework behaviour.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButtonIconSetAttribute">
            <summary>
            Declares a set of icon resources to associate with an action that activates a mouse button tool.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButtonIconSetAttribute.#ctor(System.String,Macro.Desktop.IconScheme,System.String,System.String,System.String)">
            <summary>
            Attribute constructor.
            </summary>
            <remarks>
            The use of icon schemes has been deprecated in favour of extensible application GUI themes.
            </remarks>
            <param name="actionId">The logical action identifier to which this attribute applies.</param>
            <param name="scheme">The scheme of this icon set.</param>
            <param name="smallIcon">The resource name of the icon to be used at small resolutions (around 24 x 24).</param>
            <param name="mediumIcon">The resource name of the icon to be used at medium resolutions (around 48 x 48).</param>
            <param name="largeIcon">The resource name of the icon to be used at large resolutions (around 64 x 64).</param>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButtonIconSetAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Attribute constructor.
            </summary>
            <param name="actionId">The logical action identifier to which this attribute applies.</param>
            <param name="smallIcon">The resource name of the icon to be used at small resolutions (around 24 x 24).</param>
            <param name="mediumIcon">The resource name of the icon to be used at medium resolutions (around 48 x 48).</param>
            <param name="largeIcon">The resource name of the icon to be used at large resolutions (around 64 x 64).</param>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButtonIconSetAttribute.#ctor(System.String,System.String)">
            <summary>
            Attribute constructor.
            </summary>
            <param name="actionId">The logical action identifier to which this attribute applies.</param>
            <param name="icon">The resource name of the icon to be used at all resolutions.</param>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButtonIconSetAttribute.Apply(Macro.Desktop.Actions.IActionBuildingContext)">
            <summary>
            Sets the icon set for an <see cref="T:Macro.Desktop.Actions.IAction"/>, via the specified <see cref="T:Macro.Desktop.Actions.IActionBuildingContext"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButtonIconSet">
            <summary>
            Represents a set of icon resources with an overlay to indicate mapped mouse button.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButtonIconSet.#ctor(Macro.Desktop.IconSet,Macro.Desktop.XMouseButtons)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButtonIconSet"/>.
            </summary>
            <param name="baseIconSet">A template <see cref="T:Macro.Desktop.IconSet"/> from which to copy resource names.</param>
            <param name="assignedButton">The mouse button that is assigned to the associated tool.</param>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButtonIconSet.#ctor(Macro.Desktop.IconScheme,System.String,System.String,System.String,Macro.Desktop.XMouseButtons)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButtonIconSet"/>.
            </summary>
            <remarks>
            The use of icon schemes has been deprecated in favour of extensible application GUI themes.
            </remarks>
            <param name="scheme">The scheme of this icon set.</param>
            <param name="smallIcon">The resource name of the icon to be used at small resolutions (around 24 x 24).</param>
            <param name="mediumIcon">The resource name of the icon to be used at medium resolutions (around 48 x 48).</param>
            <param name="largeIcon">The resource name of the icon to be used at large resolutions (around 64 x 64).</param>
            <param name="assignedButton">The mouse button that is assigned to the associated tool.</param>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButtonIconSet.#ctor(System.String,System.String,System.String,Macro.Desktop.XMouseButtons)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButtonIconSet"/>.
            </summary>
            <param name="smallIcon">The resource name of the icon to be used at small resolutions (around 24 x 24).</param>
            <param name="mediumIcon">The resource name of the icon to be used at medium resolutions (around 48 x 48).</param>
            <param name="largeIcon">The resource name of the icon to be used at large resolutions (around 64 x 64).</param>
            <param name="assignedButton">The mouse button that is assigned to the associated tool.</param>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButtonIconSet.#ctor(System.String,Macro.Desktop.XMouseButtons)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButtonIconSet"/>.
            </summary>
            <param name="icon">The resource name of the icon to be used at all resolutions.</param>
            <param name="assignedButton">The mouse button that is assigned to the associated tool.</param>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButtonIconSet.GetButtonOverlay(Macro.Desktop.IconSize)">
            <summary>
            Gets an appropriate icon overlay to indicate the mouse button assigned to the associated tool.
            </summary>
            <param name="iconSize">The desired version of the icon overlay.</param>
            <returns>The icon overlay as an <see cref="T:System.Drawing.Image"/>.</returns>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButtonIconSet.CreateIcon(Macro.Desktop.IconSize,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Creates an icon using the specified icon resource and resource resolver.
            </summary>
            <param name="iconSize">The size of the desired icon.</param>
            <param name="resourceResolver">The resource resolver with which to resolve the requested icon resource.</param>
            <returns>An <see cref="T:System.Drawing.Image"/> constructed from the requested resource.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="resourceResolver"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="resourceResolver"/> was unable to resolve the requested icon resource.</exception>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButtonIconSet.GetIconKey(Macro.Desktop.IconSize,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Gets a string identifier that uniquely identifies the resolved icon, suitable for dictionary keying purposes.
            </summary>
            <param name="iconSize">The size of the desired icon.</param>
            <param name="resourceResolver">The resource resolver with which to resolve the requested icon resource.</param>
            <returns>A string identifier that uniquely identifies the resolved icon.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="resourceResolver"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="resourceResolver"/> was unable to resolve the requested icon resource.</exception>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.MouseImageViewerTool.MouseButtonIconSet.AssignedButton">
            <summary>
            Gets the mouse button that is assigned to the associated tool.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.Dicom.DicomFilteredAnnotationLayoutStoreSettings.FilteredLayoutSettingsXml">
            <summary>
            XML document stores the identifier of the text overlay configuration for each modality.  The actual configurations are stored in the AnnotationLayoutSettings.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.TileSelectedEventArgs">
            <summary>
            Provides data for the <see cref="E:Macro.ImageViewer.EventBroker.TileSelected"/> event.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.TileSelectedEventArgs.SelectedTile">
            <summary>
            Gets the selected <see cref="T:Macro.ImageViewer.ITile"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.RectangleChangedEventArgs">
            <summary>
            Provides data for events where a rectangle has changed.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.RectangleChangedEventArgs.#ctor(System.Drawing.RectangleF)">
            <summary>
            Instantiates a new instance of <see cref="T:Macro.ImageViewer.RectangleChangedEventArgs"/>
            with a specified rectangle.
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="P:Macro.ImageViewer.RectangleChangedEventArgs.Rectangle">
            <summary>
            Gets the rectangle.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.PixelDataGetter">
            <summary>
             Used by the <see cref="T:Macro.ImageViewer.Imaging.PixelData"/> class to (lazily) retrieve pixel data from an external source.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.ImageDrawingEventArgs">
            <summary>
            Provides data for the <see cref="E:Macro.ImageViewer.EventBroker.ImageDrawing"/> event.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageDrawingEventArgs.PresentationImage">
            <summary>
            Gets the selected <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.CompositeImageGraphic">
            <summary>
            A <see cref="T:Macro.ImageViewer.Graphics.CompositeGraphic"/> whose <see cref="T:Macro.ImageViewer.Graphics.SpatialTransform"/>
            is tailored for images.
            </summary>
            <remarks>
            <para>
            Use <see cref="T:Macro.ImageViewer.Graphics.CompositeImageGraphic"/> when you want to anchor graphics to
            an image.  Create an instance of <see cref="T:Macro.ImageViewer.Graphics.CompositeImageGraphic"/> using
            parameters (rows, columns, pixel spacing, etc.) from the <see cref="T:Macro.ImageViewer.Graphics.ImageGraphic"/>
            which you want to anchor other graphics to.  Then add the <see cref="T:Macro.ImageViewer.Graphics.ImageGraphic"/>
            to the <see cref="T:Macro.ImageViewer.Graphics.CompositeImageGraphic"/> along with any other graphics you want
            "attached" to the <see cref="T:Macro.ImageViewer.Graphics.ImageGraphic"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.CompositeImageGraphic.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.CompositeImageGraphic"/> with
            the specified rows and columns.
            </summary>
            <param name="rows"></param>
            <param name="columns"></param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.CompositeImageGraphic.#ctor(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.CompositeImageGraphic"/> with
            the specified rows, columns and pixel spacing.
            </summary>
            <param name="rows"></param>
            <param name="columns"></param>
            <param name="pixelSpacingX"></param>
            <param name="pixelSpacingY"></param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.CompositeImageGraphic.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.CompositeImageGraphic"/> with
            the specified rows, columns, pixel spacing and pixel aspect ratio.
            </summary>
            <param name="rows"></param>
            <param name="columns"></param>
            <param name="pixelSpacingX"></param>
            <param name="pixelSpacingY"></param>
            <param name="pixelAspectRatioX"></param>
            <param name="pixelAspectRatioY"></param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.CompositeImageGraphic.#ctor(Macro.ImageViewer.Graphics.CompositeImageGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.CompositeImageGraphic.CreateSpatialTransform">
            <summary>
            This member overrides <see cref="M:Macro.ImageViewer.Graphics.Graphic.CreateSpatialTransform"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.ILocalSopDataSource">
            <summary>
            Interface to an <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> whose internal source is
            a local <see cref="T:Macro.Dicom.DicomFile"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ILocalSopDataSource.File">
            <summary>
            Gets the source <see cref="T:Macro.Dicom.DicomFile"/>.
            </summary>
            <remarks>See the remarks for <see cref="P:Macro.ImageViewer.StudyManagement.IDicomMessageSopDataSource.SourceMessage"/>.
            This property will likely be removed in a future version due to thread-safety concerns.</remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ILocalSopDataSource.Filename">
            <summary>
            Gets the filename of the source <see cref="T:Macro.Dicom.DicomFile"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Rendering.RendererFactoryInitializationException">
            <summary>
            Thrown when an <see cref="T:Macro.ImageViewer.Rendering.IRendererFactory"/> cannot initialize, 
            for example when the required hardware is not present.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RendererFactoryInitializationException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.GrayscaleImageGraphic">
            <summary>
            A grayscale <see cref="T:Macro.ImageViewer.Graphics.ImageGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.GrayscaleImageGraphic"/>
            with the specified image parameters.
            </summary>
            <param name="rows"></param>
            <param name="columns"></param>
            <remarks>
            <para>
            Creates an empty grayscale image of a specific size.
            By default, all pixels are set to zero (i.e., black). 
            Useful as a canvas on which pixels can be set by the client.
            </para>
            <para>
            By default, the image is 16-bit unsigned with
            <i>bits stored = 16</i>, <i>high bit = 15</i>,
            <i>rescale slope = 1.0</i> and <i>rescale intercept = 0.0</i>.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Double,System.Double,System.Byte[])">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.GrayscaleImageGraphic"/>
            with the specified image parameters.
            </summary>
            <param name="rows"></param>
            <param name="columns"></param>
            <param name="bitsAllocated">Can be 8 or 16.</param>
            <param name="bitsStored"></param>
            <param name="highBit"></param>
            <param name="isSigned"></param>
            <param name="inverted"></param>
            <param name="rescaleSlope"></param>
            <param name="rescaleIntercept"></param>
            <param name="pixelData"></param>
            <remarks>
            Creates an grayscale image using existing pixel data.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Double,System.Double,Macro.ImageViewer.Imaging.PixelDataGetter)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.GrayscaleImageGraphic"/>
            with the specified image parameters.
            </summary>
            <param name="rows"></param>
            <param name="columns"></param>
            <param name="bitsAllocated"></param>
            <param name="bitsStored"></param>
            <param name="highBit"></param>
            <param name="isSigned"></param>
            <param name="inverted"></param>
            <param name="rescaleSlope"></param>
            <param name="rescaleIntercept"></param>
            <param name="pixelDataGetter"></param>
            <remarks>
            Creates a grayscale image using existing pixel data but does so
            without ever storing a reference to the pixel data. This is necessary
            to ensure that pixel data can be properly garbage collected in
            any future memory management schemes.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.#ctor(Macro.ImageViewer.Graphics.GrayscaleImageGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.Dispose(System.Boolean)">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern
            </summary>
            <param name="disposing">True if this object is being disposed, false if it is being finalized</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.CreatePixelDataWrapper">
            <summary>
            Creates an object that encapsulates the pixel data.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.BitsStored">
            <summary>
            Gets the number of bits stored in the image.
            </summary>
            <remarks>
            The number of bits stored does not necessarily equal the number of bits
            allocated. Values of 8, 10, 12 and 16 are typical.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.HighBit">
            <summary>
            Gets the high bit.
            </summary>
            <remarks>
            Theoretically, the high bit does not necessarily have to equal
            Bits Stored - 1.  But in almost all cases this assumption is true;
            we too make this assumption.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.IsSigned">
            <summary>
            Get a value indicating whether the image's pixel data is signed.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.Invert">
            <summary>
            Gets or sets a value indicating whether the image should be inverted.
            </summary>
            <remarks>
            Inversion is equivalent to polarity.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.DefaultInvert">
            <summary>
            Gets the default value of <see cref="P:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.Invert"/>.  In DICOM, this would be true
            for all MONOCHROME1 images.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.VoiLutFactory">
            <summary>
            Gets or sets the VOI LUT factory for this <see cref="T:Macro.ImageViewer.Graphics.GrayscaleImageGraphic"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.RescaleSlope">
            <summary>
            Gets the slope of the linear modality LUT rescale function.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.RescaleIntercept">
            <summary>
            Gets the intercept of the linear modality LUT rescale function.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.PixelData">
            <summary>
            Gets an object that encapsulates the pixel data.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.VoiLutManager">
            <summary>
            Retrieves this image's <see cref="T:Macro.ImageViewer.Imaging.IVoiLutManager"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.ColorMapManager">
            <summary>
            Retrieves this image's <see cref="T:Macro.ImageViewer.Imaging.IColorMapManager"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.ModalityLut">
            <summary>
            Retrieves this image's modality lut.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.VoiLut">
            <summary>
            Retrieves this image's Voi Lut.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.OutputLut">
            <summary>
            The output lut composed of both the Modality and Voi Luts.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.ColorMap">
            <summary>
            Retrieves this image's color map.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.GrayscaleImageGraphic.NormalizationLut">
            <summary>
            Gets or sets a LUT to normalize the output of the modality LUT immediately prior to the VOI LUT.
            </summary>
            <remarks>
            <para>
            In most cases, this should be left NULL. However, some PET images have a very small rescale slope (&lt;&lt; 1)
            and thus need this to fix the input to the VOI LUT.
            </para>
            <para>
            At any rate, DO NOT use the output of this LUT for any purpose other than as an input to the VOI LUT, as it is meaningless otherwise.</para>
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.BaseTools.MouseWheelHandlerAttribute">
            <summary>
            Specifies a <see cref="T:Macro.ImageViewer.BaseTools.ImageViewerTool"/>'s default <see cref="T:Macro.ImageViewer.InputManagement.MouseWheelShortcut"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseWheelHandlerAttribute.#ctor(Macro.Desktop.ModifierFlags)">
            <summary>
            Constructor that accepts <see cref="T:Macro.Desktop.ModifierFlags"/> as input.
            </summary>
            <param name="modifiers"></param>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.MouseWheelHandlerAttribute.Shortcut">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.BaseTools.ImageViewerTool"/>'s <see cref="T:Macro.ImageViewer.InputManagement.MouseWheelShortcut"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.BaseTools.MouseToolButtonAttribute">
            <summary>
            An attribute used by <see cref="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool"/> to specify it's 
            default <see cref="T:Macro.ImageViewer.InputManagement.MouseButtonShortcut"/>.
            </summary>
            <seealso cref="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool"/>
            <seealso cref="T:Macro.ImageViewer.InputManagement.MouseButtonShortcut"/>
            <seealso cref="T:Macro.ImageViewer.InputManagement.IViewerShortcutManager"/>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.MouseToolButtonAttribute.#ctor(Macro.Desktop.XMouseButtons,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.MouseToolButtonAttribute.MouseButton">
            <summary>
            Gets the mouse button assigned to the <see cref="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.MouseToolButtonAttribute.InitiallyActive">
            <summary>
            Gets whether or not the tool should be initially active upon opening the viewer.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.LoadStudyArgs">
            <summary>
            Holds the parameters that specify the study to be loaded.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.LoadStudyArgs.#ctor(System.String,Macro.ImageViewer.Common.IDicomServiceNode)">
            <summary>
            Constructor.
            </summary>
            <param name="studyInstanceUid"></param>
            <param name="server"></param>
        </member>
        <member name="M:Macro.ImageViewer.LoadStudyArgs.#ctor(System.String,Macro.ImageViewer.Common.IDicomServiceNode,Macro.ImageViewer.StudyManagement.StudyLoaderOptions)">
            <summary>
            Constructor.
            </summary>
            <param name="studyInstanceUid"></param>
            <param name="server"></param>
            <param name="studyLoaderOptions"> </param>
        </member>
        <member name="P:Macro.ImageViewer.LoadStudyArgs.StudyInstanceUid">
            <summary>
            Gets the Study Instance UID of the study to be loaded.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LoadStudyArgs.StudyLoaderOptions">
            <summary>
            Gets the options requested by the caller.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LoadStudyArgs.Server">
            <summary>
            Gets the server from which the study can be loaded.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.KeyObjects.KeyObjectSelectionCodeSequences">
            <summary>
            Static class defining DICOM code sequences used in key object selections.
            </summary>
            <remarks>
            <para>Due to the relatively new nature of key object support in the Macro Framework, this API may be more prone to changes in the next release.</para>
            </remarks>
        </member>
        <member name="F:Macro.ImageViewer.KeyObjects.KeyObjectSelectionCodeSequences.DocumentTitleModifier">
            <summary>
            Gets the code for DCM 113011 Document Title Modifier.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.KeyObjects.KeyObjectSelectionCodeSequences.KeyObjectDescription">
            <summary>
            Gets the code for DCM 113012 Key Object Description.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.KeyObjects.KeyObjectSelectionCodeSequences.Code">
            <summary>
            A DICOM code sequence used in key object selections.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.PaletteColorMap">
            <summary>
            N.B. To be used only for colorspace conversions of a palette color image - do not install as a regular color map!
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.Analyzers.RoiAreaAnalyzer">
            <summary>
            An <see cref="T:Macro.ImageViewer.RoiGraphics.Analyzers.IRoiAnalyzer"/> that displays the area of a <see cref="T:Macro.ImageViewer.RoiGraphics.RoiGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Analyzers.RoiAreaAnalyzer.SupportsRoi(Macro.ImageViewer.RoiGraphics.Roi)">
            <summary>
            Checks if this analyzer class can analyze the given ROI.
            </summary>
            <param name="roi">The ROI to analyze.</param>
            <returns>True if this class can analyze the given ROI; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Analyzers.RoiAreaAnalyzer.Analyze(Macro.ImageViewer.RoiGraphics.Roi,Macro.ImageViewer.RoiGraphics.Analyzers.RoiAnalysisMode)">
            <summary>
            Analyzes the given ROI.
            </summary>
            <param name="roi">The ROI being analyzed.</param>
            <param name="mode">The analysis mode.</param>
            <returns>A string containing the analysis results, which can be appended to the analysis
            callout of the associated <see cref="T:Macro.ImageViewer.RoiGraphics.RoiGraphic"/>, if one exists.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Analyzers.RoiAreaAnalyzer.SetRoiAnalyzerUpdateCallback(Macro.ImageViewer.RoiGraphics.Analyzers.RoiAnalyzerUpdateCallback)">
            TODO (CR Nov 2011): remove
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.Analyzers.RoiAreaAnalyzer.Units">
            <summary>
            Gets or sets the base unit of measurement in which analysis is performed.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.InteractiveBoundableGraphicBuilder">
            <summary>
            Interactive builder class that interprets two mouse clicks as opposite
            vertices to setup a <see cref="T:Macro.ImageViewer.Graphics.IBoundableGraphic"/>.
            </summary>
            <remarks>
            This builder takes exactly two clicks, after which the graphic is
            complete and control is released.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveBoundableGraphicBuilder.#ctor(Macro.ImageViewer.Graphics.IBoundableGraphic)">
            <summary>
            Constructs an interactive builder for the specified boundable graphic.
            </summary>
            <param name="boundableGraphic">The boundable graphic to be interactively built.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveBoundableGraphicBuilder.Reset">
            <summary>
            Resets any internal state of the builder, allowing the same graphic to be rebuilt.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveBoundableGraphicBuilder.Rollback">
            <summary>
            Rolls back the internal state of the builder by one mouse click, allowing the same graphic to be rebuilt by resuming from an earlier state.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveBoundableGraphicBuilder.Start(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Passes user input to the builder when <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Start(Macro.ImageViewer.InputManagement.IMouseInformation)"/> is called on the owning tool.
            </summary>
            <param name="mouseInformation">The user input data.</param>
            <returns>True if the builder did something as a result of the call, and hence would like to receive capture; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveBoundableGraphicBuilder.Track(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Passes user input to the builder when <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Track(Macro.ImageViewer.InputManagement.IMouseInformation)"/> is called on the owning tool.
            </summary>
            <param name="mouseInformation">The user input data.</param>
            <returns>True if the builder handled the message; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveBoundableGraphicBuilder.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Passes user input to the builder when <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)"/> is called on the owning tool.
            </summary>
            <param name="mouseInformation">The user input data.</param>
            <returns>True if the tool should not release capture; False otherwise.</returns>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.InteractiveBoundableGraphicBuilder.Graphic">
            <summary>
            Gets the graphic that the builder is operating on.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.LineSegmentStretchControlGraphic">
            <summary>
            An interactive graphic that controls the end points of an <see cref="T:Macro.ImageViewer.Graphics.ILineSegmentGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.LineSegmentStretchControlGraphic.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.InteractiveGraphics.LineSegmentStretchControlGraphic"/>.
            </summary>
            <param name="subject">An <see cref="T:Macro.ImageViewer.Graphics.ILineSegmentGraphic"/> or an <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/> chain whose subject is an <see cref="T:Macro.ImageViewer.Graphics.ILineSegmentGraphic"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.LineSegmentStretchControlGraphic.#ctor(Macro.ImageViewer.InteractiveGraphics.LineSegmentStretchControlGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.LineSegmentStretchControlGraphic.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.LineSegmentStretchControlGraphic.CreateMemento">
            <summary>
            Captures the current state of this <see cref="T:Macro.ImageViewer.InteractiveGraphics.LineSegmentStretchControlGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.LineSegmentStretchControlGraphic.SetMemento(System.Object)">
            <summary>
            Restores the state of this <see cref="T:Macro.ImageViewer.InteractiveGraphics.LineSegmentStretchControlGraphic"/>.
            </summary>
            <param name="memento">The object that was originally created with <see cref="M:Macro.ImageViewer.InteractiveGraphics.LineSegmentStretchControlGraphic.CreateMemento"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.LineSegmentStretchControlGraphic.OnControlPointChanged(System.Int32,System.Drawing.PointF)">
            <summary>
            Called to notify the derived class of a control point change event.
            </summary>
            <param name="index">The index of the point that changed.</param>
            <param name="point">The value of the point that changed.</param>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.LineSegmentStretchControlGraphic.Subject">
            <summary>
            Gets the subject graphic that this graphic controls.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.LineSegmentStretchControlGraphic.CommandName">
            <summary>
            Gets a string that describes the type of control operation that this graphic provides.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic">
            <summary>
            An interactive graphic that controls the text content of an <see cref="T:Macro.ImageViewer.Graphics.ITextGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic"/>.
            </summary>
            <param name="subject">An <see cref="T:Macro.ImageViewer.Graphics.ITextGraphic"/> or an <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/> chain whose subject is an <see cref="T:Macro.ImageViewer.Graphics.ITextGraphic"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic.#ctor(Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic.StartEdit">
            <summary>
            Starts edit mode on the callout graphic by installing a <see cref="T:Macro.ImageViewer.EditBox"/> on the
            <see cref="T:Macro.ImageViewer.Tile"/> of the <see cref="P:Macro.ImageViewer.Graphics.Graphic.ParentPresentationImage">parent PresentationImage</see>.
            </summary>
            <returns>True if edit mode was successfully started; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic.EndEdit">
            <summary>
            Ends edit mode on the callout graphic if it is currently being edited. Has no effect otherwise.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic.GetExportedActions(System.String,Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Gets a set of exported <see cref="T:Macro.Desktop.Actions.IAction"/>s.
            </summary>
            <param name="site">The action model site at which the actions should reside.</param>
            <param name="mouseInformation">The mouse input when the action model was requested, such as in response to a context menu request.</param>
            <returns>A set of exported <see cref="T:Macro.Desktop.Actions.IAction"/>s.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic.Start(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Called by <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> in response to a mouse button click via <see cref="M:Macro.ImageViewer.InteractiveGraphics.ControlGraphic.Start(Macro.ImageViewer.InputManagement.IMouseInformation)"/>.
            </summary>
            <param name="mouseInformation">The mouse input information.</param>
            <returns>True if the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/> did something as a result of the call and hence would like to receive capture; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic.CreateMemento">
            <summary>
            Captures the state of an object.
            </summary>
            <remarks>
            The implementation of <see cref="M:Macro.Desktop.IMemorable.CreateMemento"/> should return an
            object containing enough state information so that
            when <see cref="M:Macro.Desktop.IMemorable.SetMemento(System.Object)"/> is called, the object can be restored
            to the original state.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic.SetMemento(System.Object)">
            <summary>
            Restores the state of an object.
            </summary>
            <param name="memento">The object that was
            originally created with <see cref="M:Macro.Desktop.IMemorable.CreateMemento"/>.</param>
            <remarks>
            The implementation of <see cref="M:Macro.Desktop.IMemorable.SetMemento(System.Object)"/> should return the 
            object to the original state captured by <see cref="M:Macro.Desktop.IMemorable.CreateMemento"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic.Subject">
            <summary>
            Gets the subject that this graphic controls.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic.CommandName">
            <summary>
            Gets a string that describes the type of control operation that this graphic provides.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic.Multiline">
            <summary>
            Gets or sets a value indicating if multiline input should be accepted in the editor.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic.DeleteOnEmpty">
            <summary>
            Gets or sets a value indicating if the graphic should be automatically deleted if the accepted text input is empty.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic.FontSize">
            <summary>
            Gets or sets the size in points.
            </summary>
            <remarks>
            Default value is 10 points.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic.FontName">
            <summary>
            Gets or sets the font.
            </summary>
            <remarks>
            Default value is "Arial".
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic.Macro#ImageViewer#Graphics#ITextGraphic#SizeInPoints">
            <summary>
            Gets or sets the size in points.
            </summary>
            <remarks>
            Default value is 10 points.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic.Macro#ImageViewer#Graphics#ITextGraphic#Font">
            <summary>
            Gets or sets the font.
            </summary>
            <remarks>
            Default value is "Arial".
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic.Location">
            <summary>
            Gets or sets the location of the center of the text.
            </summary>
            <remarks>
            This property is in either source or destination coordinates depending on the value of <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic.Dimensions">
            <summary>
            Gets the dimensions of the smallest rectangle that bounds the text.
            </summary>
            <remarks>
            This property is in either source or destination coordinates depending on the value of <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.TextEditControlGraphic.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.OverlayData">
            <summary>
            Represents DICOM overlay data.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.OverlayData.#ctor(System.Int32,System.Int32,System.Boolean,System.Byte[])">
            <summary>
            Constructs a new overlay data object.
            </summary>
            <param name="rows">The number of rows in the overlay.</param>
            <param name="columns">The number of columns in the overlay.</param>
            <param name="bigEndianWords">A value indicating if the <paramref name="overlayData"/> is stored as 16-bit words with big endian byte ordering</param>
            <param name="overlayData">The packed bits overlay data buffer.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.OverlayData.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte[])">
            <summary>
            Constructs a new overlay data object.
            </summary>
            <param name="offset">The initial offset of the first bit within the <paramref name="overlayData"/>.</param>
            <param name="rows">The number of rows in the overlay.</param>
            <param name="columns">The number of columns in the overlay.</param>
            <param name="bigEndianWords">A value indicating if the <paramref name="overlayData"/> is stored as 16-bit words with big endian byte ordering</param>
            <param name="overlayData">The packed bits overlay data buffer.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.OverlayData.Unpack">
            <summary>
            Unpacks the overlay data into an 8-bit overlay pixel data buffer.
            </summary>
            <returns>The unpacked, 8-bit overlay pixel data buffer.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.OverlayData.UnpackFromPixelData(System.Int32,System.Int32,System.Boolean,System.Byte[])">
            <summary>
            Extracts an overlay embedded in a DICOM Pixel Data buffer and unpacks it to form an 8-bit overlay pixel data buffer.
            </summary>
            <remarks>
            <para>
            Embedded overlays were last defined in the 2004 DICOM Standard. Since then, their usage has been retired.
            As such, there is no mechanism to directly read or encode embedded overlays. This method may be used as a
            helper to extract overlays in images encoded with a previous version of the standard for display in compatibility
            mode or storage as packed bit data.
            </para>
            <para>
            This overload processes all pixel allocations in the pixel data buffer. If the pixel data contains mutliple image frames,
            the unpacked overlay data buffer will also be multi-frame (with the key difference that the overlay data will always
            be 8 bits per pixel, rather than potentially 16 bits per pixel).
            </para>
            </remarks>
            <param name="bitPosition">The bit position of the overlay plane within the pixel data buffer.</param>
            <param name="bitsAllocated">The number of bits allocated per pixel. Must be 8 or 16.</param>
            <param name="bigEndianWords">A value indicating if the pixel data buffer is stored as 16-bit words with big endian byte ordering.</param>
            <param name="pixelData">The DICOM Pixel Data buffer containing an embedded overlay.</param>
            <returns>The unpacked, 8-bit overlay pixel data buffer.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.OverlayData.UnpackFromPixelData(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte[])">
            <summary>
            Extracts an overlay embedded in a DICOM Pixel Data buffer and unpacks it to form an 8-bit overlay pixel data buffer.
            </summary>
            <remarks>
            <para>
            Embedded overlays were last defined in the 2004 DICOM Standard. Since then, their usage has been retired.
            As such, there is no mechanism to directly read or encode embedded overlays. This method may be used as a
            helper to extract overlays in images encoded with a previous version of the standard for display in compatibility
            mode or storage as packed bit data.
            </para>
            </remarks>
            <param name="bitPosition">The bit position of the overlay plane within the pixel data buffer.</param>
            <param name="bitsAllocated">The number of bits allocated per pixel. Must be 8 or 16.</param>
            <param name="frameIndex">The 0-based index of the image frame from which an overlay plane is to be extracted.</param>
            <param name="frameLength">The size of an image frame in bytes.</param>
            <param name="bigEndianWords">A value indicating if the pixel data buffer is stored as 16-bit words with big endian byte ordering.</param>
            <param name="pixelData">The DICOM Pixel Data buffer containing an embedded overlay.</param>
            <returns>The unpacked, 8-bit overlay pixel data buffer.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.OverlayData.CreateOverlayData(System.Int32,System.Int32,System.Boolean,System.Byte[])">
            <summary>
            Creates a packed overlay data object using the specified 8-bit pixel data buffer.
            </summary>
            <remarks>
            This function creates an overlay from the non-zero pixels of the specified pixel data.
            </remarks>
            <param name="rows">The number of rows of pixels.</param>
            <param name="columns">The number of columns of pixels.</param>
            <param name="bigEndianWords">A value indicating if the output overlay data should be encoded as 16-bit words with big endian byte ordering.</param>
            <param name="overlayPixelData">The pixel data buffer containing the overlay contents.</param>
            <returns>A packed overlay data object representing the overlay contents.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.OverlayData.CreateOverlayData(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte[])">
            <summary>
            Creates a packed overlay data object using the specified pixel data buffer.
            </summary>
            <remarks>
            This function creates an overlay from the non-zero pixels of the specified pixel data. Only the bits
            specified by <paramref name="bitsStored"/> and <paramref name="highBit"/> are considered.
            </remarks>
            <param name="rows">The number of rows of pixels.</param>
            <param name="columns">The number of columns of pixels.</param>
            <param name="bitsStored">The number of bits stored per pixel.</param>
            <param name="bitsAllocated">The number of bits allocated per pixel. Must be 8 or 16.</param>
            <param name="highBit">The bit position of the most significant bit of a pixel.</param>
            <param name="bigEndianWords">A value indicating if the output overlay data should be encoded as 16-bit words with big endian byte ordering.</param>
            <param name="overlayPixelData">The pixel data buffer containing the overlay contents.</param>
            <returns>A packed overlay data object representing the overlay contents.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.OverlayData.Pack(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Byte,System.Boolean)">
            <summary>
            Converts an 8-bit byte buffer into a packed bit stream (zero and non-zero bytes mapping to bits 0 and 1 respectively).
            </summary>
            <param name="unpackedData">The buffer containing the unpacked data.</param>
            <param name="packedBits">A buffer to which the bits will be packed.</param>
            <param name="offset">The bit offset in <paramref name="packedBits"/> to which conversion will start.</param>
            <param name="length">The number of bits to be converted.</param>
            <param name="inputMask">The input mask for each 8-bit input window of the <paramref name="unpackedData"/>.</param>
            <param name="bigEndianWords">Whether or not <paramref name="packedBits"/> is in 16-bit big endian words.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.OverlayData.Pack(System.Byte[],System.Byte[],System.Int32,System.Int32,System.UInt16,System.Boolean)">
            <summary>
            Converts a 16-bit byte buffer into a packed bit stream (zero and non-zero words mapping to bits 0 and 1 respectively).
            </summary>
            <param name="unpackedData">The buffer containing the unpacked data in local machine endianess.</param>
            <param name="packedBits">A buffer to which the bits will be packed.</param>
            <param name="offset">The bit offset in <paramref name="packedBits"/> to which conversion will start.</param>
            <param name="length">The number of bits to be converted.</param>
            <param name="inputMask">The input mask for each 16-bit input window of the <paramref name="unpackedData"/>.</param>
            <param name="bigEndianWords">Whether or not <paramref name="packedBits"/> is in 16-bit big endian words.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.OverlayData.Unpack(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a packed bit stream into an 8-bit byte buffer (bits 0 and 1 mapping to bytes 0x00 and 0xFF respectively).
            </summary>
            <param name="packedBits">The buffer containing the packed bits.</param>
            <param name="unpackedData">A buffer to which the bits will be unpacked.</param>
            <param name="offset">The bit offset in <paramref name="packedBits"/> from which conversion will start.</param>
            <param name="length">The number of bits to be converted.</param>
            <param name="bigEndianWords">Whether or not the <paramref name="packedBits"/> is in 16-bit big endian words.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.OverlayData.Extract(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Extracts a specified bit from a pixel data buffer into an 8-bit byte buffer (bits 0 and 1 mapping to bytes 0x00 and 0xFF respectively).
            </summary>
            <param name="pixelData">The buffer containing the pixel data.</param>
            <param name="extractedData">A buffer to which the bits will be extracted.</param>
            <param name="offset">The byte offset in <paramref name="pixelData"/> from which extraction will start.</param>
            <param name="length">The number of pixels from which a bit will be extracted.</param>
            <param name="bitsAllocated">The number of bits allocated per pixel in the <paramref name="pixelData"/>.</param>
            <param name="bitPosition">The 0-based bit position within a pixel allocation which is to be extracted.</param>
            <param name="bigEndianWords">Whether or not the <paramref name="pixelData"/> is in 16-bit big endian words.</param>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.OverlayData.Raw">
            <summary>
            Gets the raw, packed bits overlay data buffer.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.InvariantLinePrimitive">
            <summary>
            A linear <see cref="T:Macro.ImageViewer.Graphics.InvariantPrimitive"/>.
            </summary>
            <remarks>
            <para>This primitive graphic defines a line whose position can be fixed to the
            source coordinate system and whose length will be fixed relative to the
            destination coordinate system.</para>
            <para>The <see cref="P:Macro.ImageViewer.Graphics.InvariantPrimitive.Location"/> defines the point
            that is affixed to the source coordinate system, and the <see cref="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.InvariantTopLeft"/>
            and <see cref="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.InvariantBottomRight"/> properties define the length
            and orientation of the line.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantLinePrimitive.#ctor">
            <summary>
            Constructs a new invariant line primitive.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantLinePrimitive.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit test on the <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> at a given point.
            </summary>
            <param name="point">The mouse position in destination coordinates.</param>
            <returns>
            <b>True</b> if <paramref name="point"/> "hits" the <see cref="T:Macro.ImageViewer.Graphics.InvariantLinePrimitive"/>,
            <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantLinePrimitive.GetClosestPoint(System.Drawing.PointF)">
            <summary>
            Gets the point on the <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> closest to the specified point.
            </summary>
            <param name="point">A point in either source or destination coordinates.</param>
            <returns>The point on the graphic closest to the given <paramref name="point"/>.</returns>
            <remarks>
            <para>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>,
            the computation will be carried out in either source
            or destination coordinates.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantLinePrimitive.Contains(System.Drawing.PointF)">
            <summary>
            Returns a value indicating whether the specified point is
            contained in the graphic.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantLinePrimitive.OnTopLeftChanged">
            <summary>
            Called when the value of <see cref="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.TopLeft"/> or <see cref="P:Macro.ImageViewer.Graphics.InvariantPrimitive.Location"/> changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantLinePrimitive.OnBottomRightChanged">
            <summary>
            Called when the value of <see cref="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.BottomRight"/> or <see cref="P:Macro.ImageViewer.Graphics.InvariantPrimitive.Location"/> changes.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantLinePrimitive.Macro#ImageViewer#Graphics#ILineSegmentGraphic#Point1">
            <summary>
            The endpoint of the line as specified by <see cref="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.TopLeft"/> in either source or destination coordinates.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantLinePrimitive.Macro#ImageViewer#Graphics#ILineSegmentGraphic#Point2">
            <summary>
            The endpoint of the line as specified by <see cref="P:Macro.ImageViewer.Graphics.InvariantBoundablePrimitive.BottomRight"/> in either source or destination coordinates.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.InvariantLinePrimitive.Macro#ImageViewer#Graphics#ILineSegmentGraphic#Point1Changed">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.Graphics.ILineSegmentGraphic.Point1"/> property changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.InvariantLinePrimitive.Macro#ImageViewer#Graphics#ILineSegmentGraphic#Point2Changed">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.Graphics.ILineSegmentGraphic.Point2"/> property changed.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.AddGraphicUndoableCommand">
            <summary>
            An <see cref="T:Macro.Desktop.UndoableCommand"/> for adding a graphic to a <see cref="T:Macro.ImageViewer.Graphics.GraphicCollection"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.AddGraphicUndoableCommand.#ctor(Macro.ImageViewer.Graphics.IGraphic,Macro.ImageViewer.Graphics.GraphicCollection)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.AddGraphicUndoableCommand.Execute">
            <summary>
            On first call, adds the graphic to the collection.  Subsequent calls perform an insert.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.AddGraphicUndoableCommand.Unexecute">
            <summary>
            <see cref="M:Macro.ImageViewer.Graphics.AddGraphicUndoableCommand.Unexecute"/>s the add or insert command (e.g. removes the graphic).
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.RescaleUnits">
            <summary>
            Represents the units of the output of the rescaling function (modality LUT) in a DICOM image.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.RescaleUnits.None">
            <summary>
            Indicates that values are unitless.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.RescaleUnits.Unspecified">
            <summary>
            Indicates that the units of the values are unknown.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.RescaleUnits.GetRescaleUnits(Macro.Dicom.IDicomAttributeProvider)">
            <summary>
            Gets the units of the output of the rescaling function (modality LUT) in the specified DICOM data set.
            </summary>
            <param name="dicomAttributeProvider">The DICOM data set.</param>
            <returns>A <see cref="T:Macro.ImageViewer.StudyManagement.RescaleUnits"/> instance representing the units of the output of the rescaling function.</returns>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.RescaleUnits.HounsfieldUnits">
            <summary>
            Indicates that the values are in Hounsfield Units (HU).
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.RescaleUnits.OpticalDensity">
            <summary>
            Indicates that the values are in 1/1000ths of optical density (i.e. 2140 represents an optical density of 2.140).
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.RescaleUnits.ParseRescaleType(System.String)">
            <summary>
            Parses a <see cref="T:Macro.ImageViewer.StudyManagement.RescaleUnits"/> from the value of a Rescale Type (0028,1054) attribute.
            </summary>
            <param name="rescaleType">The rescale type.</param>
            <returns>A <see cref="T:Macro.ImageViewer.StudyManagement.RescaleUnits"/> instance representing the rescale type, or <see cref="F:Macro.ImageViewer.StudyManagement.RescaleUnits.None"/> if the value is empty.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.RescaleUnits.ToRescaleType">
            <summary>
            Formats the <see cref="T:Macro.ImageViewer.StudyManagement.RescaleUnits"/> as a string for the Rescale Type (0028,1054) attribute.
            </summary>
            <returns>A rescale type string value.</returns>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.RescaleUnits.Cm2">
            <summary>
            Indicates that the values are in square centimetres.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.RescaleUnits.Cm2PerMl">
            <summary>
            Indicates that the values are in square centimetres per millilitre.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.RescaleUnits.Percent">
            <summary>
            Indicates that the values are in percent.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.RescaleUnits.CountsPerSec">
            <summary>
            Indicates that the values are in counts per second.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.RescaleUnits.Counts">
            <summary>
            Indicates that the values are in counts.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.RescaleUnits.BecquerelsPerMl">
            <summary>
            Indicates that the values are in becquerels per millilitre.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.RescaleUnits.MgPerMinPerMl">
            <summary>
            Indicates that the values are in milligrams per minute per millilitre.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.RescaleUnits.UmolPerMinPerMl">
            <summary>
            Indicates that the values are in micromoles per minute per millilitre.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.RescaleUnits.MlPerMinPerG">
            <summary>
            Indicates that the values are in millilitres per minute per gram.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.RescaleUnits.MlPerG">
            <summary>
            Indicates that the values are in millilitres per gram.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.RescaleUnits.PerCm">
            <summary>
            Indicates that the values are in units per centimetre.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.RescaleUnits.UmolPerMl">
            <summary>
            Indicates that the values are in micromoles per millilitre.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.RescaleUnits.PropCounts">
            <summary>
            Indicates that the values are proportional to counts.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.RescaleUnits.PropCountsPerSec">
            <summary>
            Indicates that the values are proportional to counts per second.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.RescaleUnits.MlPerMinPerMl">
            <summary>
            Indicates that the values are in millilitres per minute per millilitre.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.RescaleUnits.MlPerMl">
            <summary>
            Indicates that the values are in millilitres per millilitre.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.RescaleUnits.GPerMl">
            <summary>
            Indicates that the values are in grams per millilitre.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.RescaleUnits.StdDev">
            <summary>
            Indicates that the values are in standard deviations.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.RescaleUnits.ParsePetSeriesUnits(System.String)">
            <summary>
            Parses a <see cref="T:Macro.ImageViewer.StudyManagement.RescaleUnits"/> from the value of a Units (0054,1001) attribute in a PET Series Module.
            </summary>
            <param name="units">The PET series units.</param>
            <returns>A <see cref="T:Macro.ImageViewer.StudyManagement.RescaleUnits"/> instance representing the PET series units type, or <see cref="F:Macro.ImageViewer.StudyManagement.RescaleUnits.Unspecified"/> if the value is empty.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.RescaleUnits.ToPetSeriesUnits">
            <summary>
            Formats the <see cref="T:Macro.ImageViewer.StudyManagement.RescaleUnits"/> as a string for the Units (0054,1001) attribute in the PET Series Module.
            </summary>
            <returns>A PET series units string value.</returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.RescaleUnits.#ctor(System.String,System.String)">
            <summary>
            Constructor for units not specified by DICOM.
            </summary>
            <param name="codeRescaleType"></param>
            <param name="codeUnits"></param>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.RescaleUnits.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor for DICOM-defined units.
            </summary>
            <param name="codeRescaleType"></param>
            <param name="codeUnits"></param>
            <param name="label"></param>
            <param name="description"></param>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.RescaleUnits.Code">
            <summary>
            Gets the code string for the unit.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.RescaleUnits.Label">
            <summary>
            Gets a label for the unit suitable for usage when formatting a value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.RescaleUnits.Description">
            <summary>
            Gets a description of the unit's meaning.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.ActivityMonitorTool">
            <summary>
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.Dicom.DicomOverlayDeserializationException">
            <summary>
            Represents exceptions encountered while deserializing DICOM overlay planes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomOverlayDeserializationException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomOverlayDeserializationException"/> with a default error message.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomOverlayDeserializationException.#ctor(System.UInt16,Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSource)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomOverlayDeserializationException"/> with a default error message.
            </summary>
            <param name="overlayGroup">The overlay plane group on which the error occurred.</param>
            <param name="overlaySource">The source of the overlay plane on which the error occurred.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomOverlayDeserializationException.#ctor(System.UInt16,Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSource,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomOverlayDeserializationException"/> with the specified error message.
            </summary>
            <param name="overlayGroup">The overlay plane group on which the error occurred.</param>
            <param name="overlaySource">The source of the overlay plane on which the error occurred.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomOverlayDeserializationException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomOverlayDeserializationException"/> with a default error message.
            </summary>
            <param name="innerException">The exception that is the cause of the current exception, if available.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomOverlayDeserializationException.#ctor(System.UInt16,Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSource,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomOverlayDeserializationException"/> with a default error message.
            </summary>
            <param name="overlayGroup">The overlay plane group on which the error occurred.</param>
            <param name="overlaySource">The source of the overlay plane on which the error occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception, if available.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomOverlayDeserializationException.#ctor(System.UInt16,Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSource,System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.DicomOverlayDeserializationException"/> with the specified error message.
            </summary>
            <param name="overlayGroup">The overlay plane group on which the error occurred.</param>
            <param name="overlaySource">The source of the overlay plane on which the error occurred.</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, if available.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomOverlayDeserializationException.FormatOverlayPlaneId(System.UInt16,Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSource)">
            <summary>
            Gets a formatted string identifying the overlay plane on which an error occurred.
            </summary>
            <param name="group">The overlay plane group on which the error occurred.</param>
            <param name="source">The source of the overlay plane on which the error occurred.</param>
            <returns>A formatted string identifying the overlay plane on which an error occurred.</returns>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomOverlayDeserializationException.OverlayGroup">
            <summary>
            Gets the overlay plane group on which the error occurred.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomOverlayDeserializationException.OverlaySource">
            <summary>
            Gets the source of the overlay plane on which the error occurred.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.BaseTools.GraphicTool">
            <summary>
            A base class for tools that operate on <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>
            objects.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.GraphicTool.Enabled">
            <summary>
            Gets or sets a value indicating whether the tool is enabled.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.BaseTools.GraphicTool.EnabledChanged">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.BaseTools.GraphicTool.Enabled"/> property has changed.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BaseTools.GraphicTool.Visible">
            <summary>
            Gets or sets a value indicating whether the tool is visible.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.BaseTools.GraphicTool.VisibleChanged">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.BaseTools.GraphicTool.Visible"/> property has changed.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.DrawableUndoableCommand">
            <summary>
            A subclass of <see cref="T:Macro.Desktop.UndoableCommand"/> for <see cref="T:Macro.ImageViewer.IDrawable"/> objects.
            </summary>
            <remarks>
            Often, when an <see cref="T:Macro.Desktop.UndoableCommand"/> is <see cref="M:Macro.ImageViewer.DrawableUndoableCommand.Execute"/>d or
            <see cref="M:Macro.ImageViewer.DrawableUndoableCommand.Unexecute"/>d, it is necessary to refresh an <see cref="T:Macro.ImageViewer.IDrawable"/>
            object, such as an <see cref="T:Macro.ImageViewer.ITile"/>.  This class automatically calls
            <see cref="M:Macro.ImageViewer.IDrawable.Draw"/> on the object passed to the constructor
            after <see cref="M:Macro.ImageViewer.DrawableUndoableCommand.Execute"/> and <see cref="M:Macro.ImageViewer.DrawableUndoableCommand.Unexecute"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.DrawableUndoableCommand.#ctor(Macro.ImageViewer.IDrawable)">
            <summary>
            Constructor.
            </summary>
            <param name="drawable">The object to redraw after <see cref="M:Macro.ImageViewer.DrawableUndoableCommand.Execute"/> or <see cref="M:Macro.ImageViewer.DrawableUndoableCommand.Unexecute"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.DrawableUndoableCommand.Execute">
            <summary>
            Performs a 'redo' and calls <see cref="M:Macro.ImageViewer.IDrawable.Draw"/> on <see cref="P:Macro.ImageViewer.DrawableUndoableCommand.Drawable"/> afterwards.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DrawableUndoableCommand.Unexecute">
            <summary>
            Performs an 'undo' and calls <see cref="M:Macro.ImageViewer.IDrawable.Draw"/> on <see cref="P:Macro.ImageViewer.DrawableUndoableCommand.Drawable"/> afterwards.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DrawableUndoableCommand.Drawable">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.IDrawable"/> object that will be redrawn on <see cref="M:Macro.ImageViewer.DrawableUndoableCommand.Unexecute"/>
            or <see cref="M:Macro.ImageViewer.DrawableUndoableCommand.Execute"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.SopCollection">
            <summary>
            A collection of <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> objects.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.SopCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.SopCollection"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.ImageSop">
            <summary>
            A DICOM Image SOP Instance.
            </summary>
            <remarks>
            <para>
            Note that there should no longer be any need to derive from this class; the <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>, <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>
            and <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/> classes are now just simple Bridge classes (see Bridge Design Pattern)
            to <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> and <see cref="T:Macro.ImageViewer.StudyManagement.ISopFrameData"/>.  See the
            remarks for <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> for more information.
            </para>
            <para>Also, for more information on 'transient references' and the lifetime of <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s,
            see <see cref="T:Macro.ImageViewer.StudyManagement.ISopReference"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.Sop">
            <summary>
            A DICOM SOP Instance.
            </summary>
            <remarks>
            <para>
            Note that there should no longer be any need to derive from this class; the <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>, <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>
            and <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/> classes are now just simple Bridge classes (see Bridge Design Pattern)
            to <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> and <see cref="T:Macro.ImageViewer.StudyManagement.ISopFrameData"/>.  See the
            remarks for <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> for more information.
            </para>
            <para>Also, for more information on 'transient references' and the lifetime of <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s,
            see <see cref="T:Macro.ImageViewer.StudyManagement.ISopReference"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Sop.CreateTransientReference">
            <summary>
            Creates a new 'transient reference' to this <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>.
            </summary>
            <remarks>See <see cref="T:Macro.ImageViewer.StudyManagement.ISopReference"/> for a detailed explanation of 'transient references'.</remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Sop.Dispose">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Sop.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> from a local file.
            </summary>
            <param name="filename">The path to a local DICOM Part 10 file.</param>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Sop.#ctor(Macro.ImageViewer.StudyManagement.ISopDataSource)">
            <summary>
            Creates a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Sop.GetIdentifier">
            <summary>
            Gets an <see cref="T:Macro.Dicom.ServiceModel.Query.IImageIdentifier"/> for this <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>.
            </summary>
            <remarks>An <see cref="T:Macro.Dicom.ServiceModel.Query.IImageIdentifier"/> can be used in situations where you only
            need some data about the <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>, but not the <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> itself.  It can be problematic
            to hold references to <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> objects outside the context of an <see cref="T:Macro.ImageViewer.IImageViewer"/>
            <b>without creating a <see cref="T:Macro.ImageViewer.StudyManagement.ISopReference">transient reference</see></b>
            because they are no longer valid when the viewer is closed; in these situations, it may be appropriate to
            use an identifier.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Sop.GetTag(System.UInt32,System.UInt16@,System.Boolean@)">
            <summary>
            Gets a DICOM tag (16 bit, unsigned).
            when a tag
            </summary>
            <remarks>
            GetTag methods should make no assumptions about what to return in the <paramref name="value"/> parameter
            when a tag does not exist.  It should simply return the default value for <paramref name="value"/>'s Type,
            which is either null, 0 or "" depending on whether it is a reference or value Type.  Similarly, no data validation
            should be done in these methods either.  It is expected that the unaltered tag value will be returned.
            </remarks>
            <param name="tag"></param>
            <param name="value"></param>
            <param name="tagExists"></param>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Sop.Item(Macro.Dicom.DicomTag)"/>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Sop.Item(System.UInt32)"/>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Sop.GetTag(System.UInt32,System.UInt16@,System.UInt32,System.Boolean@)">
            <summary>
            Gets a DICOM tag with value multiplicity (16 bit, unsigned).
            </summary>
            <remarks>
            GetTag methods should make no assumptions about what to return in the <paramref name="value"/> parameter
            when a tag does not exist.  It should simply return the default value for <paramref name="value"/>'s Type,
            which is either null, 0 or "" depending on whether it is a reference or value Type.  Similarly, no data validation
            should be done in these methods either.  It is expected that the unaltered tag value will be returned.
            </remarks>
            <param name="tag"></param>
            <param name="value"></param>
            <param name="position"></param>
            <param name="tagExists"></param>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Sop.Item(Macro.Dicom.DicomTag)"/>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Sop.Item(System.UInt32)"/>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Sop.GetTag(System.UInt32,System.Int32@,System.Boolean@)">
            <summary>
            Gets a DICOM tag (integer).
            </summary>
            <remarks>
            GetTag methods should make no assumptions about what to return in the <paramref name="value"/> parameter
            when a tag does not exist.  It should simply return the default value for <paramref name="value"/>'s Type,
            which is either null, 0 or "" depending on whether it is a reference or value Type.  Similarly, no data validation
            should be done in these methods either.  It is expected that the unaltered tag value will be returned.
            </remarks>
            <param name="tag"></param>
            <param name="value"></param>
            <param name="tagExists"></param>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Sop.Item(Macro.Dicom.DicomTag)"/>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Sop.Item(System.UInt32)"/>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Sop.GetTag(System.UInt32,System.Int32@,System.UInt32,System.Boolean@)">
            <summary>
            Gets a DICOM tag with value multiplicity (integer).
            </summary>
            <remarks>
            GetTag methods should make no assumptions about what to return in the <paramref name="value"/> parameter
            when a tag does not exist.  It should simply return the default value for <paramref name="value"/>'s Type,
            which is either null, 0 or "" depending on whether it is a reference or value Type.  Similarly, no data validation
            should be done in these methods either.  It is expected that the unaltered tag value will be returned.
            </remarks>
            <param name="tag"></param>
            <param name="value"></param>
            <param name="position"></param>
            <param name="tagExists"></param>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Sop.Item(Macro.Dicom.DicomTag)"/>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Sop.Item(System.UInt32)"/>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Sop.GetTag(System.UInt32,System.Double@,System.Boolean@)">
            <summary>
            Gets a DICOM tag (double).
            </summary>
            <remarks>
            GetTag methods should make no assumptions about what to return in the <paramref name="value"/> parameter
            when a tag does not exist.  It should simply return the default value for <paramref name="value"/>'s Type,
            which is either null, 0 or "" depending on whether it is a reference or value Type.  Similarly, no data validation
            should be done in these methods either.  It is expected that the unaltered tag value will be returned.
            </remarks>
            <param name="tag"></param>
            <param name="value"></param>
            <param name="tagExists"></param>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Sop.Item(Macro.Dicom.DicomTag)"/>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Sop.Item(System.UInt32)"/>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Sop.GetTag(System.UInt32,System.Double@,System.UInt32,System.Boolean@)">
            <summary>
            Gets a DICOM tag with value multiplicity (double).
            </summary>
            <remarks>
            GetTag methods should make no assumptions about what to return in the <paramref name="value"/> parameter
            when a tag does not exist.  It should simply return the default value for <paramref name="value"/>'s Type,
            which is either null, 0 or "" depending on whether it is a reference or value Type.  Similarly, no data validation
            should be done in these methods either.  It is expected that the unaltered tag value will be returned.
            </remarks>
            <param name="tag"></param>
            <param name="value"></param>
            <param name="position"></param>
            <param name="tagExists"></param>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Sop.Item(Macro.Dicom.DicomTag)"/>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Sop.Item(System.UInt32)"/>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Sop.GetTag(System.UInt32,System.String@,System.Boolean@)">
            <summary>
            Gets a DICOM tag (string).
            </summary>
            <remarks>
            GetTag methods should make no assumptions about what to return in the <paramref name="value"/> parameter
            when a tag does not exist.  It should simply return the default value for <paramref name="value"/>'s Type,
            which is either null, 0 or "" depending on whether it is a reference or value Type.  Similarly, no data validation
            should be done in these methods either.  It is expected that the unaltered tag value will be returned.
            </remarks>
            <param name="tag"></param>
            <param name="value"></param>
            <param name="tagExists"></param>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Sop.Item(Macro.Dicom.DicomTag)"/>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Sop.Item(System.UInt32)"/>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Sop.GetTag(System.UInt32,System.String@,System.UInt32,System.Boolean@)">
            <summary>
            Gets a DICOM tag with value multiplicity (string).
            </summary>
            <remarks>
            GetTag methods should make no assumptions about what to return in the <paramref name="value"/> parameter
            when a tag does not exist.  It should simply return the default value for <paramref name="value"/>'s Type,
            which is either null, 0 or "" depending on whether it is a reference or value Type.  Similarly, no data validation
            should be done in these methods either.  It is expected that the unaltered tag value will be returned.
            </remarks>
            <param name="tag"></param>
            <param name="value"></param>
            <param name="position"></param>
            <param name="tagExists"></param>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Sop.Item(Macro.Dicom.DicomTag)"/>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Sop.Item(System.UInt32)"/>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Sop.GetTag(System.UInt32,System.Byte[]@,System.Boolean@)">
            <summary>
            Gets a DICOM OB or OW tag (byte[]), not including encapsulated pixel data.
            </summary>
            <remarks>
            GetTag methods should make no assumptions about what to return in the <paramref name="value"/> parameter
            when a tag does not exist.  It should simply return the default value for <paramref name="value"/>'s Type,
            which is either null, 0 or "" depending on whether it is a reference or value Type.  Similarly, no data validation
            should be done in these methods either.  It is expected that the unaltered tag value will be returned.
            </remarks>
            <param name="tag"></param>
            <param name="value"></param>
            <param name="tagExists"></param>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Sop.Item(Macro.Dicom.DicomTag)"/>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Sop.Item(System.UInt32)"/>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Sop.GetMultiValuedTagRaw(System.UInt32,System.String@,System.Boolean@)">
            <summary>
            Gets an entire DICOM tag to a string, encoded as a Dicom array if VM &gt; 1.
            </summary>
            <remarks>
            GetTag methods should make no assumptions about what to return in the <paramref name="value"/> parameter
            when a tag does not exist.  It should simply return the default value for <paramref name="value"/>'s Type,
            which is either null, 0 or "" depending on whether it is a reference or value Type.  Similarly, no data validation
            should be done in these methods either.  It is expected that the unaltered tag value will be returned.
            </remarks>
            <param name="tag"></param>
            <param name="value"></param>
            <param name="tagExists"></param>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Sop.Item(Macro.Dicom.DicomTag)"/>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.Sop.Item(System.UInt32)"/>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Sop.Create(Macro.ImageViewer.StudyManagement.ISopDataSource)">
            <summary>
            Creates either a <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> or <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/> based
            on the <see cref="T:Macro.Dicom.SopClass"/> of the given <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Sop.Create(System.String)">
            <summary>
            Creates either a <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> or <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/> based
            on the <see cref="T:Macro.Dicom.SopClass"/> of the SOP instance specified by <paramref name="filename"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Sop.Validate">
            <summary>
            The <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> class (and derived classes) should not validate tag values from 
            within its properties, but instead clients should call this method at an appropriate time
            to determine whether or not the <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> should be used or discarded as invalid.
            </summary>
            <exception cref="T:Macro.ImageViewer.StudyManagement.SopValidationException">Thrown when validation fails.</exception>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Sop.ValidateInternal">
            <summary>
            Validates the <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> object.
            </summary>
            <remarks>
            Derived classes should call the base class implementation first, and then do further validation.
            The <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> class validates properties deemed vital to usage of the object.
            </remarks>
            <exception cref="T:Macro.ImageViewer.StudyManagement.SopValidationException">Thrown when validation fails.</exception>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Sop.Dispose(System.Boolean)">
            <summary>
            Disposes all resources being used by this <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Sop.ToString">
            <summary>
            Returns the SOP instance UID in string form.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.DataSource">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>'s data source.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.IsStored">
            <summary>
            Gets a value indicating whether or not the SOP instance is 'stored',
            for example in the local store or a remote PACS server.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.IsImage">
            <summary>
            Gets a value indicating whether or not the SOP instance is an image class.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.ParentSeries">
            <summary>
            Gets the parent <see cref="T:Macro.ImageViewer.StudyManagement.Series"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.TransferSyntaxUid">
            <summary>
            Gets the Transfer Syntax UID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.SopInstanceUid">
            <summary>
            Gets the SOP Instance UID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.SopClassUid">
            <summary>
            Gets the SOP Class UID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.SpecificCharacterSet">
            <summary>
            Gets the specific character set.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.InstanceNumber">
            <summary>
            Gets the instance number.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.PatientsName">
            <summary>
            Gets the patient's name.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.PatientId">
            <summary>
            Gets the patient ID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.PatientsBirthDate">
            <summary>
            Gets the patient's birth date.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.PatientsBirthTime">
            <summary>
            Gets the patient's birth time.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.PatientsSex">
            <summary>
            Gets the patient's sex.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.PatientSpeciesDescription">
            <summary>
            Gets the patient species description.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.PatientSpeciesCodeSequenceCodingSchemeDesignator">
            <summary>
            Gets the coding scheme designator of the patient species code sequence.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.PatientSpeciesCodeSequenceCodeValue">
            <summary>
            Gets the code value of the patient species code sequence.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.PatientSpeciesCodeSequenceCodeMeaning">
            <summary>
            Gets the code meaning of the patient species code sequence.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.PatientBreedDescription">
            <summary>
            Gets the patient breed description.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.PatientBreedCodeSequenceCodingSchemeDesignator">
            <summary>
            Gets the coding scheme designator of the patient breed code sequence.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.PatientBreedCodeSequenceCodeValue">
            <summary>
            Gets the code value of the patient breed code sequence.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.PatientBreedCodeSequenceCodeMeaning">
            <summary>
            Gets the code meaning of the patient breed code sequence.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.ResponsiblePerson">
            <summary>
            Gets the responsible person for the patient.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.ResponsiblePersonRole">
            <summary>
            Gets the role of the responsible person for the patient.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.ResponsibleOrganization">
            <summary>
            Gets the organization responsible for the patient.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.StudyInstanceUid">
            <summary>
            Gets the Study Instance UID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.StudyDate">
            <summary>
            Gets the study date.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.StudyTime">
            <summary>
            Gets the study time.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.ReferringPhysiciansName">
            <summary>
            Gets the referring physician's name.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.AccessionNumber">
            <summary>
            Gets the accession number.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.StudyDescription">
            <summary>
            Gets the study description.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.StudyId">
            <summary>
            Gets the study ID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.NameOfPhysiciansReadingStudy">
            <summary>
            Gets the names of physicians reading the study.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.AdmittingDiagnosesDescription">
            <summary>
            Gets the admitting diagnoses descriptions.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.PatientsAge">
            <summary>
            Gets the patient's age.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.AdditionalPatientsHistory">
            <summary>
            Gets the additional patient's history.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.Manufacturer">
            <summary>
            Gets the manufacturer.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.InstitutionName">
            <summary>
            Gets the institution name.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.StationName">
            <summary>
            Gets the station name.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.InstitutionalDepartmentName">
            <summary>
            Gets the institutional department name.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.ManufacturersModelName">
            <summary>
            Gets the manufacturer's model name.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.Modality">
            <summary>
            Gets the modality.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.SeriesInstanceUid">
            <summary>
            Gets the series instance UID.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.SeriesNumber">
            <summary>
            Gets the series number.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.Laterality">
            <summary>
            Gets the laterality.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.SeriesDate">
            <summary>
            Gets the series date.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.SeriesTime">
            <summary>
            Gets the series time.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.PerformingPhysiciansName">
            <summary>
            Gets the names of performing physicians.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.ProtocolName">
            <summary>
            Gets the protocol name.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.SeriesDescription">
            <summary>
            Gets the series description.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.OperatorsName">
            <summary>
            Gets the names of operators.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.BodyPartExamined">
            <summary>
            Gets the body part examined.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.PatientPosition">
            <summary>
            Gets the patient position.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.Item(Macro.Dicom.DicomTag)">
            <summary>
            Gets a specific DICOM tag in the underlying native object.
            </summary>
            <remarks>
            <see cref="T:Macro.Dicom.DicomAttribute"/>s returned from this indexer are considered
            read-only and should not be modified in any way.
            </remarks>
            <param name="tag">The DICOM tag to retrieve.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the specified DICOM tag is not within the valid range for either the meta info or the dataset.</exception>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Sop.Item(System.UInt32)">
            <summary>
            Gets a specific DICOM tag in the underlying native object.
            </summary>
            <remarks>
            <see cref="T:Macro.Dicom.DicomAttribute"/>s returned from this indexer are considered
            read-only and should not be modified in any way.
            </remarks>
            <param name="tag">The DICOM tag to retrieve.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the specified DICOM tag is not within the valid range for either the meta info or the dataset.</exception>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.ISopReference">
            <summary>
            Interface defining a 'transient reference' to a <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>.
            </summary>
            <remarks>
            <para>
            In a Framework or SDK, managed objects often implement the
            <see cref="T:System.IDisposable"/> pattern even when they don't explicitly contain
            any unmanaged resources.  This is done in cases where it is possible, or perhaps very likely,
            that a derived class would in fact have unmanaged resources that need
            to be disposed or cleaned up.  Such is the case with classes like <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/>.
            </para>
            <para>
            Also, occasionally, the clear 'owner' of an object, particularly one that may be
            passed around from object to object, is not easy to determine, or simply doesn't exist.
            For managed objects that contain no unmanaged resources, this doesn't matter because
            the object(s) can simply be discarded and left for the garbage collector to
            clean up.  But what about objects that must be disposed, but have no clear owner?
            One might argue that this points to a design flaw, and that may very well be correct in most cases.
            However, one totally valid case of this is objects that are cached for reasons of
            memory conservation, like <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/>, that must also implement
            <see cref="T:System.IDisposable"/>.  How do you determine when to properly dispose these objects
            when there is no one parent container that disposes them when it is itself disposed
            (for example, the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> or it's <see cref="T:Macro.ImageViewer.StudyManagement.StudyTree"/>)?
            The only plausible way is to implement reference counting on the cached objects and only truly perform
            the disposal when the reference count goes to zero.
            </para>
            <para>
            To solve all of these issues, enter the 'transient reference'.  So, how does it work?
            Basically, each transient reference object can itself be 'owned' by another object and disposed
            at the time the owning object is disposed.  This essentially allows many objects to reference
            the same shared/cached object, while also solving the problem of ownership.  Each object owns
            its reference object, and the object it points to doesn't actually have to be explicitly owned at all!
            Instead, all the entities that own a transient reference essentially share ownership of the referenced
            object, and only once all the transient references are disposed is the underlying referenced object
            disposed.  It's reference counting, but way better.  Because the 'reference count' is always equal
            to the total number of transient reference objects, things are suddenly much easier to manage.
            </para>
            <para>
            In the viewer framework, we don't typically work directly with <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/>s because
            the interface is far too basic to have to work with directly.  Instead, we work with <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>,
            <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/> and <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/> objects that are simply bridges (see Bridge Design Pattern)
            to <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> and <see cref="T:Macro.ImageViewer.StudyManagement.ISopFrameData"/>.  The <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> class is also the entity responsible for
            transparently managing the caching of the <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/>s passed to its constructor,
            therefore we work with 'transient references' to <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s and <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>s instead
            of <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> and <see cref="T:Macro.ImageViewer.StudyManagement.ISopFrameData"/>.
            </para>
            <para>
            The recommended practice, when taking a reference to a <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> outside of it's current owner
            and holding a reference to it (like in the Clipboard, for example) is to get a <see cref="T:Macro.ImageViewer.StudyManagement.ISopReference">transient reference</see>
            to the <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> or <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>.  When you are done with the transient reference, call Dispose on it.
            The object that owns the <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>, normally the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> will dispose the
            <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>, but internally, the <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> will not do any cleanup until all transient references to it
            are also disposed.  If you create a <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> yourself, it is good practice to dispose the <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>
            <b>and</b> all it's transient references in order to ensure the <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> is released
            from the cache.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ISopReference.Clone">
            <summary>
            Clones an existing <see cref="T:Macro.ImageViewer.StudyManagement.ISopReference"/>, creating a new transient reference.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ImageSop.#ctor(System.String)">
            <summary>
            Constructs a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/> from a local file.
            </summary>
            <param name="filename">The path to a local DICOM Part 10 file.</param>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ImageSop.#ctor(Macro.ImageViewer.StudyManagement.ISopDataSource)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ImageSop.GetNormalizedPixelData">
            <summary>
            Gets pixel data in normalized form.
            </summary>
            <remarks>
            See the comments for <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/> for an explanation of 'normalized' pixel data.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ImageSop.CreateFrame(System.Int32)">
            <summary>
            Factory method to create the frame with the specified frame number.
            </summary>
            <param name="frameNumber">The numeric identifier of the <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/> to create; frame numbers are <b>one-based</b>.</param>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ImageSop.ValidateInternal">
            <summary>
            Validates the <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/> object.
            </summary>
            <remarks>
            Derived classes should call the base class implementation first, and then do further validation.
            The <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/> class validates properties deemed vital to usage of the object.
            </remarks>
            <exception cref="T:Macro.ImageViewer.StudyManagement.SopValidationException">Thrown when validation fails.</exception>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ImageSop.Dispose(System.Boolean)">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern.
            </summary>
            <param name="disposing">True if disposing, false if finalizing.</param>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.Frames">
            <summary>
            A collection of <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/> objects.
            </summary>
            <remarks>
            DICOM distinguishes between regular image SOPs and multiframe image SOPs.
            Macro, however, does not make this distinction, as it requires that 
            two sets of client code be written.  Instead, all image SOPs are considered
            to be multiframe, with regular images being a special case of a multiframe
            image with one frame. It can be assumed that all images contain at least
            one frame.
            </remarks>
            <seealso cref="P:Macro.ImageViewer.StudyManagement.ImageSop.NumberOfFrames"/>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.AnatomicalOrientationType">
            <summary>
            Gets the Anatomical Orientation Type.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.PresentationIntentType">
            <summary>
            Gets the Anatomical Orientation Type.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.PatientOrientation">
            <summary>
            Gets the patient orientation.
            </summary>
            <remarks>
            A <see cref="T:Macro.Dicom.Iod.PatientOrientation"/> is returned even when no data is available; 
            the <see cref="P:Macro.Dicom.Iod.PatientOrientation.IsEmpty"/> property will be true.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.ImageType">
            <summary>
            Gets the image type.  The entire Image Type value should be returned as a Dicom string array.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.AcquisitionNumber">
            <summary>
            Gets the acquisition number.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.AcquisitionDate">
            <summary>
            Gets the acquisiton date.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.AcquisitionTime">
            <summary>
            Gets the acquisition time.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.AcquisitionDateTime">
            <summary>
            Gets the acquisition date/time.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.ImagesInAcquisition">
            <summary>
            Gets the number of images in the acquisition.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.ImageComments">
            <summary>
            Gets the image comments.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.LossyImageCompression">
            <summary>
            Gets the lossy image compression.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.LossyImageCompressionRatio">
            <summary>
            Gets the lossy image compression ratio.
            </summary>
            <remarks>
            Will return as many parsable values as possible up to the first non-parsable value.  For example, if there are 3 values, but the last one is poorly encoded, 2 values will be returned.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.PixelSpacing">
            <summary>
            Gets the pixel spacing.
            </summary>
            <remarks>
            It is generally recommended that clients use <see cref="T:Macro.ImageViewer.StudyManagement.NormalizedPixelSpacing"/> when
            in calculations that require the pixel spacing.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.ImageOrientationPatient">
            <summary>
            Gets the image orientation patient.
            </summary>
            <remarks>
            Returns an <see cref="T:Macro.Dicom.Iod.ImageOrientationPatient"/> object with zero for all its values
            when no data is available or the existing data is bad/incorrect;  <see cref="P:Macro.Dicom.Iod.ImageOrientationPatient.IsNull"/>
            will be true.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.ImagePositionPatient">
            <summary>
            Gets the image position patient.
            </summary>
            <remarks>
            Returns an <see cref="T:Macro.Dicom.Iod.ImagePositionPatient"/> object with zero for all its values when no data is
            available or the existing data is bad/incorrect; <see cref="P:Macro.Dicom.Iod.ImagePositionPatient.IsNull"/> will be true.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.SliceThickness">
            <summary>
            Gets the slice thickness.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.SliceLocation">
            <summary>
            Gets the slice location.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.SamplesPerPixel">
            <summary>
            Gets the samples per pixel.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.PhotometricInterpretation">
            <summary>
            Gets the photometric interpretation.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.Rows">
            <summary>
            Gets the number of rows.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.Columns">
            <summary>
            Gets the number of columns.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.BitsAllocated">
            <summary>
            Gets the number of bits allocated.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.BitsStored">
            <summary>
            Gets the number of bits stored.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.HighBit">
            <summary>
            Gets the high bit.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.PixelRepresentation">
            <summary>
            Gets the pixel representation.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.PlanarConfiguration">
            <summary>
            Gets the planar configuration.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.PixelAspectRatio">
            <summary>
            Gets the pixel aspect ratio.
            </summary>
            <remarks>
            If no value exists in the image header, or the value is invalid, a <see cref="T:Macro.Dicom.Iod.PixelAspectRatio"/>
            is returned whose <see cref="P:Macro.Dicom.Iod.PixelAspectRatio.IsNull"/> property evaluates to true.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.RescaleIntercept">
            <summary>
            Gets the rescale intercept.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.RescaleSlope">
            <summary>
            Gets the rescale slope.
            </summary>
            <remarks>
            1.0 is returned if no data is available.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.RescaleType">
            <summary>
            Gets the rescale type.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.VoiDataLuts">
            <summary>
            Gets the <see cref="T:Macro.Dicom.Iod.VoiDataLut"/>s from the image header.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.WindowCenterAndWidth">
            <summary>
            Gets the window width and center.
            </summary>
            <remarks>
            Will return as many parsable values as possible up to the first non-parsable value.  For example, if there are 3 values, but the last one is poorly encoded, 2 values will be returned.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.WindowCenterAndWidthExplanation">
            <summary>
            Gets the window width and center explanation.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.NumberOfFrames">
            <summary>
            Gets the number of frames in the image SOP.
            </summary>
            <remarks>
            Regular, non-multiframe DICOM images do not have this tag. However, because 
            such images are treated as multiframes with a single frame, 
            <see cref="P:Macro.ImageViewer.StudyManagement.ImageSop.NumberOfFrames"/> returns 1 in that case.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.ImageLaterality">
            <summary>
            Gets the Image Laterality.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.ImageSop.ViewPosition">
            <summary>
            Gets the View Position.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.ILogicalWorkspace">
            <summary>
            Defines a container for <see cref="T:Macro.ImageViewer.IImageSet"/> objects.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ILogicalWorkspace.ImageViewer">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ILogicalWorkspace.ImageSets">
            <summary>
            Gets a collection of <see cref="T:Macro.ImageViewer.IImageSet"/> objects that belong to
            this <see cref="T:Macro.ImageViewer.ILogicalWorkspace"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.OpenStudyArgs">
            <summary>
            Holds the parameters that specify the studies to be opened using the <see cref="T:Macro.ImageViewer.StudyManagement.OpenStudyHelper"/>
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.OpenStudyArgs.#ctor(System.String[],Macro.ImageViewer.Common.IDicomServiceNode,Macro.ImageViewer.WindowBehaviour)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.StudyManagement.OpenStudyArgs"/> using the specified parameters.
            </summary>
            <param name="studyInstanceUids">The Study Instance UIDs of the studies to be opened.</param>
            <param name="server">The server from which the study should be loaded.</param>
            <param name="windowBehaviour">The window launch options.</param>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.OpenStudyArgs.StudyInstanceUids">
            <summary>
            Gets the Study Instance UIDs of the studies to be opened.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.OpenStudyArgs.WindowBehaviour">
            <summary>
            Gets the window launch options.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.OpenStudyHelper">
            <summary>
            Helper class to create, populate and launch an <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.OpenStudyHelper.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.OpenStudyHelper"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.OpenStudyHelper.AddStudy(System.String,Macro.ImageViewer.Common.IDicomServiceNode)">
            <summary>
            Adds a study to the list of studies to be opened.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.OpenStudyHelper.OpenStudies">
            <summary>
            Creates the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>, loads the specified studies,
            and launches the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.OpenStudyHelper.PromptUser">
            <summary>
            Prompt user for decision when at least one of the studies opened was being processed on the local or remote server
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.OpenStudyHelper.HandleStudyInUseError(Macro.ImageViewer.ImageViewerComponent)">
            <summary>
            Handle the situation where at least one of the study being loaded is in use. User can decide to continue loading or cancel the operation.
            In former case, all studies will be reloaded. Caller should check the value returned by this method.
            </summary>
            <param name="viewer"></param>
            <returns>False if the operation should be aborted. Caller is responsible for releasing any resource used by the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>.</returns>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.OpenStudyHelper.WindowBehaviour">
            <summary>
            Gets or sets the <see cref="P:Macro.ImageViewer.StudyManagement.OpenStudyHelper.WindowBehaviour"/> for launching the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.OpenStudyHelper.Title">
            <summary>
            Gets or sets the workspace title for the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>.
            </summary>
            <remarks>
            This value may be null, indicating that the component should automatically generate an appropriate title.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.OpenStudyHelper.LoadPriors">
            <summary>
            Gets or sets whether or not the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> should load any prior studies.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.OpenStudyHelper.StudyLoaderOptions">
            <summary>
            Options for the study loader.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.OpenStudyHelper.AllowEmptyViewer">
            <summary>
            Gets or sets whether or not to allow an empty viewer to be opened (e.g. with no studies loaded).
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.OpenStudyHelper.DesktopWindow">
            <summary>
            Gets or sets the owner <see cref="T:Macro.Desktop.IDesktopWindow"/>.
            </summary>
            <remarks>
            <para>
            This is the <see cref="T:Macro.Desktop.IDesktopWindow"/> on which error messages will be shown and
            on which the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> will launch if not launching in a new window.
            </para>
            <para>
            This value may be null, thus indicating that the currently active <see cref="T:Macro.Desktop.IDesktopWindow"/> should be used.
            </para>
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.OpenStudyHelper.StudyInUseUserDecision">
            <summary>
            Decisions made by the user when study is being processed
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.OpenStudyHelper.StudyInUseUserDecision.Continue">
            <summary>
            User elects to continue opening the study
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.OpenStudyHelper.StudyInUseUserDecision.Cancel">
            <summary>
            User elects not to open the study
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.GrayscaleColorMapFactory">
            <summary>
            The default (grayscale) color map.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.ColorMapFactoryBase`1">
            <summary>
            A base implementation for <see cref="T:Macro.ImageViewer.Imaging.IColorMap"/> factories.
            </summary>
            <typeparam name="T">Must be derived from <see cref="T:Macro.ImageViewer.Imaging.IColorMap"/> and have a parameterless default constructor.</typeparam>
            <seealso cref="T:Macro.ImageViewer.Imaging.IColorMapFactory"/>
            <seealso cref="T:Macro.ImageViewer.Imaging.IColorMap"/>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorMapFactoryBase`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorMapFactoryBase`1.Create">
            <summary>
            Creates and returns a <see cref="T:Macro.ImageViewer.Imaging.IColorMap"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.ColorMapFactoryBase`1.Name">
            <summary>
            Gets a name that should be unique when compared to other <see cref="T:Macro.ImageViewer.Imaging.IColorMapFactory"/>s.
            </summary>
            <remarks>
            This name should not be a resource string, as it should be language-independent.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.ColorMapFactoryBase`1.Description">
            <summary>
            Gets a brief description of the factory.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Imaging.GrayscaleColorMapFactory.FactoryName">
            <summary>
            Returns the factory name.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.GrayscaleColorMapFactory.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.GrayscaleColorMapFactory.Name">
            <summary>
            Returns the Name of the factory.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.GrayscaleColorMapFactory.Description">
            <summary>
            Returns a brief description of the Factory.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.IComposedLut">
            <summary>
            A Composed Lut is one that has been created by combining multiple Luts together.
            </summary>
            <remarks>
            The <see cref="P:Macro.ImageViewer.Imaging.IComposedLut.Data"/> property should be considered readonly and is only provided
            for fast (unsafe) iteration overy the array.  However, it also enforces that <see cref="T:Macro.ImageViewer.Imaging.IComposedLut"/>s
            be data Luts, which is important because the overall efficiency of the Lut pipeline is improved 
            substantially.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IComposedLut.MinInputValue">
            <summary>
            Gets the minimum input value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IComposedLut.MaxInputValue">
            <summary>
            Gets the maximum input value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IComposedLut.MinOutputValue">
            <summary>
            Gets the minimum output value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IComposedLut.MaxOutputValue">
            <summary>
            Gets the maximum output value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IComposedLut.Item(System.Int32)">
            <summary>
            Gets the output value of the lut at a given input index.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IComposedLut.Data">
            <summary>
            Gets the lut's data.
            </summary>
            <remarks>
            This property should be considered readonly and is only 
            provided for fast (unsafe) iteration over the array.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.InitialVoiLutProviderExtensionPoint">
            <summary>
            An extension point for custom <see cref="T:Macro.ImageViewer.Imaging.IInitialVoiLutProvider"/>s.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Imaging.IInitialVoiLutProvider"/>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.InitialVoiLutProviderExtensionPoint.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.IInitialVoiLutProvider">
            <summary>
            A provider of an image's Initial Voi Lut.
            </summary>
            <remarks>
            Implementors can apply logic based on the input <see cref="T:Macro.ImageViewer.IPresentationImage"/> 
            to decide what type of Lut to return.
            </remarks>
            <seealso cref="T:Macro.ImageViewer.Imaging.InitialVoiLutProviderExtensionPoint"/>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IInitialVoiLutProvider.GetLut(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Determines and returns the initial Voi Lut that should be applied to the input <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
            <param name="presentationImage">The <see cref="T:Macro.ImageViewer.IPresentationImage"/> whose intial Lut is to be determined.</param>
            <returns>The Voi Lut as an <see cref="T:Macro.ImageViewer.Imaging.IVoiLut"/>.</returns>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.ImageSpatialTransformImageOperation">
            <summary>
            A specialization of the <see cref="T:Macro.ImageViewer.Graphics.SpatialTransformImageOperation"/> where the
            originator is an <see cref="T:Macro.ImageViewer.Graphics.IImageSpatialTransform"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.SpatialTransformImageOperation">
            <summary>
            A specialization of the <see cref="T:Macro.ImageViewer.BasicImageOperation"/> where the
            originator is an <see cref="T:Macro.ImageViewer.Graphics.ISpatialTransform"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.SpatialTransformImageOperation.#ctor(Macro.ImageViewer.BasicImageOperation.ApplyDelegate)">
            <summary>
            Mandatory constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.SpatialTransformImageOperation.GetOriginator(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Returns the <see cref="T:Macro.ImageViewer.Graphics.ISpatialTransform"/> associated with the 
            <see cref="T:Macro.ImageViewer.IPresentationImage"/>, or null.
            </summary>
            <remarks>
            When used in conjunction with an <see cref="T:Macro.ImageViewer.ImageOperationApplicator"/>,
            it is always safe to cast the return value directly to <see cref="T:Macro.ImageViewer.Graphics.ISpatialTransform"/>
            without checking for null from within the <see cref="T:Macro.ImageViewer.BasicImageOperation.ApplyDelegate"/> 
            specified in the constructor.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ImageSpatialTransformImageOperation.#ctor(Macro.ImageViewer.BasicImageOperation.ApplyDelegate)">
            <summary>
            Mandatory constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ImageSpatialTransformImageOperation.GetOriginator(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Returns the <see cref="T:Macro.ImageViewer.Graphics.IImageSpatialTransform"/> associated with the 
            <see cref="T:Macro.ImageViewer.IPresentationImage"/>, or null.
            </summary>
            <remarks>
            When used in conjunction with an <see cref="T:Macro.ImageViewer.ImageOperationApplicator"/>,
            it is always safe to cast the return value directly to <see cref="T:Macro.ImageViewer.Graphics.ImageSpatialTransform"/>
            without checking for null from within the <see cref="T:Macro.ImageViewer.BasicImageOperation.ApplyDelegate"/> 
            specified in the constructor.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.DisplaySetChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Macro.ImageViewer.EventBroker.DisplaySetChanged"/> event.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySetChangedEventArgs.#ctor(Macro.ImageViewer.IDisplaySet,Macro.ImageViewer.IDisplaySet)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.DisplaySetChangedEventArgs"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySetChangedEventArgs.OldDisplaySet">
            <summary>
            Gets the old <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySetChangedEventArgs.NewDisplaySet">
            <summary>
            Gets the new <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.DicomGrayscalePresentationImage">
            <summary>
            A DICOM grayscale <see cref="T:Macro.ImageViewer.PresentationImage"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.GrayscalePresentationImage">
            <summary>
            A grayscale <see cref="T:Macro.ImageViewer.PresentationImage"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.GrayscalePresentationImage.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.GrayscalePresentationImage"/>.
            </summary>
            <param name="rows"></param>
            <param name="columns"></param>
            <remarks>
            This simple constructor will automatically create grayscale pixel data with the specified
            number of rows and columns.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.GrayscalePresentationImage.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Macro.ImageViewer.Imaging.PixelDataGetter)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.GrayscalePresentationImage"/>.
            </summary>
            <param name="rows"></param>
            <param name="columns"></param>
            <param name="bitsAllocated"></param>
            <param name="bitsStored"></param>
            <param name="highBit"></param>
            <param name="isSigned"></param>
            <param name="inverted"></param>
            <param name="rescaleSlope"></param>
            <param name="rescaleIntercept"></param>
            <param name="pixelSpacingX"></param>
            <param name="pixelSpacingY"></param>
            <param name="pixelAspectRatioX"></param>
            <param name="pixelAspectRatioY"></param>
            <param name="pixelDataGetter"></param>
            <remarks>
            This more flexible constructor allows for the pixel data
            to be retrieved from and external source via a <see cref="T:Macro.ImageViewer.Imaging.PixelDataGetter"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.GrayscalePresentationImage.#ctor(Macro.ImageViewer.GrayscalePresentationImage,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.GrayscalePresentationImage.CreateFreshCopy">
            <summary>
            Creates a clone of the <see cref="T:Macro.ImageViewer.GrayscalePresentationImage"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.GrayscalePresentationImage.ImageGraphic">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.Graphics.GrayscaleImageGraphic"/> associated with this <see cref="T:Macro.ImageViewer.GrayscalePresentationImage"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.GrayscalePresentationImage.ModalityLut">
            <summary>
            Gets this image's modality lut.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.GrayscalePresentationImage.VoiLutManager">
            <summary>
            Gets this image's <see cref="T:Macro.ImageViewer.Imaging.IVoiLutManager"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.GrayscalePresentationImage.ColorMapManager">
            <summary>
            Gets this image's <see cref="T:Macro.ImageViewer.Imaging.IColorMapManager"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DicomGrayscalePresentationImage.#ctor(Macro.ImageViewer.StudyManagement.Frame)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.DicomGrayscalePresentationImage"/>.
            </summary>
            <param name="frame">The <see cref="P:Macro.ImageViewer.DicomGrayscalePresentationImage.Frame"/> from which to construct the image.</param>
            <remarks>
            This constructor provides a convenient means of associating a <see cref="P:Macro.ImageViewer.DicomGrayscalePresentationImage.Frame"/> with a <see cref="T:Macro.ImageViewer.GrayscalePresentationImage"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.DicomGrayscalePresentationImage.#ctor(Macro.ImageViewer.StudyManagement.IFrameReference)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.DicomGrayscalePresentationImage"/>.
            </summary>
            <param name="frameReference">A <see cref="T:Macro.ImageViewer.StudyManagement.IFrameReference">reference</see> to the frame from which to construct the image.</param>
        </member>
        <member name="M:Macro.ImageViewer.DicomGrayscalePresentationImage.#ctor(Macro.ImageViewer.DicomGrayscalePresentationImage,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DicomGrayscalePresentationImage.CreateFreshCopy">
            <summary>
            Creates a fresh copy of the <see cref="T:Macro.ImageViewer.DicomGrayscalePresentationImage"/>.
            </summary>
            <remarks>
            This will instantiate a fresh copy of this <see cref="T:Macro.ImageViewer.DicomGrayscalePresentationImage"/>
            using the same construction parameters as the original.
            </remarks>
            <returns></returns>		
        </member>
        <member name="M:Macro.ImageViewer.DicomGrayscalePresentationImage.Dispose(System.Boolean)">
            <summary>
            Dispose method.  Inheritors should override this method to do any additional cleanup.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DicomGrayscalePresentationImage.CreateAnnotationLayout">
            <summary>
            Creates the <see cref="T:Macro.ImageViewer.Annotations.IAnnotationLayout"/> for this image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.DicomGrayscalePresentationImage.ToString">
            <summary>
            Returns the Instance Number as a string.
            </summary>
            <returns>The Instance Number as a string.</returns>
        </member>
        <member name="P:Macro.ImageViewer.DicomGrayscalePresentationImage.ImageSop">
            <summary>
            Gets this presentation image's associated <see cref="P:Macro.ImageViewer.DicomGrayscalePresentationImage.ImageSop"/>.
            </summary>
            <remarks>
            Use <see cref="P:Macro.ImageViewer.DicomGrayscalePresentationImage.ImageSop"/> to access DICOM tags.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.DicomGrayscalePresentationImage.Frame">
            <summary>
            Gets this presentation image's associated <see cref="P:Macro.ImageViewer.DicomGrayscalePresentationImage.Frame"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DicomGrayscalePresentationImage.DicomVoiLuts">
            <summary>
            Gets a collection of DICOM-defined VOI LUTs from the image header and/or any associated presentation state.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DicomGrayscalePresentationImage.DicomGraphics">
            <summary>
            Gets this presentation image's collection of domain-level graphics.
            </summary>
            <remarks>
            Use <see cref="P:Macro.ImageViewer.IDicomPresentationImage.DicomGraphics"/> to add DICOM-defined graphics that you want to
            overlay the image at the domain-level. These graphics are rendered
            before any <see cref="P:Macro.ImageViewer.Graphics.IApplicationGraphicsProvider.ApplicationGraphics"/>
            and before any <see cref="P:Macro.ImageViewer.Graphics.IOverlayGraphicsProvider.OverlayGraphics"/>.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.RectangularRoi">
            <summary>
            Represents a static, rectangular region of interest for the purposes of computing statistics on the contained pixels.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RectangularRoi.#ctor(Macro.ImageViewer.Graphics.IBoundableGraphic)">
            <summary>
            Constructs a new rectangular region of interest, specifying an <see cref="T:Macro.ImageViewer.Graphics.IBoundableGraphic"/> as the source of the definition and pixel data.
            </summary>
            <param name="rectangle">The rectangular graphic that represents the region of interest.</param>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RectangularRoi.#ctor(System.Drawing.RectangleF,Macro.ImageViewer.IPresentationImage)">
            <summary>
            Constructs a new rectangular region of interest.
            </summary>
            <param name="rectangle">The region of interest.</param>
            <param name="presentationImage">The image containing the source pixel data.</param>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RectangularRoi.ComputeBounds">
            <summary>
            Called by <see cref="P:Macro.ImageViewer.RoiGraphics.Roi.BoundingBox"/> to compute the tightest bounding box of the region of interest.
            </summary>
            <remarks>
            <para>This method is only called once and the result is cached for future accesses.</para>
            <para>
            Regions of interest have no notion of coordinate system. All coordinates are inherently
            given relative to the image pixel space (i.e. <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Source"/>.)
            </para>
            </remarks>
            <returns>A rectangle defining the bounding box.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RectangularRoi.CopyTo(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Creates a copy of this <see cref="T:Macro.ImageViewer.RoiGraphics.RectangularRoi"/> using the same region of interest shape but using a different image as the source pixel data.
            </summary>
            <param name="presentationImage">The image upon which to copy this region of interest.</param>
            <returns>A new <see cref="T:Macro.ImageViewer.RoiGraphics.RectangularRoi"/> of the same shape as the current region of interest.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RectangularRoi.Contains(System.Drawing.PointF)">
            <summary>
            Tests to see if the given point is contained within the region of interest.
            </summary>
            <remarks>
            Regions of interest have no notion of coordinate system. All coordinates are inherently
            given relative to the image pixel space (i.e. <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Source"/>.)
            </remarks>
            <param name="point">The point to test.</param>
            <returns>True if the point is defined as within the region of interest; False otherwise.</returns>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.RectangularRoi.Rectangle">
            <summary>
            Gets the rectangular region of interest.
            </summary>
            <remarks>
            This value maintains the original orientation of the rectangle when the <see cref="T:Macro.ImageViewer.RoiGraphics.RectangularRoi"/> was constructed.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.RectangularRoi.Units">
            <summary>
            Gets or sets the units of area with which to compute the value of <see cref="P:Macro.ImageViewer.RoiGraphics.IRoiAreaProvider.Area"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.RectangularRoi.IsCalibrated">
            <summary>
            Gets a value indicating that the image has pixel spacing information or has
            previously been calibrated with physical dimensions.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.RectangularRoi.StandardDeviation">
            <summary>
            Gets the standard deviation of the values over the <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.RectangularRoi.Mean">
            <summary>
            Gets the mean of the values over the <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.RectangularRoi.Area">
            <summary>
            Gets the area of the region of interest in the units of area as specified by <see cref="P:Macro.ImageViewer.RoiGraphics.IRoiAreaProvider.Units"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">If <see cref="P:Macro.ImageViewer.RoiGraphics.IRoiAreaProvider.Units"/> is a physical
            unit of measurement and the image has no pixel spacing information, nor has it been calibrated.</exception>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.GeometricShutter">
            <summary>
            A geometric shutter.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.GeometricShutter.Clone">
            <summary>
            Clones this geometric shutter.
            </summary>
            <returns>An identical clone.</returns>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.CircularShutter">
            <summary>
            A circular geometric shutter.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.CircularShutter.#ctor(System.Drawing.Point,System.Int32)">
            <summary>
            Constructs a new circular geometric shutter.
            </summary>
            <param name="center">The centre of the circle defining the shutter boundary.</param>
            <param name="radius">The radius of the circle defining the shutter boundary.</param>
        </member>
        <member name="F:Macro.ImageViewer.PresentationStates.CircularShutter.Center">
            <summary>
            Gets the centre of the circle defining the shutter boundary.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.PresentationStates.CircularShutter.Radius">
            <summary>
            Gets the radius of the circle defining the shutter boundary.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.CircularShutter.BoundingRectangle">
            <summary>
            Gets the tightest rectangle that bounds the circle.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.RectangularShutter">
            <summary>
            A rectangular geometric shutter.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.RectangularShutter.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new rectangular geometric shutter.
            </summary>
            <param name="left">The left edge of the rectangle defining the shutter boundary.</param>
            <param name="right">The right edge of the rectangle defining the shutter boundary.</param>
            <param name="top">The top edge of the rectangle defining the shutter boundary.</param>
            <param name="bottom">The bottom edge of the rectangle defining the shutter boundary.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.RectangularShutter.#ctor(System.Drawing.Rectangle)">
            <summary>
            Constructs a new rectangular geometric shutter.
            </summary>
            <param name="rectangle">The rectangle defining the shutter boundary.</param>
        </member>
        <member name="F:Macro.ImageViewer.PresentationStates.RectangularShutter.Rectangle">
            <summary>
            Gets the rectangle defining the shutter boundary.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.PolygonalShutter">
            <summary>
            A polygonal geometric shutter.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.PolygonalShutter.#ctor(System.Collections.Generic.IEnumerable{System.Drawing.Point})">
            <summary>
            Constructs a new polygonal geometric shutter.
            </summary>
            <param name="vertices">An ordered list of vertices defining the shutter boundary.</param>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.PolygonalShutter.Vertices">
            <summary>
            Gets an ordered list of vertices defining the shutter boundary.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.InteractiveCircleGraphicBuilder">
            <summary>
            Interactive builder class that interprests two mouse clicks as the
            circle centre followed by a point on the circumference.
            </summary>
            <remarks>
            This builder takes exactly two clicks, after which the graphic is
            complete and control is released.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveCircleGraphicBuilder.#ctor(Macro.ImageViewer.Graphics.IBoundableGraphic)">
            <summary>
            Constructs an interactive builder for the specified boundable graphic.
            </summary>
            <param name="boundableGraphic">The boundable graphic to be interactively built.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveCircleGraphicBuilder.Reset">
            <summary>
            Resets any internal state of the builder, allowing the same graphic to be rebuilt.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveCircleGraphicBuilder.Rollback">
            <summary>
            Rolls back the internal state of the builder by one mouse click, allowing the same graphic to be rebuilt by resuming from an earlier state.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveCircleGraphicBuilder.Start(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Passes user input to the builder when <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Start(Macro.ImageViewer.InputManagement.IMouseInformation)"/> is called on the owning tool.
            </summary>
            <param name="mouseInformation">The user input data.</param>
            <returns>True if the builder did something as a result of the call, and hence would like to receive capture; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveCircleGraphicBuilder.Track(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Passes user input to the builder when <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Track(Macro.ImageViewer.InputManagement.IMouseInformation)"/> is called on the owning tool.
            </summary>
            <param name="mouseInformation">The user input data.</param>
            <returns>True if the builder handled the message; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.InteractiveCircleGraphicBuilder.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Passes user input to the builder when <see cref="M:Macro.ImageViewer.InputManagement.IMouseButtonHandler.Stop(Macro.ImageViewer.InputManagement.IMouseInformation)"/> is called on the owning tool.
            </summary>
            <param name="mouseInformation">The user input data.</param>
            <returns>True if the tool should not release capture; False otherwise.</returns>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.InteractiveCircleGraphicBuilder.Graphic">
            <summary>
            Gets the graphic that the builder is operating on.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.EditBox">
            <summary>
            A <see cref="T:Macro.ImageViewer.Tile"/> can show a textual input editor
            in its client rectangle when one has been supplied.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Tile"/>
            <seealso cref="P:Macro.ImageViewer.Tile.EditBox"/>
        </member>
        <member name="M:Macro.ImageViewer.EditBox.#ctor">
            <summary>
            Constructs a new textual input editor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.EditBox.#ctor(System.String)">
            <summary>
            Constructs a new textual input editor.
            </summary>
            <param name="initialValue">The initial <see cref="P:Macro.ImageViewer.EditBox.Value">text value</see>.</param>
        </member>
        <member name="M:Macro.ImageViewer.EditBox.Accept">
            <summary>
            Causes the edit box to accept the current <see cref="P:Macro.ImageViewer.EditBox.Value">value</see>, thereby reseting the <see cref="P:Macro.ImageViewer.EditBox.IsModified"/> and <see cref="P:Macro.ImageViewer.EditBox.LastAcceptedValue"/> properties.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.EditBox.Cancel">
            <summary>
            Causes the edit box to cancel the current <see cref="P:Macro.ImageViewer.EditBox.Value">value</see> and revert to the <see cref="P:Macro.ImageViewer.EditBox.LastAcceptedValue">last accepted value</see>, thereby reseting the <see cref="P:Macro.ImageViewer.EditBox.IsModified"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.EditBox.OnAccept">
            <summary>
            Called when the <see cref="M:Macro.ImageViewer.EditBox.Accept"/> method is invoked.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.EditBox.OnCancel">
            <summary>
            Called when the <see cref="M:Macro.ImageViewer.EditBox.Cancel"/> method is invoked.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.EditBox.OnValueChanged">
            <summary>
            Called when the <see cref="P:Macro.ImageViewer.EditBox.Value"/> property changes.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.EditBox.IsModified">
            <summary>
            Gets a value indicating if the <see cref="P:Macro.ImageViewer.EditBox.Value"/> property has changed since <see cref="M:Macro.ImageViewer.EditBox.#ctor(System.String)">construction</see> or since the last call to <see cref="M:Macro.ImageViewer.EditBox.Accept"/>, whichever occured later.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.EditBox.LastAcceptedValue">
            <summary>
            Gets the text value at the time of the <see cref="M:Macro.ImageViewer.EditBox.#ctor(System.String)">construction</see> of the last call to <see cref="M:Macro.ImageViewer.EditBox.Accept"/>, whichever occured later.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.EditBox.Value">
            <summary>
            Gets or sets the text value of the editor.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.EditBox.Location">
            <summary>
            Gets or sets the location around which the <see cref="T:Macro.ImageViewer.EditBox"/> should be centered.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.EditBox.Size">
            <summary>
            Gets or sets the size that the <see cref="T:Macro.ImageViewer.EditBox"/> should take on the client.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.EditBox.Multiline">
            <summary>
            Gets or sets a value indicating if this <see cref="T:Macro.ImageViewer.EditBox"/> should support multiline input.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.EditBox.FontName">
            <summary>
            Gets or sets the name of the font that the editor should use, or null if the view should use the UI default.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.EditBox.FontSize">
            <summary>
            Gets or sets the size in points of the font that the editor should use.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.EditBox.ValueChanged">
            <summary>
            Fires when the <see cref="P:Macro.ImageViewer.EditBox.Value"/> property changes.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.EditBox.ValueAccepted">
            <summary>
            Fires when the <see cref="M:Macro.ImageViewer.EditBox.Accept"/> method is invoked.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.EditBox.ValueCancelled">
            <summary>
            Fires when the <see cref="M:Macro.ImageViewer.EditBox.Cancel"/> method is invoked.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Rendering.RenderingException">
            <summary>
            The exception that is thrown when any <see cref="T:System.Exception"/> is thrown in the rendering pipeline.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Rendering.RenderingException.DrawMode">
            <summary>
            Gets the <see cref="F:Macro.ImageViewer.Rendering.RenderingException.DrawMode"/> of the failed rendering operation.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Rendering.RenderingException.WindowId">
            <summary>
            Gets the window ID of the failed rendering operation.
            </summary>
            <remarks>
            On Windows platforms, this would be the window handle, or hWnd.
            </remarks>
        </member>
        <member name="F:Macro.ImageViewer.Rendering.RenderingException.ContextId">
            <summary>
            Gets the context ID of the failed rendering operation.
            </summary>
            <remarks>
            On Windows platforms, this would be the device context handle, or hDC.
            </remarks>
        </member>
        <member name="F:Macro.ImageViewer.Rendering.RenderingException.ClientRectangle">
            <summary>
            Gets the client rectangle of the failed rendering operation.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Rendering.RenderingException.ClipRectangle">
            <summary>
            Gets the clipping rectangle of the failed rendering operation.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RenderingException.#ctor(System.Exception,Macro.ImageViewer.Rendering.DrawArgs)">
            <summary>
            Initializes a <see cref="T:Macro.ImageViewer.Rendering.RenderingException"/>.
            </summary>
            <param name="innerException">The actual exception that was thrown in the rendering pipeline.</param>
            <param name="drawArgs">The <see cref="T:Macro.ImageViewer.Rendering.DrawArgs"/> of the failed rendering operation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="innerException"/> is null.</exception>
        </member>
        <member name="P:Macro.ImageViewer.Rendering.RenderingException.UserMessage">
            <summary>
            Gets a message describing the exception suitable for presentation to the end-user.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageSetTree.#ctor(Macro.Common.Utilities.ObservableList{Macro.ImageViewer.IImageSet},System.String)">
            <summary>
            Constructor
            </summary>
            <param name="imageSets"></param>
            <param name="primaryStudyInstanceUid"></param>
        </member>
        <member name="M:Macro.ImageViewer.ImageSetTree.#ctor(Macro.Common.Utilities.ObservableList{Macro.ImageViewer.IImageSet},System.String,Macro.ImageViewer.ImageSetTreeItemBinding)">
            <summary>
            Constructor that allows a custom binding to be supplied.
            </summary>
            <param name="imageSets"></param>
            <param name="primaryStudyInstanceUid"></param>
            <param name="binding"></param>
        </member>
        <member name="T:Macro.ImageViewer.Automation.ICalibration">
            <summary>
            Defines methods for automating the calibration tool functionality of the <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Automation.ICalibration.Calibrate(System.Double)">
            <summary>
            Invokes the calibration tool on the selected ruler tool.
            </summary>
            <param name="lengthInCm">The length in centimeter of the selected ruler tool.</param>
        </member>
        <member name="T:Macro.ImageViewer.LogicalWorkspace">
            <summary>
            A container for <see cref="T:Macro.ImageViewer.IImageSet"/> objects.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.LogicalWorkspace.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.LogicalWorkspace"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.LogicalWorkspace.Dispose(System.Boolean)">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern
            </summary>
            <param name="disposing">True if this object is being disposed, false if it is being finalized</param>
        </member>
        <member name="M:Macro.ImageViewer.LogicalWorkspace.Draw">
            <summary>
            Draws the <see cref="T:Macro.ImageViewer.LogicalWorkspace"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LogicalWorkspace.ImageViewer">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LogicalWorkspace.ImageSets">
            <summary>
            Gets a collection of <see cref="T:Macro.ImageViewer.IImageSet"/> objects that belong to
            this <see cref="T:Macro.ImageViewer.ILogicalWorkspace"/>
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.LogicalWorkspace.Drawing">
            <summary>
            Fires just before the <see cref="T:Macro.ImageViewer.LogicalWorkspace"/> is actually drawn/rendered.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.ImageOperationApplicator">
            <summary>
            Encapsulates the application of an <see cref="T:Macro.ImageViewer.IUndoableOperation`1"/> to a list
            of <see cref="T:Macro.ImageViewer.IPresentationImage"/>s and also creates an <see cref="T:Macro.Desktop.UndoableCommand"/>
            that can be entered into the <see cref="T:Macro.Desktop.CommandHistory"/>.
            </summary>
            <remarks>
            <para>
            This interface may be deprecated in a future release. Consider using the <see cref="T:Macro.Desktop.CompositeUndoableCommand"/> instead.</para>
            <para>
            It is often desirable to apply an operation across all linked 
            <see cref="T:Macro.ImageViewer.IPresentationImage"/> objects.  For
            example, when an image is zoomed, it is expected that all linked images 
            will zoom as well.  When that operation is undone, it is expected that
            it is undone on all of those images.  This class encapsulates that functionality
            so that the plugin developer doesn't have to deal with such details.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.ImageOperationApplicator.#ctor(Macro.ImageViewer.IPresentationImage,Macro.ImageViewer.IUndoableOperation{Macro.ImageViewer.IPresentationImage})">
            <summary>
            Constructor.
            </summary>
            <param name="referenceImage">The 'current' (or reference) <see cref="T:Macro.ImageViewer.IPresentationImage"/>.</param>
            <param name="operation">The operation to be performed on the current <see cref="T:Macro.ImageViewer.IPresentationImage"/> and/or its linked images.</param>
        </member>
        <member name="M:Macro.ImageViewer.ImageOperationApplicator.ApplyToAllImages">
            <summary>
            Applies the same <see cref="T:Macro.ImageViewer.IUndoableOperation`1"/> to the current image as well as all its linked images.
            </summary>
            <remarks>
            <para>
            <see cref="M:Macro.ImageViewer.IUndoableOperation`1.Apply(`0)"/> will be called only for images where 
            <see cref="M:Macro.ImageViewer.IUndoableOperation`1.AppliesTo(`0)"/> has returned true <b>and</b> <see cref="M:Macro.ImageViewer.IUndoableOperation`1.GetOriginator(`0)"/> 
            has returned a non-null value.
            </para>
            <para>
            Each affected image is drawn automatically by this method.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.ImageOperationApplicator.ApplyToReferenceImage">
            <summary>
            Applies the <see cref="T:Macro.ImageViewer.IUndoableOperation`1"/> to only the current (reference) image.
            </summary>
            <remarks>
            <para>
            <see cref="M:Macro.ImageViewer.IUndoableOperation`1.Apply(`0)"/> will be called only for the image if 
            <see cref="M:Macro.ImageViewer.IUndoableOperation`1.AppliesTo(`0)"/> has returned true <b>and</b> <see cref="M:Macro.ImageViewer.IUndoableOperation`1.GetOriginator(`0)"/> 
            has returned a non-null value.
            </para>
            <para>
            The affect image is drawn automatically by this method.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.ImageOperationApplicator.ApplyToLinkedImages">
            <summary>
            Applies the same <see cref="T:Macro.ImageViewer.IUndoableOperation`1"/> to all linked images, but not the current (reference) image itself.
            </summary>
            <remarks>
            <para>
            <see cref="M:Macro.ImageViewer.IUndoableOperation`1.Apply(`0)"/> will be called only for images where 
            <see cref="M:Macro.ImageViewer.IUndoableOperation`1.AppliesTo(`0)"/> has returned true <b>and</b> <see cref="M:Macro.ImageViewer.IUndoableOperation`1.GetOriginator(`0)"/> 
            has returned a non-null value.
            </para>
            <para>
            Each affected image is drawn automatically by this method.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.ImageOperationApplicator.ApplyToAllImageSets">
            <summary>
            Gets or sets whether the operation should be applied to all <see cref="T:Macro.ImageViewer.IImageSet"/>s.
            </summary>
            <remarks>
            <para>
            When this value is true, the operation will be applied to all <see cref="T:Macro.ImageViewer.IImageSet"/>s with linked <see cref="T:Macro.ImageViewer.IDisplaySet"/>s.  
            When false, the operation will only be applied to the current <see cref="T:Macro.ImageViewer.IImageSet"/>'s linked <see cref="T:Macro.ImageViewer.IDisplaySet"/>s 
            (determined from the current <see cref="T:Macro.ImageViewer.IPresentationImage"/>).
            </para>
            <para>
            When the current <see cref="T:Macro.ImageViewer.IDisplaySet"/> is not linked, the operation is only applied to the current <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </para>
            <para>
            The default value is false.
            </para>
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.InformationBox">
            <summary>
            A <see cref="T:Macro.ImageViewer.Tile"/> can show a textual information box at a given point
            in it's client rectangle when one has been supplied.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Tile"/>
            <seealso cref="P:Macro.ImageViewer.Tile.InformationBox"/>
        </member>
        <member name="M:Macro.ImageViewer.InformationBox.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InformationBox.Update(System.String,System.Drawing.Point)">
            <summary>
            Updates both the <see cref="P:Macro.ImageViewer.InformationBox.Data"/> and <see cref="P:Macro.ImageViewer.InformationBox.DestinationPoint"/> properties simultaneously.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.InformationBox.Updated">
            <summary>
            Fires when any of the following properties changes: <see cref="P:Macro.ImageViewer.InformationBox.Data"/>, <see cref="P:Macro.ImageViewer.InformationBox.Visible"/>, <see cref="P:Macro.ImageViewer.InformationBox.DestinationPoint"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InformationBox.Data">
            <summary>
            Gets or set the text data that is to be displayed to the user.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InformationBox.DestinationPoint">
            <summary>
            The point at which the <see cref="T:Macro.ImageViewer.InformationBox"/> should be displayed.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InformationBox.Visible">
            <summary>
            Gets or sets whether or not the <see cref="T:Macro.ImageViewer.InformationBox"/> should be visible.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.LutCollection">
            <summary>
            A collection of <see cref="T:Macro.ImageViewer.Imaging.IComposableLut"/> objects.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.LutCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.LoadPriorStudiesException">
            <summary>
            Exception class for when loading prior studies has failed.
            </summary>
            <remarks>
            Because loading of priors is handled automatically by the framework, this class is both
            thrown an caught by the framework, but is handled by the <see cref="T:Macro.Desktop.ExceptionHandler"/>.
            This is done to allow for custom exception handling.
            </remarks>
        </member>
        <member name="F:Macro.ImageViewer.LoadPriorStudiesException.FindResultsComplete">
            <summary>
            Gets whether or not the find results can be considered complete.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.LoadPriorStudiesException.FindFailed">
            <summary>
            Gets whether or not it was the find operation that failed (e.g. <see cref="T:Macro.ImageViewer.IPriorStudyFinder"/>).
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.BaseTools.ModifiedMouseToolButtonAttribute">
            <summary>
            An attribute used by <see cref="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool"/> to specify it's modified <see cref="T:Macro.ImageViewer.InputManagement.MouseButtonShortcut"/>.
            </summary>
            <seealso cref="T:Macro.ImageViewer.InputManagement.MouseButtonShortcut"/>
            <seealso cref="T:Macro.ImageViewer.BaseTools.MouseImageViewerTool"/>
            <seealso cref="T:Macro.ImageViewer.InputManagement.IViewerShortcutManager"/>
            <seealso cref="T:Macro.ImageViewer.BaseTools.DefaultMouseToolButtonAttribute"/>
        </member>
        <member name="M:Macro.ImageViewer.BaseTools.ModifiedMouseToolButtonAttribute.#ctor(Macro.Desktop.XMouseButtons,Macro.Desktop.ModifierFlags)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.GraphicToolExtensionPoint">
            <summary>
            An extension point for graphic tools.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.IGraphicToolContext">
            <summary>
            An interface for graphic tools.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IGraphicToolContext.Graphic">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> that the tool applies to.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.IGraphicToolContext.DesktopWindow">
            <summary>
            Gets the <see cref="T:Macro.Desktop.IDesktopWindow"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.GraphicToolContext">
            <summary>
            Base implementation of <see cref="T:Macro.ImageViewer.Graphics.IGraphicToolContext"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.GraphicToolContext.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.GraphicToolContext.Graphic">
            <summary>
            Gets the graphic that the tool applies to.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.GraphicToolContext.DesktopWindow">
            <summary>
            Gets the owning <see cref="T:Macro.Desktop.IDesktopWindow"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Mathematics.Size3D">
            <summary>
            A simple 3D size class.
            </summary>
            <remarks>
            The Size3D class is immutable.  All necessary operations
            can be done via the operator overloads.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Size3D.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Size3D.#ctor(Macro.ImageViewer.Mathematics.Size3D)">
            <summary>
            Copy Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Size3D.Equals(Macro.ImageViewer.Mathematics.Size3D)">
            <summary>
            Gets whether or not this object equals <paramref name="other"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.Size3D.Width">
            <summary>
            Gets the width
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.Size3D.Height">
            <summary>
            Gets the height
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.Size3D.Depth">
            <summary>
            Gets the depth
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.Size3D.Volume">
            <summary>
            Returns the width * height * depth
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneType">
            <summary>
            Indicates the type of data represented by the overlay plane.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneType.Graphics">
            <summary>
            Indicates that the overlay plane represents some generic graphics.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneType.ROI">
            <summary>
            Indicates that the overlay plane represents a region of interest.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneType.OverlayType">
            <summary>
            Gets the DICOM enumerated value for the overlay plane type.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneType.Description">
            <summary>
            Gets a string description of the overlay plane type.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneType.GetHashCode">
            <summary>
            Gets a hash code for the type suitable of hash tables.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneType.Equals(System.Object)">
            <summary>
            Tests to see if this object is equivalent to <paramref name="obj">another</paramref> <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneType"/> or <see cref="F:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneType.OverlayType"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneType.ToString">
            <summary>
            Gets a string that represents the current <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneType"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneType.op_Implicit(Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneType)~Macro.Dicom.Iod.Modules.OverlayType">
            <summary>
            Implicitly casts <paramref name="type"/> as a <see cref="F:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneType.OverlayType"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneType.op_Implicit(Macro.Dicom.Iod.Modules.OverlayType)~Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneType">
            <summary>
            Implicitly casts <paramref name="type"/> as a <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneType"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSubtype">
            <summary>
            Represents defined terms for identifying the intended purpose of the <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneType"/>.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSubtype.User">
            <summary>
            Identifies that the overlay is a user created graphic annotation (e.g. operator).
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSubtype.Automated">
            <summary>
            Identifies that the overlay is a machine or algorithm generated graphic annotation, such as output of a Computer Assisted Diagnosis algorithm.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSubtype.OverlaySubtype">
            <summary>
            Gets the represented defined term.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSubtype.#ctor(System.String)">
            <summary>
            Constructs a defined term.
            </summary>
            <param name="definedTerm">The defined term.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSubtype.#ctor(Macro.Dicom.Iod.Modules.OverlaySubtype)">
            <summary>
            Constructs a defined term.
            </summary>
            <param name="definedTerm">The defined term.</param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSubtype.GetHashCode">
            <summary>
            Gets a hash code for the defined term suitable of hash tables.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSubtype.Equals(System.Object)">
            <summary>
            Tests to see if this object is equivalent to <paramref name="obj">another</paramref> <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSubtype"/> or <see cref="F:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSubtype.OverlaySubtype"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSubtype.ToString">
            <summary>
            Gets a string that represents the current <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSubtype"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSubtype.op_Implicit(Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSubtype)~Macro.Dicom.Iod.Modules.OverlaySubtype">
            <summary>
            Implicitly casts <paramref name="type"/> as a <see cref="F:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSubtype.OverlaySubtype"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSubtype.op_Explicit(Macro.Dicom.Iod.Modules.OverlaySubtype)~Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSubtype">
            <summary>
            Explicitly casts <paramref name="type"/> as a <see cref="T:Macro.ImageViewer.PresentationStates.Dicom.OverlayPlaneSubtype"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.AnnotationCalloutLocationStrategy">
            <summary>
            A default implementation of <see cref="T:Macro.ImageViewer.InteractiveGraphics.IAnnotationCalloutLocationStrategy"/>.
            </summary>
            <remarks>
            <para>
            This implementation sets the initial callout position to be a location offset
            from the top left corner of the ROI measurement's bounding box. Once set, the
            callout is not moved along with the measurement.
            </para>
            <para>
            Implementors of <see cref="T:Macro.ImageViewer.InteractiveGraphics.IAnnotationCalloutLocationStrategy"/> may wish to
            derive from this class to take advantage of built-in functionality and only
            override methods to implement the desired strategy.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnnotationCalloutLocationStrategy.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnnotationCalloutLocationStrategy.Dispose">
            <summary>
            Releases unmanaged resources held by this object.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnnotationCalloutLocationStrategy.Dispose(System.Boolean)">
            <summary>
            Called to release any unmanaged resources held by this object.
            </summary>
            <param name="disposing">True if <see cref="M:System.IDisposable.Dispose"/> was called; False if the object is being finalized.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnnotationCalloutLocationStrategy.OnAnnotationGraphicChanged(Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic,Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic)">
            <summary>
            Called when the <see cref="P:Macro.ImageViewer.InteractiveGraphics.AnnotationCalloutLocationStrategy.AnnotationGraphic"/> changes.
            </summary>
            <param name="oldAnnotationGraphic">The former value of <see cref="P:Macro.ImageViewer.InteractiveGraphics.AnnotationCalloutLocationStrategy.AnnotationGraphic"/>.</param>
            <param name="annotationGraphic">The new value of <see cref="P:Macro.ImageViewer.InteractiveGraphics.AnnotationCalloutLocationStrategy.AnnotationGraphic"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnnotationCalloutLocationStrategy.SetAnnotationGraphic(Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic)">
            <summary>
            Sets the <see cref="P:Macro.ImageViewer.InteractiveGraphics.AnnotationCalloutLocationStrategy.AnnotationGraphic"/> that owns this strategy.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnnotationCalloutLocationStrategy.OnCalloutLocationChangedExternally">
            <summary>
            Called when the <see cref="T:Macro.ImageViewer.InteractiveGraphics.AnnotationGraphic"/>'s callout location has been changed externally; for example, by the user.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnnotationCalloutLocationStrategy.CalculateCalloutLocation(System.Drawing.PointF@,Macro.ImageViewer.Graphics.CoordinateSystem@)">
            <summary>
            Calculates the initial callout location only; returns false thereafter.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnnotationCalloutLocationStrategy.CalculateCalloutEndPoint(System.Drawing.PointF@,Macro.ImageViewer.Graphics.CoordinateSystem@)">
            <summary>
            Calculates the callout endpoint using the <see cref="M:Macro.ImageViewer.Graphics.IGraphic.GetClosestPoint(System.Drawing.PointF)"/> method.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.AnnotationCalloutLocationStrategy.Clone">
            <summary>
            Creates a deep copy of this strategy object.
            </summary>
            <remarks>
            Implementations should never return null from this method.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.AnnotationCalloutLocationStrategy.AnnotationGraphic">
            <summary>
            Gets the owning <see cref="P:Macro.ImageViewer.InteractiveGraphics.AnnotationCalloutLocationStrategy.AnnotationGraphic"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.AnnotationCalloutLocationStrategy.Callout">
            <summary>
            Gets the <see cref="P:Macro.ImageViewer.InteractiveGraphics.AnnotationCalloutLocationStrategy.AnnotationGraphic"/>'s Callout.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.BoundableResizeControlGraphic">
            <summary>
            An interactive graphic that controls resizing of an <see cref="T:Macro.ImageViewer.Graphics.IBoundableGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.BoundableResizeControlGraphic.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.InteractiveGraphics.BoundableResizeControlGraphic"/>.
            </summary>
            <param name="subject">An <see cref="T:Macro.ImageViewer.Graphics.IBoundableGraphic"/> or an <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/> chain whose subject is an <see cref="T:Macro.ImageViewer.Graphics.IBoundableGraphic"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.BoundableResizeControlGraphic.#ctor(System.Single,Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.InteractiveGraphics.BoundableResizeControlGraphic"/>.
            </summary>
            <param name="aspectRatio">The width to height aspect ratio that constrains the movement of the resize control points.</param>
            <param name="subject">An <see cref="T:Macro.ImageViewer.Graphics.IBoundableGraphic"/> or an <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/> chain whose subject is an <see cref="T:Macro.ImageViewer.Graphics.IBoundableGraphic"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.BoundableResizeControlGraphic.#ctor(System.Nullable{System.Single},Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.InteractiveGraphics.BoundableResizeControlGraphic"/>.
            </summary>
            <param name="fixedAspectRatio">The width to height aspect ratio that constrains the movement of the resize control points, or null if the movement should not be constrained.</param>
            <param name="subject">An <see cref="T:Macro.ImageViewer.Graphics.IBoundableGraphic"/> or an <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/> chain whose subject is an <see cref="T:Macro.ImageViewer.Graphics.IBoundableGraphic"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.BoundableResizeControlGraphic.#ctor(Macro.ImageViewer.InteractiveGraphics.BoundableResizeControlGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.BoundableResizeControlGraphic.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.BoundableResizeControlGraphic.ConstrainControlPointLocation(System.Int32,System.Drawing.PointF)">
            <summary>
            Computes a constrained control point location (in destination coordinates) given the location to which the cursor moved after starting drag on the control point.
            </summary>
            <param name="controlPointIndex">The index of the control point being dragged.</param>
            <param name="cursorLocation">The location to which the cursor moved.</param>
            <returns>The constrained control point location.</returns>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.BoundableResizeControlGraphic.CreateMemento">
            <summary>
            Captures the current state of this <see cref="T:Macro.ImageViewer.InteractiveGraphics.BoundableResizeControlGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.BoundableResizeControlGraphic.SetMemento(System.Object)">
            <summary>
            Restores the state of this <see cref="T:Macro.ImageViewer.InteractiveGraphics.BoundableResizeControlGraphic"/>.
            </summary>
            <param name="memento">The object that was originally created with <see cref="M:Macro.ImageViewer.InteractiveGraphics.BoundableResizeControlGraphic.CreateMemento"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.BoundableResizeControlGraphic.OnControlPointChanged(System.Int32,System.Drawing.PointF)">
            <summary>
            Called to notify the derived class of a control point change event.
            </summary>
            <param name="index">The index of the point that changed.</param>
            <param name="point">The value of the point that changed.</param>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.BoundableResizeControlGraphic.Subject">
            <summary>
            Gets the subject graphic that this graphic controls.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.BoundableResizeControlGraphic.CommandName">
            <summary>
            Gets a string that describes the type of control operation that this graphic provides.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.BoundableResizeControlGraphic.FixedAspectRatio">
            <summary>
            Gets or sets the width to height aspect ratio that constrains the movement of
            the resize control points, or null if the movement should not be constrained.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the aspect ratio is zero or negative.</exception>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.PointsList">
            <summary>
            An observable list of points defining an <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PointsList.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.Graphics.PointsList"/> with the specified owning graphic.
            </summary>
            <param name="owner">The owner graphic whose <see cref="T:Macro.ImageViewer.Graphics.CoordinateSystem"/> is used when interpreting points in the list.</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PointsList.#ctor(System.Collections.Generic.IEnumerable{System.Drawing.PointF},Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.Graphics.PointsList"/> with the specified owning graphic.
            </summary>
            <param name="points">A list of points in the <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Source"/> coordinate system with which to initialize the list.</param>
            <param name="owner">The owner graphic whose <see cref="T:Macro.ImageViewer.Graphics.CoordinateSystem"/> is used when interpreting points in the list.</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PointsList.SuspendEvents">
            <summary>
            Suspends notification of the <see cref="E:Macro.ImageViewer.Graphics.IPointsList.PointAdded"/>, <see cref="E:Macro.ImageViewer.Graphics.IPointsList.PointChanged"/>, <see cref="E:Macro.ImageViewer.Graphics.IPointsList.PointRemoved"/> and <see cref="E:Macro.ImageViewer.Graphics.IPointsList.PointsCleared"/> events.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PointsList.ResumeEvents">
            <summary>
            Resumes notification of the <see cref="E:Macro.ImageViewer.Graphics.IPointsList.PointAdded"/>, <see cref="E:Macro.ImageViewer.Graphics.IPointsList.PointChanged"/>, <see cref="E:Macro.ImageViewer.Graphics.IPointsList.PointRemoved"/> and <see cref="E:Macro.ImageViewer.Graphics.IPointsList.PointsCleared"/> events.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PointsList.IndexOf(System.Drawing.PointF)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PointsList.Insert(System.Int32,System.Drawing.PointF)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PointsList.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PointsList.Add(System.Drawing.PointF)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PointsList.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PointsList.Contains(System.Drawing.PointF)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PointsList.CopyTo(System.Drawing.PointF[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PointsList.Remove(System.Drawing.PointF)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PointsList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PointsList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.PointsList.IsClosed">
            <summary>
            Gets a value indicating if the first and last points of the list are coincident.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.PointsList.PointAdded">
            <summary>
            Occurs when a point is added to the list.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.PointsList.PointChanged">
            <summary>
            Occurs when the value of a point in the list has changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.PointsList.PointRemoved">
            <summary>
            Occurs when a point is removed from the list.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.PointsList.PointsCleared">
            <summary>
            Occurs when the list is cleared.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.PointsList.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            
            <returns>
            The element at the specified index.
            </returns>
            
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.PointsList.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
        </member>
        <member name="P:Macro.ImageViewer.Graphics.PointsList.System#Collections#Generic#ICollection{System#Drawing#PointF}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.
            </returns>
            
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.SR">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.ColumnActivityDescription">
            <summary>
              查找类似 Activity 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.ColumnPatient">
            <summary>
              查找类似 Patient 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.ColumnPriority">
            <summary>
              查找类似 Priority 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.ColumnProgress">
            <summary>
              查找类似 Progress 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.ColumnRequestedTime">
            <summary>
              查找类似 Requested Time 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.ColumnScheduledTime">
            <summary>
              查找类似 Scheduled Time 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.ColumnStatus">
            <summary>
              查找类似 Status 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.ColumnStatusDescription">
            <summary>
              查找类似 Status Details 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.ColumnStudy">
            <summary>
              查找类似 Study 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.DescriptionMaximumDiskUsageExceeded">
             <summary>
               查找类似 Disk usage is above the maximum. The Workstation will not be able to import
            DICOM files or receive them over the network. You should delete old studies to
            make room, or increase the maximum usage. 的本地化字符串。
             </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.DiskspaceTemplate">
            <summary>
              查找类似 {0} of {1} ({2}%) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.LinkOpenActivityMonitor">
            <summary>
              查找类似 Open Activity Monitor 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.LinkOpenStorageConfiguration">
            <summary>
              查找类似 Open Storage Configuration 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MenuActivityMonitor">
            <summary>
              查找类似 Activity Monitor 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MenuDeleteWorkItem">
            <summary>
              查找类似 Delete 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MenuReindex">
            <summary>
              查找类似 Re-index File Store 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MenuRestartWorkItem">
            <summary>
              查找类似 Restart 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MenuStatWorkItem">
            <summary>
              查找类似 Make Stat 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MenuStopWorkItem">
            <summary>
              查找类似 Stop 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MessageConfirmCancelWorkItems">
            <summary>
              查找类似 Canceling the selected work item(s) may result in partial study data, which could potentially lead to patient misdiagnosis.  Are you sure you want to cancel? 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MessageFailedToOpenImages">
            <summary>
              查找类似 Failed to open the selected images. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MessageFailedToOpenStudy">
            <summary>
              查找类似 Failed to open the selected studies. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MessageFailedToStartReindex">
            <summary>
              查找类似 Failed to start re-index. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MessageFilestoreDirectoryDoesNotExist">
            <summary>
              查找类似 The currently configured file store directory does not exist. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MessageLoadStudiesBeingProcessed">
            <summary>
              查找类似 Some of the studies you selected are being processed. They may be incomplete or contain out-of-date information. Do you still want to continue? 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MessageLoadStudyBeingProcessed">
            <summary>
              查找类似 The study you selected is being processed. It may be incomplete or contain out-of-date information. Do you still want to continue? 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MessageLocalServerNotRunning">
            <summary>
              查找类似 The Local Server must be running in order to complete this operation. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MessageMaximumDiskUsageExceeded">
            <summary>
              查找类似 Maximum disk usage exceeded 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MessageNonStudyWorkItemFailed">
            <summary>
              查找类似 {0} failed. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MessageOneFailedWorkItem">
            <summary>
              查找类似 There is 1 failed work item. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MessageProcessedItemsProgress">
            <summary>
              查找类似 Processed {0} of {1} items... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MessageReindexInProgress">
            <summary>
              查找类似 A re-index operation is already in progress. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MessageReindexScheduled">
            <summary>
              查找类似 The re-index has been scheduled. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MessageReindexServiceNotRunning">
            <summary>
              查找类似 The service must be running to start a re-index. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MessageTotalFailedWorkItems">
            <summary>
              查找类似 There are {0} failed work items. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.MessageWorkItemFailed">
            <summary>
              查找类似 {0} for {1} [{2}, A#:{3}] failed. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.NoFilterItem">
            <summary>
              查找类似 (all) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.StatusFilterValueActive">
            <summary>
              查找类似 Active 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.StatusFilterValueComplete">
            <summary>
              查找类似 Complete 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.StatusFilterValueFailed">
            <summary>
              查找类似 Failed 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.StatusFilterValueStopped">
            <summary>
              查找类似 Stopped 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.TitleActivityMonitor">
            <summary>
              查找类似 Activity Monitor 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.TooltipActivityMonitor">
            <summary>
              查找类似 Activity Monitor 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.TooltipDeleteWorkItem">
            <summary>
              查找类似 Delete selected work item(s) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.TooltipRestartWorkItem">
            <summary>
              查找类似 Restart selected work item(s) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.TooltipStatWorkItem">
            <summary>
              查找类似 Raise priority of selected work item(s) to &apos;Stat&apos; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.TooltipStopWorkItem">
            <summary>
              查找类似 Stop selected work item(s) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.WarningActivityMonitorPermission">
            <summary>
              查找类似 You do not have permission to open the Activity Monitor. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.WarningMaximumDiskUsageExceeded">
            <summary>
              查找类似 Maximum disk usage has been exceeded.  Other devices will not be able to send studies to the workstation. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.SR.WarningReindexPermission">
            <summary>
              查找类似 You do not have permission to start a re-index. 的本地化字符串。
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.MammogramAnnotationLayoutProxy.#ctor(Macro.ImageViewer.Annotations.MammogramAnnotationLayoutProxy,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="T:Macro.ImageViewer.Annotations.AnnotationLayout">
            <summary>
            Base class for <see cref="T:Macro.ImageViewer.Annotations.IAnnotationLayout"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationLayout.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationLayout.Clone">
            <summary>
            Creates a deep clone of this <see cref="T:Macro.ImageViewer.Annotations.AnnotationLayout"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationLayout.AnnotationBoxes">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.Annotations.AnnotationBox"/>es that define the layout.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationLayout.Macro#ImageViewer#Annotations#IAnnotationLayout#AnnotationBoxes">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.Annotations.AnnotationBox"/>es that define the layout.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationLayout.Visible">
            <summary>
            Gets or sets whether the <see cref="T:Macro.ImageViewer.Annotations.IAnnotationLayout"/> is visible.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.SR">
            <summary>
              强类型资源类，用于查找本地化字符串等。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ResourceManager">
            <summary>
              返回此类使用的缓存 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.Culture">
            <summary>
              为使用此强类型资源类的所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.BoolNo">
            <summary>
              查找类似 No 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.BoolYes">
            <summary>
              查找类似 Yes 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.CommandChange">
            <summary>
              查找类似 Change 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.CommandCreateMultilineGraphic">
            <summary>
              查找类似 Create multiline graphic 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.CommandCreateRectangleGraphic">
            <summary>
              查找类似 Create rectangle graphic 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.CommandCreateROIGraphic">
            <summary>
              查找类似 Create ROI graphic 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.CommandDelete">
            <summary>
              查找类似 Delete 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.CommandEditText">
            <summary>
              查找类似 Edit Text 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.CommandMove">
            <summary>
              查找类似 Move 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.CommandMoveControlPoint">
            <summary>
              查找类似 Move control point 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.CommandMoveGraphic">
            <summary>
              查找类似 Move graphic 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.CommandResize">
            <summary>
              查找类似 Resize 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.CommandStretch">
            <summary>
              查找类似 Stretch 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionBlueColorMap">
            <summary>
              查找类似 Blue 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionGrayscaleColorMap">
            <summary>
              查找类似 (None) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionGreenColorMap">
            <summary>
              查找类似 Green 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionPaletteColorMap">
            <summary>
              查找类似 Palette Color 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionPrefetchingStrategyVisibleDisplaySet">
            <summary>
              查找类似 Prefetches image data in a display set when display set becomes visible. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionRedColorMap">
            <summary>
              查找类似 Red 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionUnits1cm">
            <summary>
              查找类似 1/centimetre 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionUnitsBqml">
            <summary>
              查找类似 becquerels/millilitre 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionUnitsCm2">
            <summary>
              查找类似 square centimetre 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionUnitsCm2ml">
            <summary>
              查找类似 square centimetre/millilitre 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionUnitsCnts">
            <summary>
              查找类似 counts 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionUnitsCps">
            <summary>
              查找类似 counts/second 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionUnitsGml">
            <summary>
              查找类似 grams/millilitre 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionUnitsHU">
            <summary>
              查找类似 Hounsfield units 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionUnitsMgminml">
            <summary>
              查找类似 milligrams/minute/millilitre 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionUnitsMlg">
            <summary>
              查找类似 millilitre/grams 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionUnitsMlming">
            <summary>
              查找类似 millilitre/minute/grams 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionUnitsMlminml">
            <summary>
              查找类似 millilitre/minute/millilitre 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionUnitsMlml">
            <summary>
              查找类似 millilitre/millilitre 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionUnitsOD">
            <summary>
              查找类似 1/1000 optical density 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionUnitsPcnt">
            <summary>
              查找类似 percent 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionUnitsPropcnts">
            <summary>
              查找类似 proportional to counts 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionUnitsPropcps">
            <summary>
              查找类似 proportional to counts/second 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionUnitsStddev">
            <summary>
              查找类似 standard deviations 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionUnitsUmolminml">
            <summary>
              查找类似 micromoles/minute/millilitre 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionUnitsUmolml">
            <summary>
              查找类似 micromoles/millilitre 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.DescriptionUnitsUnspecified">
            <summary>
              查找类似 unknown 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionAdditionalMouseToolAssignmentsMustBeModified">
            <summary>
              查找类似 Additional mouse tool assignments must be modified ({0}). 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionFormatAnnotationItemHasNoDisplayName">
            <summary>
              查找类似 AnnotationItem has no display name: {0}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionImageBufferWin32NotSupported">
            <summary>
              查找类似 ImageBufferWin32 is not supported on non-Win32 platforms. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionImageIsNotGrayscale">
            <summary>
              查找类似 Image is not grayscale. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionIncorrectPixelDataSize">
            <summary>
              查找类似 Invalid pixel data (expected size: {0} bytes, actual size: {1} bytes). 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionInvalidAnnotationLayoutXml">
            <summary>
              查找类似 Invalid Annotation Layout XML ({0}). 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionInvalidFilteredAnnotationLayoutXml">
            <summary>
              查找类似 Invalid Filtered Annotation Layout XML ({0}). 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionInvalidNormalizedRectangle">
            <summary>
              查找类似 ({0},{1},{2},{3}) is an invalid normalized rectangle.  Normalized rectangle coordinates must be between 0.0 and 1.0 with Right &gt; Left, Bottom &gt; Top. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionInvalidParentRectangle">
            <summary>
              查找类似 ({0},{1},{2},{3}) is an invalid parent rectangle.  Parent rectangle must be such that all coordinates are positive with Right &gt; Left, Bottom &gt; Top. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionInvalidPatientID">
            <summary>
              查找类似 Patient ID must not be empty. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionInvalidRotationValue">
            <summary>
              查找类似 Rotation value must be 0, 90, 180 or 270. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionInvalidStandardPathItem">
            <summary>
              查找类似 {0} is an invalid standard path item. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionInvalidStride">
            <summary>
              查找类似 Stride improperly calculated (correct stride = {0}, calculated stride = {1}). 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionLayoutIsNotRectangular">
            <summary>
              查找类似 The layout of the physical workspace is either non-rectangular or has not been set. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionLinearLutDataCannotBeSet">
            <summary>
              查找类似 Linear Luts have no settable data. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionLUTIndexOutOfRange">
            <summary>
              查找类似 LUT index out of range (index = {0}). 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionLUTInputOutputRange">
            <summary>
              查找类似 Output range of previous LUT does not match input range of current LUT. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionLUTLastOutputRange">
            <summary>
              查找类似 Output range of last LUT is not 8 bits. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionLUTMinGreaterThanEqualToMax">
            <summary>
              查找类似 Minimum input value greater than or equal to maximum input value. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionLUTNotAdded">
            <summary>
              查找类似 Cannot generate composite LUT because no LUTs have been added yet. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionMaximumOutputValueIsNotSettable">
            <summary>
              查找类似 The maximum output value is not settable. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionMinimumOutputValueIsNotSettable">
            <summary>
              查找类似 The minimum output value is not settable. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionMinMaxInputValuesNotSet">
            <summary>
              查找类似 The minimum and maximum input values have not been set. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionMustOverrideSetMemento">
            <summary>
              查找类似 You must override SetMemento in order to restore state from a previous call to CreateMemento. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionNoDisplaySetAssociatedWithImageBoxTile">
            <summary>
              查找类似 Is the ImageBox to which this Tile belongs supposed to be empty? 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionNoPresentationImageAssociatedWithTile">
            <summary>
              查找类似 Is the tile supposed to be empty? 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionNoSopsExistInSeries">
            <summary>
              查找类似 No SOPs exist in this series.  SeriesDescription cannot be determined. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionObjectMustBeSingleType">
            <summary>
              查找类似 Object must be of Type Single. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionSopInstanceValidationFailed">
            <summary>
              查找类似 Sop Instance validation failed. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ExceptionStatefulGraphicMustBeIMemorable">
            <summary>
              查找类似 For undo support, your StatefulGraphic subclass must implement IMemorable. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatAdjustableDataLutDescription">
            <summary>
              查找类似 {0} [C:{1:F2}% B:{2:F2}%] 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatAnnotationItem">
            <summary>
              查找类似 {0}: {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatAreaPixels">
            <summary>
              查找类似 Area: {0:F1} pixels 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatAreaSquareCm">
            <summary>
              查找类似 Area: {0:F3} cm² 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatAreaSquareMm">
            <summary>
              查找类似 Area: {0:F1} mm² 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatDefaultMultiFrameOverlayGraphicName">
            <summary>
              查找类似 Overlay Plane ({0} #{1}, Fr #{2}) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatDefaultSingleFrameOverlayGraphicName">
            <summary>
              查找类似 Overlay Plane ({0} #{1}) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatDescriptionBasicLinearLut">
            <summary>
              查找类似 W:{0:0.#} L:{1:0.#} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatDescriptionIdentityVoiLinearLut">
            <summary>
              查找类似 W:{0:0.#} L:{1:0.#} (Identity) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatDescriptionMinMaxCalculatedLinearLut">
            <summary>
              查找类似 W:{0:0.#} L:{1:0.#} (Min/Max) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatDescriptionModalityDisplaySet">
            <summary>
              查找类似 [{0}] All Images 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatDescriptionModalityLutLinear">
            <summary>
              查找类似 Slope: {0:F2} Int.: {1:F2} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatDescriptionNamedLinearLut">
            <summary>
              查找类似 W:{0:0.#} L:{1:0.#} ({2}) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatDescriptionPresentationStateLinearLut">
            <summary>
              查找类似 W:{0:0.#} L:{1:0.#} ({2}) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatExceptionReason">
            <summary>
              查找类似 Reason: {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatLengthCm">
            <summary>
              查找类似 {0:F2} cm 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatLengthMm">
            <summary>
              查找类似 {0:F1} mm 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatLengthPixels">
            <summary>
              查找类似 {0:F1} pixels 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatMean">
            <summary>
              查找类似 Mean: {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatMouseButtonShortcutDescription">
            <summary>
              查找类似 {0} : {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatMouseToolHasNoAssignment">
            <summary>
              查找类似 The mouse tool does not have a shortcut assignment ({0}).  The tool cannot be activated. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatMouseToolInvalidAssignment">
            <summary>
              查找类似 The mouse tool has an invalid shortcut assignment ({0}). 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatMouseWheelShortcutDescription">
            <summary>
              查找类似 Wheel : {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatNameModalityDisplaySet">
            <summary>
              查找类似 [{0}] All Images 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatReason">
            <summary>
              查找类似 Reason: {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.FormatStdDev">
            <summary>
              查找类似 Std Dev: {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelError">
            <summary>
              查找类似 Error: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelPresentationVoiDataLut">
            <summary>
              查找类似 USER 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelPresentationVoiLinearLut">
            <summary>
              查找类似 USER 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnits1cm">
            <summary>
              查找类似 1/cm 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnitsBqml">
            <summary>
              查找类似 Bq/ml 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnitsCm2">
            <summary>
              查找类似 cm² 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnitsCm2ml">
            <summary>
              查找类似 cm²/ml 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnitsCnts">
            <summary>
              查找类似 counts 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnitsCps">
            <summary>
              查找类似 counts/s 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnitsGml">
            <summary>
              查找类似 g/ml 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnitsHU">
            <summary>
              查找类似 HU 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnitsMgminml">
            <summary>
              查找类似 mg/min/ml 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnitsMlg">
            <summary>
              查找类似 ml/g 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnitsMlming">
            <summary>
              查找类似 ml/min/g 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnitsMlminml">
            <summary>
              查找类似 ml/min/ml 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnitsMlml">
            <summary>
              查找类似 ml/ml 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnitsMm2">
            <summary>
              查找类似 mm² 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnitsOD">
            <summary>
              查找类似 1/1000 OD 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnitsPcnt">
            <summary>
              查找类似 % 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnitsPixels">
            <summary>
              查找类似 pixels 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnitsPropcnts">
            <summary>
              查找类似 prop. to counts 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnitsPropcps">
            <summary>
              查找类似 prop. to counts/s 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnitsStddev">
            <summary>
              查找类似 σ 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnitsUmolminml">
            <summary>
              查找类似 µmol/min/ml 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnitsUmolml">
            <summary>
              查找类似 µmol/ml 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnitsUnspecified">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnknown">
            <summary>
              查找类似 Unknown 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.LabelUnknownServer">
            <summary>
              查找类似 Unknown 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MenuDeleteVertex">
            <summary>
              查找类似 Delete Vertex 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MenuEditText">
            <summary>
              查找类似 Edit 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MenuInsertVertex">
            <summary>
              查找类似 Insert Vertex 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MenuRename">
            <summary>
              查找类似 Rename 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MenuShowAnalysis">
            <summary>
              查找类似 Show Analysis 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageContactPacsAdmin">
            <summary>
              查找类似 Please contact your PACS administrator for assistance. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageErrorCloningDisplaySet">
            <summary>
              查找类似 An error has occured while attempting to clone a display set.  Please check the log for more details. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageErrorCloningPresentationImage">
            <summary>
              查找类似 An error has occured while attempting to clone an image.  Please check the log for more details. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageErrorDisplayingOverlays">
             <summary>
               查找类似 One or more overlays
            cannot be displayed.
            Use image with caution. 的本地化字符串。
             </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageErrorLoadingAnnotationLayout">
            <summary>
              查找类似 An unrecoverable error occurred while attempting to load the text overlay.  Please see the log for details. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageFailedToApplyDicomHeaderGraphics">
            <summary>
              查找类似 An error occurred while trying to add graphics from the image header.  Some or all of them will not appear. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageFormatLoadStudyIncomplete">
            <summary>
              查找类似 Macro was only able to load {0} of the {1} images you requested. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageFormatOpeningImages">
            <summary>
              查找类似 Opening {0} of {1} images 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageFormatStudyNotLoadable">
             <summary>
               查找类似 {0}
            {1} 的本地化字符串。
             </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageFormatXStudiesIncomplete">
            <summary>
              查找类似 {0} studies were only partially loaded. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageFormatXStudiesInUse">
            <summary>
              查找类似 {0} studies are in use. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageFormatXStudiesNearline">
            <summary>
              查找类似 {0} studies are nearline. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageFormatXStudiesNotFound">
            <summary>
              查找类似 {0} studies were not found. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageFormatXStudiesNotLoaded">
            <summary>
              查找类似 {0} studies could not be loaded. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageFormatXStudiesOffline">
            <summary>
              查找类似 {0} studies are offline. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageInfoNoStudyLoader">
            <summary>
              查找类似 The study is on a non-streaming server and must be retrieved and reopened. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageInfoStudyCouldNotBeLoaded">
            <summary>
              查找类似 The study could not be loaded.  Please contact your PACS administrator. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageInfoStudyInUse">
            <summary>
              查找类似 The study is in use.  Please close the current study, wait a few minutes, then try loading the study again. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageInfoStudyNearline">
             <summary>
               查找类似 The study is nearline.  If your PACS is a Macro ImageServer, please try opening the study manually, then wait a few minutes before trying again.
            Alternately, the study can be brought back online by a PACS administrator. 的本地化字符串。
             </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageInfoStudyOffline">
            <summary>
              查找类似 The study is offline and must be brought back online by a PACS administrator. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageLoadMultipleStudiesFailurePrefix">
            <summary>
              查找类似 The following failures occurred while loading studies: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageLoadStudyCompleteFailure">
            <summary>
              查找类似 Macro was unable to load any of the images you requested. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageLoadStudyFailedInUse">
            <summary>
              查找类似 The study is being processed by the server and cannot be loaded at this time.  Please try again later. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageLoadStudyFailedNearline">
            <summary>
              查找类似 The study is currently being restored from archive and cannot be loaded at this time.  Please try again later. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageLoadStudyFailedNearlineNoRestore">
            <summary>
              查找类似 The study is nearline and cannot be restored at this time.  Please contact your PACS administrator to restore the study. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageLoadStudyFailedNotFound">
            <summary>
              查找类似 The study could not be found. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageLoadStudyFailedOffline">
            <summary>
              查找类似 The study cannot be loaded because it is offline. Please contact your PACS administrator to restore the study. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageNoRendererPluginsExist">
            <summary>
              查找类似 No renderer plugins exist; defaulting to GDI renderer. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageNoVisibleDisplaySets">
            <summary>
              查找类似 No images could be loaded for display. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageOneStudyIncomplete">
            <summary>
              查找类似 One study was only partially loaded. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageOneStudyInUse">
            <summary>
              查找类似 One study is in use. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageOneStudyNearline">
            <summary>
              查找类似 One study is nearline. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageOneStudyNotFound">
            <summary>
              查找类似 One study was not found. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageOneStudyNotLoaded">
            <summary>
              查找类似 One study could not be loaded. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageOneStudyOffline">
            <summary>
              查找类似 One study is offline. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessagePresentationStateApplicationFailure">
            <summary>
              查找类似 An error has occured while attempting to load a presentation state. The presentation state may not have been loaded in its entirety. Please check the log for more details. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessagePresentationStateDeserializeFailure">
            <summary>
              查找类似 An error has occurred while deserializing the image presentation state. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessagePresentationStateReadFailure">
            <summary>
              查找类似 An error has occured while attempting to read a presentation state file. Please check the log for more details. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageReferencedKeyImageFrameNotFound">
            <summary>
              查找类似 The referenced key image was found, but does not contain the specified frame. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageReferencedKeyImageFromOtherStudy">
            <summary>
              查找类似 The referenced key image could not be displayed because it is not part of the loaded study. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageRenderingPipelineFailure">
            <summary>
              查找类似 An error has occurred in the rendering pipeline. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageRoiAnalysisError">
             <summary>
               查找类似 An error has occurred while analyzing the Roi.
            Please check the log for more details. 的本地化字符串。
             </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.MessageUnsupportedImageType">
            <summary>
              查找类似 Unsupported Image Type: {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.NamePrefetchingStrategyVisibleDisplaySet">
            <summary>
              查找类似 Visible Display Set 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.SeparatorPatientDescription">
            <summary>
              查找类似 - 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.SeparatorPatientsLoaded">
            <summary>
              查找类似 :: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.StringNotApplicable">
            <summary>
              查找类似 N/A 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.StringNoValue">
            <summary>
              查找类似 --- 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.SuffixFormatKeyImageDisplaySet">
            <summary>
              查找类似 Key Images 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.SuffixFormatMREchoDisplaySet">
            <summary>
              查找类似 Echo #{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.SuffixFormatMultiframeDisplaySet">
            <summary>
              查找类似 Multiframe #{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.SuffixFormatSingleFrameDisplaySet">
            <summary>
              查找类似 Image/Frame#: {0}/{1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.SuffixFormatSingleImageDisplaySet">
            <summary>
              查找类似 Image #{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.SuffixFormatSingleImageDisplaySetWithLateralityViewPosition">
            <summary>
              查找类似 {0} (Image# {1}) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.SuffixFormatSingleReferencedFrameDisplaySet">
            <summary>
              查找类似 Series/Image/Frame: {0}/{1}/{2} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.SuffixFormatSingleReferencedImageDisplaySet">
            <summary>
              查找类似 Series/Image#: {0}/{1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.SuffixFormatSingleReferencedImageDisplaySetWithLateralityViewPosition">
            <summary>
              查找类似 {0} (Series/Image#: {1}/{2}) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.SuffixSingleImagesDisplaySet">
            <summary>
              查找类似 Single images 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.SR.ValueNil">
            <summary>
              查找类似 - 的本地化字符串。
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.LoadStudyExceptionHandlingPolicy.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.LoadStudyExceptionHandlingPolicy.Handle(System.Exception,Macro.Desktop.IExceptionHandlingContext)">
            <summary>
             Handles the specified exception.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InUseLoadStudyException">
            <summary>
            Exception class for a study that could not be loaded because it is currently in use.
            </summary>
            <remarks>
            In Use can be interpreted very broadly, but generally this means that the study is
            currently being processed, either locally or by a remote (e.g. CC Streaming) server.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.LoadStudyException">
            <summary>
            Exception class for a study whose <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s could not be loaded, either partially or totally.
            </summary>
            <remarks>
            This exception will be thrown from <see cref="M:Macro.ImageViewer.IImageViewer.LoadStudy(Macro.ImageViewer.LoadStudyArgs)"/> and <see cref="M:Macro.ImageViewer.ImageViewerComponent.LoadStudies(System.Collections.Generic.IList{Macro.ImageViewer.LoadStudyArgs})"/>
            when at least one <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> could not be loaded.  It can also be thrown in the case of
            an outright failure when the exact reason is unknown (e.g. nearline, offline, in use).
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.LoadSopsException">
            <summary>
            Exception class for <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s that could not be loaded, either partially or totally.
            </summary>
            <remarks>
            This exception will be thrown from <see cref="M:Macro.ImageViewer.ImageViewerComponent.LoadImages(System.String[])"/> when one or more
            files (not studies) has failed to load.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.LoadSopsException.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="total">The total number of <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s.</param>
            <param name="failed">The number of <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s that failed to load.</param>
        </member>
        <member name="M:Macro.ImageViewer.LoadSopsException.#ctor(System.Int32,System.Int32,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="total">The total number of sops/images.</param>
            <param name="failed">The number of sops/images that failed to load.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Macro.ImageViewer.LoadSopsException.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="total">The total number of sops/images.</param>
            <param name="failed">The number of sops/images that failed to load.</param>
            <param name="message">A custom message.</param>
        </member>
        <member name="M:Macro.ImageViewer.LoadSopsException.#ctor(System.Int32,System.Int32,System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="total">The total number of <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s.</param>
            <param name="failed">The number of <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s that failed to load.</param>
            <param name="message">A custom message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Macro.ImageViewer.LoadSopsException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">A custom message.</param>
        </member>
        <member name="M:Macro.ImageViewer.LoadSopsException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">A custom message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Macro.ImageViewer.LoadSopsException.Total">
            <summary>
            Gets or sets the total number of <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s the Framework tried to load.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LoadSopsException.Failed">
            <summary>
            Gets or sets the number of <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s that failed to loaded.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LoadSopsException.Successful">
            <summary>
            Gets the number of <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s that loaded successfully.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LoadSopsException.AnyLoaded">
            <summary>
            Gets whether or not any <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s were successfully loaded.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LoadSopsException.PartiallyLoaded">
            <summary>
            Gets whether or not the <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s were partially loaded.
            </summary>
            <remarks>
            A return value of true means that at least one <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/> was loaded successfully,
            and at least one failed to load.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.LoadStudyException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            <see cref="P:System.Exception.Message"/> is automatically determined based on <paramref name="studyInstanceUid"/>.
            </remarks>
            <param name="studyInstanceUid">The study instance uid.</param>
        </member>
        <member name="M:Macro.ImageViewer.LoadStudyException.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="studyInstanceUid">The study instance uid.</param>
            <param name="message">A custom message.</param>
        </member>
        <member name="M:Macro.ImageViewer.LoadStudyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            <see cref="P:System.Exception.Message"/> is automatically determined based on <paramref name="studyInstanceUid"/>.
            </remarks>
            <param name="studyInstanceUid">The study instance uid.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Macro.ImageViewer.LoadStudyException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="studyInstanceUid">The study instance uid.</param>
            <param name="message">A custom message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Macro.ImageViewer.LoadStudyException.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            <see cref="P:System.Exception.Message"/> is automatically determined based on <paramref name="studyInstanceUid"/>.
            </remarks>
            <param name="studyInstanceUid">The study instance uid.</param>
            <param name="total">The total number of <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s in the study.</param>
            <param name="failed">The number of <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s that failed to load.</param>
        </member>
        <member name="M:Macro.ImageViewer.LoadStudyException.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="studyInstanceUid">The study instance uid.</param>
            <param name="total">The total number of <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s in the study.</param>
            <param name="failed">The number of <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s that failed to load.</param>
            <param name="message">A custom message.</param>
        </member>
        <member name="M:Macro.ImageViewer.LoadStudyException.#ctor(System.String,System.Int32,System.Int32,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            <see cref="P:System.Exception.Message"/> is automatically determined based on <paramref name="studyInstanceUid"/>.
            </remarks>
            <param name="studyInstanceUid">The study instance uid.</param>
            <param name="total">The total number of <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s in the study.</param>
            <param name="failed">The number of <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s that failed to load.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Macro.ImageViewer.LoadStudyException.#ctor(System.String,System.Int32,System.Int32,System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="studyInstanceUid">The study instance uid.</param>
            <param name="total">The total number of <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s in the study.</param>
            <param name="failed">The number of <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s that failed to load.</param>
            <param name="message">A custom message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="F:Macro.ImageViewer.LoadStudyException.StudyInstanceUid">
            <summary>
            Gets the study instance uid of the study that failed to load, either partially or totally.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InUseLoadStudyException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            <see cref="P:System.Exception.Message"/> is automatically determined based on <paramref name="studyInstanceUid"/>.
            </remarks>
            <param name="studyInstanceUid">The study instance uid.</param>
        </member>
        <member name="M:Macro.ImageViewer.InUseLoadStudyException.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="studyInstanceUid">The study instance uid.</param>
            <param name="message">A custom message.</param>
        </member>
        <member name="M:Macro.ImageViewer.InUseLoadStudyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            <see cref="P:System.Exception.Message"/> is automatically determined based on <paramref name="studyInstanceUid"/>.
            </remarks>
            <param name="studyInstanceUid">The study instance uid.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Macro.ImageViewer.InUseLoadStudyException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="studyInstanceUid">The study instance uid.</param>
            <param name="message">A custom message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Macro.ImageViewer.NearlineLoadStudyException">
            <summary>
            Exception class for a study that could not be loaded because it is currently nearline.
            </summary>
            <remarks>
            A 'nearline' study is one that is not readily available, but can be automatically brought back online
            in a reasonable amount of time.  In the case of a CC Streaming server, the fact that the
            study headers were requested is enough to trigger a restore of the study from an archive.
            Therefore, if you receive this exception, there is nothing that needs to be done to trigger
            the retrieval other than waiting a few minutes and trying again.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.NearlineLoadStudyException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            <see cref="P:System.Exception.Message"/> is automatically determined based on <paramref name="studyInstanceUid"/>.
            </remarks>
            <param name="studyInstanceUid">The study instance uid.</param>
        </member>
        <member name="M:Macro.ImageViewer.NearlineLoadStudyException.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="studyInstanceUid">The study instance uid.</param>
            <param name="message">A custom message.</param>
        </member>
        <member name="M:Macro.ImageViewer.NearlineLoadStudyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            <see cref="P:System.Exception.Message"/> is automatically determined based on <paramref name="studyInstanceUid"/>.
            </remarks>
            <param name="studyInstanceUid">The study instance uid.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Macro.ImageViewer.NearlineLoadStudyException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="studyInstanceUid">The study instance uid.</param>
            <param name="message">A custom message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Macro.ImageViewer.NearlineLoadStudyException.IsStudyBeingRestored">
            <summary>
            Indicates whether or not the server is going to automatically restore
            the nearline study due to the request ... or that just so happens to already be the case.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.OfflineLoadStudyException">
            <summary>
            Exception class for a study that could not be loaded because it is currently offline.
            </summary>
            <remarks>
            In Dicom, 'offline' generally means that a study cannot be retrieved from archive without manual intervention.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.OfflineLoadStudyException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            <see cref="P:System.Exception.Message"/> is automatically determined based on <paramref name="studyInstanceUid"/>.
            </remarks>
            <param name="studyInstanceUid">The study instance uid.</param>
        </member>
        <member name="M:Macro.ImageViewer.OfflineLoadStudyException.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="studyInstanceUid">The study instance uid.</param>
            <param name="message">A custom message.</param>
        </member>
        <member name="M:Macro.ImageViewer.OfflineLoadStudyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            <see cref="P:System.Exception.Message"/> is automatically determined based on <paramref name="studyInstanceUid"/>.
            </remarks>
            <param name="studyInstanceUid">The study instance uid.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Macro.ImageViewer.OfflineLoadStudyException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="studyInstanceUid">The study instance uid.</param>
            <param name="message">A custom message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Macro.ImageViewer.NotFoundLoadStudyException">
            <summary>
            Exception class for a study that could not be loaded because it could not be found.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.NotFoundLoadStudyException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            <see cref="P:System.Exception.Message"/> is automatically determined based on <paramref name="studyInstanceUid"/>.
            </remarks>
            <param name="studyInstanceUid">The study instance uid.</param>
        </member>
        <member name="M:Macro.ImageViewer.NotFoundLoadStudyException.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="studyInstanceUid">The study instance uid.</param>
            <param name="message">A custom message.</param>
        </member>
        <member name="M:Macro.ImageViewer.NotFoundLoadStudyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            <see cref="P:System.Exception.Message"/> is automatically determined based on <paramref name="studyInstanceUid"/>.
            </remarks>
            <param name="studyInstanceUid">The study instance uid.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Macro.ImageViewer.NotFoundLoadStudyException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="studyInstanceUid">The study instance uid.</param>
            <param name="message">A custom message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.InvariantRectanglePrimitive">
            <summary>
            A rectangular <see cref="T:Macro.ImageViewer.Graphics.InvariantPrimitive"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantRectanglePrimitive.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.InvariantRectanglePrimitive"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantRectanglePrimitive.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit test on the <see cref="T:Macro.ImageViewer.Graphics.InvariantRectanglePrimitive"/> 
            at a given point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantRectanglePrimitive.GetClosestPoint(System.Drawing.PointF)">
            <summary>
            Gets the point on the <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> closest to the specified point.
            </summary>
            <param name="point">A point in either source or destination coordinates.</param>
            <returns>The point on the graphic closest to the given <paramref name="point"/>.</returns>
            <remarks>
            <para>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>,
            the computation will be carried out in either source
            or destination coordinates.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantRectanglePrimitive.Contains(System.Drawing.PointF)">
            <summary>
            Returns a value indicating whether the specified point is
            contained in the graphic.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.ImageBoxMemento.GetHashCode">
            <summary>
            Gets a hash code for the object.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.GraphicStateChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Macro.ImageViewer.InteractiveGraphics.StatefulCompositeGraphic.StateChanged"/>
            event.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.GraphicStateChangedEventArgs.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.GraphicStateChangedEventArgs.StatefulGraphic">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.InteractiveGraphics.IStatefulGraphic"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.GraphicStateChangedEventArgs.OldState">
            <summary>
            Gets the old <see cref="T:Macro.ImageViewer.InteractiveGraphics.GraphicState"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.GraphicStateChangedEventArgs.NewState">
            <summary>
            Gets the new <see cref="T:Macro.ImageViewer.InteractiveGraphics.GraphicState"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.GraphicStateChangedEventArgs.MouseInformation">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.InputManagement.IMouseInformation"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Annotations.AnnotationItemConfigurationOptions">
            <summary>
            Configures how the <see cref="T:Macro.ImageViewer.Annotations.IAnnotationItem"/> text should be formatted/shown 
            in an <see cref="T:Macro.ImageViewer.Annotations.AnnotationBox"/>.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Annotations.IAnnotationItem"/>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationItemConfigurationOptions.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationItemConfigurationOptions.Clone">
            <summary>
            Creates a deep clone of this object.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationItemConfigurationOptions.ShowLabel">
            <summary>
            Gets or sets whether or not to show the label (<see cref="M:Macro.ImageViewer.Annotations.IAnnotationItem.GetLabel"/>).
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Annotations.AnnotationItemConfigurationOptions.ShowLabelIfValueEmpty">
            <summary>
            Gets or sets whether or not to show the label (<see cref="M:Macro.ImageViewer.Annotations.IAnnotationItem.GetLabel"/>) even
            if the overlay text (<see cref="M:Macro.ImageViewer.Annotations.IAnnotationItem.GetAnnotationText(Macro.ImageViewer.IPresentationImage)"/>) is empty.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.ImageBoxViewExtensionPoint">
            <summary>
            An extension point for views onto <see cref="T:Macro.ImageViewer.ImageBox"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.ImageBox">
            <summary>
            A container for <see cref="T:Macro.ImageViewer.ITile"/> objects.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageBox.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.ImageBox"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageBox.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.ImageBox"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageBox.Dispose(System.Boolean)">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern
            </summary>
            <param name="disposing">True if this object is being disposed, false if it is being finalized</param>
        </member>
        <member name="M:Macro.ImageViewer.ImageBox.SetTileGrid(System.Int32,System.Int32)">
            <summary>
            Creates a rectangular grid of tiles.
            </summary>
            <remarks>
            Each time this method is called, existing tiles in the <see cref="T:Macro.ImageViewer.ImageBox"/>
            are removed and new ones added.  The exception is when the number of rows
            and columns has not changed, in which case the method does nothing
            and returns immediately.
            </remarks>
            <param name="numberOfRows">Number of <see cref="T:Macro.ImageViewer.ImageBox"/> rows.</param>
            <param name="numberOfColumns">Number of <see cref="T:Macro.ImageViewer.ImageBox"/> columns.</param>
            <exception cref="T:System.ArgumentException"><paramref name="numberOfRows"/> or 
            <paramref name="numberOfColumns"/> is less than 1.</exception>
        </member>
        <member name="M:Macro.ImageViewer.ImageBox.Draw">
            <summary>
            Draws the <see cref="T:Macro.ImageViewer.ImageBox"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageBox.SelectDefaultTile">
            <summary>
            Selects the top left tile.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ImageBox.CreateMemento">
            <summary>
            Creates a memento for this <see cref="T:Macro.ImageViewer.ImageBox"/>.
            </summary>
            <returns>A memento for this <see cref="T:Macro.ImageViewer.ImageBox"/>.</returns>
            <remarks>
            This method is used to remember the current state of a
            <see cref="T:Macro.ImageViewer.ImageBox"/>.  The memento remembers the actual <see cref="T:Macro.ImageViewer.Tile"/>
            <i>instances</i> contained in the <see cref="T:Macro.ImageViewer.ImageBox"/>.  Calling
            <see cref="M:Macro.ImageViewer.ImageBox.SetMemento(System.Object)"/> at a later time restores those instances.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.ImageBox.SetMemento(System.Object)">
            <summary>
            Sets this <see cref="T:Macro.ImageViewer.ImageBox"/> with a previously created memento.
            </summary>
            <param name="memento">Memento to set.</param>
            <remarks>
            This method restores the state of a <see cref="T:Macro.ImageViewer.ImageBox"/> with
            a memento previously created by <see cref="M:Macro.ImageViewer.ImageBox.CreateMemento"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.ImageBox.Tiles">
            <summary>
            Gets the collection of <see cref="T:Macro.ImageViewer.ITile"/> objects that belong
            to this <see cref="T:Macro.ImageViewer.ImageBox"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageBox.ImageViewer">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
            <value>The associated <see cref="T:Macro.ImageViewer.IImageViewer"/> or <b>null</b> if the 
            <see cref="T:Macro.ImageViewer.ImageBox"/> is not part of the 
            physical workspace yet.</value>
        </member>
        <member name="P:Macro.ImageViewer.ImageBox.ParentPhysicalWorkspace">
            <summary>
            Gets the parent <see cref="T:Macro.ImageViewer.IPhysicalWorkspace"/>
            </summary>
            <value>The parent <see cref="T:Macro.ImageViewer.IPhysicalWorkspace"/> or <b>null</b> if the 
            <see cref="T:Macro.ImageViewer.ImageBox"/> has not
            been added to the <see cref="T:Macro.ImageViewer.IPhysicalWorkspace"/> yet.</value>
        </member>
        <member name="P:Macro.ImageViewer.ImageBox.NormalizedRectangle">
            <summary>
            Gets or sets this <see cref="T:Macro.ImageViewer.ImageBox"/>'s normalized rectangle.
            </summary>
            <remarks>
            Normalized coordinates specify the top-left corner,
            width and height of the <see cref="T:Macro.ImageViewer.ImageBox"/> as a 
            fraction of the physical workspace.  For example, if the
            <see cref="P:Macro.ImageViewer.ImageBox.NormalizedRectangle"/> is (left=0.25, top=0.0, width=0.5, height=0.5) 
            and the physical workspace has dimensions of (width=1000, height=800), the 
            <see cref="T:Macro.ImageViewer.ImageBox"/> rectangle would be (left=250, top=0, width=500, height=400)
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.ImageBox.DisplaySet">
            <summary>
            Gets or sets the <see cref="P:Macro.ImageViewer.ImageBox.DisplaySet"/> associated with this <see cref="T:Macro.ImageViewer.ImageBox"/>.
            </summary>
            <value>The <see cref="P:Macro.ImageViewer.ImageBox.DisplaySet"/> associated with this <see cref="T:Macro.ImageViewer.ImageBox"/>.
            <b>null</b> if the <see cref="T:Macro.ImageViewer.ImageBox"/> is empty.</value>
            <remarks>
            Setting this property to a <see cref="P:Macro.ImageViewer.ImageBox.DisplaySet"/> automatically populates the tiles
            in this <see cref="T:Macro.ImageViewer.ImageBox"/> with presentation images contained in the 
            <see cref="P:Macro.ImageViewer.ImageBox.DisplaySet"/>.  Any <see cref="P:Macro.ImageViewer.ImageBox.DisplaySet"/> previously associated with
            this <see cref="T:Macro.ImageViewer.ImageBox"/> is removed.  Setting this property to <b>null</b>
            results in an empty <see cref="T:Macro.ImageViewer.ImageBox"/> and empty tiles.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.ImageBox.DisplaySetLocked">
            <summary>
            Gets or sets whether or not <see cref="P:Macro.ImageViewer.ImageBox.DisplaySet"/> is locked and cannot currently be changed.
            </summary>
            <remarks>
            The intended usage of this property is such that code responsible for the layout
            of the <see cref="T:Macro.ImageViewer.IImageViewer"/> manage this property's state, and other parts of the code,
            like tools for example, should simply check the value and respond appropriately.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.ImageBox.Selected">
            <summary>
            Gets a value indicating whether this <see cref="T:Macro.ImageViewer.ImageBox"/> is
            selected.
            </summary>
            <remarks>
            <see cref="T:Macro.ImageViewer.ImageBox"/> selection is mutually exclusive.  That is,
            only one <see cref="T:Macro.ImageViewer.ImageBox"/> is ever selected at a given time.  
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.ImageBox.SelectedTile">
            <summary>
            Gets the currently selected <see cref="T:Macro.ImageViewer.ITile"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageBox.IndexOfSelectedTile">
            <summary>
            Gets the array index of the currently selected <see cref="T:Macro.ImageViewer.ITile"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageBox.SelectedColor">
            <summary>
            Gets or sets the colour of the border when the image box
            is selected.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageBox.UnselectedColor">
            <summary>
            Gets or sets the colour of the border when the image box
            is not selected.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageBox.BorderColor">
            <summary>
            Gets the current border colour.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageBox.BorderWidth">
            <summary>
            Gets or sets the width of the border in pixels.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageBox.InsetWidth">
            <summary>
            Gets or sets the inset width of the border in pixels.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageBox.Rows">
            <summary>
            Gets the number of rows of tiles in this <see cref="T:Macro.ImageViewer.ImageBox"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageBox.Columns">
            <summary>
            Gets the number of columns of tiles in this <see cref="T:Macro.ImageViewer.ImageBox"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ImageBox.TopLeftPresentationImage">
            <summary>
            Gets or sets the <see cref="T:Macro.ImageViewer.IPresentationImage"/> in the top-left 
            <see cref="T:Macro.ImageViewer.Tile"/> of this <see cref="T:Macro.ImageViewer.ImageBox"/>.
            </summary>
            <remarks>
            Because a <see cref="T:Macro.ImageViewer.IDisplaySet"/> is an <i>ordered</i> set of 
            presentation images, setting this property to a specified
            <see cref="T:Macro.ImageViewer.IPresentationImage"/> image results in the images that follow 
            to "flow" into the other tiles from left to right, top to bottom so that
            order is preserved.
            </remarks>
            <exception cref="T:System.ArgumentException"><b>TopLeftPresentationImage</b>
            is not found this image box's <see cref="T:Macro.ImageViewer.IDisplaySet"/></exception>
        </member>
        <member name="P:Macro.ImageViewer.ImageBox.TopLeftPresentationImageIndex">
            <summary>
            Gets or sets the index of the <see cref="T:Macro.ImageViewer.PresentationImage"/> that is
            to be placed in the top-left <see cref="T:Macro.ImageViewer.Tile"/> of this <see cref="T:Macro.ImageViewer.ImageBox"/>.
            </summary>
            <remarks>
            The index is the index of the <see cref="T:Macro.ImageViewer.PresentationImage"/> in the
            <see cref="P:Macro.ImageViewer.ImageBox.DisplaySet"/>.  Because a <see cref="P:Macro.ImageViewer.ImageBox.DisplaySet"/> is an 
            <i>ordered</i> set of presentation images, setting this property to a specified
            <see cref="T:Macro.ImageViewer.PresentationImage"/> image results in the images that follow 
            to "flow" into the other tiles from left to right, top to bottom so that
            order is preserved.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <see cref="P:Macro.ImageViewer.ImageBox.TopLeftPresentationImageIndex"/> is less than 0 or greater 
            than or equal to the number of presentation images in this
            image box's <see cref="T:Macro.ImageViewer.IDisplaySet"/></exception>
        </member>
        <member name="P:Macro.ImageViewer.ImageBox.Item(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.Tile"/> at the specified row and column.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"><pararef name="row"/> or
            <pararef name="column"/> is less than 0 or is greater than or equal to 
            the <see cref="P:Macro.ImageViewer.ImageBox.Rows"/> or <see cref="P:Macro.ImageViewer.ImageBox.Columns"/> respectively.
            </exception>
        </member>
        <member name="P:Macro.ImageViewer.ImageBox.Enabled">
            <summary>
            Gets or sets whether the image box is currently enabled.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.ImageBox.Drawing">
            <summary>
            Occurs when the <see cref="T:Macro.ImageViewer.ImageBox"/> is about to be drawn.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.ImageBox.SelectionChanged">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.ImageBox.Selected"/> property has changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.ImageBox.DisplaySetChanged">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.ImageBox.DisplaySet"/> property has changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.ImageBox.TileAdded">
            <summary>
            Occurs when an <see cref="T:Macro.ImageViewer.ITile"/> has been added.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.ImageBox.TileRemoved">
            <summary>
            Occurs when an <see cref="T:Macro.ImageViewer.ITile"/> has been removed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.ImageBox.LayoutCompleted">
            <summary>
            Occurs after all <see cref="T:Macro.ImageViewer.Tile"/> objects have been added
            in the <see cref="M:Macro.ImageViewer.ImageBox.SetTileGrid(System.Int32,System.Int32)"/> method.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StandardModalities">
            <summary>
            Class that provides a list of standard modalities.
            </summary>
            <remarks>
            For reasons of consistency, the provided modality list should be used throughout the 
            application wherever a list of modalities is used/shown.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StandardModalities.Modalities">
            <summary>
            Gets a list of standard modalities.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.MouseWheelShortcut">
            <summary>
            Represents the current message object's (e.g. <see cref="T:Macro.ImageViewer.InputManagement.MouseWheelMessage"/>) state.
            </summary>
            <seealso cref="T:Macro.ImageViewer.InputManagement.MouseWheelMessage"/>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseWheelShortcut.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseWheelShortcut.#ctor(Macro.ImageViewer.InputManagement.Modifiers)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseWheelShortcut.#ctor(Macro.Desktop.ModifierFlags)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseWheelShortcut.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseWheelShortcut.Equals(System.Object)">
            <summary>
            Determines if another object instance is equal to this one.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseWheelShortcut.Equals(Macro.ImageViewer.InputManagement.MouseWheelShortcut)">
            <summary>
            Gets whether or not this object is equal to <paramref name="other"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseWheelShortcut.Equals(Macro.ImageViewer.InputManagement.Modifiers)">
            <summary>
            Gets whether or not this object is equal to <paramref name="other"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseWheelShortcut.GetHashCode">
            <summary>
            Gets a hash code for this object instance.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.MouseWheelShortcut.ToString">
            <summary>
            Gets a string describing this object instance.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.MouseWheelShortcut.Modifiers">
            <summary>
            Gets the state of the modifier keys as a <see cref="T:Macro.Desktop.ModifierFlags"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.OpenFilesHelper">
            <summary>
            Helper class to create, populate and launch an <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> from local files.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.OpenFilesHelper.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.OpenFilesHelper"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.OpenFilesHelper.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.OpenFilesHelper"/> and adds the specified files to the list of images to open.
            </summary>
            <param name="filenames">A list of paths to the files to be opened.</param>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.OpenFilesHelper.AddFile(System.String)">
            <summary>
            Adds a file to the list of images to be opened.
            </summary>
            <param name="filename">The path to the file to be opened.</param>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.OpenFilesHelper.AddFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds files to the list of images to be opened.
            </summary>
            <param name="filenames">A list of paths to the files to be opened.</param>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.OpenFilesHelper.AddDirectory(System.String,System.Boolean)">
            <summary>
            Adds the contents of a directory to the list of images to be opened.
            </summary>
            <param name="directory">The directory containing files to be opened.</param>
            <param name="recursive">True if the files of subdirectories should be recursively added; False otherwise.</param>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.OpenFilesHelper.AddDirectory(System.String)">
            <summary>
            Recursively adds the contents of a directory to the list of images to be opened.
            </summary>
            <param name="directory">The directory containing files to be opened.</param>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.OpenFilesHelper.OpenFiles">
            <summary>
            Creates the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>, loads the specified images,
            and launches the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.OpenFilesHelper.WindowBehaviour">
            <summary>
            Gets or sets the <see cref="P:Macro.ImageViewer.StudyManagement.OpenFilesHelper.WindowBehaviour"/> for launching the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.OpenFilesHelper.Title">
            <summary>
            Gets or sets the workspace title for the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>.
            </summary>
            <remarks>
            This value may be null, thus indicating that the component should automatically generate an appropriate title.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.OpenFilesHelper.AllowEmptyViewer">
            <summary>
            Gets or sets whether or not to allow an empty viewer to be opened (e.g. with no images loaded).
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.OpenFilesHelper.HandleErrors">
            <summary>
            Specifies whether or not errors should be handled automatically (e.g. error shown to the user).
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.OpenFilesHelper.UserCancelled">
            <summary>
            Gets whether or not the user cancelled the opening of the images.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.OpenFilesHelper.DesktopWindow">
            <summary>
            Gets or sets the owner <see cref="T:Macro.Desktop.IDesktopWindow"/>.
            </summary>
            <remarks>
            <para>
            This is the <see cref="T:Macro.Desktop.IDesktopWindow"/> on which error messages will be shown and
            on which the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/> will launch if not launching in a new window.
            </para>
            <para>
            This value may be null, thus indicating that the currently active <see cref="T:Macro.Desktop.IDesktopWindow"/> should be used.
            </para>
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.GraphicSelectionChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Macro.ImageViewer.EventBroker.GraphicSelectionChanged"/> event.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.GraphicSelectionChangedEventArgs.#ctor(Macro.ImageViewer.Graphics.ISelectableGraphic,Macro.ImageViewer.Graphics.ISelectableGraphic)">
            <summary>
            Intializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.GraphicSelectionChangedEventArgs"/>.
            </summary>
            <param name="selectedGraphic">The graphic that was selected. Can be <b>null</b> if there is no currently selected graphic.</param>
            <param name="deselectedGraphic">The graphic that was previously selected. Can be <b>null</b> if there was previously no selected graphic.</param>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.GraphicSelectionChangedEventArgs.SelectedGraphic">
            <summary>
            Gets the selected <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>. Can be <b>null</b> if there is no currently selected graphic.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.GraphicSelectionChangedEventArgs.DeselectedGraphic">
            <summary>
            Gets the deselected <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>. Can be <b>null</b> if there was previously no selected graphic.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.RoiCalloutGraphic">
            <summary>
            A specialized callout graphic used by <see cref="T:Macro.ImageViewer.RoiGraphics.RoiGraphic"/> whose text content is automatically computed by a list of <see cref="T:Macro.ImageViewer.RoiGraphics.Analyzers.IRoiAnalyzer"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiCalloutGraphic.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:Macro.ImageViewer.RoiGraphics.RoiCalloutGraphic"/> with all <see cref="T:Macro.ImageViewer.RoiGraphics.Analyzers.IRoiAnalyzer"/>s extending <see cref="T:Macro.ImageViewer.RoiGraphics.Analyzers.RoiAnalyzerExtensionPoint"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiCalloutGraphic.#ctor(System.Collections.Generic.IEnumerable{Macro.ImageViewer.RoiGraphics.Analyzers.IRoiAnalyzer})">
            <summary>
            Constructs a new instance of <see cref="T:Macro.ImageViewer.RoiGraphics.RoiCalloutGraphic"/> witht the specified <see cref="T:Macro.ImageViewer.RoiGraphics.Analyzers.IRoiAnalyzer"/>s.
            </summary>
            <param name="analyzers"></param>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiCalloutGraphic.#ctor(Macro.ImageViewer.RoiGraphics.RoiCalloutGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiCalloutGraphic.GetExportedActions(System.String,Macro.ImageViewer.InputManagement.IMouseInformation)">
            <summary>
            Gets a set of exported <see cref="T:Macro.Desktop.Actions.IAction"/>s.
            </summary>
            <param name="site">The action model site at which the actions should reside.</param>
            <param name="mouseInformation">The mouse input when the action model was requested, such as in response to a context menu request.</param>
            <returns>A set of exported <see cref="T:Macro.Desktop.Actions.IAction"/>s.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiCalloutGraphic.Rename">
            <summary>
            Invokes an interactive edit box on the name of the graphic, allowing the user to assign a name to the <see cref="T:Macro.ImageViewer.RoiGraphics.RoiGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiCalloutGraphic.Refresh">
            TODO (CR Nov 2011): Remove because I think we should just refactor the analyzers.
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiCalloutGraphic.Update">
            <summary>
            Forces the callout to update, allowing all the analyzers to recompute and update the text content of the callout immediately.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiCalloutGraphic.Update(Macro.ImageViewer.RoiGraphics.Analyzers.RoiAnalysisMode)">
            <summary>
            Forces the callout to update, allowing all the analyzers to recompute and update the text content of the callout immediately.
            </summary>
            <param name="mode">A value indicating whether or not the current region of interest is in the state of changing, and therefore whether or not analyzers should skip expensive computations.</param>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiCalloutGraphic.Update(Macro.ImageViewer.RoiGraphics.Roi)">
            <summary>
            Forces the callout to update, allowing all the analyzers to recompute and update the text content of the callout immediately.
            </summary>
            <param name="roi">A particular region of interest information object to use when computing statistics.</param>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiCalloutGraphic.Update(Macro.ImageViewer.RoiGraphics.Roi,Macro.ImageViewer.RoiGraphics.Analyzers.RoiAnalysisMode)">
            <summary>
            Forces the callout to update, allowing all the analyzers to recompute and update the text content of the callout.
            </summary>
            <param name="roi">A particular region of interest information object to use when computing statistics.</param>
            <param name="mode">A value indicating whether or not the current region of interest is in the state of changing, and therefore whether or not analyzers should skip expensive computations.</param>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.RoiCalloutGraphic.OnTextChanged">
            <summary>
            Called when the value of <see cref="P:Macro.ImageViewer.InteractiveGraphics.CalloutGraphic.Text"/> changes.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.RoiCalloutGraphic.ParentGraphic">
            <summary>
            Gets the parent <see cref="T:Macro.ImageViewer.RoiGraphics.RoiGraphic"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.RoiCalloutGraphic.ShowAnalysis">
            <summary>
            Gets or sets a value indicating if any analysis should be displayed.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.RoiCalloutGraphic.RoiAnalyzers">
            <summary>
            Gets the list of <see cref="T:Macro.ImageViewer.RoiGraphics.Analyzers.IRoiAnalyzer"/>s that determines the text of the callout.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicsDeserializationException">
            <summary>
            The exception that is thrown when there is an error is encountered while trying to deserialize DICOM graphics.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.KeyObjects.KeyObjectPlaceholderImage.#ctor(Macro.ImageViewer.KeyObjects.KeyObjectPlaceholderImage,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="T:Macro.ImageViewer.Layout.HpApplicabilityResult">
            <summary>
            Represents the result of a HP applicability test.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Layout.HpApplicabilityResult.Negative">
            <summary>
            The <see cref="T:Macro.ImageViewer.Layout.HpApplicabilityResult"/> value representing "not applicable".
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Layout.HpApplicabilityResult.Neutral">
            <summary>
            The <see cref="T:Macro.ImageViewer.Layout.HpApplicabilityResult"/> value representing neutral applicability (contributes nothing to the quality score).
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Layout.HpApplicabilityResult.Positive">
            <summary>
            The <see cref="T:Macro.ImageViewer.Layout.HpApplicabilityResult"/> value representing positive applicability (contributes 1 point to the quality score).
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Layout.HpApplicabilityResult.Sum(System.Collections.Generic.IEnumerable{Macro.ImageViewer.Layout.HpApplicabilityResult})">
            <summary>
            Computes a result representing the sum of the specified sequence of results.
            </summary>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Layout.HpApplicabilityResult.#ctor(System.Boolean,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="applicable"></param>
            <param name="quality"></param>
        </member>
        <member name="M:Macro.ImageViewer.Layout.HpApplicabilityResult.Equals(Macro.ImageViewer.Layout.HpApplicabilityResult)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.
                            </param>
        </member>
        <member name="M:Macro.ImageViewer.Layout.HpApplicabilityResult.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Macro.ImageViewer.Layout.HpApplicabilityResult.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Macro.ImageViewer.Layout.HpApplicabilityResult.op_Equality(Macro.ImageViewer.Layout.HpApplicabilityResult,Macro.ImageViewer.Layout.HpApplicabilityResult)">
            <summary>
            Determines if two <see cref="T:Macro.ImageViewer.Layout.HpApplicabilityResult"/> have the same value.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Layout.HpApplicabilityResult.op_Inequality(Macro.ImageViewer.Layout.HpApplicabilityResult,Macro.ImageViewer.Layout.HpApplicabilityResult)">
            <summary>
            Determines if two <see cref="T:Macro.ImageViewer.Layout.HpApplicabilityResult"/> have a different value.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Layout.HpApplicabilityResult.op_Addition(Macro.ImageViewer.Layout.HpApplicabilityResult,Macro.ImageViewer.Layout.HpApplicabilityResult)">
            <summary>
            Computes an <see cref="T:Macro.ImageViewer.Layout.HpApplicabilityResult"/> representing the sum of two <see cref="T:Macro.ImageViewer.Layout.HpApplicabilityResult"/>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:Macro.ImageViewer.Layout.HpApplicabilityResult.IsApplicable">
            <summary>
            Gets a value indicating whether this result represents a match or not.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.HpApplicabilityResult.Quality">
            <summary>
            Gets a value indicating the quality of applicability (assuming that <see cref="P:Macro.ImageViewer.Layout.HpApplicabilityResult.IsApplicable"/> returns true.
            </summary>
            <exception cref="T:System.InvalidOperationException">If this property is invoked when <see cref="P:Macro.ImageViewer.Layout.HpApplicabilityResult.IsApplicable"/> returns false.</exception>
        </member>
        <member name="T:Macro.ImageViewer.Annotations.Dicom.DicomAnnotationItem`1">
            <summary>
            A specialization of <see cref="T:Macro.ImageViewer.Annotations.AnnotationItem"/> for showing dicom tag data on the overlay.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Annotations.AnnotationItem"/>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.Dicom.DicomAnnotationItem`1.#ctor(System.String,Macro.ImageViewer.Annotations.IAnnotationResourceResolver,Macro.ImageViewer.StudyManagement.FrameDataRetrieverDelegate{`0},Macro.ImageViewer.Annotations.Dicom.ResultFormatterDelegate{`0})">
            <summary>
            A constructor that uses the <see cref="T:Macro.ImageViewer.Annotations.Dicom.DicomAnnotationItem`1"/>'s unique identifier to determine
            the display name and label using an <see cref="T:Macro.ImageViewer.Annotations.IAnnotationResourceResolver"/>.
            </summary>
            <param name="identifier">The unique identifier of the <see cref="T:Macro.ImageViewer.Annotations.Dicom.DicomAnnotationItem`1"/>.</param>
            <param name="resolver">The object that will resolve the display name and label 
            from the <see cref="T:Macro.ImageViewer.Annotations.Dicom.DicomAnnotationItem`1"/>'s unique identifier.</param>
            <param name="sopDataRetrieverDelegate">A delegate used to retrieve the Dicom tag data.</param>
            <param name="resultFormatterDelegate">A delegate that will format the Dicom tag data as a string.</param>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.Dicom.DicomAnnotationItem`1.#ctor(System.String,System.String,System.String,Macro.ImageViewer.StudyManagement.FrameDataRetrieverDelegate{`0},Macro.ImageViewer.Annotations.Dicom.ResultFormatterDelegate{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="identifier">The unique identifier of the <see cref="T:Macro.ImageViewer.Annotations.Dicom.DicomAnnotationItem`1"/>.</param>
            <param name="displayName">The <see cref="T:Macro.ImageViewer.Annotations.Dicom.DicomAnnotationItem`1"/>'s display name.</param>
            <param name="label">The <see cref="T:Macro.ImageViewer.Annotations.Dicom.DicomAnnotationItem`1"/>'s label.</param>
            <param name="sopDataRetrieverDelegate">A delegate used to retrieve the Dicom tag data.</param>
            <param name="resultFormatterDelegate">A delegate that will format the Dicom tag data as a string.</param>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.Dicom.DicomAnnotationItem`1.GetAnnotationText(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Gets the annotation text for display on the overlay.
            </summary>
            <remarks>
            The input <see cref="T:Macro.ImageViewer.IPresentationImage"/> must implement <see cref="T:Macro.ImageViewer.StudyManagement.IImageSopProvider"/> in 
            order for a non-empty string to be returned.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Annotations.AnnotationBoxList">
            <summary>
            An observable container for <see cref="T:Macro.ImageViewer.Annotations.AnnotationBox"/>es.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.AnnotationBoxList.Clone">
            <summary>
            Creates a deep clone of this <see cref="T:Macro.ImageViewer.Annotations.AnnotationBoxList"/>.
            </summary>
            <returns>A deep clone of this <see cref="T:Macro.ImageViewer.Annotations.AnnotationBoxList"/>.</returns>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.StudyCollection">
            <summary>
            A collection of <see cref="T:Macro.ImageViewer.StudyManagement.Study"/> objects.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.StudyCollection"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.BasicPresentationImageRendererFactoryExtensionPoint">
            <summary>
            The <see cref="T:Macro.ImageViewer.BasicPresentationImage"/> creates a single factory object that is then used to create
            an <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/> for each <see cref="T:Macro.ImageViewer.BasicPresentationImage"/>.  
            </summary>
            <remarks>
            The returned <see cref="T:Macro.ImageViewer.Rendering.IRenderer"/> need not be thread-safe as 
            the <see cref="T:Macro.ImageViewer.BasicPresentationImage"/> itself is not thread-safe.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.BasicPresentationImageRendererFactoryExtensionPoint.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.StudyFinder">
            <summary>
            Abstract base class for an <see cref="T:Macro.ImageViewer.StudyManagement.IStudyFinder"/>.
            </summary>
            <remarks>
            <see cref="T:Macro.ImageViewer.StudyManagement.IStudyFinder"/> abstracts the finding of studies,
            allowing many means of finding studies (e.g., local database,
            DICOM query, DICOMDIR, etc.) to be treated in the same way..
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyFinder.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.StudyManagement.StudyFinder"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.StudyFinder.Query(Macro.ImageViewer.StudyManagement.QueryParameters,Macro.Dicom.Iod.IApplicationEntity)">
            <summary>
            Queries for studies on a target server matching the specified query parameters.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.StudyFinder.Name">
            <summary>
            Gets the name of the study finder.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StandardModalitySettings.Modalities">
            <summary>
            A list of standard DICOM modalities that can be used anywhere a list of modalities is required.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.KeyboardButtonMessage">
            <summary>
            A message object created by the view layer to allow a controlling object 
            (e.g. <see cref="T:Macro.ImageViewer.InputManagement.TileController"/>) to handle keyboard button messages.
            </summary>
            <remarks>
            This class is intended for internal framework use only.
            </remarks>
            <seealso cref="T:Macro.ImageViewer.InputManagement.KeyboardButtonShortcut"/>
            <seealso cref="T:Macro.ImageViewer.InputManagement.TileController"/>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.KeyboardButtonMessage.#ctor(Macro.Desktop.XKeys,Macro.ImageViewer.InputManagement.KeyboardButtonMessage.ButtonActions)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.KeyboardButtonMessage.ButtonAction">
            <summary>
            Gets the button state.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.KeyboardButtonMessage.Shortcut">
            <summary>
            Gets the associated <see cref="T:Macro.ImageViewer.InputManagement.KeyboardButtonShortcut"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.KeyboardButtonMessage.ButtonActions">
            <summary>
            An enum used to indicate the button state.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.InputManagement.KeyboardButtonMessage.ButtonActions.Down">
            <summary>
            Indicates that the button is down.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.InputManagement.KeyboardButtonMessage.ButtonActions.Up">
            <summary>
            Indicates that the button has been released.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.LutFactory">
            <summary>
            A factory for modality luts and color maps.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.LutFactory.GetGrayscaleColorMap">
            <summary>
            Factory method for grayscale color maps.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.LutFactory.GetColorMap(System.String)">
            <summary>
            Factory method that returns a new color map given the name of a <see cref="T:Macro.ImageViewer.Imaging.IColorMapFactory"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.LutFactory.GetModalityLutLinear(System.Int32,System.Boolean,System.Double,System.Double)">
            <summary>
            Factory method for linear modality luts.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.LutFactory.Dispose(System.Boolean)">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.LutFactory.Dispose">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.LutFactory.Create">
            <summary>
            Creates a new factory instance.
            </summary>
            <remarks>
            You must dispose of the returned instance when you are done with it.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.LutFactory.AvailableColorMaps">
            <summary>
            Gets <see cref="T:Macro.ImageViewer.Imaging.ColorMapDescriptor"/>s that describe all the available color maps.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.LutFactory.NewInstance">
            <summary>
            Calls <see cref="M:Macro.ImageViewer.Imaging.LutFactory.Create"/>.
            </summary>
            <remarks>This property has been deprecated; use <see cref="M:Macro.ImageViewer.Imaging.LutFactory.Create"/> instead.</remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.LutFactory.SingletonLutFactory.GetGrayscaleColorMap">
            <summary>
            Factory method for grayscale color maps.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.LutFactory.SingletonLutFactory.GetColorMap(System.String)">
            <summary>
            Factory method that returns a new color map given the name of a <see cref="T:Macro.ImageViewer.Imaging.IColorMapFactory"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.LutFactory.SingletonLutFactory.GetModalityLutLinear(System.Int32,System.Boolean,System.Double,System.Double)">
            <summary>
            Factory method for linear modality luts.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.LutFactory.SingletonLutFactory.AvailableColorMaps">
            <summary>
            Gets <see cref="T:Macro.ImageViewer.Imaging.ColorMapDescriptor"/>s that describe all the available color maps.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.ColorMapManager">
            <summary>
            A Color Map Manager, which is responsible for managing installation and restoration
            of color maps via the Memento pattern.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorMapManager.#ctor(Macro.ImageViewer.Imaging.IColorMapInstaller)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorMapManager.GetColorMap">
            <summary>
            Gets the currently installed color map.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorMapManager.InstallColorMap(System.String)">
            <summary>
            Installs a color map by name.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorMapManager.InstallColorMap(Macro.ImageViewer.Imaging.ColorMapDescriptor)">
            <summary>
            Installs a color map by <see cref="T:Macro.ImageViewer.Imaging.ColorMapDescriptor">descriptor</see>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorMapManager.InstallColorMap(Macro.ImageViewer.Imaging.IColorMap)">
            <summary>
            Installs a color map.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorMapManager.CreateMemento">
            <summary>
            Captures enough information to restore the currently installed color map.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ColorMapManager.SetMemento(System.Object)">
            <summary>
            Restores the previously installed color map and/or it's state.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.ColorMapManager.ColorMap">
            <summary>
            Gets the currently installed color map.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.ColorMapManager.AvailableColorMaps">
            <summary>
            Gets <see cref="T:Macro.ImageViewer.Imaging.ColorMapDescriptor"/>s for all the different types of available color maps.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Comparers.SeriesNumberComparer">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>s based on series number.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.SeriesNumberComparer.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.SeriesNumberComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.SeriesNumberComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.SeriesNumberComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.SeriesNumberComparer.Compare(Macro.ImageViewer.StudyManagement.Sop,Macro.ImageViewer.StudyManagement.Sop)">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>s based on series number.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Annotations.StoredAnnotationLayout.#ctor(Macro.ImageViewer.Annotations.StoredAnnotationLayout,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">This parameter is unused.</param>
        </member>
        <member name="T:Macro.ImageViewer.NoVisibleDisplaySetsExceptionHandlingPolicy">
            <summary>
            Exception handling policy for <see cref="T:Macro.ImageViewer.NoVisibleDisplaySetsException"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.NoVisibleDisplaySetsExceptionHandlingPolicy.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.NoVisibleDisplaySetsExceptionHandlingPolicy.Handle(System.Exception,Macro.Desktop.IExceptionHandlingContext)">
            <summary>
             Handles the specified exception.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.NoVisibleDisplaySetsException">
            <summary>
            Exception thrown by the <see cref="T:Macro.ImageViewer.LayoutManager"/> when no display sets
            were added to the <see cref="T:Macro.ImageViewer.ILogicalWorkspace"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.RoiSettingsHelper">
            <summary>
            A helper class for reading ROI settings.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.RoiSettingsHelper.ShowAnalysisByDefault">
            <summary>
            Gets a value indicating whether or not ROI stats should be shown on new ROI objects by default.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.RoiSettingsHelper.AnalysisUnits">
            <summary>
            Gets a value indicating the preferred linear, area and volume units of ROI analysis output.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.PolygonalRoi">
            <summary>
            Represents a static, polygonal region of interest for the purposes of computing statistics on the contained pixels.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.PolygonalRoi.#ctor(System.Collections.Generic.IEnumerable{System.Drawing.PointF},Macro.ImageViewer.IPresentationImage)">
            <summary>
            Constructs a new polygonal region of interest.
            </summary>
            <param name="vertices">The ordered vertices defining the polygonal region of interest.</param>
            <param name="presentationImage">The image containing the source pixel data.</param>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.PolygonalRoi.#ctor(Macro.ImageViewer.Graphics.IPointsGraphic)">
            <summary>
            Constructs a new polygonal region of interest, specifying an <see cref="T:Macro.ImageViewer.Graphics.IPointsGraphic"/> as the source of the definition and pixel data.
            </summary>
            <param name="polygon">The polygonal graphic that represents the region of interest.</param>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.PolygonalRoi.ComputeBounds">
            <summary>
            Called by <see cref="P:Macro.ImageViewer.RoiGraphics.Roi.BoundingBox"/> to compute the tightest bounding box of the region of interest.
            </summary>
            <remarks>
            <para>This method is only called once and the result is cached for future accesses.</para>
            <para>
            Regions of interest have no notion of coordinate system. All coordinates are inherently
            given relative to the image pixel space (i.e. <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Source"/>.)
            </para>
            </remarks>
            <returns>A rectangle defining the bounding box.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.PolygonalRoi.CopyTo(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Creates a copy of this <see cref="T:Macro.ImageViewer.RoiGraphics.PolygonalRoi"/> using the same region of interest shape but using a different image as the source pixel data.
            </summary>
            <param name="presentationImage">The image upon which to copy this region of interest.</param>
            <returns>A new <see cref="T:Macro.ImageViewer.RoiGraphics.PolygonalRoi"/> of the same shape as the current region of interest.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.PolygonalRoi.Contains(System.Drawing.PointF)">
            <summary>
            Tests to see if the given point is contained within the region of interest.
            </summary>
            <remarks>
            Regions of interest have no notion of coordinate system. All coordinates are inherently
            given relative to the image pixel space (i.e. <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Source"/>.)
            </remarks>
            <param name="point">The point to test.</param>
            <returns>True if the point is defined as within the region of interest; False otherwise.</returns>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.PolygonalRoi.Polygon">
            <summary>
            Gets an object representing the polygon.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.PolygonalRoi.Units">
            <summary>
            Gets or sets the units of area with which to compute the value of <see cref="P:Macro.ImageViewer.RoiGraphics.IRoiAreaProvider.Area"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.PolygonalRoi.IsCalibrated">
            <summary>
            Gets a value indicating that the image has pixel spacing information or has
            previously been calibrated with physical dimensions.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.PolygonalRoi.StandardDeviation">
            <summary>
            Gets the standard deviation of the values over the <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.PolygonalRoi.Mean">
            <summary>
            Gets the mean of the values over the <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.PolygonalRoi.Area">
            <summary>
            Gets the area of the region of interest in the units of area as specified by <see cref="P:Macro.ImageViewer.RoiGraphics.IRoiAreaProvider.Units"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">If <see cref="P:Macro.ImageViewer.RoiGraphics.IRoiAreaProvider.Units"/> is a physical
            unit of measurement and the image has no pixel spacing information, nor has it been calibrated.</exception>
        </member>
        <member name="T:Macro.ImageViewer.RoiGraphics.Analyzers.RoiStatisticsAnalyzer">
            <summary>
            An <see cref="T:Macro.ImageViewer.RoiGraphics.Analyzers.IRoiAnalyzer"/> that displays common statistics of a <see cref="T:Macro.ImageViewer.RoiGraphics.RoiGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Analyzers.RoiStatisticsAnalyzer.SupportsRoi(Macro.ImageViewer.RoiGraphics.Roi)">
            <summary>
            Checks if this analyzer class can analyze the given ROI.
            </summary>
            <remarks>
            Implementations should return a result based on the type of ROI, not on the particular current state of the ROI.
            </remarks>
            <param name="roi">The ROI to analyze.</param>
            <returns>True if this class can analyze the given ROI; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.RoiGraphics.Analyzers.RoiStatisticsAnalyzer.Analyze(Macro.ImageViewer.RoiGraphics.Roi,Macro.ImageViewer.RoiGraphics.Analyzers.RoiAnalysisMode)">
            <summary>
            Analyzes the given ROI.
            </summary>
            <param name="roi">The ROI being analyzed.</param>
            <param name="mode">The analysis mode.</param>
            <returns>A string containing the analysis results, which can be appended to the analysis
            callout of the associated <see cref="T:Macro.ImageViewer.RoiGraphics.RoiGraphic"/>, if one exists.</returns>
        </member>
        <member name="P:Macro.ImageViewer.RoiGraphics.Analyzers.RoiStatisticsAnalyzer.Macro#ImageViewer#RoiGraphics#Analyzers#IRoiAnalyzer#Units">
            <summary>
            This property is not applicable to this analyzer.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.VoiWindow">
            <summary>
            Represents a window centre/width pair, with accompanying descriptive explanation.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiWindow.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a new instance of a <see cref="T:Macro.ImageViewer.Imaging.VoiWindow"/> with no explanation.
            </summary>
            <param name="width">The window width.</param>
            <param name="center">The window centre.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiWindow.#ctor(System.Double,System.Double,System.String)">
            <summary>
            Constructs a new instance of a <see cref="T:Macro.ImageViewer.Imaging.VoiWindow"/>.
            </summary>
            <param name="width">The window width.</param>
            <param name="center">The window centre.</param>
            <param name="explanation">A descriptive explanation for the window.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiWindow.Equals(Macro.ImageViewer.Imaging.VoiWindow)">
            <summary>
            Determines whether or not the current window has the same width and centre as another window.
            </summary>
            <param name="other">The other window.</param>
            <returns>True if the window width and centre are the same.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiWindow.Equals(System.Object)">
            <summary>
            Determines whether or not the current window has the same width and centre as another window.
            </summary>
            <param name="obj">The other window.</param>
            <returns>True if the window width and centre are the same.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiWindow.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiWindow.ToString">
            <summary>
            Formats the window width and centre as a string.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiWindow.op_Explicit(Macro.ImageViewer.Imaging.VoiWindow)~Macro.Dicom.Iod.Window">
            <summary>
            Converts the specified window into a <see cref="T:Macro.Dicom.Iod.Window">DICOM window IOD</see>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiWindow.op_Explicit(Macro.Dicom.Iod.Window)~Macro.ImageViewer.Imaging.VoiWindow">
            <summary>
            Converts a window from the specified <see cref="T:Macro.Dicom.Iod.Window">DICOM window IOD</see>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiWindow.GetWindows(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Gets an enumeration of <see cref="T:Macro.ImageViewer.Imaging.VoiWindow"/>s.
            </summary>
            <param name="centers">An enumeration of window centres.</param>
            <param name="widths">An enumeration of window widths.</param>
            <returns>An enumeation of <see cref="T:Macro.ImageViewer.Imaging.VoiWindow"/>s.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiWindow.GetWindows(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets an enumeration of <see cref="T:Macro.ImageViewer.Imaging.VoiWindow"/>s.
            </summary>
            <param name="centers">An enumeration of window centres.</param>
            <param name="widths">An enumeration of window widths.</param>
            <param name="explanations">An enumeration of window explanations.</param>
            <returns>An enumeation of <see cref="T:Macro.ImageViewer.Imaging.VoiWindow"/>s.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiWindow.GetWindows(Macro.Dicom.IDicomAttributeProvider)">
            <summary>
            Gets an enumeration of <see cref="T:Macro.ImageViewer.Imaging.VoiWindow"/>s defined in the specified data source.
            </summary>
            <param name="dataset">A DICOM data source.</param>
            <returns>An enumeration of <see cref="T:Macro.ImageViewer.Imaging.VoiWindow"/>s.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiWindow.SetWindows(System.Collections.Generic.IEnumerable{Macro.ImageViewer.Imaging.VoiWindow},Macro.Dicom.IDicomAttributeProvider)">
            <summary>
            Sets the VOI window attributes in the data source with the specified windows.
            </summary>
            <param name="windows">The list of <see cref="T:Macro.ImageViewer.Imaging.VoiWindow"/>s to be set.</param>
            <param name="dataset">A DICOM data source.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.VoiWindow.FromWindowRange(System.Double,System.Double,System.String)">
            <summary>
            Creates a <see cref="T:Macro.ImageViewer.Imaging.VoiWindow"/> from the specified value range.
            </summary>
            <param name="minimumValue">The minimum value in the range.</param>
            <param name="maximumValue">The maximum value in the range.</param>
            <param name="explanation">A description explanation for the window.</param>
            <returns>A <see cref="T:Macro.ImageViewer.Imaging.VoiWindow"/> defining the specified value range.</returns>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.VoiWindow.Width">
            <summary>
            Gets the window width.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.VoiWindow.Center">
            <summary>
            Gets the window centre.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.VoiWindow.Explanation">
            <summary>
            Gets a descriptive explanation for the window.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.DrawableUndoableOperationCommand`1">
            <summary>
            A specialization of <see cref="T:Macro.ImageViewer.UndoableOperationCommand`1"/> especially for
            objects that implement <see cref="T:Macro.ImageViewer.IDrawable"/>.
            </summary>
            <remarks>
            <para>
            Once an <see cref="T:Macro.Desktop.UndoableCommand"/> is in the <see cref="T:Macro.Desktop.CommandHistory"/>, a mechanism
            is needed to cause visible <see cref="T:Macro.ImageViewer.IDrawable"/> objects, such as <see cref="T:Macro.ImageViewer.IPresentationImage"/>s,
            to draw when an operation is undone or redone.  For those objects that implement undo/redo using the 
            Memento pattern (and <see cref="T:Macro.ImageViewer.IUndoableOperation`1"/>), and are also <see cref="T:Macro.ImageViewer.IDrawable"/>,
            this class will automatically redraw the object after the <see cref="T:Macro.ImageViewer.IUndoableOperation`1"/> has been undone or redone.
            </para>
            <para>
            See <see cref="T:Macro.ImageViewer.UndoableOperationCommand`1"/> for a detailed explanation.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.DrawableUndoableOperationCommand`1.#ctor(Macro.ImageViewer.IUndoableOperation{`0},`0)">
            <summary>
            Constructor.
            </summary>
            <param name="operation">The <see cref="T:Macro.ImageViewer.IUndoableOperation`1"/> that is to be applied to <paramref name="item"/>.</param>
            <param name="item">The item to which the <paramref name="operation"/> should be applied.</param>
        </member>
        <member name="M:Macro.ImageViewer.DrawableUndoableOperationCommand`1.#ctor(Macro.ImageViewer.IUndoableOperation{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="operation">The <see cref="T:Macro.ImageViewer.IUndoableOperation`1"/> that is to be applied to <paramref name="items"/>.</param>
            <param name="items">The items to which the <paramref name="operation"/> should be applied.</param>
        </member>
        <member name="M:Macro.ImageViewer.DrawableUndoableOperationCommand`1.Execute">
            <summary>
            On the first call, the <see cref="T:Macro.ImageViewer.IUndoableOperation`1"/> is applied and this
            object is populated with a <see cref="T:Macro.Desktop.MemorableUndoableCommand"/>s wrapped in a
            <see cref="T:Macro.ImageViewer.DrawableUndoableCommand"/> to first undo (or redo) the operation and
            then draw the object.
            </summary>
            <remarks>
            You should call <see cref="M:Macro.ImageViewer.DrawableUndoableOperationCommand`1.Execute"/> and check that the <see cref="P:Macro.Desktop.CompositeUndoableCommand.Count"/>
            is non-zero before adding to the <see cref="T:Macro.Desktop.CommandHistory"/>.  Otherwise, there will end up
            being 'no-op' commands in the <see cref="T:Macro.Desktop.CommandHistory"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.DrawableUndoableOperationCommand`1.Unexecute">
            <summary>
            <see cref="M:Macro.Desktop.CompositeUndoableCommand.Unexecute"/>s each command, from the end to the beginning.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DrawableUndoableOperationCommand`1.Apply(Macro.ImageViewer.IUndoableOperation{`0},`0)">
            <summary>
            Applies <paramref name="operation"/> to <paramref name="item"/> and returns
            an <see cref="T:Macro.Desktop.UndoableCommand"/> that can undo and redo the operation.
            </summary>
            <returns>
            An <see cref="T:Macro.Desktop.UndoableCommand"/> if application of <paramref name="operation"/>
            resulted in a change to the internal state of <paramref name="item"/>, otherwise null.
            </returns>
            <remarks>
            <para>
            The default implementation takes the <see cref="T:Macro.Desktop.MemorableUndoableCommand"/> returned
            by the base method and wraps it in a <see cref="T:Macro.ImageViewer.DrawableUndoableCommand"/>.
            </para>
            <para>
            Inheritors can override this method to do any additional processing and/or to
            modify the resulting command, if necessary.
            </para>
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Comparers.SliceLocationComparer">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>s based on slice location.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.SliceLocationComparer.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.SliceLocationComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.SliceLocationComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.SliceLocationComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.SliceLocationComparer.Compare(Macro.ImageViewer.StudyManagement.Frame,Macro.ImageViewer.StudyManagement.Frame)">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>s based on slice location.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Comparers.AcquisitionTimeComparer">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>s based on acquisition date and time.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.AcquisitionTimeComparer.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.AcquisitionTimeComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.AcquisitionTimeComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Comparers.AcquisitionTimeComparer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.AcquisitionTimeComparer.Compare(Macro.ImageViewer.StudyManagement.Frame,Macro.ImageViewer.StudyManagement.Frame)">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/>s based on acquisition date and time.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.ActivityMonitorComponent._statusOrdering">
            <summary>
            Defines the sort order for Status column, based on "completedness", which may differ
            from the order in which the enum constants are defined.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.StudyManagement.ActivityMonitorComponent._priorityOrdering">
            <summary>
            Defines the sort order for Priority column, which may differ
            from the order in which the enum constants are defined.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ActivityMonitorComponent.WorkItem.Equals(Macro.ImageViewer.StudyManagement.ActivityMonitorComponent.WorkItem)">
            <summary>
            In order to make this behave well in the table view, need to defined equality by Id property.
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ActivityMonitorComponent.WorkItem.Equals(System.Object)">
            <summary>
            In order to make this behave well in the table view, need to defined equality by Id property.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.ActivityMonitorComponent.WorkItem.GetHashCode">
            <summary>
            In order to make this behave well in the table view, need to defined equality by Id property.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.GraphicFocusChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Macro.ImageViewer.EventBroker.GraphicFocusChanged"/> event.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.GraphicFocusChangedEventArgs.#ctor(Macro.ImageViewer.Graphics.IFocussableGraphic,Macro.ImageViewer.Graphics.IFocussableGraphic)">
            <summary>
            Intializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.GraphicFocusChangedEventArgs"/>.
            </summary>
            <param name="focusedGraphic">The graphic that was focused. Can be <b>null</b> if there is no currently focused graphic.</param>
            <param name="unfocusedGraphic">The graphic that was previously focused. Can be <b>null</b> if there was previously no focused graphic.</param>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.GraphicFocusChangedEventArgs.FocusedGraphic">
            <summary>
            Gets the focused <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>. Can be <b>null</b> if there is no currently focused graphic.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.GraphicFocusChangedEventArgs.UnfocusedGraphic">
            <summary>
            Gets the deselected <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/>. Can be <b>null</b> if there was previously no focused graphic.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Annotations.Dicom.DicomFixedAnnotationLayoutFactory">
            <summary>
            This class is not necessarily intended to be used.  It is slightly modified from
            the original (temporary) code that was included in 0.95 for the text overlay.  Now 
            it simply serves as an example of how a hard-coded overlay can still be used 
            in the new model.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.ViewerShortcutManager.RegisterImageViewerTool(Macro.Desktop.Tools.ITool)">
            <summary>
            Registers the tool with the viewer shortcut manager.
            </summary>
            <param name="tool">the tool to register.</param>
        </member>
        <member name="M:Macro.ImageViewer.ViewerShortcutManager.GetMouseWheelHandler(Macro.ImageViewer.InputManagement.MouseWheelShortcut)">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.InputManagement.IMouseWheelHandler"/> associated with a shortcut.
            </summary>
            <param name="shortcut">The shortcut for which an <see cref="T:Macro.ImageViewer.InputManagement.IMouseWheelHandler"/> is to be found.</param>
            <returns>An <see cref="T:Macro.ImageViewer.InputManagement.IMouseWheelHandler"/> or null.</returns>
        </member>
        <member name="M:Macro.ImageViewer.ViewerShortcutManager.GetKeyboardAction(Macro.ImageViewer.InputManagement.KeyboardButtonShortcut)">
            <summary>
            Gets the <see cref="T:Macro.Desktop.Actions.IClickAction"/> associated with a shortcut.
            </summary>
            <param name="shortcut">The shortcut for which an <see cref="T:Macro.Desktop.Actions.IClickAction"/> is to be found.</param>
            <returns>An <see cref="T:Macro.Desktop.Actions.IClickAction"/> or null.</returns>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.CoordinateSystem">
            <summary>
            Coordinate system enumeration.
            </summary>
            <remarks>
            <para>
            Consider a 512x512 image that has anchored to it a line
            defined by points P1(0,0) and P2(10,10), where those points are
            in the coordinate system of the image.  In that case, the line is said
            to be in <i>source</i> coordinates.  Now consider if the image 
            is zoomed by 2x where the center of expansion is (0,0).
            In that case, the line's source coordinates are still the same, but 
            its <i>destination</i> or Tile coordinates are now P1'(0,0), P2'(20,20).
            </para>
            <para>
            In general, the source coordinates of a particular <see cref="T:Macro.ImageViewer.Graphics.Graphic"/>
            are coordinates in the coordinate system of its immediate parent.
            Destination coordinates are coordinates in the coordinate system
            of the root of the scene graph, i.e., the Tile.  Put another way,
            destination coordinates = T(source coordinates), where T represents
            the a graphic's cumulative transformation.
            </para>
            </remarks>
        </member>
        <member name="F:Macro.ImageViewer.Graphics.CoordinateSystem.Source">
            <summary>
            Represent a <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> object's coordinates in
            its immediate parent's, or <i>source</i> coordinate system.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Graphics.CoordinateSystem.Destination">
            <summary>
            Represent a <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> object's coordinates in
            the coordinate system of the root of the scene graph, that is,
            in Tile or <i>destination</i> coordinates.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.ControlPoint">
            <summary>
            A graphical representation of the "handles" that allow 
            the user to move and resize graphics decorated by
            <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlGraphic"/>s.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPoint.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPoint"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPoint.Move(System.Drawing.SizeF)">
            <summary>
            Moves the <see cref="T:Macro.ImageViewer.InteractiveGraphics.ControlPoint"/> by a specified delta.
            </summary>
            <param name="delta">The distance to move.</param>
            <remarks>
            Depending on the value of <see cref="T:Macro.ImageViewer.Graphics.CoordinateSystem"/>,
            <paramref name="delta"/> will be interpreted in either source
            or destination coordinates.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.ControlPoint.HitTest(System.Drawing.Point)">
            <summary>
            This method overrides <see cref="M:Macro.ImageViewer.Graphics.Graphic.HitTest(System.Drawing.Point)"/>.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ControlPoint.Location">
            <summary>
            Gets or sets the location of the control point.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.ControlPoint.Color">
            <summary>
            Gets or sets the colour of the control point.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.InteractiveGraphics.ControlPoint.LocationChanged">
            <summary>
            Occurs when the location of the control point has changed.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.DisplaySetSelectedEventArgs">
            <summary>
            Provides data for the <see cref="E:Macro.ImageViewer.EventBroker.DisplaySetSelected"/> event.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySetSelectedEventArgs.SelectedDisplaySet">
            <summary>
            Gets the selected <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.DisplaySetCollection">
            <summary>
            A collection of <see cref="T:Macro.ImageViewer.IDisplaySet"/> objects.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySetCollection.#ctor">
            <summary>
            Instantiates a new instance of <see cref="T:Macro.ImageViewer.DisplaySetCollection"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySetCollection.Sort">
            <summary>
            Sorts the collection using <see cref="P:Macro.ImageViewer.DisplaySetCollection.SortComparer"/>.
            </summary>
            <remarks>
            If <see cref="P:Macro.ImageViewer.DisplaySetCollection.SortComparer"/> is null, it is first set to a default one.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.DisplaySetCollection.Sort(System.Collections.Generic.IComparer{Macro.ImageViewer.IDisplaySet})">
            <summary>
            Sorts the collection with the given comparer.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DisplaySetCollection.SortComparer">
            <summary>
            The comparer that was last used to sort the collection, via <see cref="M:Macro.ImageViewer.DisplaySetCollection.Sort"/>.
            </summary>
            <remarks>
            When an item is added to or replaced, this value is set to null.  When an item is
            simply removed, the sort order is maintained, so this value also will not change.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.SopValidationException">
            <summary>
            An exception that is thrown when Sop validation fails.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.SopValidationException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.SopValidationException"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.SopValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.SopValidationException"/> with the
            specified message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.SopValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.StudyManagement.SopValidationException"/> with the
            specified message and inner exception.
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:Macro.ImageViewer.PresentationImageChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Macro.ImageViewer.Tile.PresentationImageChanged"/> event.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationImageChangedEventArgs.#ctor(Macro.ImageViewer.IPresentationImage,Macro.ImageViewer.IPresentationImage)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.PresentationImageChangedEventArgs"/>.
            </summary>
            <param name="oldPresentationImage"></param>
            <param name="newPresentationImage"></param>
        </member>
        <member name="P:Macro.ImageViewer.PresentationImageChangedEventArgs.OldPresentationImage">
            <summary>
            Gets the old <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationImageChangedEventArgs.NewPresentationImage">
            <summary>
            Gets the new <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.PointPrimitive">
            <summary>
            A primitive point graphic.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PointPrimitive.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.PointPrimitive"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PointPrimitive.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit test on the <see cref="T:Macro.ImageViewer.Graphics.PointPrimitive"/>.
            </summary>
            <param name="point">The test point in destination coordinates.</param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PointPrimitive.GetClosestPoint(System.Drawing.PointF)">
            <summary>
            Gets the point on the <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> closest to the specified point.
            </summary>
            <param name="point">A point in either source or destination coordinates.</param>
            <returns>The point on the graphic closest to the given <paramref name="point"/>.</returns>
            <remarks>
            <para>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>,
            the computation will be carried out in either source
            or destination coordinates.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.PointPrimitive.Move(System.Drawing.SizeF)">
            <summary>
            Move the <see cref="T:Macro.ImageViewer.Graphics.PointPrimitive"/> by a specified delta.
            </summary>
            <param name="delta"></param>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.PointPrimitive.Point">
            <summary>
            Gets or sets the location of the point in either source
            or destination coordinates.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.PointPrimitive.PointChanged">
            <summary>
            Occurs when the value of <see cref="P:Macro.ImageViewer.Graphics.IPointGraphic.Point"/> changes.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.PointPrimitive.BoundingBox">
            <summary>
            Gets the tightest bounding box that encloses the graphic in either source or destination coordinates.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.ActiveImageViewerChangedEventArgs">
            <summary>
            Provides data for when <see cref="M:Macro.ImageViewer.ImageViewerToolComponent.OnActiveImageViewerChanged(Macro.ImageViewer.ActiveImageViewerChangedEventArgs)"/>
            is called.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ActiveImageViewerChangedEventArgs.DeactivatedImageViewer">
            <summary>
            Gets the deactivated <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.ActiveImageViewerChangedEventArgs.ActivatedImageViewer">
            <summary>
            Gets the activated <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.KeyObjects.KeyImageSerializer">
            <summary>
            A class for serializing a key image series from a number of images with associated presentation states.
            </summary>
            <remarks>
            <para>Due to the relatively new nature of key object support in the Macro Framework, this API may be more prone to changes in the next release.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.KeyObjects.KeyImageSerializer.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:Macro.ImageViewer.KeyObjects.KeyImageSerializer"/>.
            </summary>
            <remarks>
            <para>Due to the relatively new nature of key object support in the Macro Framework, this API may be more prone to changes in the next release.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.KeyObjects.KeyImageSerializer.AddImage(Macro.ImageViewer.StudyManagement.Frame,Macro.ImageViewer.PresentationStates.Dicom.DicomSoftcopyPresentationState)">
            <summary>
            Adds a frame and associated presentation state to the serialization queue.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.KeyObjects.KeyImageSerializer.Serialize">
            <summary>
            Serializes the current contents into a number of key object selection document SOP instances.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.KeyObjects.KeyImageSerializer.Serialize(Macro.ImageViewer.KeyObjects.KeyImageSerializer.InitializeKeyObjectDocumentSeriesCallback)">
            <summary>
            Serializes the current contents into a number of key object selection document SOP instances.
            </summary>
            <param name="callback">A callback method to initialize the series-level attributes of the key object document.</param>
        </member>
        <member name="P:Macro.ImageViewer.KeyObjects.KeyImageSerializer.DateTime">
            <summary>
            Gets or sets the series date time to use for the key object selection document.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.KeyObjects.KeyImageSerializer.Description">
            <summary>
            Gets or sets the description of the key object selection.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.KeyObjects.KeyImageSerializer.SeriesDescription">
            <summary>
            Gets or sets the series description.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.KeyObjects.KeyImageSerializer.Author">
            <summary>
            Gets or sets the KO document author.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.KeyObjects.KeyImageSerializer.DocumentTitle">
            <summary>
            Gets or sets the key object selection document title.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.KeyObjects.KeyImageSerializer.SourceAETitle">
            <summary>
            Gets or sets the instance creator's workstation AE title.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.KeyObjects.KeyImageSerializer.StationName">
            <summary>
            Gets or sets the instance creator's workstation name.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.KeyObjects.KeyImageSerializer.Institution">
            <summary>
            Gets or sets the instance creator's institution.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.KeyObjects.KeyImageSerializer.Manufacturer">
            <summary>
            Gets or sets the workstation's manufacturer.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.KeyObjects.KeyImageSerializer.ManufacturersModelName">
            <summary>
            Gets or sets the workstation's model name.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.KeyObjects.KeyImageSerializer.DeviceSerialNumber">
            <summary>
            Gets or sets the workstation's serial number.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.KeyObjects.KeyImageSerializer.SoftwareVersions">
            <summary>
            Gets or sets the workstation's software version numbers (backslash-delimited for multiple values).
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.KeyObjects.KeyImageSerializer.SpecificCharacterSet">
            <summary>
            Gets or sets the DICOM specific character set to be used when encoding SOP instances.
            </summary>
            <remarks>
            By default, text attribute values will be encoded using UTF-8 Unicode (ISO-IR 192).
            If set to NULL or empty, values will be encoded using the default character repertoire (ISO-IR 6).
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.KeyObjects.KeyImageSerializer.InitializeKeyObjectDocumentSeriesCallback">
            <summary>
            Represents the callback method that initializes the <see cref="T:Macro.Dicom.Iod.Modules.KeyObjectDocumentSeriesModuleIod">series-level attributes</see> of a key object selection document.
            </summary>
            <param name="keyObjectDocumentSeries">A key object document series module.</param>
        </member>
        <member name="T:Macro.ImageViewer.KeyObjects.KeyImageSerializer.KeyObjectDocumentSeries">
            <summary>
            Supplies the series-level attribute values of a key object selection document.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.KeyObjects.KeyImageSerializer.KeyObjectDocumentSeries.PatientId">
            <summary>
            Gets the patient ID of the study for which the key object selection document is being created.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.KeyObjects.KeyImageSerializer.KeyObjectDocumentSeries.StudyInstanceUid">
            <summary>
            Gets the study instance UID of the study for which the key object selection document is being created.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.KeyObjects.KeyImageSerializer.KeyObjectDocumentSeries.SeriesInstanceUid">
            <summary>
            Gets or sets the series instance UID for the key object selection document.
            </summary>
            <remarks>
            If this property is set to empty or null, a new UID will be generated automatically.
            </remarks>
        </member>
        <member name="F:Macro.ImageViewer.KeyObjects.KeyImageSerializer.KeyObjectDocumentSeries.SeriesNumber">
            <summary>
            Gets or sets the series number for the key object selection document.
            </summary>
            <remarks>
            If this property is set to null, a series number will be computed automatically.
            </remarks>
        </member>
        <member name="F:Macro.ImageViewer.KeyObjects.KeyImageSerializer.KeyObjectDocumentSeries.SeriesDateTime">
            <summary>
            Gets or sets the series date/time for the key object selection document.
            </summary>
            <remarks>
            If this property is set to null, the series date/time attributes will not be included.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.TextPlaceholderControlGraphic">
            <summary>
            An interactive graphic that displays a placeholder control point when the value of the subject's <see cref="P:Macro.ImageViewer.Graphics.ITextGraphic.Text"/> is empty or null.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.TextPlaceholderControlGraphic.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.InteractiveGraphics.TextPlaceholderControlGraphic"/>.
            </summary>
            <param name="subject">An <see cref="T:Macro.ImageViewer.Graphics.ITextGraphic"/> or an <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/> chain whose subject is an <see cref="T:Macro.ImageViewer.Graphics.ITextGraphic"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.TextPlaceholderControlGraphic.#ctor(Macro.ImageViewer.InteractiveGraphics.TextPlaceholderControlGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.TextPlaceholderControlGraphic.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.TextPlaceholderControlGraphic.CreateMemento">
            <summary>
            Captures the current state of this <see cref="T:Macro.ImageViewer.InteractiveGraphics.TextPlaceholderControlGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.TextPlaceholderControlGraphic.SetMemento(System.Object)">
            <summary>
            Restores the state of this <see cref="T:Macro.ImageViewer.InteractiveGraphics.TextPlaceholderControlGraphic"/>.
            </summary>
            <param name="memento">The object that was originally created with <see cref="M:Macro.ImageViewer.InteractiveGraphics.TextPlaceholderControlGraphic.CreateMemento"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.TextPlaceholderControlGraphic.OnControlPointChanged(System.Int32,System.Drawing.PointF)">
            <summary>
            Called to notify the derived class of a control point change event.
            </summary>
            <param name="index">The index of the point that changed.</param>
            <param name="point">The value of the point that changed.</param>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.TextPlaceholderControlGraphic.Subject">
            <summary>
            Gets the subject graphic that this graphic controls.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.TextPlaceholderControlGraphic.CommandName">
            <summary>
            Gets a string that describes the type of control operation that this graphic provides.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.InvariantArrowheadGraphic">
            <summary>
            An arrowhead graphic with fixed screen size.
            </summary>
            <remarks>
            An <see cref="T:Macro.ImageViewer.Graphics.InvariantArrowheadGraphic"/> is a graphic whose orientation and
            position can be fixed relative to the source coordinate system, but whose
            size is fixed in the destination coordinate system.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantArrowheadGraphic.#ctor">
            <summary>
            Constructs a new arrowhead graphic with fixed screen size.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantArrowheadGraphic.#ctor(Macro.ImageViewer.Graphics.InvariantArrowheadGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantArrowheadGraphic.GetClosestPoint(System.Drawing.PointF)">
            <summary>
            Gets the point on the arrowhead closest to the specified <paramref name="point"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.InvariantArrowheadGraphic.RecomputeArrow">
            <summary>
            Recomputes the shape and positioning of the arrowhead's line graphics.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantArrowheadGraphic.Color">
            <summary>
            Gets or sets the colour.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantArrowheadGraphic.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantArrowheadGraphic.Point">
            <summary>
            Gets or sets the location that the arrowhead points to.
            </summary>
            <remarks>
            <para>This property specifies the point that the arrowhead points to,
            as well as the point to which it is fixed. As the parent zoom changes,
            the screen size of arrowhead will remain the same, and this point will
            remain pointing to the same location in the parent graphic.</para>
            <para>This property can be specified in either source or destination
            coordinates depending on the value of
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/>.</para>
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantArrowheadGraphic.Angle">
            <summary>
            Gets or sets the angle in degrees in which the arrowhead points.
            </summary>
            <remarks>
            The angle is specified in terms of the standard polar coordinate axes relative to the parent's <see cref="T:Macro.ImageViewer.Graphics.ISpatialTransform"/>
            (i.e. counterclockwise from the positive X-axis).
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantArrowheadGraphic.Length">
            <summary>
            Gets or sets the length of the arrowhead.
            </summary>
            <remarks>
            The length of the arrowhead is the altitude along the shaft of the triangle formed by the arrowhead.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.InvariantArrowheadGraphic.SweepAngle">
            <summary>
            Gets or sets the sweep angle of the arrowhead in degrees.
            </summary>
            <remarks>
            The sweep angle is the angle spanned by the two sides of the arrowhead.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.KeyObjects.IKeyObjectContentItem">
            <summary>
            A single key object content item in a key object document.
            </summary>
            <remarks>
            <para>Due to the relatively new nature of key object support in the Macro Framework, this API may be more prone to changes in the next release.</para>
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.KeyObjects.KeyImageContentItem">
            <summary>
            A single key image content item in a key object document.
            </summary>
            <remarks>
            <para>Due to the relatively new nature of key object support in the Macro Framework, this API may be more prone to changes in the next release.</para>
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.ColorBarGraphic">
            <summary>
            A colour bar graphic depicting the full spectrum of displayable colours for a given colour map.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorBarGraphic.#ctor">
            <summary>
            Initializes a new vertical <see cref="T:Macro.ImageViewer.Graphics.ColorBarGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorBarGraphic.#ctor(Macro.ImageViewer.Graphics.ColorBarOrientation)">
            <summary>
            Initializes a new <see cref="T:Macro.ImageViewer.Graphics.ColorBarGraphic"/> in the specified orientation.
            </summary>
            <param name="orientation">A value specifying the desired orientation of the colour bar.</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorBarGraphic.#ctor(System.Int32,System.Int32,Macro.ImageViewer.Graphics.ColorBarOrientation)">
            <summary>
            Initializes a new <see cref="T:Macro.ImageViewer.Graphics.ColorBarGraphic"/> with the specified logical dimensions and orientation.
            </summary>
            <param name="length">The desired logical length of the colour bar along which the spectrum of colours will be ordered.</param>
            <param name="width">The desired logical width of the colour bar.</param>
            <param name="orientation">A value specifying the desired orientation of the colour bar.</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorBarGraphic.#ctor(System.Drawing.Size)">
            <summary>
            Initializes a new <see cref="T:Macro.ImageViewer.Graphics.ColorBarGraphic"/> with the specified physical dimensions and inferred orientation.
            </summary>
            <param name="size">The desired physical size of the colour bar. The orientation of the colour bar is inferred from the longer dimension.</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorBarGraphic.#ctor(System.Drawing.Size,Macro.ImageViewer.Graphics.ColorBarOrientation)">
            <summary>
            Initializes a new <see cref="T:Macro.ImageViewer.Graphics.ColorBarGraphic"/> with the specified physical dimensions and orientation.
            </summary>
            <param name="size">The desired physical size of the colour bar.</param>
            <param name="orientation">A value specifying the desired orientation of the colour bar.</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorBarGraphic.#ctor(Macro.ImageViewer.Graphics.ColorBarGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorBarGraphic.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.Graphics.ColorBarGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorBarGraphic.Move(System.Drawing.SizeF)">
            <summary>
            Moves the <see cref="T:Macro.ImageViewer.Graphics.ColorBarGraphic"/> by a specified offset.
            </summary>
            <remarks>
            <paramref name="delta"/> may be in either the <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Source"/> or <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Destination"/>
            coordinate system depending on the value of <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/>.
            </remarks>
            <param name="delta">The offset by which to move the colour bar.</param>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorBarGraphic.OnLocationChanged">
            <summary>
            Called when the value of <see cref="P:Macro.ImageViewer.Graphics.ColorBarGraphic.Location"/> changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorBarGraphic.OnSizeChanged">
            <summary>
            Called when the value of <see cref="P:Macro.ImageViewer.Graphics.ColorBarGraphic.Size"/> changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorBarGraphic.OnReversedChanged">
            <summary>
            Called when the value of <see cref="P:Macro.ImageViewer.Graphics.ColorBarGraphic.Reversed"/> changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorBarGraphic.OnOrientationChanged">
            <summary>
            Called when the value of <see cref="P:Macro.ImageViewer.Graphics.ColorBarGraphic.Orientation"/> changes.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorBarGraphic.CreateVerticalGradient">
            <summary>
            Called to create a vertical black and white gradient graphic with black at the top and white at the bottom.
            </summary>
            <remarks>
            This method is called to create a normalized gradient. User options such as <see cref="P:Macro.ImageViewer.Graphics.ColorBarGraphic.Reversed"/> and <see cref="P:Macro.ImageViewer.Graphics.ColorBarGraphic.Orientation"/> are applied automatically.
            </remarks>
            <returns>A new normalized gradient graphic.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorBarGraphic.UnloadColorBar">
            <summary>
            Called to unload the colour bar graphic and any associated resources.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorBarGraphic.CreateSpatialTransform">
            <summary>
            Creates the <see cref="T:Macro.ImageViewer.Graphics.ISpatialTransform"/> for this <see cref="T:Macro.ImageViewer.Graphics.ColorBarGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorBarGraphic.OnDrawing">
            <summary>
            Called by the framework just before the <see cref="T:Macro.ImageViewer.Graphics.ColorBarGraphic"/> is rendered.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorBarGraphic.InstallColorMap(System.String)">
            <summary>
            Installs a colour map by name.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorBarGraphic.InstallColorMap(Macro.ImageViewer.Imaging.ColorMapDescriptor)">
            <summary>
            Installs a colour map by <see cref="T:Macro.ImageViewer.Imaging.ColorMapDescriptor">descriptor</see>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorBarGraphic.InstallColorMap(Macro.ImageViewer.Imaging.IColorMap)">
            <summary>
            Installs a colour map.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ColorBarGraphic.Width">
            <summary>
            Gets or sets the logical width of the colour bar.
            </summary>
            <remarks>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.ColorBarGraphic.Orientation"/>, the logical width may or may not be coincident with the physical width.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ColorBarGraphic.Length">
            <summary>
            Gets or sets the logical length of the colour bar along which the spectrum of colours are ordered.
            </summary>
            <remarks>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.ColorBarGraphic.Orientation"/>, the logical length may or may not be coincident with the physical height.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ColorBarGraphic.Size">
            <summary>
            Gets or sets the physical size of the colour bar.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ColorBarGraphic.Location">
            <summary>
            Gets or sets the position of the top-left corner of the colour bar.
            </summary>
            <remarks>
            This value may be in either the <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Source"/> or <see cref="F:Macro.ImageViewer.Graphics.CoordinateSystem.Destination"/>
            coordinate system depending on the value of <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ColorBarGraphic.Orientation">
            <summary>
            Gets or sets the orientation of the colour bar.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ColorBarGraphic.Reversed">
            <summary>
            Gets or sets a value indicating whether or not the spectrum should be reversed in order.
            </summary>
            <remarks>
            Normally, the colours of the spectrum are arranged such that left-to-right or top-to-bottom
            (depending on <see cref="P:Macro.ImageViewer.Graphics.ColorBarGraphic.Orientation"/>) coincides with increasing pixel intensity values.
            This behaviour can be reversed using this property such that low intensity values are to the right
            or bottom, and high intensity values are to the left or top.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ColorBarGraphic.ColorBar">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.Graphics.GrayscaleImageGraphic"/> of the uncolourised colour bar.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ColorBarGraphic.ColorMapManager">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.Imaging.IColorMapManager"/> associated with this <see cref="T:Macro.ImageViewer.Graphics.ColorBarGraphic"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.ColorBarGraphic.ColorMap">
            <summary>
            Gets the currently installed colour map.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorBarGraphic.GradientPixelData.CreateTransientReference">
            <summary>
            Creates a new 'transient reference' to this <see cref="T:Macro.ImageViewer.Graphics.ColorBarGraphic.GradientPixelData"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ColorBarGraphic.GradientPixelData.Dispose">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.ColorBarOrientation">
            <summary>
            Enumeration of values specifying the orientation of a <see cref="T:Macro.ImageViewer.Graphics.ColorBarGraphic"/>.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Graphics.ColorBarOrientation.Horizontal">
            <summary>
            Specifies that the color bar is oriented horizontally.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Graphics.ColorBarOrientation.Vertical">
            <summary>
            Specifies that the color bar is oriented vertically.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.RectanglePrimitive">
            <summary>
            A primitive rectangle graphic.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.RectanglePrimitive.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.RectanglePrimitive"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.RectanglePrimitive.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit test on the <see cref="T:Macro.ImageViewer.Graphics.RectanglePrimitive"/> at a given point.
            </summary>
            <param name="point">The mouse position in destination coordinates.</param>
            <returns>
            <b>True</b> if <paramref name="point"/> "hits" the <see cref="T:Macro.ImageViewer.Graphics.RectanglePrimitive"/>,
            <b>false</b> otherwise.
            </returns>
            <remarks>
            A "hit" is defined as when the mouse position is <see cref="F:Macro.ImageViewer.Graphics.VectorGraphic.HitTestDistance"/>
            screen pixels away from any point on the rectangle.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.RectanglePrimitive.GetClosestPoint(System.Drawing.PointF)">
            <summary>
            Gets the point on the <see cref="T:Macro.ImageViewer.Graphics.RectanglePrimitive"/> closest to the specified point.
            </summary>
            <param name="point">A point in either source or destination coordinates.</param>
            <returns>The point on the graphic closest to the given <paramref name="point"/>.</returns>
            <remarks>
            <para>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>,
            the computation will be carried out in either source
            or destination coordinates.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.RectanglePrimitive.Contains(System.Drawing.PointF)">
            <summary>
            Returns a value indicating whether the specified point is contained
            in the rectangle.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.RectanglePrimitive.GetRoi">
            <summary>
            Gets an object describing the region of interest on the <see cref="P:Macro.ImageViewer.Graphics.Graphic.ParentPresentationImage"/> selected by this <see cref="T:Macro.ImageViewer.Graphics.Graphic"/>.
            </summary>
            <remarks>
            Graphic objects that do not describe a region of interest may return null.
            </remarks>
            <returns>A <see cref="T:Macro.ImageViewer.RoiGraphics.Roi"/> describing this region of interest, or null if the graphic does not describe a region of interest.</returns>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.LinePrimitive">
            <summary>
            A primitive line graphic.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.LinePrimitive.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Graphics.LinePrimitive"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.LinePrimitive.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit test on the <see cref="T:Macro.ImageViewer.Graphics.LinePrimitive"/> at a given point.
            </summary>
            <param name="point">The mouse position in destination coordinates.</param>
            <returns>
            <b>True</b> if <paramref name="point"/> "hits" the <see cref="T:Macro.ImageViewer.Graphics.LinePrimitive"/>,
            <b>false</b> otherwise.
            </returns>
            <remarks>
            A "hit" is defined as when the mouse position is <see cref="F:Macro.ImageViewer.Graphics.VectorGraphic.HitTestDistance"/>
            screen pixels away from any point on the line.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.LinePrimitive.GetClosestPoint(System.Drawing.PointF)">
            <summary>
            Gets the point on the <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> closest to the specified point.
            </summary>
            <param name="point">A point in either source or destination coordinates.</param>
            <returns>The point on the graphic closest to the given <paramref name="point"/>.</returns>
            <remarks>
            <para>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>,
            the computation will be carried out in either source
            or destination coordinates.</para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.LinePrimitive.Move(System.Drawing.SizeF)">
            <summary>
            Moves the <see cref="T:Macro.ImageViewer.Graphics.LinePrimitive"/> by a specified delta.
            </summary>
            <param name="delta">The distance to move.</param>
            <remarks>
            Depending on the value of <see cref="P:Macro.ImageViewer.Graphics.Graphic.CoordinateSystem"/>,
            <paramref name="delta"/> will be interpreted in either source
            or destination coordinates.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.LinePrimitive.Point1">
            <summary>
            Gets or sets one endpoint of the line in either source or destination coordinates.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.LinePrimitive.Point2">
            <summary>
            Gets or sets the other endpoint of the line in either source or destination coordinates.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.LinePrimitive.BoundingBox">
            <summary>
            Gets the tightest bounding box that encloses the graphic in either source or destination coordinates.
            </summary>
            <remarks>
            <see cref="P:Macro.ImageViewer.Graphics.IGraphic.CoordinateSystem"/> determines whether this
            property is in source or destination coordinates.
            </remarks>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.LinePrimitive.Point1Changed">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.Graphics.ILineSegmentGraphic.Point1"/> property changed.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.LinePrimitive.Point2Changed">
            <summary>
            Occurs when the <see cref="P:Macro.ImageViewer.Graphics.ILineSegmentGraphic.Point2"/> property changed.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.LinePrimitive.Pt1">
            <summary>
            This member has been deprecated in favour of <see cref="P:Macro.ImageViewer.Graphics.LinePrimitive.Point1"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Graphics.LinePrimitive.Pt2">
            <summary>
            This member has been deprecated in favour of <see cref="P:Macro.ImageViewer.Graphics.LinePrimitive.Point2"/>.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.LinePrimitive.Pt1Changed">
            <summary>
            This member has been deprecated in favour of <see cref="E:Macro.ImageViewer.Graphics.LinePrimitive.Point1Changed"/>.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Graphics.LinePrimitive.Pt2Changed">
            <summary>
            This member has been deprecated in favour of <see cref="E:Macro.ImageViewer.Graphics.LinePrimitive.Point2Changed"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.ModalityLutLinear">
            <summary>
            Implements the DICOM concept of a Modality LUT.
            </summary>
            <remarks>
            For efficiency's sake, <see cref="T:Macro.ImageViewer.Imaging.ModalityLutLinear"/> is implemented as a <see cref="T:Macro.ImageViewer.Imaging.GeneratedDataLut"/>
            although it could also be a purely calculated Lut.
            for more information.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.GeneratedDataModalityLut">
            <summary>
            Base implementation of a lookup table in the standard grayscale image display pipeline used to transform stored pixel values to manufacturer-independent values whose data is purely generated.
            </summary>
            <remarks>
            Often, linear functions are created by deriving from this class to improve performance so that
            the calculation is only performed once.  For an example, see <see cref="T:Macro.ImageViewer.Imaging.ModalityLutLinear"/>.
            </remarks>
            <seealso cref="T:Macro.ImageViewer.Imaging.DataModalityLut"/>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.GeneratedDataModalityLut.Fill(System.Double[],System.Int32,System.Int32)">
            <summary>
            Called to populate the lookup table using an algorithm.
            </summary>
            <remarks>
            <para>
            The data table starts with the mapped output value for an input of <see cref="P:Macro.ImageViewer.Imaging.GeneratedDataModalityLut.FirstMappedPixelValue"/> at index 0, and ends with the value for an input of <see cref="P:Macro.ImageViewer.Imaging.GeneratedDataModalityLut.LastMappedPixelValue"/> for a total of (<see cref="P:Macro.ImageViewer.Imaging.GeneratedDataModalityLut.LastMappedPixelValue"/> - <see cref="P:Macro.ImageViewer.Imaging.GeneratedDataModalityLut.FirstMappedPixelValue"/> + 1) entries.
            </para>
            <para>
            Implementations can fill the lookup table using an iterator such as the following:
            <code><![CDATA[
            for (int i = 0; i < data.Length; ++i)
                data[i] = MapPixel(i + firstMappedPixelValue);
            ]]></code>
            </para>
            </remarks>
            <param name="data">The lookup table to be populated.</param>
            <param name="firstMappedPixelValue">The value of the first pixel in the lookup table (and hence at index 0). This value is provided for convenience, and has the same value as <see cref="P:Macro.ImageViewer.Imaging.GeneratedDataModalityLut.FirstMappedPixelValue"/>.</param>
            <param name="lastMappedPixelValue">The value of the last pixel in the lookup table (and hence at index data.Length - 1). This value is provided for convenience, and has the same value as <see cref="P:Macro.ImageViewer.Imaging.GeneratedDataModalityLut.LastMappedPixelValue"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.GeneratedDataModalityLut.OnLutChanged">
            <summary>
            Fires the <see cref="E:Macro.ImageViewer.Imaging.DataModalityLut.LutChanged"/> event.
            </summary>
            <remarks>
            Inheritors should call this method when any property of the lookup table has changed.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.GeneratedDataModalityLut.Clear">
            <summary>
            Clears the data in the lookup table; the data will be recreated on the next attempt to access the lookup table data.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.GeneratedDataModalityLut.FirstMappedPixelValue">
            <summary>
            Since the data table is generated, simply returns <see cref="P:Macro.ImageViewer.Imaging.IModalityLut.MinInputValue"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.GeneratedDataModalityLut.LastMappedPixelValue">
            <summary>
            Since the data table is generated, simply returns <see cref="P:Macro.ImageViewer.Imaging.IModalityLut.MaxInputValue"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.GeneratedDataModalityLut.Data">
            <summary>
            Gets the lookup table data, lazily created.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.GeneratedDataModalityLut.Item(System.Int32)">
            <summary>
            Looks up and returns a value at a particular index in the lookup table.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.ModalityLutLinear.#ctor(System.Int32,System.Boolean,System.Double,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Imaging.ModalityLutLinear"/> with the specified parameters.
            </summary>
            <param name="bitsStored">Indicates the number of bits stored of the associated pixel data.</param>
            <param name="isSigned">Indicates whether or not the associated pixel data is signed.</param>
            <param name="rescaleSlope">The rescale slope.</param>
            <param name="rescaleIntercept">The rescale intercept.</param>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.LutComposer">
            <summary>
            Combines various <see cref="T:Macro.ImageViewer.Imaging.IComposableLut"/> objects together in the standard grayscale image display pipeline.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Imaging.IComposableLut"/>
            <remarks>
            <para>
            The sub-functions of the standard imaging display pipeline are, in order:
            <list type="table">
            <listheader>
            <name>Name</name>
            <description>Description</description>
            </listheader>
            <item>
            <name>Modality LUT</name>
            <description>Transforms stored pixel values to manufacturer-independent values.</description>
            </item>
            <item>
            <name>Normalization LUT</name>
            <description>Performs any additional transformation prior to selecting the VOI range, as may be necessary in some PET images.</description>
            </item>
            <item>
            <name>Values-of-Interest (VOI) LUT</name>
            <description>Selects range from manufacturer-independent values for display.</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.LutComposer.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Imaging.LutComposer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.LutComposer.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Imaging.LutComposer"/>.
            </summary>
            <param name="minInputValue">The smallest input value that can be used to perform a lookup in the composed table.</param>
            <param name="maxInputValue">The largest input value that can be used to perform a lookup in the composed table.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.LutComposer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Imaging.LutComposer"/>.
            </summary>
            <param name="inputBits">The number of bits used by the input values to the composed lookup table.</param>
            <param name="inputIsSigned">A value indicating whether or not the input values are signed.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.LutComposer.SetLutField``1(``0@,``0)">
            <summary>
            Sets the <see cref="T:Macro.ImageViewer.Imaging.IComposableLut"/> field and sets up the LutChanged event handler.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.LutComposer.Dispose">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.LutComposer.Dispose(System.Boolean)">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern.
            </summary>
            <param name="disposing">True if this object is being disposed, false if it is being finalized.</param>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.LutComposer.LutCollection">
            <summary>
            Gets the assembled collection of <see cref="T:Macro.ImageViewer.Imaging.IComposableLut"/>s.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.LutComposer.ModalityLut">
            <summary>
            Gets or sets the modality LUT in the grayscale image display pipeline, which transforms stored pixel values to manufacturer-independent values.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Imaging.LutComposer"/>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.LutComposer.NormalizationLut">
            <summary>
            Gets or sets the normalization LUT in the grayscale image display pipeline, which additional transformation of manufacturer-independent values prior to selecting a dynamic range for display.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Imaging.LutComposer"/>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.LutComposer.VoiLut">
            <summary>
            Gets or sets the VOI (values of interest) LUT in the grayscale image display pipeline, which selects a range from the manufacturer-independent values for display.
            </summary>
            <seealso cref="T:Macro.ImageViewer.Imaging.LutComposer"/>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.LutComposer.ComposedLut">
            <summary>
            The output LUT of the pipeline.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.LutComposer.Data">
            <summary>
            Gets the composed lut data.
            </summary>
            <remarks>
            This property should be considered readonly and is only 
            provided for fast (unsafe) iteration over the array.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.LutComposer.MinInputValue">
            <summary>
            Gets or sets the minimum input value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.LutComposer.MaxInputValue">
            <summary>
            Gets or sets the maximum input value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.LutComposer.MinOutputValue">
            <summary>
            Gets the minimum output value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.LutComposer.MaxOutputValue">
            <summary>
            Gets the maximum output value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.LutComposer.Item(System.Int32)">
            <summary>
            Gets the output value of the lut at a given input index.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Rendering.RenderPerformanceReportBroker">
            <summary>
            Allows Renderers to publish the total time elapsed for a particular method to aid in 
            debugging and optimization.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Rendering.RenderPerformanceReportBroker.PublishPerformanceReport(System.String,System.Double)">
            <summary>
            Called from within a method to publish performance reports to subscribers.
            </summary>
        </member>
        <member name="E:Macro.ImageViewer.Rendering.RenderPerformanceReportBroker.PerformanceReport">
            <summary>
            A Delegate that can be subscribed to in order to receive performance reports.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Rendering.RenderPerformanceReportBroker.PerformanceReportDelegate">
            <summary>
            A Delegate for publishing performance of a method.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.DicomColorPresentationImage">
            <summary>
            A DICOM colour <see cref="T:Macro.ImageViewer.PresentationImage"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DicomColorPresentationImage.#ctor(Macro.ImageViewer.StudyManagement.Frame)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.DicomColorPresentationImage"/>.
            </summary>
            <param name="frame">The <see cref="P:Macro.ImageViewer.DicomColorPresentationImage.Frame"/> from which to construct the image.</param>
            <remarks>
            This constructor provides a convenient means of associating a <see cref="P:Macro.ImageViewer.DicomColorPresentationImage.Frame"/> with a <see cref="T:Macro.ImageViewer.ColorPresentationImage"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.DicomColorPresentationImage.#ctor(Macro.ImageViewer.StudyManagement.IFrameReference)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.DicomColorPresentationImage"/>.
            </summary>
            <param name="frameReference">A <see cref="T:Macro.ImageViewer.StudyManagement.IFrameReference">reference</see> to the frame from which to construct the image.</param>
        </member>
        <member name="M:Macro.ImageViewer.DicomColorPresentationImage.#ctor(Macro.ImageViewer.DicomColorPresentationImage,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DicomColorPresentationImage.CreateFreshCopy">
            <summary>
            Creates a fresh copy of the <see cref="T:Macro.ImageViewer.DicomColorPresentationImage"/>.
            </summary>
            <remarks>
            This will instantiate a fresh copy of this <see cref="T:Macro.ImageViewer.DicomColorPresentationImage"/>
            using the same construction parameters as the original.
            </remarks>
            <returns></returns>		
        </member>
        <member name="M:Macro.ImageViewer.DicomColorPresentationImage.Dispose(System.Boolean)">
            <summary>
            Dispose method.  Inheritors should override this method to do any additional cleanup.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.DicomColorPresentationImage.CreateAnnotationLayout">
            <summary>
            Creates the <see cref="T:Macro.ImageViewer.Annotations.IAnnotationLayout"/> for this image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.DicomColorPresentationImage.ToString">
            <summary>
            Returns the Instance Number as a string.
            </summary>
            <returns>The Instance Number as a string.</returns>
        </member>
        <member name="P:Macro.ImageViewer.DicomColorPresentationImage.ImageSop">
            <summary>
            Gets this presentation image's associated <see cref="P:Macro.ImageViewer.DicomColorPresentationImage.ImageSop"/>.
            </summary>
            <remarks>
            Use <see cref="P:Macro.ImageViewer.DicomColorPresentationImage.ImageSop"/> to access DICOM tags.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.DicomColorPresentationImage.Frame">
            <summary>
            Gets this presentation image's associated <see cref="P:Macro.ImageViewer.DicomColorPresentationImage.Frame"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.DicomColorPresentationImage.DicomGraphics">
            <summary>
            Gets this presentation image's collection of domain-level graphics.
            </summary>
            <remarks>
            Use <see cref="P:Macro.ImageViewer.IDicomPresentationImage.DicomGraphics"/> to add DICOM-defined graphics that you want to
            overlay the image at the domain-level. These graphics are rendered
            before any <see cref="P:Macro.ImageViewer.Graphics.IApplicationGraphicsProvider.ApplicationGraphics"/>
            and before any <see cref="P:Macro.ImageViewer.Graphics.IOverlayGraphicsProvider.OverlayGraphics"/>.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.LayoutManagerExtensionPoint">
            <summary>
            Defines an extension point for image layout management.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.LayoutManagerCreationParameters">
            <summary>
            Specifies how the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>'s <see cref="T:Macro.ImageViewer.ILayoutManager"/>
            should be created.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.LayoutManagerCreationParameters.Simple">
            <summary>
            Use a simple layout manager that initializes the layout strictly
            based on the number of <see cref="T:Macro.ImageViewer.IDisplaySet"/>s available.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.LayoutManagerCreationParameters.Extended">
            <summary>
            Use the <see cref="T:Macro.ImageViewer.LayoutManagerExtensionPoint"/> to create
            the <see cref="T:Macro.ImageViewer.ImageViewerComponent"/>'s <see cref="T:Macro.ImageViewer.ILayoutManager"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.LayoutManager">
            <summary>
            A base implementation of <see cref="T:Macro.ImageViewer.ILayoutManager"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.LayoutManager.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.LayoutManager.SetImageViewer(Macro.ImageViewer.IImageViewer)">
            <summary>
            Sets the owning <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.LayoutManager.Layout">
            <summary>
            Builds the <see cref="T:Macro.ImageViewer.ILogicalWorkspace"/>, lays out and fills the <see cref="T:Macro.ImageViewer.IPhysicalWorkspace"/>.
            </summary>
            <remarks>
            Internally, this method calls <see cref="M:Macro.ImageViewer.LayoutManager.BuildLogicalWorkspace"/>, <see cref="M:Macro.ImageViewer.LayoutManager.ValidateLogicalWorkspace"/>,
            <see cref="M:Macro.ImageViewer.LayoutManager.LayoutPhysicalWorkspace"/>, <see cref="M:Macro.ImageViewer.LayoutManager.FillPhysicalWorkspace"/> and <see cref="M:Macro.ImageViewer.LayoutManager.SortStudies(Macro.ImageViewer.StudyManagement.StudyCollection)"/> in that order,
            followed by a call to <see cref="M:Macro.ImageViewer.IDrawable.Draw">IPhysicalWorkspace.Draw</see>, and finally <see cref="M:Macro.ImageViewer.LayoutManager.OnLayoutCompleted"/>.
            You can override this method entirely, or you can override any of the 5 methods called by this method.
            Note that you must draw the <see cref="T:Macro.ImageViewer.IPhysicalWorkspace"/> and call <see cref="M:Macro.ImageViewer.LayoutManager.OnLayoutCompleted"/> if you choose
            to override this method completely.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.LayoutManager.OnLayoutCompleted">
            <summary>
            Called from <see cref="M:Macro.ImageViewer.LayoutManager.Layout"/> to signal that the layout is complete.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.LayoutManager.BuildLogicalWorkspace">
            <summary>
            Builds the <see cref="P:Macro.ImageViewer.LayoutManager.LogicalWorkspace"/>, creating and populating <see cref="P:Macro.ImageViewer.ILogicalWorkspace.ImageSets">Image Sets</see>
            from the contents of <see cref="P:Macro.ImageViewer.LayoutManager.StudyTree"/>.
            </summary>
            <remarks>
            <para>
            By default, this method simply creates <see cref="T:Macro.ImageViewer.IImageSet">Image Sets</see> and <see cref="T:Macro.ImageViewer.IDisplaySet">Display Sets</see>
            to match the <see cref="T:Macro.ImageViewer.StudyManagement.Study"/> and <see cref="T:Macro.ImageViewer.StudyManagement.Series"/> hierarchy in <see cref="P:Macro.ImageViewer.LayoutManager.StudyTree"/>.
            </para>
            <para>
            Override this method to change how <see cref="T:Macro.ImageViewer.IImageSet">Image Sets</see> and <see cref="T:Macro.ImageViewer.IDisplaySet">Display Sets</see> are constructed.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.LayoutManager.ValidateLogicalWorkspace">
            <summary>
            Validates the <see cref="T:Macro.ImageViewer.ILogicalWorkspace"/>.
            </summary>
            <remarks>
            A <see cref="T:Macro.ImageViewer.NoVisibleDisplaySetsException"/> is thrown if no
            <see cref="T:Macro.ImageViewer.IDisplaySet"/>s exist in the <see cref="T:Macro.ImageViewer.ILogicalWorkspace"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.LayoutManager.LayoutAndFillPhysicalWorkspace">
            <summary>
            Performs layout and fill of the physical workspace.
            </summary>
            <remarks>
            Default implementation simply calls <see cref="M:Macro.ImageViewer.LayoutManager.LayoutPhysicalWorkspace"/> followed
            by <see cref="M:Macro.ImageViewer.LayoutManager.FillPhysicalWorkspace"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.LayoutManager.LayoutPhysicalWorkspace">
            <summary>
            Lays out the physical workspace, adding and setting up the <see cref="P:Macro.ImageViewer.IPhysicalWorkspace.ImageBoxes"/>.
            </summary>
            <remarks>
            <para>
            By default, this method determines a simple layout based on the number of <see cref="T:Macro.ImageViewer.IDisplaySet"/>s
            available (e.g. it tries to set the layout so all <see cref="T:Macro.ImageViewer.IDisplaySet"/>s are visible).
            </para>
            <para>
            Typically, subclasses would override this method, at the very least.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.LayoutManager.FillPhysicalWorkspace">
            <summary>
            Fills <see cref="P:Macro.ImageViewer.IPhysicalWorkspace.ImageBoxes"/> with <see cref="T:Macro.ImageViewer.IDisplaySet"/>s.
            </summary>
            <remarks>
            <para>
            By default, <see cref="P:Macro.ImageViewer.IPhysicalWorkspace.ImageBoxes"/> is filled starting with the first 
            <see cref="T:Macro.ImageViewer.IImageSet"/>'s <see cref="T:Macro.ImageViewer.IDisplaySet"/>, and continuing until there
            are no empty <see cref="T:Macro.ImageViewer.IImageBox"/>es or all <see cref="T:Macro.ImageViewer.IDisplaySet"/>s have been assigned to an <see cref="T:Macro.ImageViewer.IImageBox"/>.
            </para>
            <para>
            Override this method to change how <see cref="T:Macro.ImageViewer.IDisplaySet"/>s are assigned to <see cref="P:Macro.ImageViewer.IPhysicalWorkspace.ImageBoxes"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.LayoutManager.CreateImageSetDescriptor(Macro.Dicom.ServiceModel.Query.IStudyRootStudyIdentifier)">
            <summary>
            Creates a <see cref="T:Macro.ImageViewer.DicomImageSetDescriptor"/> for the given <see cref="T:Macro.Dicom.ServiceModel.Query.IStudyRootStudyIdentifier">study</see>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.LayoutManager.CreateImageSet(Macro.Dicom.ServiceModel.Query.IStudyRootStudyIdentifier)">
            <summary>
            Creates, but does not populate, an <see cref="T:Macro.ImageViewer.IImageSet"/> for the given <see cref="T:Macro.Dicom.ServiceModel.Query.IStudyRootStudyIdentifier">study</see>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.LayoutManager.FillImageSet(Macro.ImageViewer.IImageSet,Macro.ImageViewer.StudyManagement.Study)">
            <summary>
            Updates the contents of the given <see cref="T:Macro.ImageViewer.IImageSet"/> by populating it with <see cref="T:Macro.ImageViewer.IDisplaySet"/>s created
            from the given <see cref="T:Macro.ImageViewer.StudyManagement.Study"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.LayoutManager.UpdateImageSet(Macro.ImageViewer.IImageSet,Macro.ImageViewer.StudyManagement.Series)">
            <summary>
            Updates the contents of the given <see cref="T:Macro.ImageViewer.IImageSet"/> by populating it with <see cref="T:Macro.ImageViewer.IDisplaySet"/>s created
            from the given <see cref="T:Macro.ImageViewer.StudyManagement.Series"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.LayoutManager.SortSops(Macro.ImageViewer.StudyManagement.SopCollection)">
            <summary>
            Sorts the given <see cref="T:Macro.ImageViewer.StudyManagement.SopCollection"/>.
            </summary>
            <param name="sops"></param>
        </member>
        <member name="M:Macro.ImageViewer.LayoutManager.GetSopComparer">
            <summary>
            Creates a comparer for <see cref="T:Macro.ImageViewer.StudyManagement.Sop"/>s.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.LayoutManager.SortSeries(Macro.ImageViewer.StudyManagement.SeriesCollection)">
            <summary>
            Sorts the given <see cref="T:Macro.ImageViewer.StudyManagement.SeriesCollection"/>.
            </summary>
            <param name="series"></param>
        </member>
        <member name="M:Macro.ImageViewer.LayoutManager.GetSeriesComparer">
            <summary>
            Creates a comparer for <see cref="T:Macro.ImageViewer.StudyManagement.Series"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.LayoutManager.SortStudies(Macro.ImageViewer.StudyManagement.StudyCollection)">
            <summary>
            Sorts the given <see cref="T:Macro.ImageViewer.StudyManagement.StudyCollection"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.LayoutManager.GetStudyComparer">
            <summary>
            Creates a comparer for <see cref="T:Macro.ImageViewer.StudyManagement.Study">studies</see>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.ImageViewer.LayoutManager.Dispose(System.Boolean)">
            <summary>
            Implementation of <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.LayoutManager.Dispose">
            <summary>
            Implementation of <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LayoutManager.ImageViewer">
            <summary>
            Convenience property for retrieving the owner <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LayoutManager.StudyTree">
            <summary>
            Convenience property for retrieving the <see cref="P:Macro.ImageViewer.IImageViewer.StudyTree"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LayoutManager.PhysicalWorkspace">
            <summary>
            Convenience property for retrieving the <see cref="P:Macro.ImageViewer.IImageViewer.PhysicalWorkspace"/> property.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LayoutManager.LogicalWorkspace">
            <summary>
            Convenience property for retrieving the <see cref="P:Macro.ImageViewer.IImageViewer.LogicalWorkspace"/> property.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LayoutManager.AllowEmptyViewer">
            <summary>
            Gets or sets whether or not to allow an empty <see cref="T:Macro.ImageViewer.IImageViewer"/> (e.g. no studies loaded).
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.LayoutManager.ReconcilePatientInfo">
            <summary>
            Gets or sets whether or not to reconcile patient information.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicAnnotation">
            <summary>
            A <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> whose contents represent those of a DICOM Graphic Annotation Sequence (PS 3.3 C.10.5).
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicAnnotation.#ctor(Macro.Dicom.Iod.Sequences.GraphicAnnotationSequenceItem,System.Drawing.RectangleF)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.Graphics.IGraphic"/> whose contents are constructed based on a <see cref="T:Macro.Dicom.Iod.Sequences.GraphicAnnotationSequenceItem">DICOM Graphic Annotation Sequence Item</see>.
            </summary>
            <param name="graphicAnnotationSequenceItem">The DICOM graphic annotation sequence item to render.</param>
            <param name="displayedArea">The image's displayed area with which to </param>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicAnnotation.#ctor(Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicAnnotation,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicAnnotation.ResetCoordinateSystem">
            <summary>
            Resets the <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.CoordinateSystem"/>.
            </summary>
            <remarks>
            <para>
            <see cref="M:Macro.ImageViewer.Graphics.CompositeGraphic.ResetCoordinateSystem"/> will reset the <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.CoordinateSystem"/>
            to what it was before the <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.CoordinateSystem"/> was last set.
            </para>
            <para>
            Calling <see cref="M:Macro.ImageViewer.Graphics.CompositeGraphic.ResetCoordinateSystem"/> will recursively call
            <see cref="M:Macro.ImageViewer.Graphics.CompositeGraphic.ResetCoordinateSystem"/> on <i>all</i> <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> 
            objects in the subtree.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicAnnotation.OnColorChanged">
            <summary>
            Called when the <see cref="P:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicAnnotation.Color"/> property changes.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicAnnotation.LayerId">
            <summary>
            Gets the layer ID to which this graphic annotation belongs.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicAnnotation.CoordinateSystem">
            <summary>
            Gets or sets the <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.CoordinateSystem"/>.
            </summary>
            <remarks>
            Setting the <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.CoordinateSystem"/> property will recursively set the 
            <see cref="P:Macro.ImageViewer.Graphics.CompositeGraphic.CoordinateSystem"/> property for <i>all</i> <see cref="T:Macro.ImageViewer.Graphics.Graphic"/> 
            objects in the subtree.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.PresentationStates.Dicom.DicomGraphicAnnotation.Color">
            <summary>
            Gets or sets the color of this graphic annotation.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.BoundableStretchControlGraphic">
            <summary>
            An interactive graphic that controls stretching of an <see cref="T:Macro.ImageViewer.Graphics.IBoundableGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.BoundableStretchControlGraphic.#ctor(Macro.ImageViewer.Graphics.IGraphic)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.InteractiveGraphics.BoundableStretchControlGraphic"/>.
            </summary>
            <param name="subject">An <see cref="T:Macro.ImageViewer.Graphics.IBoundableGraphic"/> or an <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/> chain whose subject is an <see cref="T:Macro.ImageViewer.Graphics.IBoundableGraphic"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.BoundableStretchControlGraphic.#ctor(Macro.ImageViewer.InteractiveGraphics.BoundableStretchControlGraphic,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.BoundableStretchControlGraphic.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:Macro.ImageViewer.InteractiveGraphics.IControlGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.BoundableStretchControlGraphic.CreateMemento">
            <summary>
            Captures the current state of this <see cref="T:Macro.ImageViewer.InteractiveGraphics.BoundableStretchControlGraphic"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.BoundableStretchControlGraphic.SetMemento(System.Object)">
            <summary>
            Restores the state of this <see cref="T:Macro.ImageViewer.InteractiveGraphics.BoundableStretchControlGraphic"/>.
            </summary>
            <param name="memento">The object that was originally created with <see cref="M:Macro.ImageViewer.InteractiveGraphics.BoundableStretchControlGraphic.CreateMemento"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.InteractiveGraphics.BoundableStretchControlGraphic.OnControlPointChanged(System.Int32,System.Drawing.PointF)">
            <summary>
            Called to notify the derived class of a control point change event.
            </summary>
            <param name="index">The index of the point that changed.</param>
            <param name="point">The value of the point that changed.</param>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.BoundableStretchControlGraphic.Subject">
            <summary>
            Gets the subject graphic that this graphic controls.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InteractiveGraphics.BoundableStretchControlGraphic.CommandName">
            <summary>
            Gets a string that describes the type of control operation that this graphic provides.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.BasicDisplaySetDescriptor">
            <summary>
            Default implementation of <see cref="T:Macro.ImageViewer.IDisplaySetDescriptor"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.BasicDisplaySetDescriptor.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BasicDisplaySetDescriptor.Name">
            <summary>
            Gets or sets the descriptive name of the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BasicDisplaySetDescriptor.Description">
            <summary>
            Gets or sets the description of the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BasicDisplaySetDescriptor.Number">
            <summary>
            Gets or sets the numeric identifier for the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.BasicDisplaySetDescriptor.Uid">
            <summary>
            Gets or sets the unique identifier for the <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.LostFocusMessage">
            <summary>
            Message object created by the view layer to allow a controlling object <see cref="T:Macro.ImageViewer.InputManagement.TileController"/>
            to be notified that the <see cref="T:Macro.ImageViewer.Tile"/> has lost input focus.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.InputManagement.LostFocusMessage.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Mathematics.Matrix3D">
            <summary>
            Represents a 3x3 matrix.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.#ctor">
            <summary>
            Constructs a new zero matrix.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.#ctor(System.Single[0:,0:])">
            <summary>
            Constructs a new matrix and initializes its values to that of the given 3x3 2-dimensional array.
            </summary>
            <param name="matrix">The 3x3 2-dimensional array (rows, then columns) with which to initialize the matrix.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the supplied matrix is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the supplied matrix is not 3x3.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.#ctor(Macro.ImageViewer.Mathematics.Matrix)">
            <summary>
            Constructs a new matrix as a clone of an existing matrix.
            </summary>
            <param name="matrix">The source matrix to clone.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the supplied matrix is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the supplied matrix is not 3x3.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.GetRow(System.Int32)">
            <summary>
            Gets all the values in a particular row.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.GetColumn(System.Int32)">
            <summary>
            Gets all the values in a particular column.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.SetRow(System.Int32,Macro.ImageViewer.Mathematics.Vector3D)">
            <summary>
            Sets all the values in a particular row.
            </summary>
            <remarks>
            This is more efficient than setting each value separately.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.SetRow(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Sets all the values in a particular row.
            </summary>
            <remarks>
            This is more efficient than setting each value separately.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.SetColumn(System.Int32,Macro.ImageViewer.Mathematics.Vector3D)">
            <summary>
            Sets all the values in a particular column.
            </summary>
            <remarks>
            This is more efficient than setting each value separately.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.SetColumn(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Sets all the values in a particular column.
            </summary>
            <remarks>
            This is more efficient than setting each value separately.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.Clone">
            <summary>
            Clones this matrix and its values.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.Transpose">
            <summary>
            Returns a matrix that is the transpose of this matrix.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.ToString">
            <summary>
            Gets a string describing the matrix.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.GetIdentity">
            <summary>
            Gets a 3x3 identity matrix.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.op_Division(Macro.ImageViewer.Mathematics.Matrix3D,System.Single)">
            <summary>
            Performs scalar multiplication of <paramref name="matrix"/> by 1/<paramref name="scale"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.op_Addition(Macro.ImageViewer.Mathematics.Matrix3D,Macro.ImageViewer.Mathematics.Matrix3D)">
            <summary>
            Performs element-by-element addition of <paramref name="left"/> and <paramref name="right"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If the matrices do not have the same dimensions.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.op_Multiply(Macro.ImageViewer.Mathematics.Matrix3D,Macro.ImageViewer.Mathematics.Matrix3D)">
            <summary>
            Performs matrix multiplication of <paramref name="left"/> and <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.op_Multiply(Macro.ImageViewer.Mathematics.Matrix3D,Macro.ImageViewer.Mathematics.Vector3D)">
            <summary>
            Performs multiplication of matrix <paramref name="left"/> and column vector <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.op_Multiply(Macro.ImageViewer.Mathematics.Vector3D,Macro.ImageViewer.Mathematics.Matrix3D)">
            <summary>
            Performs multiplication of row vector <paramref name="left"/> and matrix <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.op_Multiply(System.Single,Macro.ImageViewer.Mathematics.Matrix3D)">
            <summary>
            Performs scalar multiplication of <paramref name="matrix"/> by <paramref name="scale"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.op_Multiply(Macro.ImageViewer.Mathematics.Matrix3D,System.Single)">
            <summary>
            Performs scalar multiplication of <paramref name="matrix"/> by <paramref name="scale"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.op_Subtraction(Macro.ImageViewer.Mathematics.Matrix3D,Macro.ImageViewer.Mathematics.Matrix3D)">
            <summary>
            Performs element-by-element subtraction of <paramref name="right"/> from <paramref name="left"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If the matrices do not have the same dimensions.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.AreEqual(Macro.ImageViewer.Mathematics.Matrix3D,Macro.ImageViewer.Mathematics.Matrix3D)">
            <summary>
            Gets a value indicating whether or not the elements of <paramref name="left"/> are equal to <paramref name="right"/> within a small tolerance.
            </summary>
            <exception cref="T:System.ArgumentException">If the matrices do not have the same dimensions.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.AreEqual(Macro.ImageViewer.Mathematics.Matrix3D,Macro.ImageViewer.Mathematics.Matrix3D,System.Single)">
            <summary>
            Gets a value indicating whether or not the elements of <paramref name="left"/> are equal to <paramref name="right"/> within the given absolute tolerance.
            </summary>
            <exception cref="T:System.ArgumentException">If the matrices do not have the same dimensions.</exception>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.op_Implicit(Macro.ImageViewer.Mathematics.Matrix3D)~Macro.ImageViewer.Mathematics.Matrix">
            <summary>
            Casts the input <see cref="T:Macro.ImageViewer.Mathematics.Matrix3D"/> as a <see cref="T:Macro.ImageViewer.Mathematics.Matrix"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Matrix3D.op_Explicit(Macro.ImageViewer.Mathematics.Matrix)~Macro.ImageViewer.Mathematics.Matrix3D">
            <summary>
            Casts the input <see cref="T:Macro.ImageViewer.Mathematics.Matrix"/> as a <see cref="T:Macro.ImageViewer.Mathematics.Matrix3D"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.Matrix3D.IsIdentity">
            <summary>
            Gets whether or not this is an identity matrix.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.Matrix3D.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the value of the cell at the specified row and column indices.
            </summary>
            <param name="row">The row index</param>
            <param name="column">The column index</param>
        </member>
        <member name="T:Macro.ImageViewer.Layout.HpLayoutHookExtensionPoint">
            <summary>
            Defines an extension point for a layout hook.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Layout.HpProtocolApplicabilityContributorExtensionPoint">
            <summary>
            Defines an extension point for protocol applicability contributors.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Layout.HpLayoutApplicabilityContributorExtensionPoint">
            <summary>
            Defines an extension point for layout applicability contributors.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Layout.HpLayoutDefinitionContributorExtensionPoint">
            <summary>
            Defines an extension point for layout definition contributors.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Layout.HpImageBoxDefinitionContributorExtensionPoint">
            <summary>
            Defines an extension point for imagebox definition contributors.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.TileCollection">
            <summary>
            A collection of <see cref="T:Macro.ImageViewer.ITile"/> objects.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.TileCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.TileCollection"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.TileCollection.Add(Macro.ImageViewer.ITile)">
            <summary>
            Adds the specified item to the list.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.TileCollection.Insert(System.Int32,Macro.ImageViewer.ITile)">
            <summary>
            Inserts <paramref name="item"/> at the specified <paramref name="index"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.TileCollection.Remove(Macro.ImageViewer.ITile)">
            <summary>
            Removes the specified <paramref name="item"/> from the list.
            </summary>
            <returns>True if the item was in the list and was removed.</returns>
        </member>
        <member name="M:Macro.ImageViewer.TileCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified <paramref name="index"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.TileCollection.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.TileCollection.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.Study">
            <summary>
            A DICOM study.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Study.GetIdentifier">
            <summary>
            Gets an <see cref="T:Macro.Dicom.ServiceModel.Query.IStudyRootStudyIdentifier"/> for this <see cref="T:Macro.ImageViewer.StudyManagement.Study"/>.
            </summary>
            <remarks>An <see cref="T:Macro.Dicom.ServiceModel.Query.IStudyRootStudyIdentifier"/> can be used in situations where you only
            need some data about the <see cref="T:Macro.ImageViewer.StudyManagement.Study"/>, but not the <see cref="T:Macro.ImageViewer.StudyManagement.Study"/> itself.  It can be problematic
            to hold references to <see cref="T:Macro.ImageViewer.StudyManagement.Study"/> objects outside the context of an <see cref="T:Macro.ImageViewer.IImageViewer"/>
            because they are no longer valid when the viewer is closed; in these situations, it may be appropriate to
            use an identifier.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.Study.ToString">
            <summary>
            Returns the study description and study instance UID associated with
            the <see cref="T:Macro.ImageViewer.StudyManagement.Study"/> in string form.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Study.ParentPatient">
            <summary>
            Gets the parent <see cref="T:Macro.ImageViewer.StudyManagement.Patient"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Study.Series">
            <summary>
            Gets the collection of <see cref="T:Macro.ImageViewer.StudyManagement.Series"/> objects that belong
            to this <see cref="T:Macro.ImageViewer.StudyManagement.Study"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Study.StudyInstanceUid">
            <summary>
            Gets the Study Instance UID of the identified study.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Study.SopClassesInStudy">
            <summary>
            Gets the modalities in the identified study.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Study.ModalitiesInStudy">
            <summary>
            Gets the modalities in the identified study.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Study.StudyDescription">
            <summary>
            Gets the study description of the identified study.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Study.StudyId">
            <summary>
            Gets the study ID of the identified study.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Study.StudyDate">
            <summary>
            Gets the study date of the identified study.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Study.StudyTime">
            <summary>
            Gets the study time of the identified study.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Study.AccessionNumber">
            <summary>
            Gets the accession number of the identified study.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Study.NumberOfStudyRelatedSeries">
            <summary>
            Gets the number of series belonging to the identified study.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Study.NumberOfStudyRelatedInstances">
            <summary>
            Gets the number of composite object instances belonging to the identified study.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Study.ReferringPhysiciansName">
            <summary>
            Gets the referring physician's name.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Study.NameOfPhysiciansReadingStudy">
            <summary>
            Gets the names of physicians reading the study.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Study.PatientsAge">
            <summary>
            Gets the patient's age at the time of the study.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Study.AdmittingDiagnosesDescription">
            <summary>
            Gets the admitting diagnoses descriptions.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.Study.AdditionalPatientsHistory">
            <summary>
            Gets the additional patient's history.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.InterpolationMode">
            <summary>
            An <see cref="T:Macro.ImageViewer.Graphics.InterpolationMode"/> enumeration specifies the
            interpolation algorithm to use when rendering the image.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Graphics.InterpolationMode.Bilinear">
            <summary>
            Specifies bilinear interpolation using fixed-point arithmetic.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.LocalSopDataSource">
            <summary>
            An <see cref="T:Macro.ImageViewer.StudyManagement.ISopDataSource"/> whose underlying data resides in a <see cref="T:Macro.Dicom.DicomFile"/>
            on the local file system.
            </summary>
            <remarks>
            Pixel data is always loaded from the source file on-demand.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.LocalSopDataSource.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.StudyManagement.LocalSopDataSource"/> by loading
            the <see cref="T:Macro.Dicom.DicomFile"/> with the given <paramref name="fileName">file name</paramref>.
            </summary>
            <param name="fileName">The full path to the file to be loaded.</param>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.LocalSopDataSource.#ctor(Macro.Dicom.DicomFile)">
            <summary>
            Constructs a new <see cref="T:Macro.ImageViewer.StudyManagement.LocalSopDataSource"/> with the given <see cref="T:Macro.Dicom.DicomFile"/>
            as it's underlying data.
            </summary>
            <param name="localFile">The local file.</param>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.LocalSopDataSource.EnsureLoaded">
            <summary>
            Called by the base class to ensure that all DICOM data attributes are loaded.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.LocalSopDataSource.File">
            <summary>
            Gets the source <see cref="T:Macro.Dicom.DicomFile"/>.
            </summary>
            <remarks>See the remarks for <see cref="P:Macro.ImageViewer.StudyManagement.IDicomMessageSopDataSource.SourceMessage"/>.
            This property will likely be removed in a future version due to thread-safety concerns.</remarks>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.LocalSopDataSource.Filename">
            <summary>
            Gets the filename of the source <see cref="T:Macro.Dicom.DicomFile"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.StudyManagement.FrameCollection">
            <summary>
            A collection of <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/> objects.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.FrameCollection.Add(Macro.ImageViewer.StudyManagement.Frame)">
            <summary>
            Adds a <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/> to the collection.
            </summary>
            <param name="frame"></param>
            <remarks>
            This method should only be used by subclasses of <see cref="T:Macro.ImageViewer.StudyManagement.ImageSop"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.FrameCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Macro.ImageViewer.StudyManagement.FrameCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.FrameCollection.Count">
            <summary>
            Gets the number of <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/> objects in the collection.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.StudyManagement.FrameCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Macro.ImageViewer.StudyManagement.Frame"/> at the specified index.
            </summary>
            <param name="frameNumber">The frame number. The first frame is frame 1.</param>
            <returns></returns>
        </member>
        <member name="T:Macro.ImageViewer.Mathematics.Vector3D">
            <summary>
            A simple 3D vector class.
            </summary>
            <remarks>
            The Vector3D class is immutable.  All necessary operations
            can be done via the operator overloads.
            </remarks>
        </member>
        <member name="F:Macro.ImageViewer.Mathematics.Vector3D.Null">
            <summary>
            Represents the Zero vector.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Mathematics.Vector3D.xUnit">
            <summary>
            Represents the unit vector in the direction of the positive X axis.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Mathematics.Vector3D.yUnit">
            <summary>
            Represents the unit vector in the direction of the positive Y axis.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Mathematics.Vector3D.zUnit">
            <summary>
            Represents the unit vector in the direction of the positive Z axis.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector3D.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector3D.#ctor(Macro.ImageViewer.Mathematics.Vector3D)">
            <summary>
            Copy Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector3D.Normalize">
            <summary>
            Normalizes the vector, or makes it a unit vector.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector3D.Dot(Macro.ImageViewer.Mathematics.Vector3D)">
            <summary>
            Gets the dot-product of of this vector and <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector3D.Cross(Macro.ImageViewer.Mathematics.Vector3D)">
            <summary>
            Returns the cross-product of this vector and <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector3D.IsParallelTo(Macro.ImageViewer.Mathematics.Vector3D,System.Single)">
            <summary>
            Determines whether or not this vector is parallel to <paramref name="other"/> within a certain <paramref name="angleTolerance"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector3D.IsOrthogonalTo(Macro.ImageViewer.Mathematics.Vector3D,System.Single)">
            <summary>
            Determines whether or not this vector is orthogonal to <paramref name="other"/> within a certain <paramref name="angleTolerance"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector3D.GetAngleBetween(Macro.ImageViewer.Mathematics.Vector3D)">
            <summary>
            Gets the angle between this vector and <paramref name="other"/> in radians.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector3D.GetLinePlaneIntersection(Macro.ImageViewer.Mathematics.Vector3D,Macro.ImageViewer.Mathematics.Vector3D,Macro.ImageViewer.Mathematics.Vector3D,Macro.ImageViewer.Mathematics.Vector3D,System.Boolean)">
            <summary>
            Finds the intersection of the line segment defined by <paramref name="linePoint1"/> and
            <paramref name="linePoint2"/> with a plane described by it's normal (<paramref name="planeNormal"/>)
            and an arbitrary point in the plane (<paramref name="pointInPlane"/>).
            </summary>
            <param name="planeNormal">The normal vector of an arbitrary plane.</param>
            <param name="pointInPlane">A point in space that lies on the plane whose normal is <paramref name="planeNormal"/>.</param>
            <param name="linePoint1">The position vector of the start of the line.</param>
            <param name="linePoint2">The position vector of the end of the line.</param>
            <param name="isLineSegment">Specifies whether <paramref name="linePoint1"/> and <paramref name="linePoint2"/>
            define a line segment, or simply 2 points on an infinite line.</param>
            <returns>A position vector describing the point of intersection of the line with the plane, or null if the
            line and plane do not intersect.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector3D.ToString">
            <summary>
            Returns a descriptive string.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector3D.op_Multiply(System.Single,Macro.ImageViewer.Mathematics.Vector3D)">
            <summary>
            Scales <paramref name="vector"/> by a factor of <paramref name="scale"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector3D.op_Multiply(Macro.ImageViewer.Mathematics.Vector3D,System.Single)">
            <summary>
            Scales <paramref name="vector"/> by a factor of <paramref name="scale"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector3D.op_Division(System.Single,Macro.ImageViewer.Mathematics.Vector3D)">
            <summary>
            Scales <paramref name="vector"/> by a factor of 1/<paramref name="scale"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector3D.op_Division(Macro.ImageViewer.Mathematics.Vector3D,System.Single)">
            <summary>
            Scales <paramref name="vector"/> by a factor of 1/<paramref name="scale"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector3D.op_Addition(Macro.ImageViewer.Mathematics.Vector3D,Macro.ImageViewer.Mathematics.Vector3D)">
            <summary>
            Adds <paramref name="left"/> and <paramref name="right"/> together.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector3D.op_Subtraction(Macro.ImageViewer.Mathematics.Vector3D,Macro.ImageViewer.Mathematics.Vector3D)">
            <summary>
            Subtracts <paramref name="right"/> from <paramref name="left"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector3D.op_UnaryNegation(Macro.ImageViewer.Mathematics.Vector3D)">
            <summary>
            Returns the negative of the given vector.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector3D.AreEqual(Macro.ImageViewer.Mathematics.Vector3D,Macro.ImageViewer.Mathematics.Vector3D,System.Single)">
            <summary>
            Gets whether or not <paramref name="left"/> is equal to <paramref name="right"/>, within a given tolerance (per vector component).
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector3D.AreEqual(Macro.ImageViewer.Mathematics.Vector3D,Macro.ImageViewer.Mathematics.Vector3D)">
            <summary>
            Gets whether or not <paramref name="left"/> is equal to <paramref name="right"/>, within a small tolerance (per vector component).
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector3D.GetHashCode">
            <summary>
            Gets a hash code for the vector.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector3D.Equals(System.Object)">
            <summary>
            Gets whether or not this object equals <paramref name="obj"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.Vector3D.Equals(Macro.ImageViewer.Mathematics.Vector3D)">
            <summary>
            Gets whether or not this object equals <paramref name="other"/>.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.Vector3D.X">
            <summary>
            Gets the x-component.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.Vector3D.Y">
            <summary>
            Gets the y-component.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.Vector3D.Z">
            <summary>
            Gets the z-component.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.Vector3D.IsNull">
            <summary>
            Gets whether or not this is a 'null' vector (all components are zero).
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.Vector3D.Magnitude">
            <summary>
            Gets the magnitude of this vector.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.InputManagement.MouseCaptureChangedEventArgs">
            <summary>
            Event fired when mouse capture is gained or lost.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.MouseCaptureChangedEventArgs.Tile">
            <summary>
            Gets the affected tile.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.MouseCaptureChangedEventArgs.Gained">
            <summary>
            True if mouse capture has been gained, false if it was lost.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.InitialVoiLutProvider">
            <summary>
            A factory that provides the initial voi lut for a given <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.InitialVoiLutProvider.GetLut(Macro.ImageViewer.IPresentationImage)">
            <summary>
            Determines and returns the initial Voi Lut that should be applied to the input <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
            <param name="presentationImage">The <see cref="T:Macro.ImageViewer.IPresentationImage"/> whose intial Lut is to be determined.</param>
            <returns>The Voi Lut as an <see cref="T:Macro.ImageViewer.Imaging.IVoiLut"/>.</returns>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.InitialVoiLutProvider.Instance">
            <summary>
            The single instance of the provider/factory.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.IImageOperation">
            <summary>
            Used to apply an <see cref="T:Macro.ImageViewer.IUndoableOperation`1">undoable operation</see> to an <see cref="T:Macro.ImageViewer.IPresentationImage"/>.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Mathematics.PolygonF">
            <summary>
            A class containing useful methods for computing with polygons defined on floating-point coordinates.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.PolygonF.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF[])">
            <summary>
            Constructs a new polygon.
            </summary>
            <param name="pt1">The first vertex defining the polygon.</param>
            <param name="pt2">The second vertex defining the polygon.</param>
            <param name="pt3">The third vertex defining the polygon.</param>
            <param name="additionalPoints">More ordered vertices defining the polygon.</param>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.PolygonF.#ctor(System.Collections.Generic.IEnumerable{System.Drawing.PointF})">
            <summary>
            Constructs a new polygon.
            </summary>
            <param name="vertices">A list of vertices defining the polygon.</param>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.PolygonF.Contains(System.Drawing.PointF)">
            <summary>
            Tests if a point lies within the boundaries of the polygon.
            </summary>
            <remarks>
            This method is indeterminate for points lying exactly on the
            boundaries of the polygon, and may test either true or false
            (but will not throw an exception either way). The distribution
            of results is approximately even, and thus this method can be
            used in statistical calculations.
            </remarks>
            <param name="point">The test point.</param>
            <returns>True if the polygon contains the given point; False otherwise.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.PolygonF.ComputeArea">
            <summary>
            Computes the area of the polygon.
            </summary>
            <returns>The area of the polygon in square units.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.PolygonF.CountWindings(System.Drawing.PointF)">
            <summary>
            Counts the number of counter-clockwise windings that the polygon makes around a given <paramref name="point">point</paramref>.
            </summary>
            <param name="point">The test point.</param>
            <returns>The number of counter-clockwise windings.</returns>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.PolygonF.ComputeSimpleArea(System.Drawing.PointF*,System.Int32)">
            <summary>
            Green's Theorem-derived formula to compute the area of the polygon.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.PolygonF.CountWindings(System.Drawing.PointF,System.Drawing.PointF*,System.Int32)">
            <summary>
            Counts the number of counter-clockwise windings that the polygon makes around a given <paramref name="testPoint">point</paramref>.
            </summary>
            <param name="testPoint">The test point.</param>
            <param name="vertices">A pointer to the array of vertices defining the polygon.</param>
            <param name="vertexCount">The number of vertices in the array.</param>
            <returns>The number of CCW windings.</returns>
            <remarks>
            Algorithm as given on <a href="http://softsurfer.com/Archive/algorithm_0103/algorithm_0103.htm">http://softsurfer.com/Archive/algorithm_0103/algorithm_0103.htm</a>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Mathematics.PolygonF.IsLeft(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>Used by <see cref="M:Macro.ImageViewer.Mathematics.PolygonF.CountWindings(System.Drawing.PointF,System.Drawing.PointF*,System.Int32)"/>.</summary>
            <remarks>
            Algorithm as given on <a href="http://softsurfer.com/Archive/algorithm_0103/algorithm_0103.htm">http://softsurfer.com/Archive/algorithm_0103/algorithm_0103.htm</a>.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.PolygonF.IsComplex">
            <summary>
            Gets a value indicating if the polygon is complex.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.PolygonF.CountVertices">
            <summary>
            Gets the number of vertices or sides of the polygon.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.PolygonF.BoundingRectangle">
            <summary>
            Gets the smallest rectangle that encloses the entirety of the polygon.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Mathematics.PolygonF.Vertices">
            <summary>
            Gets a list of the vertices of the polygon.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Graphics.ImageTransformPolicy">
            <summary>
            Defines a <see cref="T:Macro.ImageViewer.Graphics.SpatialTransformValidationPolicy"/> for images.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ImageTransformPolicy.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Graphics.ImageTransformPolicy.Validate(Macro.ImageViewer.Graphics.ISpatialTransform)">
            <summary>
            Performs validation on the specified <see cref="T:Macro.ImageViewer.Graphics.ISpatialTransform"/>.
            </summary>
            <param name="transform"></param>
            <remarks>
            At present, validation amounts to ensuring that rotations are
            only in increments of 90 degrees.
            </remarks>
        </member>
        <member name="T:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphicStyle">
            <summary>
            Enumeration of defined progress bar graphic styles.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphicStyle.Blocks">
            <summary>
            Specifies a progress bar graphic where the current progress value is indicated by a number of discrete blocks.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphicStyle.Continuous">
            <summary>
            Specifies a progress bar graphic where the current progress value is indicated by a contiguous bar.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphicStyle.Marquee">
            <summary>
            Specifies a progress bar graphic where a graphical element moves repeatedly from left to right to indicate that work is in progress.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.InteractiveGraphics.ProgressBarGraphicStyle.Scanner">
            <summary>
            Specifies a progress bar graphic where a graphical element moves back and forth to indicate that work is in progress.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Comparers.DisplaySetNumberComparer">
            <summary>
            <see cref="T:Macro.ImageViewer.Comparers.DisplaySetComparer"/> for sorting on <see cref="P:Macro.ImageViewer.IDisplaySet.Number"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DisplaySetNumberComparer.#ctor">
            <summary>
            Defalt constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DisplaySetNumberComparer.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DisplaySetNumberComparer.GetCompareValues(Macro.ImageViewer.DisplaySet)">
            <summary>
            Gets the values to be compared for a given <see cref="T:Macro.ImageViewer.IDisplaySet"/>.
            </summary>
            <remarks>
            Returns <see cref="P:Macro.ImageViewer.IDisplaySet.Number"/>, then <see cref="P:Macro.ImageViewer.IDisplaySet.Name"/>.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Comparers.DisplaySetNumberComparer.Compare(Macro.ImageViewer.IDisplaySet,Macro.ImageViewer.IDisplaySet)">
            <summary>
            Compares two <see cref="T:Macro.ImageViewer.IDisplaySet"/>s.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.IdentityVoiLinearLut">
            <summary>
            An implementation of a VOI LUT that represents the identity function for integer inputs between <see cref="P:Macro.ImageViewer.Imaging.IdentityVoiLinearLut.MinInputValue"/> and <see cref="P:Macro.ImageViewer.Imaging.IdentityVoiLinearLut.MaxInputValue"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IdentityVoiLinearLut.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Imaging.IdentityVoiLinearLut"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IdentityVoiLinearLut.GetDescription">
            <summary>
            Gets an abbreviated description of the lookup table.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.IdentityVoiLinearLut.GetKey">
            <summary>
            Gets a string key that identifies this particular lookup table's characteristics.
            </summary>
            <remarks>
            This method is not to be confused with <b>equality</b>, since some lookup tables can be
            dependent upon the actual image to which it belongs.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IdentityVoiLinearLut.MinInputValue">
            <summary>
            Gets or sets the minimum input value.
            </summary>
            <remarks>
            This value is set internally by the framework and should not be modified by client code.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IdentityVoiLinearLut.MaxInputValue">
            <summary>
            Gets or sets the maximum input value.
            </summary>
            <remarks>
            This value is set internally by the framework and should not be modified by client code.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IdentityVoiLinearLut.MinOutputValue">
            <summary>
            Gets the minimum output value.
            </summary>
            <remarks>
            This will always return <see cref="P:Macro.ImageViewer.Imaging.IdentityVoiLinearLut.MinInputValue"/> rounded to an integer.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IdentityVoiLinearLut.MaxOutputValue">
            <summary>
            Gets the maximum output value.
            </summary>
            <remarks>
            This will always return <see cref="P:Macro.ImageViewer.Imaging.IdentityVoiLinearLut.MaxInputValue"/> rounded to an integer.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IdentityVoiLinearLut.Item(System.Double)">
            <summary>
            Gets the output value of the lookup table for a given input value.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IdentityVoiLinearLut.WindowWidth">
            <summary>
            Gets the window width.
            </summary>
            <remarks>
            This value is always exactly <see cref="P:Macro.ImageViewer.Imaging.IdentityVoiLinearLut.MaxInputValue"/>-<see cref="P:Macro.ImageViewer.Imaging.IdentityVoiLinearLut.MinInputValue"/>+1.
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.IdentityVoiLinearLut.WindowCenter">
            <summary>
            Gets the window centre.
            </summary>
            <remarks>
            This value is always exactly (<see cref="P:Macro.ImageViewer.Imaging.IdentityVoiLinearLut.MaxInputValue"/>-<see cref="P:Macro.ImageViewer.Imaging.IdentityVoiLinearLut.MinInputValue"/>+1)/2.
            </remarks>
        </member>
        <member name="M:Macro.ImageViewer.Layout.IHpLayoutHookContext.PerformDefaultPhysicalWorkspaceLayout">
            <summary>
            Called by the hook to lay out the default physicial workspace
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Layout.IHpLayoutHookContext.PerformDefaultFillPhysicalWorkspace">
            <summary>
            Called by the hook to fill the existing physicial workspace with images
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.IHpLayoutHookContext.ImageViewer">
            <summary>
            Gets the relevant image viewer.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Layout.IHpLayoutHook">
            <summary>
            Defines an interface that allows a hanging protocols service to hook into
            the layout procedure.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Layout.IHpLayoutHook.HandleLayout(Macro.ImageViewer.Layout.IHpLayoutHookContext)">
            <summary>
            Handles the initial layout when a viewer is first opened.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.ImageViewer.Layout.HpLayoutHook">
            <summary>
            Allows a hanging protocols service to hook into
            the layout procedure.
            </summary>
        </member>
        <member name="F:Macro.ImageViewer.Layout.HpLayoutHook.Default">
            <summary>
            A default hook that can be used if needed; it does nothing.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Layout.HpLayoutHook.HandleLayout(Macro.ImageViewer.Layout.IHpLayoutHookContext)">
            <summary>
            Handles the initial layout when a viewer is first opened.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.ImageViewer.Layout.HpLayoutHook.Nil">
            TODO (CR Nov 2011): Rename to "Empty"
        </member>
        <member name="T:Macro.ImageViewer.Layout.IHpLayoutDefinitionContributor">
            <summary>
            Defines the interface to a "layout definition" contributor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Layout.IHpLayoutDefinitionContributor.Capture(Macro.ImageViewer.Layout.IHpLayoutDefinitionContext)">
            <summary>
            Captures the state from the specified context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Macro.ImageViewer.Layout.IHpLayoutDefinitionContributor.ApplyTo(Macro.ImageViewer.Layout.IHpLayoutDefinitionContext)">
            <summary>
            Applies the state to the specified context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Macro.ImageViewer.Layout.IHpApplicabilityContributor">
            <summary>
            Defines the interface to an applicability contributor.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.IHpProtocolApplicabilityContext.PrimaryStudy">
            <summary>
            The "primary" study for which the protocol applicability will be tested.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Layout.IHpProtocolApplicabilityContributor">
            <summary>
            Defines the interface to a "protocol applicability" contributor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Layout.IHpProtocolApplicabilityContributor.Capture(Macro.ImageViewer.Layout.IHpProtocolApplicabilityContext)">
            <summary>
            Captures the state from the specified context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Macro.ImageViewer.Layout.IHpProtocolApplicabilityContributor.Test(Macro.ImageViewer.Layout.IHpProtocolApplicabilityContext)">
            <summary>
            Tests the applicability based on the specified context.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.ImageViewer.Layout.IHpLayoutApplicabilityContributor">
            <summary>
            Defines the interface to a "layout applicability" contributor.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Layout.IHpLayoutApplicabilityContributor.Capture(Macro.ImageViewer.Layout.IHpLayoutApplicabilityContext)">
            <summary>
            Captures the state from the specified context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Macro.ImageViewer.Layout.IHpLayoutApplicabilityContributor.Test(Macro.ImageViewer.Layout.IHpLayoutApplicabilityContext)">
            <summary>
            Tests the applicability based on the specified context.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.ImageViewer.Layout.HpProperty`1">
            <summary>
            Provides a default implementation of <see cref="T:Macro.ImageViewer.Layout.IHpProperty"/>.
            </summary>
            <remarks>
            This class can be used as-is or subclassed for advanced functionality.
            </remarks>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="M:Macro.ImageViewer.Layout.HpProperty`1.#ctor(System.String,System.String,Macro.ImageViewer.Layout.HpProperty{`0}.ValueGetter,Macro.ImageViewer.Layout.HpProperty{`0}.ValueSetter)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="getter"></param>
            <param name="setter"></param>
        </member>
        <member name="M:Macro.ImageViewer.Layout.HpProperty`1.#ctor(System.String,System.String,System.String,Macro.ImageViewer.Layout.HpProperty{`0}.ValueGetter,Macro.ImageViewer.Layout.HpProperty{`0}.ValueSetter)">
            <summary>
             Constructor
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="category"></param>
            <param name="getter"></param>
            <param name="setter"></param>
        </member>
        <member name="M:Macro.ImageViewer.Layout.HpProperty`1.EditProperty(Macro.ImageViewer.Layout.IHpPropertyEditContext)">
            <summary>
            Called to invoke custom editing of this property, if <see cref="P:Macro.ImageViewer.Layout.IHpProperty.HasEditor"/> returns true. 
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Macro.ImageViewer.Layout.HpProperty`1.DisplayName">
            <summary>
            Gets the display name of this property for display in the user-interface.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.HpProperty`1.Description">
            <summary>
            Gets the description of this property for display in the user-interface.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.HpProperty`1.Category">
            <summary>
            Gets the category of this property for display in the user-interface.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.HpProperty`1.Converter">
            <summary>
            Gets the type converter for this property.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.HpProperty`1.HasEditor">
            <summary>
            Gets a value indicating whether this property can be edited by a custom dialog box.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.Layout.HpProperty`1.Value">
            <summary>
            Gets or sets the value associated with this property.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Imaging.SimpleColorMap">
            <summary>
            Basic implementation of an <see cref="T:Macro.ImageViewer.Imaging.IColorMap"/> whose size and data do not change.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.SimpleColorMap.#ctor(System.Int32,System.Int32[],System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.ImageViewer.Imaging.SimpleColorMap"/>.
            </summary>
            <param name="firstMappedPixelValue">The value of the first mapped pixel in the lookup table.</param>
            <param name="lutData">The lookup table mapping input pixel values to 32-bit ARGB colors.</param>
            <param name="key">A key suitable for identifying the color map.</param>
            <param name="description">A description of the color map.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.SimpleColorMap.#ctor(Macro.ImageViewer.Imaging.SimpleColorMap,Macro.Common.Utilities.ICloningContext)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="source">The source object from which to clone.</param>
            <param name="context">The cloning context object.</param>
        </member>
        <member name="M:Macro.ImageViewer.Imaging.SimpleColorMap.Clone">
            <summary>
            Creates a deep-copy of the <see cref="T:Macro.ImageViewer.Imaging.IColorMap"/>.
            </summary>
            <remarks>
            <see cref="T:Macro.ImageViewer.Imaging.IColorMap"/> implementations may return NULL from this method when appropriate.	
            </remarks>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.SimpleColorMap.MinOutputValue">
            <summary>
            This property is not applicable for this class.
            </summary>
            <exception cref="T:System.InvalidOperationException">Always thrown.</exception>
        </member>
        <member name="P:Macro.ImageViewer.Imaging.SimpleColorMap.MaxOutputValue">
            <summary>
            This property is not applicable for this class.
            </summary>
            <exception cref="T:System.InvalidOperationException">Always thrown.</exception>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.MouseWheelCaptureChangedEventArgs.Tile">
            <summary>
            Gets the affected tile.
            </summary>
        </member>
        <member name="P:Macro.ImageViewer.InputManagement.MouseWheelCaptureChangedEventArgs.Gained">
            <summary>
            True if mouse capture has been gained, false if it was lost.
            </summary>
        </member>
        <member name="T:Macro.ImageViewer.Automation.IProbe">
            <summary>
            Defines methods for automating the probe tool functionality of the <see cref="T:Macro.ImageViewer.IImageViewer"/>.
            </summary>
        </member>
        <member name="M:Macro.ImageViewer.Automation.IProbe.Probe(System.Drawing.PointF,Macro.ImageViewer.Graphics.CoordinateSystem)">
            <summary>
            Invokes the probe tool on a given location of the currently selected image.
            </summary>
            <param name="coordinate">The coordinate on which to invoke the probe tool.</param>
            <param name="coordinateSystem">The coordinate system of <paramref name="coordinate"/>.</param>
        </member>
        <member name="M:Macro.ImageViewer.Automation.IProbe.ResetProbe">
            <summary>
            Cancels a previously-invoked probe tool.
            </summary>
        </member>
    </members>
</doc>
