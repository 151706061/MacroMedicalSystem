; Script generated by the HM NIS Edit Script Wizard.

; defines required for upgrade process
; the '1 ##VERSION string is used by the build script as a token
!define MAJOR_VERSION 1 ##MAJOR
!define MINOR_VERSION 1 ##MINOR
!define BUILD_NUMBER 1 ##BUILD
!define REVISION_NUMBER 1 ##REVISION

; define for build process
; the "RisClient" ##VERSION string is used by the build script as a token
!define DISTRIBUTION "RisClient_FullViewer" ##DISTRIBUTION

!define PRODUCT_NAME "ClearCanvas Workstation"
!define PRODUCT_VERSION "${MAJOR_VERSION}.${MINOR_VERSION}"
!define PRODUCT_PUBLISHER "ClearCanvas Inc"
!define PRODUCT_WEB_SITE "http://www.clearcanvas.ca"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"

!ifdef OFFICIALRELEASEBUILD
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"
!define PRODUCT_STARTMENU_FOLDER "$SMPROGRAMS\ClearCanvas\${PRODUCT_NAME}"
!define PRODUCT_SHORTCUT_NAME "${PRODUCT_NAME}"
!define PRODUCT_INSTALL_DIR "${PLATFORM_PROGRAMFILES}\ClearCanvas\${PRODUCT_NAME}"
!else
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME} ${RELEASELABEL}"
!define PRODUCT_STARTMENU_FOLDER "$SMPROGRAMS\ClearCanvas\${PRODUCT_NAME} ${RELEASELABEL}"
!define PRODUCT_SHORTCUT_NAME "${PRODUCT_NAME} ${RELEASELABEL}"
!define PRODUCT_INSTALL_DIR "${PLATFORM_PROGRAMFILES}\ClearCanvas\${PRODUCT_NAME} ${RELEASELABEL}"
!endif

!ifdef RELEASELABEL
  !define INSTALLER_DISPLAY_NAME "${PRODUCT_NAME} ${PRODUCT_VERSION} ${RELEASELABEL}"
  !define PRODUCT_SERVICE_NAME "${PRODUCT_NAME} Shred Host Service ${RELEASELABEL}"
!else
  !define INSTALLER_DISPLAY_NAME "${PRODUCT_NAME} ${PRODUCT_VERSION}"
  !define PRODUCT_SERVICE_NAME "${PRODUCT_NAME} Shred Host Service"
!endif

; controls whether or not to enable Enterprise screens
!define ENTERPRISEMODE True ##ENTERPRISEMODE

; MUI 1.67 compatible ------
!include "dotNETCC.nsh"
!include "DumpLog.nsh"
!include "FileFunc.nsh"
!include "LogicLib.nsh"
!include "MUI.nsh"
!include "RemoveService.nsh"
!include "servicelib.nsh"
!include "StrFunc.nsh"
!include "XML.nsh"

;Macros
!insertmacro GetParameters
!insertmacro GetOptions
!insertmacro un.GetParameters
!insertmacro un.GetOptions

; Check for .NET Framework defines
!define DOTNET_VERSION_REQ "3"

; MUI Settings
!define MUI_ABORTWARNING
!define MUI_ICON "${NSISDIR}\Contrib\Graphics\Icons\modern-install.ico"
!define MUI_UNICON "${NSISDIR}\Contrib\Graphics\Icons\modern-uninstall.ico"

; Platform-specific Settings (x86 vs. x64)
!ifdef PLATFORM_X64
!define PLATFORM_NAME "x64"
!define PLATFORM_PROGRAMFILES $PROGRAMFILES64
!define PLATFORM_SUBFOLDER "x64"
!define PLATFORM_VC2008 "{350AA351-21FA-3270-8B7A-835434E766AD}"
!define PLATFORM_VC2008SP1 "{8220EEFE-38CD-377E-8595-13398D740ACE}"
!define PLATFORM_SQLCE "{3A9FC03D-C685-4831-94CF-4EDFD3749497}"
!else
!define PLATFORM_X64 "false"
!define PLATFORM_NAME "x86"
!define PLATFORM_PROGRAMFILES $PROGRAMFILES
!define PLATFORM_SUBFOLDER ""
!define PLATFORM_VC2008 "{FF66E9F6-83E7-3A3E-AF14-8DE9A809A6A4}"
!define PLATFORM_VC2008SP1 "{9A25302D-30C0-39D9-BD6F-21E6EC160475}"
!endif

; Variables
;upgrade or migration variables
Var OLDWORKSTATIONDETECTED
Var OLDWORKSTATIONUNINSTALLSTRING
Var OLDINSTALLDIR
Var OLDRISUNINSTALLSTRING
Var RESTOREDICOMAESERVERS
Var RESTOREDATABASE
; Collected in PageFilestorePath.ini
Var INI_FILESTOREPATH
Var INI_BADFILEPATH
Var INI_INTERIMPATH
; Collected in PageDicomServerSettings.ini
Var INI_AETITLE
Var INI_PORT
; Collected in PageRisSparrowServer.ini
Var INI_RISHOST
Var INI_RISPORT
Var INI_SPARROWHOST
Var INI_SPARROWPORT
; Collected in PageEnterpriseServerClientSide.ini
Var INI_ESHOST
Var INI_ESPORT
; Only For Silent Install case
Var INI_AEPREFIX
Var INI_NOSPARROW
; Flag to allow an update to Server list during upgrade
Var INI_NEWSERVERLIST

;First call required to initialize
  ${StrCase}

; Welcome page
!insertmacro MUI_PAGE_WELCOME
; License page
!insertmacro MUI_PAGE_LICENSE "..\..\..\..\Docs\ImageViewer\EULA.rtf"
; Directory page
!insertmacro MUI_PAGE_DIRECTORY
; Components page
!insertmacro MUI_PAGE_COMPONENTS
; Custom page - fetches enterprise server info
Page custom PageEnterpriseServerClientSide ValidatePageEnterpriseServerClientSide
; Custom page - Retrieves Server info
Page custom PageRisServer ValidatePageRisServer
; Custom page - Retrieves Dicom Server Settings
Page custom PageDicomServerSettings ValidatePageDicomServerSettings
; Custom page - Retrieves Filestore Path
Page custom PageFilestorePath ValidatePageFilestorePath
; Instfiles page
!insertmacro MUI_PAGE_INSTFILES
; Install Service
Section "-ShreadHostServiceInstall"
  !insertmacro SERVICE "create" "${PRODUCT_SERVICE_NAME}" \
  "path=$\"$INSTDIR\ClearCanvas.Server.ShredHostService.exe$\" -service;autostart=1;display=${PRODUCT_SERVICE_NAME};"

  ;Sets description
  WriteRegStr HKLM \
  "SYSTEM\CurrentControlSet\Services\${PRODUCT_SERVICE_NAME}" \
  "Description" "Hosts the ClearCanvas Server Threads (Shreds)."

SectionEnd
; Finish page
!define MUI_FINISHPAGE_RUN "$INSTDIR\ClearCanvas.Desktop.Executable.exe"
!insertmacro MUI_PAGE_FINISH

; Uninstaller pages
!insertmacro MUI_UNPAGE_INSTFILES

; Language files
!insertmacro MUI_LANGUAGE "English"

ReserveFile "PageRisSparrowServer.ini"
ReserveFile "PageFilestorePath.ini"
ReserveFile "PageDicomServerSettings.ini"
ReserveFile "PageEnterpriseServerClientSide.ini"
!insertmacro MUI_RESERVEFILE_INSTALLOPTIONS
; MUI end ------


Name "${INSTALLER_DISPLAY_NAME}"
OutFile "${PRODUCT_NAME}.exe"
InstallDir "${PRODUCT_INSTALL_DIR}"
ShowInstDetails show
ShowUnInstDetails show

SectionGroup /e "Core Components" GRPCORE
LangString DESC_GRPCORE ${LANG_ENGLISH} "Core Components for the ClearCanvas Workstation.  This is required."
  Section "-InstallDir"
    SectionIn RO
    SetShellVarContext all
    SetOutPath "$INSTDIR"
    SetOverwrite ifnewer
    File /r /x *.svn* /x app.ico /x *Sparrow* /x *oto* /x manifest "..\..\..\..\Distribution\Build\${DISTRIBUTION}\${PLATFORM_SUBFOLDER}\Release\*.*"  
    
    CreateDirectory "${PRODUCT_STARTMENU_FOLDER}"
    CreateShortCut "${PRODUCT_STARTMENU_FOLDER}\${PRODUCT_SHORTCUT_NAME}.lnk" "$INSTDIR\ClearCanvas.Desktop.Executable.exe"
    CreateShortCut "$DESKTOP\${PRODUCT_SHORTCUT_NAME}.lnk" "$INSTDIR\ClearCanvas.Desktop.Executable.exe"
  SectionEnd
  
  Section "-CoreManifest"
    SetOutPath "$INSTDIR\manifest"
    File "..\..\..\..\Distribution\Build\${DISTRIBUTION}\${PLATFORM_SUBFOLDER}\Release\manifest\Manifest.xml"
  SectionEnd

  Section "-GenerateConfig"
    SectionIn RO
    DetailPrint "Configuring Desktop Executable"
    ${xml::LoadFile} "$INSTDIR\ClearCanvas.Desktop.Executable.exe.config" $0
    ${xml::GotoPath} "/configuration/applicationSettings/ClearCanvas.Sparrow.Client.WebServicesSettings" $0
    ${xml::FirstChildElement} "setting" $0 $1
    
    loopSparrowServer:
    ${xml::GetAttribute} "name" $0 $1
    StrCmp "ApplicationServicesBaseUrl" $0 foundSparrowServer ;breaks loop

    ${xml::NextSiblingElement} "setting" $0 $1
    StrCmp $1 "0" loopSparrowServer findFailed ;loops unless an error occurred

    foundSparrowServer:
    ${xml::FirstChildElement} "value" $0 $1
    ${xml::SetText} "net.tcp://$INI_SPARROWHOST:$INI_SPARROWPORT/" $0
    
    
    ${xml::GotoPath} "/configuration/applicationSettings/ClearCanvas.Ris.Client.WebServicesSettings" $0
    ${xml::FirstChildElement} "setting" $0 $1

    loopRisServer:
    ${xml::GetAttribute} "name" $0 $1
    StrCmp "ApplicationServicesBaseUrl" $0 foundRisServer ;breaks loop

    ${xml::NextSiblingElement} "setting" $0 $1
    StrCmp $1 "0" loopRisServer findFailed ;loops unless an error occurred


    foundRisServer:
    ${xml::FirstChildElement} "value" $0 $1
    ${xml::SetText} "net.tcp://$INI_RISHOST:$INI_RISPORT/" $0
    
    
    Call SetAppConfigEnterpriseSettings

    ${xml::SaveFile} "$INSTDIR\ClearCanvas.Desktop.Executable.exe.config" $0
    ${xml::Unload}
    
    AccessControl::GrantOnFile "$INSTDIR\ClearCanvas.Desktop.Executable.exe.config" "Users" "GenericRead + GenericWrite + GenericExecute + Delete"
    Return
    
    findFailed:
    MessageBox MB_OK|MB_ICONSTOP "A failure has occurred on service component configuration." /SD IDOK
    Return
  SectionEnd
  
  Section "-SetShredHostAppConfigEnterpriseSettings"
    SectionIn RO

    ${IfThen} ${ENTERPRISEMODE} == False ${|} Return ${|}
    
    DetailPrint "Configuring Shredhost"
    ${xml::LoadFile} "$INSTDIR\ClearCanvas.Server.ShredHostService.exe.config" $0
    
    Call SetAppConfigEnterpriseSettings
    
    ${xml::SaveFile} "$INSTDIR\ClearCanvas.Server.ShredHostService.exe.config" $0
      ${xml::Unload}
  SectionEnd
  
  Section "-MigrationAndConfigurationSetting"
    SectionIn RO

    StrCmp $OLDWORKSTATIONDETECTED "True" migration +1 

    IfSilent +1 bothSilentAndNonSilentConfig
        ;Fetches machine's hostname to be used as the AE Title
        ${IfThen} "$INI_AETITLE" == "" ${|} ReadRegStr $INI_AETITLE HKLM "System\CurrentControlSet\Services\Tcpip\Parameters" "Hostname" ${|}

        ;Adds Prefix if it was specified
        StrCpy $INI_AETITLE "$INI_AEPREFIX$INI_AETITLE"

        ;Handle Case where AE Title Exceeds 16 chars
        StrCpy $INI_AETITLE $INI_AETITLE 16

        ;All Uppercase is desired
        ${StrCase} $INI_AETITLE "$INI_AETITLE" "U"

      ##End of SilentOnly Section

      bothSilentAndNonSilentConfig:
        ##No prior installation detected
        ${xml::LoadFile} "$INSTDIR\ClearCanvas.Server.ShredHostService.exe.config" $0
        ${xml::GotoPath} "/configuration/LocalDataStoreServiceSettings" $0
        ${IfNotThen} "$INI_FILESTOREPATH" == "" ${|} ${xml::SetAttribute} "StorageDirectory" "$INI_FILESTOREPATH" $0 ${|}
        ${IfNotThen} "$INI_BADFILEPATH" == "" ${|} ${xml::SetAttribute} "BadFileDirectory" "$INI_BADFILEPATH" $0 ${|}
        ${xml::GotoPath} "/configuration/DicomServerSettings" $0
        ${xml::SetAttribute} "AETitle" "$INI_AETITLE" $0
        ${IfNotThen} "$INI_PORT" == "" ${|} ${xml::SetAttribute} "Port" "$INI_PORT" $0 ${|}
        ${IfNotThen} "$INI_INTERIMPATH" == "" ${|} ${xml::SetAttribute} "InterimStorageDirectory" "$INI_INTERIMPATH" $0 ${|}
        ${xml::SaveFile} "$INSTDIR\ClearCanvas.Server.ShredHostService.exe.config" $0
        ${xml::Unload}
      Return

      migration:          
      ${If} $RESTOREDICOMAESERVERS == "True"
        CopyFiles /SILENT "$TEMP\DicomAEServers.xml" "$INSTDIR"
        Delete "$TEMP\DicomAEServers.xml"
      ${EndIf}
      
      ${If} $RESTOREDATABASE == "True"
        CopyFiles /SILENT "$TEMP\viewer.sdf" "$INSTDIR\dicom_datastore\viewer.sdf"
        Delete "$TEMP\viewer.sdf"
      ${EndIf}
      
      ###Invoke Settings Migration Stuff here
      
      ;Migration of ShredHost app.config      
      ExecWait '"$INSTDIR\ClearCanvas.Server.ShredHostService.exe" /m:$TEMP\ClearCanvas.Server.ShredHostService.exe.config' $0
      
      Return
    SectionEnd


    Section "-ViewerFolders"
      SectionIn RO
      CreateDirectory "$INSTDIR\badfiles"
      CreateDirectory "$INSTDIR\dicom_interim"
    SectionEnd

    Section "-Permissions"
      SectionIn RO
      AccessControl::GrantOnFile "$INSTDIR" "Users" "GenericRead + GenericWrite + GenericExecute + Delete"
    SectionEnd

  Section "-C Runtime Install"
      SectionIn RO
      # Visual C++ 2008
      ;Checks if it's already installed and skips if it is
      ReadRegDword $0 HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PLATFORM_VC2008}" "Version"
      ${IfNotThen} "$0" == "" ${|} goto sp1 ${|}

      SetOutPath "$TEMP\CC2008"
      File "..\..\..\Redistributables\Visual C++ 2008\vcredist_${PLATFORM_NAME}.exe"
      DetailPrint "Pausing installation while runtime components of Visual C++ 2008 Libraries are installed."

      Push $0
      ExecWait '$TEMP\CC2008\Vcredist_${PLATFORM_NAME}.exe /Q /l "$INSTDIR\logs\vcredist_${PLATFORM_NAME}.log"' $0
      ${If} $0 != 0
        MessageBox MB_OK "The installation of the runtime components of Visual C++ 2008 Libraries has failed.  ${PRODUCT_NAME} requires that Visual C++ 2008 is installed.  Please manually perform the install of the Microsoft Visual C++ 2008 Redistributable Package from Micosoft's Website before using ${PRODUCT_NAME}." /SD IDOK
      ${EndIf}

      sp1:
      # Visual C++ 2008 SP1
      ;Checks if it's already installed and skips if it is
      ReadRegDword $0 HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PLATFORM_VC2008SP1}" "Version"
      ${IfNotThen} "$0" == "" ${|} Return ${|}

      SetOutPath "$TEMP\CC2008SP1"
      File "..\..\..\Redistributables\Visual C++ 2008 SP1\vcredist_${PLATFORM_NAME}.exe"
      DetailPrint "Pausing installation while runtime components of Visual C++ 2008 SP1 Libraries are installed."

      Push $0
      ExecWait '$TEMP\CC2008SP1\Vcredist_${PLATFORM_NAME}.exe /Q /l "$INSTDIR\logs\vcredistSP1_${PLATFORM_NAME}.log"' $0
      ${If} $0 != 0
        MessageBox MB_OK "The installation of the runtime components of Visual C++ 2008 SP1 Libraries has failed.  ${PRODUCT_NAME} requires that Visual C++ 2008 SP1 is installed..  Please manually perform the install of the Microsoft Visual C++ 2008 SP1 Redistributable Package from Micosoft's Website before using ${PRODUCT_NAME}." /SD IDOK
      ${EndIf}
  SectionEnd

  Section "-SQL CE Install"
      SectionIn RO
      ;Ticket #2972 - this is only required on 64-bit in case SQL 2008 is installed
      ${IfNotThen} "${PLATFORM_NAME}" == "x64" ${|} return ${|}

      # SQL CE
      ;Checks if it's already installed and skips if it is
      ReadRegDword $0 HKLM "Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\${PLATFORM_SQLCE}" "Version"
      ${IfNotThen} "$0" == "" ${|} return ${|}

      SetOutPath "$TEMP"
      File "..\..\..\Redistributables\SQLCE 3.5 SP2\SSCERuntime_x86-ENU.msi"
      File "..\..\..\Redistributables\SQLCE 3.5 SP2\SSCERuntime_x64-ENU.msi"
      DetailPrint "Pausing installation while runtime components of SQL Compact Edition are installed."

      Push $0
      ExecWait 'msiexec /i "$TEMP\SSCERuntime_x86-ENU.msi" /quiet /log "$INSTDIR\logs\SQLCE_x86.log"' $0
      StrCmp "$0" "0" +1 sqlCeError
      Push $0
      ExecWait 'msiexec /i "$TEMP\SSCERuntime_x64-ENU.msi" /quiet /log "$INSTDIR\logs\SQLCE_x64.log"' $0
      StrCmp "$0" "0" +1 sqlCeError

      Return

      sqlCeError:
        MessageBox MB_OK "The installation of the runtime components of Visual C++ 2008 Libraries has failed.  ${PRODUCT_NAME} requires that Visual C++ 2008 is installed.  Please manually perform the install of the Microsoft Visual C++ 2008 Redistributable Package from Micosoft's Website before using ${PRODUCT_NAME}." /SD IDOK
  SectionEnd

  Section "-Register File Association"
    SectionIn RO
    DetailPrint "Registering File Association..."
    WriteRegStr HKCR ".dcm" "" "ClearCanvas.ImageViewer"
    WriteRegDword HKCR "ClearCanvas.ImageViewer" "EditFlags" "0"
    WriteRegDword HKCR "ClearCanvas.ImageViewer" "BrowserFlags" "8"
    WriteRegStr HKCR "ClearCanvas.ImageViewer\DefaultIcon" "" "$INSTDIR\ClearCanvas.Desktop.Executable.exe,0"
    WriteRegStr HKCR "ClearCanvas.ImageViewer\shell" "" "Open"
    WriteRegStr HKCR "ClearCanvas.ImageViewer\shell\Open\command" "" '$INSTDIR\ClearCanvas.Desktop.Executable.exe Desktop.Application "%1"'
    WriteRegStr HKCR "ClearCanvas.ImageViewer\shell\Open\ddeexec\Application" "" "ClearCanvas.Desktop.Executable"
    WriteRegStr HKCR "ClearCanvas.ImageViewer\shell\Open\ddeexec\Topic" "" "System"

    ;A full absolute path is required once file association is implemented to the datastore
    ${xml::LoadFile} "$INSTDIR\ClearCanvas.Dicom.DataStore.cfg.xml" $0
    ${xml::GotoPath} "/hibernate-configuration/session-factory" $0
    ${xml::FirstChildElement} "property" $0 $1

    loopDatastorePath:
    ${xml::GetAttribute} "name" $0 $1
    StrCmp "connection.connection_string" $0 foundDatastorePath ;breaks loop

    ${xml::NextSiblingElement} "property" $0 $1
    StrCmp $1 "0" loopDatastorePath findFailed ;loops unless an error occurred

    foundDatastorePath:
    ${xml::SetText} "Data Source=$INSTDIR\dicom_datastore\viewer.sdf" $0

    ${xml::SaveFile} "$INSTDIR\ClearCanvas.Dicom.DataStore.cfg.xml" $0
    ${xml::Unload}
    Return

    findFailed:
      MessageBox MB_OK "A failure has occurred on datastore path configuration." /SD IDOK
      Return
  SectionEnd
SectionGroupEnd

SectionGroup /e "Sparrow Components" GRPSPARROW
LangString DESC_GRPSPARROW ${LANG_ENGLISH} "Speech Recognition Components for the ClearCanvas Workstation."
  Section "-SparrowPluginsDir"
    SetOutPath "$INSTDIR\plugins"
    File /nonfatal /r /x *.svn* "..\..\..\..\Distribution\Build\${DISTRIBUTION}\${PLATFORM_SUBFOLDER}\Release\plugins\*Sparrow*"
  SectionEnd

  Section "-SparrowManifest"
    SetOutPath "$INSTDIR\manifest"
    File "..\..\..\..\Distribution\Build\${DISTRIBUTION}\${PLATFORM_SUBFOLDER}\Release\manifest\SparrowManifest.xml"
  SectionEnd
SectionGroupEnd

Section "-Start Service"
  !insertmacro SERVICE "installed" "${PRODUCT_SERVICE_NAME}" "action=start;"
SectionEnd

Section -AdditionalIcons
  SetOutPath $INSTDIR
  WriteIniStr "$INSTDIR\${PRODUCT_NAME}.url" "InternetShortcut" "URL" "${PRODUCT_WEB_SITE}"
  CreateShortCut "${PRODUCT_STARTMENU_FOLDER}\Website.lnk" "$INSTDIR\${PRODUCT_NAME}.url"
  CreateShortCut "${PRODUCT_STARTMENU_FOLDER}\Uninstall.lnk" "$INSTDIR\uninst.exe"
SectionEnd

Section -Post
  WriteUninstaller "$INSTDIR\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayIcon" "$INSTDIR\ClearCanvas.Desktop.Executable.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"

  StrCpy $0 "$INSTDIR\install.log"
  Push $0
  Call DumpLog
SectionEnd

!insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN
  !insertmacro MUI_DESCRIPTION_TEXT ${GRPCORE} $(DESC_GRPCORE)
  !insertmacro MUI_DESCRIPTION_TEXT ${GRPSPARROW} $(DESC_GRPSPARROW)
!insertmacro MUI_FUNCTION_DESCRIPTION_END


Function .onInit
  ; Check for Platform compared to installer platform
  GetVersion::WindowsPlatformArchitecture
   Pop $R0
  ${If} $R0 == "32"
  ${AndIf} ${PLATFORM_NAME} == "x64"
    MessageBox MB_OK|MB_ICONSTOP "A platform mismatch has been detected.$\n$\nThe 64-bit version of ${PRODUCT_NAME} cannot be installed on a 32-bit Operating System.  Installation will now be aborted." /SD IDOK
    Abort
  ${ElseIf} $R0 == "64"
  ${AndIf} ${PLATFORM_NAME} == "x86"
    MessageBox MB_OK|MB_ICONSTOP "A platform mismatch has been detected.$\n$\nThe 32-bit version of ${PRODUCT_NAME} cannot be installed on a 64-bit Operating System.  Installation will now be aborted." /SD IDOK
    Abort
  ${EndIf}

  ; Check for Windows Version
  ; using WindowsName instead of WindowsVersion because of difficulties encountered in performing
  ; numerical comparisons on version numbers.
  GetVersion::WindowsName
   Pop $R0
   ${If} $R0 == "95 OSR2"
   ${OrIf} $R0 == "95"
   ${OrIf} $R0 == "98 SE"
   ${OrIf} $R0 == "98"
   ${OrIf} $R0 == "ME"
   ${OrIf} $R0 == "NT"
   ${OrIf} $R0 == "CE"
   ${OrIf} $R0 == "2000"
     MessageBox MB_OK "${PRODUCT_NAME} requires Windows XP or greater.  The install has aborted." /SD IDOK
     Abort "${PRODUCT_NAME} requires Windows XP or greater.  The install has aborted."
   ${EndIf}
   
  ; Check for .NET Framework Install
  ; discovered an unexpected formatting idiosyncrasy for the version string passed into CheckDotNet
  ; e.g. if the req'd version is 3.0.1 or higher but installed version is 3.0.04502.0
  ; using 3.0.1 or 3.0.10... 3.0.1000 doesn't work.  Have to specify 3.0.10000 or a greater number of zeroes

  IfSilent skipDotNetCheck
    !insertmacro CheckDotNET "${DOTNET_VERSION_REQ}"
  skipDotNetCheck:

  ;For Silent Install
  ${GetParameters} $R0
  ClearErrors
  ${GetOptions} $R0 /ESHOST= $INI_ESHOST
  ${GetOptions} $R0 /ESPORT= $INI_ESPORT
  ${GetOptions} $R0 /RISHOST= $INI_RISHOST
  ${GetOptions} $R0 /RISPORT= $INI_RISPORT
  ${GetOptions} $R0 /SPARROWHOST= $INI_SPARROWHOST
  ${GetOptions} $R0 /SPARROWPORT= $INI_SPARROWPORT
  ${GetOptions} $R0 /NOSPARROW= $INI_NOSPARROW
  ${GetOptions} $R0 /PREFIX= $INI_AEPREFIX ;Set to blank if not specified
  ${GetOptions} $R0 /AE= $INI_AETITLE ;Set to hostname if not specified
  ${GetOptions} $R0 /P= $INI_PORT ;Set to app.config default if not specified
  ${GetOptions} $R0 /FP= $INI_FILESTOREPATH ;Set to app.config default if not specified
  ${GetOptions} $R0 /BP= $INI_BADFILEPATH ;Set to app.config default if not specified
  ${GetOptions} $R0 /INP= $INI_INTERIMPATH ;Set to app.config default if not specified
  ${GetOptions} $R0 /NEWSERVERLIST= $INI_NEWSERVERLIST ;True or False expected, else set to False
  ##End of Silent Install Specific Section
  
  ${If} $INI_NEWSERVERLIST != "True"
  ${AndIf} $INI_NEWSERVERLIST != "False"
    StrCpy $INI_NEWSERVERLIST "False"
  ${EndIf}
  
  ; Check for prior or conflicting versions and prompt to uninstall them before continuing
  Call HandlePriorInstall

  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageFilestorePath.ini"
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageDicomServerSettings.ini"
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageRisSparrowServer.ini"
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageEnterpriseServerClientSide.ini"
FunctionEnd

LangString PageEnterpriseServerClientSide_TITLE ${LANG_ENGLISH} "Enterprise Server connection setup page"
LangString PageEnterpriseServerClientSide_SUBTITLE ${LANG_ENGLISH} "This page is used to enter the Enterprise Server connection details."

Function PageEnterpriseServerClientSide
  ${IfThen} ${ENTERPRISEMODE} == False ${|} Return ${|}

  !insertmacro MUI_HEADER_TEXT "$(PageEnterpriseServerClientSide_TITLE)" "$(PageEnterpriseServerClientSide_SUBTITLE)"
  !insertmacro MUI_INSTALLOPTIONS_DISPLAY "PageEnterpriseServerClientSide.ini"
FunctionEnd

Function ValidatePageEnterpriseServerClientSide
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_ESHOST "PageEnterpriseServerClientSide.ini" "Field 3" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_ESPORT "PageEnterpriseServerClientSide.ini" "Field 5" "State"
  StrCmp $INI_ESHOST "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Enterprise Server hostname/ip cannot be blank. Please a proper value."
  Abort
  StrCmp $INI_ESPORT "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Enterprise Server Port cannot be blank. Please enter a port."
  Abort
FunctionEnd

LangString PageRisServer_TITLE ${LANG_ENGLISH} "Server Hostname"
LangString PageRisServer_SUBTITLE ${LANG_ENGLISH} "This page is used to enter the Server Hostname."

Function PageRisServer
  !insertmacro MUI_HEADER_TEXT "$(PageRisServer_TITLE)" "$(PageRisServer_SUBTITLE)"
  !insertmacro MUI_INSTALLOPTIONS_DISPLAY "PageRisSparrowServer.ini"
FunctionEnd

Function ValidatePageRisServer
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_RISHOST "PageRisSparrowServer.ini" "Field 2" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_RISPORT "PageRisSparrowServer.ini" "Field 4" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_SPARROWHOST "PageRisSparrowServer.ini" "Field 6" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_SPARROWPORT "PageRisSparrowServer.ini" "Field 8" "State"
  StrCmp $INI_RISHOST "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Ris Server hostname/ip cannot be blank. Please a proper value."
  Abort
  StrCmp $INI_RISPORT "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Ris Server Port cannot be blank. Please enter a port."
  Abort
  StrCmp $INI_SPARROWHOST "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Sparrow Server hostname/ip cannot be blank. Please a proper value."
  Abort
  StrCmp $INI_SPARROWPORT "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Sparrow Server Port cannot be blank. Please enter a port."
  Abort
FunctionEnd

LangString PageFilestorePath_TITLE ${LANG_ENGLISH} "Specify Filestore Path"
LangString PageFilestorePath_SUBTITLE ${LANG_ENGLISH} "This page is used to enter the Filestore Path."

Function PageFilestorePath
  ${If} "$OLDWORKSTATIONDETECTED" == "True"
    Return
  ${EndIf}
  !insertmacro MUI_INSTALLOPTIONS_WRITE "PageFilestorePath.ini" "Field 2" "State" "$INSTDIR\filestore"
  !insertmacro MUI_INSTALLOPTIONS_WRITE "PageFilestorePath.ini" "Field 4" "State" "$INSTDIR\dicom_interim"
  !insertmacro MUI_INSTALLOPTIONS_WRITE "PageFilestorePath.ini" "Field 6" "State" "$INSTDIR\badfiles"
  
  !insertmacro MUI_HEADER_TEXT "$(PageFilestorePath_TITLE)" "$(PageFilestorePath_SUBTITLE)"
  !insertmacro MUI_INSTALLOPTIONS_DISPLAY "PageFilestorePath.ini"
FunctionEnd

Function ValidatePageFilestorePath
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_FILESTOREPATH "PageFilestorePath.ini" "Field 2" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_INTERIMPATH "PageFilestorePath.ini" "Field 4" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_BADFILEPATH "PageFilestorePath.ini" "Field 6" "State"
  StrCmp $INI_FILESTOREPATH "" "" +3
    MessageBox MB_ICONEXCLAMATION|MB_OK "Filestore Path cannot be blank. Please enter a path."
    Abort
  StrCmp $INI_INTERIMPATH "" "" +3
    MessageBox MB_ICONEXCLAMATION|MB_OK "Interim Path cannot be blank. Please enter a path."
    Abort
  StrCmp $INI_BADFILEPATH "" "" +3
    MessageBox MB_ICONEXCLAMATION|MB_OK "Bad File Path cannot be blank. Please enter a path."
    Abort
FunctionEnd

LangString PageDicomServerSettings_TITLE ${LANG_ENGLISH} "Dicom Server Settings"
LangString PageDicomServerSettings_SUBTITLE ${LANG_ENGLISH} "This page is used to enter the Dicom Server settings."

Function PageDicomServerSettings
  ${If} "$OLDWORKSTATIONDETECTED" == "True"
    Return
  ${EndIf}
  !insertmacro MUI_HEADER_TEXT "$(PageDicomServerSettings_TITLE)" "$(PageDicomServerSettings_SUBTITLE)"
  !insertmacro MUI_INSTALLOPTIONS_DISPLAY "PageDicomServerSettings.ini"
FunctionEnd

Function ValidatePageDicomServerSettings
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_AETITLE "PageDicomServerSettings.ini" "Field 2" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_PORT "PageDicomServerSettings.ini" "Field 4" "State"
  StrCmp $INI_AETITLE "" "" +3
    MessageBox MB_ICONEXCLAMATION|MB_OK "AE Title cannot be blank. Please enter an AE Title"
    Abort
  StrCmp $INI_PORT "" "" +3
    MessageBox MB_ICONEXCLAMATION|MB_OK "Interim Path cannot be blank. Please enter a path."
    Abort
FunctionEnd

Function SetAppConfigEnterpriseSettings
  ## Enterprise Server connection
    ;RemoteCoreServiceSettings
    ${xml::GotoPath} "/configuration/applicationSettings/ClearCanvas.Enterprise.Common.RemoteCoreServiceSettings" $0
    ${xml::FirstChildElement} "setting" $0 $1

    loopRemoteCoreServiceSettingBaseUrl:
    ${xml::GetAttribute} "name" $0 $1
    StrCmp "BaseUrl" $0 foundRemoteCoreServiceSettingBaseUrl ;breaks loop

    ${xml::NextSiblingElement} "setting" $0 $1
    StrCmp $1 "0" loopRemoteCoreServiceSettingBaseUrl AppConfigFailed ;loops unless an error occurred

    foundRemoteCoreServiceSettingBaseUrl:
    ${xml::FirstChildElement} "value" $0 $1
    ${xml::SetText} "net.tcp://$INI_ESHOST:$INI_ESPORT/" $1
    Return

    ##RemoteCoreServiceProvider
    ${xml::GotoPath} "/configuration/applicationSettings/ClearCanvas.Common.ExtensionSettings/setting/value/extensions" $0
    ${xml::FirstChildElement} "extension" $0 $1

    loopRemoteCoreServiceProvider:
    ${xml::GetAttribute} "class" $0 $1
    StrCmp "ClearCanvas.Enterprise.Common.RemoteCoreServiceProvider, ClearCanvas.Enterprise.Common" $0 foundRemoteCoreServiceProvider ;breaks loop
    ${xml::NextSiblingElement} "extension" $0 $1
    StrCmp $1 "0" loopRemoteCoreServiceProvider AppConfigFailed ;loops unless an error occurred

    foundRemoteCoreServiceProvider:
    ${xml::SetAttribute} "enabled" "true" $0
    
    AppConfigFailed:
      MessageBox MB_OK|MB_ICONSTOP "A failure has occurred on service component configuration. Review the installation log for details.  A reinstallation will be required."
FunctionEnd

Function HandlePriorInstall
  ;initialization
  StrCpy $OLDWORKSTATIONDETECTED "False"
  
  ;At one point the installer would remove an older Ris Client if it has been installed
  ;To simplify it just detects and prompts user to remove if detected
  ;Check for older Ris Client
  ReadRegStr $OLDRISUNINSTALLSTRING HKLM \
  "Software\Microsoft\Windows\CurrentVersion\Uninstall\ClearCanvas Ris Client" \
  "UninstallString"
  ${If} $OLDRISUNINSTALLSTRING != "" 
    MessageBox MB_OK|MB_ICONSTOP \
    "The Installer has detected that the a version of ClearCanvas Ris Client is installed. $\n$\nTo continue with this installation please first uninstall ClearCanvas Ris Client." \
    /SD IDOK
    Abort
  ${EndIf}
  
  ;Check for older StandAlone Viewer or IRV
  ReadRegStr $OLDWORKSTATIONUNINSTALLSTRING ${PRODUCT_UNINST_ROOT_KEY} \
  "${PRODUCT_UNINST_KEY}" \
  "UninstallString"
  ${If} $OLDWORKSTATIONUNINSTALLSTRING != "" 
    StrCpy $OLDWORKSTATIONDETECTED "True"
  ${Else} 
    StrCpy $OLDWORKSTATIONDETECTED "False"
  ${EndIf}   

  ${IfThen} $OLDWORKSTATIONDETECTED == "False" ${|} GoTo noPriorInstall ${|}
    
  ## Get file version
  ;Making use of the Uninstall path to build the path to the exe
  StrCpy $R1 $OLDWORKSTATIONUNINSTALLSTRING -10
  GetDllVersion "$R1ClearCanvas.Desktop.Executable.exe" $R2 $R3
  IntOp $R4 $R2 / 0x00010000
  IntOp $R5 $R2 & 0x0000FFFF
  IntOp $R6 $R3 / 0x00010000
  IntOp $R7 $R3 & 0x0000FFFF
  ;StrCpy $R3 "$R4.$R5.$R6.$R7"

  IntCmp ${MAJOR_VERSION} $R4 +1 installedVersionHigher installedVersionLower
  IntCmp ${MINOR_VERSION} $R5 +1 installedVersionHigher installedVersionLower
  IntCmp ${BUILD_NUMBER} $R6 +1 installedVersionHigher installedVersionLower
  IntCmp ${REVISION_NUMBER} $R7 sameVersionInstalled installedVersionHigher installedVersionLower


  installedVersionHigher:
  MessageBox MB_OK|MB_ICONSTOP \
  "The Installer has detected that a NEWER version of ${PRODUCT_NAME} is already installed. $\n$\nTo continue with this installation please first uninstall ${PRODUCT_NAME}." /SD IDOK
  Abort

  sameVersionInstalled:
  MessageBox MB_OK|MB_ICONSTOP \
  "The Installer has detected that the SAME version of ${PRODUCT_NAME} is already installed. $\n$\nTo continue with this installation please first uninstall ${PRODUCT_NAME}." /SD IDOK
  Abort

  installedVersionLower:
  MessageBox MB_OKCANCEL|MB_ICONEXCLAMATION \
  "Installer has detected that an older ${PRODUCT_NAME} version is already installed. $\n$\nClick `OK` to proceed with removing this version or `Cancel` to cancel this upgrade." /SD IDOK \
  IDOK beginUninstall
  Abort

  ;Run the uninstaller
  beginUninstall:
  StrCpy $OLDINSTALLDIR $R1
  
  ;Save app.config files    
  IfFileExists "$OLDINSTALLDIRClearCanvas.Desktop.Executable.exe.config" 0 configFilesNotPresent
  IfFileExists "$OLDINSTALLDIRClearCanvas.Server.ShredHostService.exe.config" configFilesPresent configFilesNotPresent  
  
  configFilesNotPresent:
  MessageBox MB_OK|MB_ICONSTOP "Installer cannot access configuration files from the older ${PRODUCT_NAME} install so it cannot be upgraded. $\n$\nTo continue with this installation please first uninstall the older ${PRODUCT_NAME}." /SD IDOK
  Abort
  
  configFilesPresent:
  CopyFiles /SILENT "$OLDINSTALLDIRClearCanvas.Desktop.Executable.exe.config" $TEMP\ClearCanvas.Desktop.Executable.exe.config
  CopyFiles /SILENT "$OLDINSTALLDIRClearCanvas.Server.ShredHostService.exe.config" $TEMP\ClearCanvas.Server.ShredHostService.exe.config

;Save Serverlist
  StrCmp $INI_NEWSERVERLIST "True" +4 ;Skip block if silent option to allow new server list is true
    IfFileExists "$OLDINSTALLDIRDicomAEServers.xml" 0 +3
    CopyFiles /SILENT "$OLDINSTALLDIRDicomAEServers.xml" $TEMP\DicomAEServers.xml
    StrCpy $RESTOREDICOMAESERVERS "True"
  
  ;Save old database
  IfFileExists "$OLDINSTALLDIRdicom_datastore\viewer.sdf" 0 +3
  CopyFiles /SILENT "$OLDINSTALLDIRdicom_datastore\viewer.sdf" $TEMP\viewer.sdf
  StrCpy $RESTOREDATABASE "True"
  
  ClearErrors
  IfSilent "" +3
    ExecWait '$OLDWORKSTATIONUNINSTALLSTRING /S _?=$R1' $R2
    Goto uninstallAttempted

  ExecWait '$OLDWORKSTATIONUNINSTALLSTRING _?=$R1' $R2

  uninstallAttempted:
  StrCmp $R2 "0" done failedUninstall
  Abort


  IfErrors failedUninstall
    ;You can either use Delete /REBOOTOK in the uninstaller or add some code
    ;here to remove the uninstaller. Use a registry key to check
    ;whether the user has chosen to uninstall. If you are using an uninstaller
    ;components page, make sure all sections are uninstalled.
  failedUninstall:
  MessageBox MB_OK|MB_ICONSTOP "Installation cannot proceed because there was a problem with the uninstall of existing products." /SD IDOK
  Abort

  done:
  Delete "$OLDWORKSTATIONUNINSTALLSTRING"
  Return

  noPriorInstall:

  Return
FunctionEnd

#un.Function Includes
!insertmacro RemoveService "ClearCanvas.Server.ShredHostService.exe" "${PRODUCT_SERVICE_NAME}"


Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK "$(^Name) was successfully removed from your computer." /SD IDOK
FunctionEnd

Function un.onInit
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Are you sure you want to completely remove $(^Name) and all of its components?" /SD IDYES IDYES +2
  Abort
FunctionEnd

Function un.KillPro
   StrCpy $0 "ClearCanvas.Desktop.Executable.exe"
   DetailPrint "Searching for processes called '$0'"
   KillProc::FindProcesses
   StrCmp $1 "-1" killError
   DetailPrint "-> Found $0 processes"

   StrCmp $0 "0" completed
   Sleep 1500

   StrCpy $0 "ClearCanvas.Desktop.Executable.exe"
   DetailPrint "Killing all processes called '$0'"
   KillProc::KillProcesses
   StrCmp $1 "-1" killError
   DetailPrint "-> Killed $0 processes, failed to kill $1 processes"
   Sleep 1500

   Goto completed

   killError:
   DetailPrint "-> Error: The application is running and cannot be stopped. Please close before uninstalling"
   Abort

   completed:
   DetailPrint "Uninstalling"

FunctionEnd


Function un.KillConnector
   StrCpy $0 "eFilmConnector.exe"
   DetailPrint "Searching for processes called '$0'"
   KillProc::FindProcesses
   StrCmp $1 "-1" killError
   DetailPrint "-> Found $0 processes"

   StrCmp $0 "0" completed

   StrCpy $0 "eFilmConnector.exe"
   DetailPrint "Killing all processes called '$0'"
   KillProc::KillProcesses
   StrCmp $1 "-1" killError
   DetailPrint "-> Killed $0 processes, failed to kill $1 processes"
   Sleep 500

   Goto completed

   killError:
   DetailPrint "-> Error: The application is running and cannot be stopped. Please close before uninstalling"
   Abort

   completed:
   DetailPrint "Uninstalling"

FunctionEnd

Section Uninstall
  SetShellVarContext all

  ${If} ${PLATFORM_NAME} == "x86"
    Call un.KillPro
  ${ElseIf} ${PLATFORM_NAME} == "x64"
    MessageBox MB_OK|MB_ICONEXCLAMATION "Ensure that all instances of ${PRODUCT_NAME} are closed before continuing with the uninstall." /SD IDOK
  ${EndIf}

  Call un.RemoveService
  Delete "$INSTDIR\${PRODUCT_NAME}.url"
  Delete "$INSTDIR\uninst.exe"

  nsExec::ExecToLog '"%WINDIR%\Microsoft.NET\Framework\v2.0.50727\RegAsm.exe" /unregister "$INSTDIR\facade\ClearCanvas.ImageViewer.Services.EFilmAutomationFacade.dll"'
  ${IfThen} ${PLATFORM_NAME} == "x86" ${|} Call un.KillConnector ${|}
  RMDir /r "$INSTDIR\facade"
  RMDir /r "$INSTDIR\badfiles"
  RMDir /r "$INSTDIR\dicom_interim"
  RMDir /r "$INSTDIR\dicom_datastore"
  RMDir "$INSTDIR\filestore"
  RMDir /r "$INSTDIR\plugins"
  RMDir /r "$INSTDIR\common"
  RMDir /r "$INSTDIR\manifest"
  Delete "${PRODUCT_STARTMENU_FOLDER}\Uninstall.lnk"
  Delete "${PRODUCT_STARTMENU_FOLDER}\Website.lnk"
  Delete "$DESKTOP\${PRODUCT_SHORTCUT_NAME}.lnk"
  Delete "${PRODUCT_STARTMENU_FOLDER}\${PRODUCT_SHORTCUT_NAME}.lnk"
  RMDir "${PRODUCT_STARTMENU_FOLDER}"

  Delete "$INSTDIR\*.*"

  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
  SetAutoClose true

  StrCpy $0 "$INSTDIR\uninstall.log"
  Push $0
  Call un.DumpLog
SectionEnd
