; Script generated by the HM NIS Edit Script Wizard.

; defines required for upgrade process
; the '1 ##VERSION string is used by the build script as a token
!define MAJOR_VERSION 1 ##MAJOR
!define MINOR_VERSION 1 ##MINOR
!define BUILD 1 ##BUILDNUMBER
!define REVISION 1 ##REVISIONNUMBER

; defines the most recent prior build that the installer is capable of
; performing a database upgrade on
!define MOSTRECENTPRIORVERSION "2.1.13853.41002" # RIS 2.1 RC3

!define PRODUCT_NAME "ClearCanvas Ris Server"
!define PRODUCT_VERSION "${MAJOR_VERSION}.${MINOR_VERSION}"
!define PRODUCT_PUBLISHER "ClearCanvas Inc"
!define PRODUCT_WEB_SITE "http://www.clearcanvas.ca"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"

!ifdef OFFICIALRELEASEBUILD
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"
!define PRODUCT_STARTMENU_FOLDER "$SMPROGRAMS\ClearCanvas\${PRODUCT_NAME}"
!define PRODUCT_SERVICE_NAME "${PRODUCT_NAME} Shred Host Service"
!define PRODUCT_VDIR_NAME "RIS"
!define PRODUCT_DB_NAME "RISDB"
!define PRODUCT_DB_USER "risuser"
!define PRODUCT_DB_PASS "rispass"
!define PRODUCT_SHORTCUT_NAME "${PRODUCT_NAME}"
!define PRODUCT_INSTALL_DIR "${PLATFORM_PROGRAMFILES}\ClearCanvas\${PRODUCT_NAME}"
!else
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME} ${RELEASELABEL}"
!define PRODUCT_STARTMENU_FOLDER "$SMPROGRAMS\ClearCanvas\${PRODUCT_NAME} ${RELEASELABEL}"
!define PRODUCT_SERVICE_NAME "${PRODUCT_NAME} Shred Host Service ${RELEASELABEL}"
!define PRODUCT_VDIR_NAME "RIS${RELEASELABEL}"
!define PRODUCT_DB_NAME "RISDB${RELEASELABEL}"
!define PRODUCT_DB_USER "risuser${RELEASELABEL}"
!define PRODUCT_DB_PASS "rispass${RELEASELABEL}"
!define PRODUCT_SHORTCUT_NAME "${PRODUCT_NAME} ${RELEASELABEL}"
!define PRODUCT_INSTALL_DIR "${PLATFORM_PROGRAMFILES}\ClearCanvas\${PRODUCT_NAME} ${RELEASELABEL}"
!endif

!ifdef RELEASELABEL
  !define INSTALLER_DISPLAY_NAME "${PRODUCT_NAME} ${PRODUCT_VERSION} ${RELEASELABEL}"
!else
  !define INSTALLER_DISPLAY_NAME "${PRODUCT_NAME} ${PRODUCT_VERSION}"
!endif

;define for common NSISIncludes Path
!define NSISINCLUDES "..\..\NSISIncludes"

; controls whether or not to enable Enterprise screens
!define ENTERPRISEMODE True ##ENTERPRISEMODE

!include "${NSISINCLUDES}\dotNETCC.nsh"
!include "${NSISINCLUDES}\DumpLog.nsh"
!include "${NSISINCLUDES}\FileFunc.nsh"
!include "${NSISINCLUDES}\GetDbVersion.nsh"
!include "${NSISINCLUDES}\HandlePriorInstall.nsh"
!include "${NSISINCLUDES}\LogicLib.nsh"
!include "${NSISINCLUDES}\MUI.nsh"
!include "${NSISINCLUDES}\RemoveService.nsh"
!include "${NSISINCLUDES}\Replacement.nsh"
!include "${NSISINCLUDES}\Sections.nsh"
!include "${NSISINCLUDES}\servicelib.nsh"
!include "${NSISINCLUDES}\VDirectory.nsh"
!include "${NSISINCLUDES}\XML.nsh"

; MUI Settings
!define MUI_ABORTWARNING
!define MUI_ICON "${NSISDIR}\Contrib\Graphics\Icons\modern-install.ico"
!define MUI_UNICON "${NSISDIR}\Contrib\Graphics\Icons\modern-uninstall.ico"

; Platform-specific Settings (x86 vs. x64)
!ifdef PLATFORM_X64
!define PLATFORM_NAME "x64"
!define PLATFORM_PROGRAMFILES $PROGRAMFILES64
!define PLATFORM_SUBFOLDER "x64"
!define PLATFORM_VC2008 "{350AA351-21FA-3270-8B7A-835434E766AD}"
!define PLATFORM_VC2008SP1 "{8220EEFE-38CD-377E-8595-13398D740ACE}"
!else
!define PLATFORM_X64 "false"
!define PLATFORM_NAME "x86"
!define PLATFORM_PROGRAMFILES $PROGRAMFILES
!define PLATFORM_SUBFOLDER ""
!define PLATFORM_VC2008 "{FF66E9F6-83E7-3A3E-AF14-8DE9A809A6A4}"
!define PLATFORM_VC2008SP1 "{9A25302D-30C0-39D9-BD6F-21E6EC160475}"
!endif


; Distribution Folder Root Path
!define DISTRIBUTIONROOT "..\..\..\..\Distribution\Build\RisServer\${PLATFORM_SUBFOLDER}\Release"
!define CLIENTDISTRIBUTIONROOT "..\..\..\..\Distribution\Build\RisClient_FullViewer\${PLATFORM_SUBFOLDER}\Release"

; Check for .NET Framework defines
!define DOTNET_VERSION_REQ "3"
!define CHECKONLY "True" ;If flag is set True then only the check for .NET will happen, if not present will Abort Install

; Welcome page
!insertmacro MUI_PAGE_WELCOME
; License page
!insertmacro MUI_PAGE_LICENSE "..\..\..\..\License.rtf"
; Components page
!define MUI_PAGE_CUSTOMFUNCTION_LEAVE VerifyComponent
!insertmacro MUI_PAGE_COMPONENTS
; Directory page
!insertmacro MUI_PAGE_DIRECTORY
; Custom page - get database admin login
Page custom PageDatabaseAdmin ValidatePageDatabaseAdmin
; Custom page - fetches database info
Page custom PageDatabaseInstall ValidatePageDatabaseInstall
; Custom page - get database connection info
Page custom PageDatabaseConnectOnly ValidatePageDatabaseConnectOnly
; Custom page - fetches ris server info
Page custom PageRisServer ValidatePageRisServer
; Custom page - fetches enterprise server info
Page custom PageEnterpriseServer ValidatePageEnterpriseServer
; Custom page - asks whether to import sample data
#Page custom PageSampleDataImport ValidatePageSampleDataImport
; Instfiles page
!insertmacro MUI_PAGE_INSTFILES
; Finish page
!insertmacro MUI_PAGE_FINISH

; Uninstaller pages
!insertmacro MUI_UNPAGE_INSTFILES

; Language files
!insertmacro MUI_LANGUAGE "English"

; Reserve files
ReserveFile "PageDatabaseAdmin.ini"
ReserveFile "PageDatabaseInstall.ini"
ReserveFile "PageDatabaseConnectOnly.ini"
ReserveFile "PageRisSparrowServer.ini"
ReserveFile "PageEnterpriseServer.ini"
!insertmacro MUI_RESERVEFILE_INSTALLOPTIONS
; MUI end ------

; Variables
; Collected in PageDatabaseAdmin.ini
Var INI_ADMINID
Var INI_ADMINPASS
Var INI_HOSTINSTANCE
Var INI_2SLASHHOSTINSTANCE
; Collected in PageDatabaseInstall.ini
; or Collected from PageDatabaseConnectOnly.ini
Var INI_DBNAME
Var INI_USERID
Var INI_USERPASS
; Collected in PageRisSparrowServer.ini
Var INI_RISHOST
Var INI_RISPORT
Var INI_SPARROWHOST
Var INI_SPARROWPORT
; Collected in PageEnterpriseServer.ini
Var INI_ESHOST
Var INI_ESPORT
Var INI_ESUSER
Var INI_ESPASS
; Hardcoded for Virtual Directory folder name
Var VDIRNAME
; Various Flags and uninstall variables
Var OLD_DB_EXISTS
Var PRIOR_DB_VERSION
Var SAME_DB_VERSION
Var OLD_DB_NO_UPGRADE
Var PERFORM_DB_UPGRADE
Var PERFORM_ASSEMBLY_UPGRADE
Var UNINSTALLER_STRING
Var OLDINSTALLDIR
Var OLDRISDETECTED
; For Silent Install/Uninstaller
Var INI_REMOVEDB

Name "${INSTALLER_DISPLAY_NAME}"
OutFile "${PRODUCT_NAME}.exe"
InstallDir "${PRODUCT_INSTALL_DIR}"
InstallDirRegKey HKLM "${PRODUCT_DIR_REGKEY}" ""
ShowInstDetails show
ShowUnInstDetails show


  Section "-UninstallOldVersion"
    ${If} $PERFORM_ASSEMBLY_UPGRADE == "True"
      ClearErrors
      IfFileExists "$UNINSTALLER_STRING" +1 done
      ExecWait '$UNINSTALLER_STRING /S /REMOVEDB=$R4 _?=$INSTDIR' $R5
      IfErrors failedUninstall
      StrCmp $R5 "0" done failedUninstall      
    ${Else}
      #Don't need to upgrade
      Return
    ${EndIf}
    
    failedUninstall:
      MessageBox MB_OK|MB_ICONSTOP "Installation cannot proceed because there was a problem with the uninstall of the previous version."
      Quit
      
    done:
  SectionEnd
  
#Core Components
  Section "-InstallDir"
    SetOutPath "$INSTDIR"
    SetOverwrite ifnewer
    File /x *.bat /x *.pdb  "${DISTRIBUTIONROOT}\*.*"
  SectionEnd

  Section "-PluginDir"
    SetOutPath "$INSTDIR\plugins"
    File /r /x *.svn* "${DISTRIBUTIONROOT}\plugins\*.*"
  SectionEnd

  Section "-CommonDir"
    SetOutPath "$INSTDIR\common"
    File /r /x *.svn* "${DISTRIBUTIONROOT}\common\*.*"
  SectionEnd

  Section "-ClientFiles"
    SetOutPath "$INSTDIR\clientfiles"
    File /r /x *.svn* /x *.chm* "${CLIENTDISTRIBUTIONROOT}\*.*"
  SectionEnd

  
  Section "-SetShredHostAppConfigEnterpriseSettings"
    ${IfThen} ${ENTERPRISEMODE} == False ${|} Return ${|}

    DetailPrint "Configuring Shredhost Config For Enterprise Server Connection"
    ${xml::LoadFile} "$INSTDIR\Clearcanvas.Server.ShredHostService.exe.config" $0
    
    Call SetAppConfigEnterpriseSettings
    
    Call SetAppConfigHostnameAndPortSettings
    
    Call SetAppConfigHibernateSettings
    
    ${xml::SaveFile} "$INSTDIR\Clearcanvas.Server.ShredHostService.exe.config" $0
    ${xml::Unload}
    Return

  SectionEnd
  
  Section "-SetExeAppConfigEnterpriseSettings"
    ${IfThen} ${ENTERPRISEMODE} == False ${|} Return ${|}

    DetailPrint "Configuring Exe Config For Enterprise Server Connection"
    ${xml::LoadFile} "$INSTDIR\ClearCanvas.Ris.Server.Executable.exe.config" $0

    Call SetAppConfigEnterpriseSettings

    Call SetAppConfigHostnameAndPortSettings

    Call SetAppConfigHibernateSettings

    ${xml::SaveFile} "$INSTDIR\ClearCanvas.Ris.Server.Executable.exe.config" $0
    ${xml::Unload}
    Return

  SectionEnd

  Section "-SetClientExeAppConfigEnterpriseSettings"
    ${IfThen} ${ENTERPRISEMODE} == False ${|} Return ${|}

    DetailPrint "Configuring Client-side Exe Config For Enterprise Server Connection"
    ${xml::LoadFile} "$INSTDIR\clientfiles\ClearCanvas.Desktop.Executable.exe.config" $0

    Call SetClientAppConfig

    ${xml::SaveFile} "$INSTDIR\clientfiles\ClearCanvas.Desktop.Executable.exe.config" $0
    ${xml::Unload}
    Return

  SectionEnd
  
Section "-Scripts"
  SetOutPath "$INSTDIR\scripts"
  File /r /x *.svn* "..\..\..\..\Utilities\RisDatabaseGenerator\SqlScriptTemplates\*.*"
  File /r /x *.svn* "..\..\..\..\Utilities\RisDatabaseGenerator\JscriptTemplates\*.*"
  File /r /x *.svn* "..\..\Common\Utilities\*.*"
SectionEnd

Section "-GenerateCreateDBScript"
  DetailPrint "Generating database creation script"
  GetFunctionAddress $R0 ReplaceInCreateDB
  Push $R0
  Push "$INSTDIR\scripts\CreateDB.sql"
  Call ReplaceInFile
SectionEnd

Section "-GenerateUserScript"
  DetailPrint "Generating user creation script"
  GetFunctionAddress $R0 ReplaceInUser
  Push $R0
  Push "$INSTDIR\scripts\User.sql"
  Call ReplaceInFile
SectionEnd

Section "-GenerateRemoveDBScript"
  DetailPrint "Generating database removal script for uninstaller"
  GetFunctionAddress $R0 ReplaceInRemoveDB
  Push $R0
  Push "$INSTDIR\scripts\RemoveDB.sql"
  Call ReplaceInFile
SectionEnd

  Section "-GenerateRemoveUserScript"
  DetailPrint "Generating Ris user removal script for uninstaller"
  GetFunctionAddress $R0 ReplaceInRemoveUser
  Push $R0
  Push "$INSTDIR\scripts\RemoveUser.sql"
  Call ReplaceInFile
SectionEnd

Section "-GenerateDBJScript"
  DetailPrint "Generating script utility"
  GetFunctionAddress $R0 ReplaceInDBJscript
  Push $R0
  Push "$INSTDIR\scripts\db.js"
  Call ReplaceInFile
SectionEnd

Section "-GenerateDBFileJScript"
  DetailPrint "Generating file script utility"
  GetFunctionAddress $R0 ReplaceInDBJscript ;for now they are the same
  Push $R0
  Push "$INSTDIR\scripts\dbfile.js"
  Call ReplaceInFile
SectionEnd

SectionGroup /e "Database Components" GRPDB
  LangString DESC_GRPDB ${LANG_ENGLISH} "The Ris database components.  Creates or upgrades database and necessary data."
  Section "-CreateDBAndUsers"
    DetailPrint "Creating database and users..."
    nsExec::ExecToLog '"cscript" "$INSTDIR\scripts\dbfile.js" "$INSTDIR\scripts\CreateDB.sql"'
    nsExec::ExecToLog '"cscript" "$INSTDIR\scripts\dbfile.js" "$INSTDIR\scripts\User.sql"'
  SectionEnd

  Section "-CreateTables"
    DetailPrint "Generating table script.  This may take a few seconds..."
    nsExec::ExecToLog '"$INSTDIR\ClearCanvas.Ris.Server.Executable.exe" ClearCanvas.Enterprise.Hibernate.DdlWriter.DdlWriterApplication /ix /fki /enums:hard /out:"$INSTDIR\model.ddl"'
    DetailPrint "Creating database tables..."
    nsExec::ExecToLog '"cscript" "$INSTDIR\scripts\dbfile.js" "$INSTDIR\model.ddl"'
  SectionEnd

  Section "-VersionDB"
    FileOpen $0 "$TEMP\risDbVersion.ddl" w
    FileWrite $0 "create table $INI_DBNAME.dbo.DatabaseVersion_ (Major_ NVARCHAR(5) not null, Minor_ NVARCHAR(5) not null, Build_ NVARCHAR(5) not null, Revision_ NVARCHAR(5) not null,)$\n"
    FileWrite $0 "insert into $INI_DBNAME.dbo.DatabaseVersion_ ( Major_, Minor_, Build_, Revision_ ) values ( '${MAJOR_VERSION}', '${MINOR_VERSION}', '${BUILD}', '${REVISION}')"
    FileClose $0
    
    DetailPrint "Versioning database..."
    nsExec::ExecToLog '"cscript" "$INSTDIR\scripts\dbfile.js" "$TEMP\risDbVersion.ddl"'
  SectionEnd
      
  Section "-CheckForProperDbCreation"
    Push "$INI_DBNAME"
    Push "$INI_ADMINID"
    Push "$INI_ADMINPASS"
    Push "$INI_HOSTINSTANCE"
    Call GetDBVersion
    Pop $1

    ${If} $1 != ${MAJOR_VERSION}.${MINOR_VERSION}.${BUILD}.${REVISION}
       MessageBox MB_ICONSTOP|MB_OK "The installer has failed to create the database.  Aborting Install.  Check install.log for details."

       StrCpy $0 "$INSTDIR\install.log"
       Push $0
       Call DumpLog
       Quit
    ${EndIf}

  SectionEnd

  Section "-UpdateAccNum"
    FileOpen $0 "$TEMP\Accnum.ddl" w
    FileWrite $0 "UPDATE $INI_DBNAME.dbo.AccessionSequence_ SET NextValue_ = 850000000"
    FileClose $0

    DetailPrint "Updating starting Accession Number..."
    nsExec::ExecToLog '"cscript" "$INSTDIR\scripts\dbfile.js" "$TEMP\Accnum.ddl"'
  SectionEnd

SectionGroupEnd

Section "-Database Upgrade" SECUPGRADEDB
  ${IfThen} "$PERFORM_DB_UPGRADE" != "True" ${|} Return ${|}
  
  SetOutPath "$INSTDIR\scripts\upgrade"
  File /r /x *.svn* "..\..\..\..\..\..\Zoo\Squirrel\JDMI\RisServer\Upgrade\*.*"
  
  DetailPrint "Upgrading database..."
  
  nsExec::ExecToLog '"$INSTDIR\scripts\SSEUtil.exe" -m -s $INI_HOSTINSTANCE -user $INI_ADMINID -pwd $INI_ADMINPASS -run "$INSTDIR\scripts\upgrade\UpgradeFrom_${MOSTRECENTPRIORVERSION}.sql"'
  
  Pop $0
  StrCmp $0 "1" upgradeFail
  StrCmp $0 "0" upgradeSuccess

upgradeFail:
  DetailPrint "The attempt at upgrading the database failed in some way. Please see logs for more details."
  MessageBox MB_OK|MB_ICONSTOP "The attempt at upgrading the database failed in some way. Please see logs for more details."
  Return
  
upgradeSuccess:
    FileOpen $0 "$TEMP\risDbVersion.ddl" w
    FileWrite $0 "delete from $INI_DBNAME.dbo.DatabaseVersion_$\n"
    FileWrite $0 "insert into $INI_DBNAME.dbo.DatabaseVersion_ ( Major_, Minor_, Build_, Revision_ ) values ( '${MAJOR_VERSION}', '${MINOR_VERSION}', '${BUILD}', '${REVISION}')"
    FileClose $0

    DetailPrint "Updating database version database..."
    nsExec::ExecToLog '"cscript" "$INSTDIR\scripts\dbfile.js" "$TEMP\risDbVersion.ddl"'
    
  DetailPrint "Database upgrade successful"
SectionEnd


SectionGroup /e "Service Components" GRPSRV
  LangString DESC_GRPSRV ${LANG_ENGLISH} "Installs Ris services."
  Section "Install Shred Host Service" SRVHOST
    SectionIn RO
    !insertmacro SERVICE "create" "${PRODUCT_SERVICE_NAME}" \
    "path=$INSTDIR\Clearcanvas.Server.ShredHostService.exe -service;autostart=1;display=${PRODUCT_SERVICE_NAME};"

    ;Sets description
    WriteRegStr HKLM \
    "SYSTEM\CurrentControlSet\Services\${PRODUCT_SERVICE_NAME}" \
    "Description" "Hosts the Ris Server Threads (Shreds)."
  SectionEnd
  LangString DESC_SRVHOST ${LANG_ENGLISH} "Ris Shredhost windows service."

  Section "Ris Server" SRVRIS
  # Intentionally left empty
  SectionEnd
  LangString DESC_SRVRIS ${LANG_ENGLISH} "The Ris Service."

  Section "Sparrow Server" SRVSPARROW
  # Intentionally left empty
  SectionEnd
  LangString DESC_SRVSPARROW ${LANG_ENGLISH} "The Sparrow Server Shred."
  
  Section "Sparrow Publication Component" SRVSPRPUB
  # Intentionally left empty
  SectionEnd
  LangString DESC_SRVSPRPUB ${LANG_ENGLISH} "Must install with Ris Server if running separate instance of Sparrow Only Shredhost."
SectionGroupEnd
  
  #Required as a pre-requisite to running the client-side SetupApplication
  Section "-C Runtime Install"
    SectionIn RO
    # Visual C++ 2008
    ;Checks if it's already installed and skips if it is
    ReadRegDword $0 HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PLATFORM_VC2008}" "Version"
    ${IfNotThen} "$0" == "" ${|} goto sp1 ${|}

    SetOutPath "$TEMP\CC2008"
    File "..\..\..\Redistributables\Visual C++ 2008\vcredist_${PLATFORM_NAME}.exe"
    DetailPrint "Pausing installation while runtime components of Visual C++ 2008 Libraries are installed."

    Push $0
    ExecWait '$TEMP\CC2008\Vcredist_${PLATFORM_NAME}.exe /Q /l "$INSTDIR\logs\vcredist_${PLATFORM_NAME}.log"' $0
    ${If} $0 != 0
      MessageBox MB_OK "The installation of the runtime components of Visual C++ 2008 Libraries has failed.  ${PRODUCT_NAME} requires that Visual C++ 2008 is installed.  Please manually perform the install of the Microsoft Visual C++ 2008 Redistributable Package from Micosoft's Website before using ${PRODUCT_NAME}." /SD IDOK
    ${EndIf}

    sp1:
    # Visual C++ 2008 SP1
    ;Checks if it's already installed and skips if it is
    ReadRegDword $0 HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PLATFORM_VC2008SP1}" "Version"
    ${IfNotThen} "$0" == "" ${|} Return ${|}

    SetOutPath "$TEMP\CC2008SP1"
    File "..\..\..\Redistributables\Visual C++ 2008 SP1\vcredist_${PLATFORM_NAME}.exe"
    DetailPrint "Pausing installation while runtime components of Visual C++ 2008 SP1 Libraries are installed."

    Push $0
    ExecWait '$TEMP\CC2008SP1\Vcredist_${PLATFORM_NAME}.exe /Q /l "$INSTDIR\logs\vcredistSP1_${PLATFORM_NAME}.log"' $0
    ${If} $0 != 0
      MessageBox MB_OK "The installation of the runtime components of Visual C++ 2008 SP1 Libraries has failed.  ${PRODUCT_NAME} requires that Visual C++ 2008 SP1 is installed..  Please manually perform the install of the Microsoft Visual C++ 2008 SP1 Redistributable Package from Micosoft's Website before using ${PRODUCT_NAME}." /SD IDOK
    ${EndIf}
  SectionEnd
  
# Service Removal Sections
  Section /o "-Remove Sparrow Server" SRV-SPARROW
    Delete "$INSTDIR\plugins\ClearCanvas.Sparrow.Server.dll"
    Delete "$INSTDIR\plugins\ClearCanvas.Sparrow.Services.dll"
    Delete "$INSTDIR\plugins\ClearCanvas.Sparrow.Shreds.Adaptation.dll"
    
    #The server now performs the import of the client-side tokens/settings meta-data.  If the installer does not deploy the Sparrow components
    #then chances are the sparrow pre-requitsites have not been installed and so running the setup application on the client-side will fail unless we remove the sparrow plugins first
    Delete "$INSTDIR\clientfiles\plugins\*Sparrow*"
  SectionEnd
  
  Section /o "-Remove Sparrow Publication Plugins" SRV-SPRPUB
    Delete "$INSTDIR\plugins\ClearCanvas.Sparrow.Common.dll"
    Delete "$INSTDIR\plugins\ClearCanvas.Ris.Shreds.Publication.AdaptationProcessor.dll"
  SectionEnd
  
  #Enterprise Server Initialization
  #Placed in this section in case someone opts to not install the Sparrow Server 
  Section "-Initialize Enterprise Server"
    ${IfThen} ${ENTERPRISEMODE} == False ${|} Return ${|}
    DetailPrint "Importing Ris Server and Client authority tokens into the Enterprise Server..."
    nsExec::ExecToLog '"$INSTDIR\ClearCanvas.Ris.Server.Executable.exe" ClearCanvas.Enterprise.Common.Setup.SetupApplication /suid:$INI_ESUSER /spwd:$INI_ESPASS /g- /m-'
    nsExec::ExecToLog '"$INSTDIR\clientfiles\ClearCanvas.Desktop.Executable.exe" ClearCanvas.Enterprise.Common.Setup.SetupApplication /suid:$INI_ESUSER /spwd:$INI_ESPASS /g- /m-'
  SectionEnd
  
  #Placed in this section in case someone opts to not install the Sparrow Server 
  Section "-MigrationOnUpgradeOrTokenAndSettingsImport"  
      ${IfThen} $PERFORM_ASSEMBLY_UPGRADE != "True" ${|} Return ${|}
      ###Invoke Settings Migration Stuff here
      ;Migration of Desktop app.config      
      nsExec::ExecToLog '"$INSTDIR\ClearCanvas.Ris.Server.Executable.exe" ClearCanvas.Enterprise.Common.Setup.SetupApplication /g- /suid:$INI_ESUSER /spwd:$INI_ESPASS /p:$TEMP\RISServer_ClearCanvas.Ris.Server.Executable.exe.config'
      
      ;Migration of ShredHost app.config      
      nsExec::ExecToLog '"$INSTDIR\ClearCanvas.Server.ShredHostService.exe" /m:$TEMP\RISServer_ClearCanvas.Server.ShredHostService.exe.config'
	  
	  ;Client-side
	  nsExec::ExecToLog '"$INSTDIR\clientfiles\ClearCanvas.Desktop.Executable.exe" ClearCanvas.Enterprise.Common.Setup.SetupApplication /suid:$INI_ESUSER /spwd:$INI_ESPASS /g-'
  SectionEnd
  
  Section /o "-Remove Ris Server Plugin" SRV-RIS
    Delete "$INSTDIR\plugins\ClearCanvas.Ris.Server.dll"
  SectionEnd
  
  Section /o "-No Service At All" SRV-ALL
    RMDir /r "$INSTDIR\plugins"
    RMDir /r "$INSTDIR\common"
    Delete "$INSTDIR\model.ddl"
    Delete "$INSTDIR\hibernate.cfg.xml"
    Delete "$INSTDIR\actionmodels.xml"
    Delete "$INSTDIR\Logging.config"
    Delete "$INSTDIR\ClearCanvas.Ris.Server.Executable.exe.config"
    Delete "$INSTDIR\ClearCanvas.Ris.Server.Executable.exe"
    Delete "$INSTDIR\ClearCanvas.Server.ShredHostService.exe.config"
    Delete "$INSTDIR\ClearCanvas.Server.ShredHostService.exe"
  SectionEnd

SectionGroup /e "Web Components" GRPWEB
  LangString DESC_GRPWEB ${LANG_ENGLISH} "Ris web pages."
  Section "-WebDir"
    SetOutPath "$INSTDIR\web"
    File /r /x *.svn* "..\..\..\..\Ris\web\*.*"
  SectionEnd

  Section "-CreateVirtualDirectory"
    DetailPrint "Creating virtual directory..."
    StrCpy $VDIRNAME "${PRODUCT_VDIR_NAME}"
    Call CreateVDir

    ;Adding Mime Type for Dymo
    !insertmacro RegisterMimeType ".lwt" "text/plain"
    ;Adding Mime Type for Sparrow
    !insertmacro RegisterMimeType ".sgf" "text/plain"
  SectionEnd
SectionGroupEnd

!insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN
  !insertmacro MUI_DESCRIPTION_TEXT ${SRVRIS} $(DESC_SRVRIS)
  !insertmacro MUI_DESCRIPTION_TEXT ${SRVSPARROW} $(DESC_SRVSPARROW)
  !insertmacro MUI_DESCRIPTION_TEXT ${SRVSPRPUB} $(DESC_SRVSPRPUB)
  !insertmacro MUI_DESCRIPTION_TEXT ${GRPDB} $(DESC_GRPDB)
  !insertmacro MUI_DESCRIPTION_TEXT ${GRPSRV} $(DESC_GRPSRV)
  !insertmacro MUI_DESCRIPTION_TEXT ${SRVHOST} $(DESC_SRVHOST)
  !insertmacro MUI_DESCRIPTION_TEXT ${GRPWEB} $(DESC_GRPWEB)
!insertmacro MUI_FUNCTION_DESCRIPTION_END

Function .onSelChange

#Reads section selection
SectionGetFlags ${SRVHOST} $R1
IntOp $R1 $R1 & ${SF_SELECTED}

SectionGetFlags ${SRVRIS} $R2
IntOp $R2 $R2 & ${SF_SELECTED}

SectionGetFlags ${SRVSPARROW} $R3
IntOp $R3 $R3 & ${SF_SELECTED}

SectionGetFlags ${SRVSPRPUB} $R4
IntOp $R4 $R4 & ${SF_SELECTED}

#Sets whether ShredHost needs to be installed or services should just be removed all together
${If} $R2 = ${SF_SELECTED}
${OrIf} $R3 = ${SF_SELECTED}
${OrIf} $R4 = ${SF_SELECTED}
    !insertmacro SelectSection ${SRVHOST}
    !insertmacro SetSectionFlag ${SRVHOST} ${SF_RO}
    !insertmacro ClearSectionFlag ${SRV-ALL} ${SF_SELECTED}
${Else}
${If} $R2 != ${SF_SELECTED}
${AndIf} $R3 != ${SF_SELECTED}
${AndIf} $R4 != ${SF_SELECTED}
    !insertmacro ClearSectionFlag ${SRVHOST} ${SF_SELECTED}
    !insertmacro ClearSectionFlag ${GRPSRV} ${SF_SELECTED}
    !insertmacro SetSectionFlag ${SRV-ALL} ${SF_SELECTED}
${EndIf}
${EndIf}

#Sets whether Ris Server Shred needs to be deleted
${If} $R2 != ${SF_SELECTED}
    !insertmacro SetSectionFlag ${SRV-RIS} ${SF_SELECTED}
${Else}
    !insertmacro ClearSectionFlag ${SRV-RIS} ${SF_SELECTED}
${EndIf}

#Sets whether Sparrow Server Shreds need to be deleted
${If} $R3 != ${SF_SELECTED}
    !insertmacro SetSectionFlag ${SRV-SPARROW} ${SF_SELECTED}
${Else}
    !insertmacro ClearSectionFlag ${SRV-SPARROW} ${SF_SELECTED}
${EndIf}

#Sets whether Sparrow Publication Plugin needs to be deleted
${If} $R4 != ${SF_SELECTED}
    !insertmacro SetSectionFlag ${SRV-SPRPUB} ${SF_SELECTED}
${Else}
    !insertmacro ClearSectionFlag ${SRV-SPRPUB} ${SF_SELECTED}
${EndIf}
FunctionEnd

Function VerifyComponent
  SectionGetFlags ${GRPDB} $R1
  IntOp $R1 $R1 & ${SF_SELECTED}
  SectionGetFlags ${SRVHOST} $R2
  IntOp $R2 $R2 & ${SF_SELECTED}
  SectionGetFlags ${GRPWEB} $R3
  IntOp $R3 $R3 & ${SF_SELECTED}

  SectionGetFlags ${SRVSPARROW} $R4
  IntOp $R4 $R4 & ${SF_SELECTED}
  SectionGetFlags ${SRVSPRPUB} $R5
  IntOp $R5 $R5 & ${SF_SELECTED}
  
  #Verify Selection
  ${If} $R1 != ${SF_SELECTED}
  ${AndIf} $R2 != ${SF_SELECTED}
  ${AndIf} $R3 != ${SF_SELECTED}
    MessageBox MB_OK|MB_ICONINFORMATION "At least one component must be selected to continue."
    Abort
  ${EndIf}

  #Check for solo selection
  ${If} $R4 = ${SF_SELECTED}
  ${AndIf} $R5 != ${SF_SELECTED}
    MessageBox MB_OK|MB_ICONINFORMATION "Sparrow Service cannot be installed without Sparrow Publication plugin."
    Abort
  ${EndIf}
FunctionEnd

Section "-Docs"
  SetOutPath $INSTDIR
  File "..\..\..\..\Docs\RIS\AdminGuide\CCRISAdminGuide.chm"
SectionEnd

Section -AdditionalIcons
  SetShellVarContext all
  SetOutPath $INSTDIR
  WriteIniStr "$INSTDIR\${PRODUCT_NAME}.url" "InternetShortcut" "URL" "${PRODUCT_WEB_SITE}"
  CreateDirectory "${PRODUCT_STARTMENU_FOLDER}"
  CreateShortCut "${PRODUCT_STARTMENU_FOLDER}\RIS Admin Guide.lnk" "$INSTDIR\CCRISAdminGuide.chm"
  CreateShortCut "${PRODUCT_STARTMENU_FOLDER}\Website.lnk" "$INSTDIR\${PRODUCT_NAME}.url"
  CreateShortCut "${PRODUCT_STARTMENU_FOLDER}\Uninstall.lnk" "$INSTDIR\uninst.exe"
SectionEnd

Section -Post
  WriteUninstaller "$INSTDIR\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayIcon" "$INSTDIR\ClearCanvas.Ris.Server.Executable.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"


  #Starts Service
  IfFileExists "$INSTDIR\Clearcanvas.Server.ShredHostService.exe" "" +2
    !insertmacro SERVICE "installed" "${PRODUCT_SERVICE_NAME}" "action=start;"

  StrCpy $0 "$INSTDIR\install.log"
  Push $0
  Call DumpLog
SectionEnd

LangString PageDatabaseAdmin_TITLE ${LANG_ENGLISH} "Database administration page"
LangString PageDatabaseAdmin_SUBTITLE ${LANG_ENGLISH} "This page is used to enter the database installation connection details."
LangString PageDatabaseInstall_TITLE ${LANG_ENGLISH} "Database and user installation page"
LangString PageDatabaseInstall_SUBTITLE ${LANG_ENGLISH} "This page is used to enter the database and general user creation details."
LangString PageDatabaseConnectOnly_TITLE ${LANG_ENGLISH} "Database connection page"
LangString PageDatabaseConnectOnly_SUBTITLE ${LANG_ENGLISH} "This page is used to enter the database connection details for a Ris database that already exist."
LangString PageEnterpriseServer_TITLE ${LANG_ENGLISH} "Enterprise Server connection setup page"
LangString PageEnterpriseServer_SUBTITLE ${LANG_ENGLISH} "This page is used to enter the Enterprise Server connection details."
LangString PageRisServer_TITLE ${LANG_ENGLISH} "Ris and Sparrow Server connection setup page"
LangString PageRisServer_SUBTITLE ${LANG_ENGLISH} "This page is used to select the Ris and Sparrow Server listener details."


Function .onInit
  ; Check for Platform compared to installer platform
  GetVersion::WindowsPlatformArchitecture
   Pop $R0
  ${If} $R0 == "32"
  ${AndIf} ${PLATFORM_NAME} == "x64"
    MessageBox MB_OK|MB_ICONSTOP "A platform mismatch has been detected.$\n$\nThe 64-bit version of ${PRODUCT_NAME} cannot be installed on a 32-bit Operating System.  Installation will now be aborted." /SD IDOK
    Abort
  ${ElseIf} $R0 == "64"
  ${AndIf} ${PLATFORM_NAME} == "x86"
    MessageBox MB_OK|MB_ICONSTOP "A platform mismatch has been detected.$\n$\nThe 32-bit version of ${PRODUCT_NAME} cannot be installed on a 64-bit Operating System.  Installation will now be aborted." /SD IDOK
    Abort
  ${EndIf}
  
  ; Check for Windows Version
  ; using WindowsName instead of WindowsVersion because of difficulties encountered in performing
  ; numerical comparisons on version numbers.
  GetVersion::WindowsName
   Pop $R0
   ${If} $R0 == "95 OSR2"
   ${OrIf} $R0 == "95"
   ${OrIf} $R0 == "98 SE"
   ${OrIf} $R0 == "98"
   ${OrIf} $R0 == "ME"
   ${OrIf} $R0 == "NT"
   ${OrIf} $R0 == "CE"
   ${OrIf} $R0 == "2000"
     MessageBox MB_OK "${PRODUCT_NAME} requires Windows XP or greater.  The install has aborted."
     Abort "${PRODUCT_NAME} requires Windows XP or greater.  The install has aborted."
   ${EndIf}
   
  ; Check for .NET Framework Install
  ; discovered an unexpected formatting idiosyncrasy for the version string passed into CheckDotNet
  ; e.g. if the req'd version is 3.0.1 or higher but installed version is 3.0.04502.0
  ; using 3.0.1 or 3.0.10... 3.0.1000 doesn't work.  Have to specify 3.0.10000 or a greater number of zeroes
  !insertmacro CheckDotNET "${DOTNET_VERSION_REQ}" "${CHECKONLY}"
  
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageDatabaseAdmin.ini"
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageDatabaseInstall.ini"
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageDatabaseConnectOnly.ini"
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageEnterpriseServer.ini"
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageRisSparrowServer.ini"
  
  ;initialization
  StrCpy $OLDRISDETECTED "False"
  
  ; Check for prior or conflicting versionsand prompt to uninstall them before continuing
  Push "ClearCanvas.Ris.Server.Executable.exe" ;version determining assembly
  GetFunctionAddress $R0 InstalledVersionLower
  Push $R0
  GetFunctionAddress $R0 SameVersionInstalled
  Push $R0
  GetFunctionAddress $R0 InstalledVersionHigher
  Push $R0
  GetFunctionAddress $R0 FailedUninstall
  Push $R0
  Call HandlePriorInstall
  
FunctionEnd

Function installedVersionHigher
  MessageBox MB_OK|MB_ICONSTOP \
  "The Installer has detected that a NEWER version of ${PRODUCT_NAME} is already installed. $\n$\nTo continue with this installation please first uninstall ${PRODUCT_NAME}."
  Abort
FunctionEnd

Function sameVersionInstalled
  MessageBox MB_OK|MB_ICONSTOP \
  "The Installer has detected that the SAME version of ${PRODUCT_NAME} is already installed. $\n$\nTo continue with this installation please first uninstall ${PRODUCT_NAME}."
  Abort
FunctionEnd

Function installedVersionLower
  StrCpy $OLDRISDETECTED "True"
  MessageBox MB_OKCANCEL|MB_ICONEXCLAMATION \
  "Installer has detected that an older ${PRODUCT_NAME} version is already installed. $\n$\nClick `OK` to proceed with upgrade or `Cancel` to cancel this upgrade." \
  IDOK setUninstall
  Abort

  setUninstall:
  StrCpy $PERFORM_ASSEMBLY_UPGRADE "True"
  StrCpy $UNINSTALLER_STRING '$R0'
  ; uninst.exe is 10 characters long
  StrCpy $OLDINSTALLDIR $UNINSTALLER_STRING -10
  
  ;Save app.config files    
  IfFileExists "$OLDINSTALLDIRClearCanvas.Ris.Server.Executable.exe.config" 0 configFilesNotPresent
  IfFileExists "$OLDINSTALLDIRClearCanvas.Server.ShredHostService.exe.config" configFilesPresent configFilesNotPresent  
  
  configFilesNotPresent:
  MessageBox MB_OK|MB_ICONSTOP "Installer cannot access configuration files from the older ${PRODUCT_NAME} install so it cannot be upgraded. $\n$\nTo continue with this installation please first uninstall the older ${PRODUCT_NAME}." /SD IDOK
  Abort
  
  configFilesPresent:
  CopyFiles /SILENT "$OLDINSTALLDIRClearCanvas.Ris.Server.Executable.exe.config" $TEMP\RISServer_ClearCanvas.Ris.Server.Executable.exe.config
  CopyFiles /SILENT "$OLDINSTALLDIRClearCanvas.Server.ShredHostService.exe.config" $TEMP\RISServer_ClearCanvas.Server.ShredHostService.exe.config

  Return
FunctionEnd

Function FailedUninstall
  MessageBox MB_OK|MB_ICONSTOP "Installation cannot proceed because there was a problem with the uninstall of the previous version."
  Abort
FunctionEnd

##Function Includes
!insertmacro Replacement
!insertmacro RemoveService "ClearCanvas.Server.ShredHostService.exe" "${PRODUCT_SERVICE_NAME}"
!insertmacro VDirectory
!insertmacro un.GetParameters
!insertmacro un.GetOptions

Function PageDatabaseAdmin
  SectionGetFlags ${GRPDB} $0
  # Do a binary AND of $0 and SF_SELECTED and put results in $0
  IntOp $0 $0 & ${SF_SELECTED}
  IntCmp $0 ${SF_SELECTED} +2
    Return
  !insertmacro MUI_HEADER_TEXT "$(PageDatabaseAdmin_TITLE)" "$(PageDatabaseAdmin_SUBTITLE)"
  !insertmacro MUI_INSTALLOPTIONS_DISPLAY "PageDatabaseAdmin.ini"
FunctionEnd

Function ValidatePageDatabaseAdmin
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_ADMINID "PageDatabaseAdmin.ini" "Field 3" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_ADMINPASS "PageDatabaseAdmin.ini" "Field 5" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_HOSTINSTANCE "PageDatabaseAdmin.ini" "Field 7" "State"
  
  Push $INI_HOSTINSTANCE
  Push "\"
  Push "\\"
  Call StrRep
  Pop "$R0"
  StrCpy $INI_2SLASHHOSTINSTANCE $R0

  FileOpen $0 "$TEMP\dbconnect.js" w
  FileWrite $0 "var connection = WScript.CreateObject($\"ADODB.connection$\");$\n"
  FileWrite $0 "connection.Provider = $\"sqloledb$\";$\n"
  FileWrite $0 "connection.Properties($\"Data Source$\").Value = $\"$INI_2SLASHHOSTINSTANCE$\";$\n"
  FileWrite $0 "connection.Properties($\"Initial Catalog$\").Value = $\"master$\";$\n"
  FileWrite $0 "try$\n"
  FileWrite $0 "{$\n"
  FileWrite $0 "connection.Open($\"$\", $\"$INI_ADMINID$\", $\"$INI_ADMINPASS$\");$\n"
  FileWrite $0 "}$\n"
  FileWrite $0 "catch(err)$\n"
  FileWrite $0 "{$\n"
  FileWrite $0 "WScript.Quit(1);$\n"
  FileWrite $0 "}$\n"
  FileWrite $0 "WScript.Quit(0);$\n"

  FileClose $0

  nsExec::ExecToStack '"cscript" "$TEMP\dbconnect.js"'
  Pop $0
  StrCmp $0 "0" +3 ""
    MessageBox MB_ICONEXCLAMATION|MB_OK "Connection test failed.  Please check connection details and ensure they are correct."
    Abort
FunctionEnd

Function PageDatabaseInstall
  ${IfThen} $PERFORM_DB_UPGRADE == True ${|} Return ${|}
  
  SectionGetFlags ${GRPDB} $0
  # Do a binary AND of $0 and SF_SELECTED and put results in $0
  IntOp $0 $0 & ${SF_SELECTED}
  IntCmp $0 ${SF_SELECTED} +2
    Return  
  !insertmacro MUI_INSTALLOPTIONS_WRITE "PageDatabaseInstall.ini" "Field 3" "State" "${PRODUCT_DB_NAME}"
  !insertmacro MUI_INSTALLOPTIONS_WRITE "PageDatabaseInstall.ini" "Field 6" "State" "${PRODUCT_DB_USER}"
  !insertmacro MUI_INSTALLOPTIONS_WRITE "PageDatabaseInstall.ini" "Field 8" "State" "${PRODUCT_DB_PASS}"
  !insertmacro MUI_HEADER_TEXT "$(PageDatabaseInstall_TITLE)" "$(PageDatabaseInstall_SUBTITLE)"
  !insertmacro MUI_INSTALLOPTIONS_DISPLAY "PageDatabaseInstall.ini"
FunctionEnd

Function ValidatePageDatabaseInstall
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_DBNAME "PageDatabaseInstall.ini" "Field 3" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_USERID "PageDatabaseInstall.ini" "Field 6" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_USERPASS "PageDatabaseInstall.ini" "Field 8" "State"
  
  StrCmp $INI_DBNAME "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Database Name cannot be blank. Please enter a name."
  Abort
  StrCmp $INI_USERID "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Ris User Username cannot be blank. Please enter a username."
  Abort
  StrCmp $INI_USERPASS "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Ris User Password cannot be blank. Please enter a password"
  Abort
   
  Call DetectOldDb
  Pop $0
  ${IfThen} $0 == True ${|} Call HandleOldDb ${|}
FunctionEnd

Function PageDatabaseConnectOnly
  ${IfThen} $PERFORM_DB_UPGRADE == True ${|} Return ${|}
  ${IfThen} $SAME_DB_VERSION == True ${|} Return ${|}
  ${IfThen} $OLD_DB_NO_UPGRADE == True ${|} Return ${|}

  SectionGetFlags ${GRPDB} $0
  # Do a binary AND of $0 and SF_SELECTED and put results in $0
  IntOp $0 $0 & ${SF_SELECTED}
  IntCmp $0 ${SF_SELECTED} +1 +2 +2
    Return
  !insertmacro MUI_HEADER_TEXT "$(PageDatabaseConnectOnly_TITLE)" "$(PageDatabaseConnectOnly_SUBTITLE)"
  
  !insertmacro MUI_INSTALLOPTIONS_WRITE "PageDatabaseConnectOnly.ini" "Field 7" "State" "RisDB"
  
  !insertmacro MUI_INSTALLOPTIONS_DISPLAY "PageDatabaseConnectOnly.ini"
FunctionEnd

Function ValidatePageDatabaseConnectOnly
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_USERID "PageDatabaseConnectOnly.ini" "Field 3" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_USERPASS "PageDatabaseConnectOnly.ini" "Field 5" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_DBNAME "PageDatabaseConnectOnly.ini" "Field 7" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_HOSTINSTANCE "PageDatabaseConnectOnly.ini" "Field 9" "State"

  StrCmp $0 "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Database Name cannot be blank. Please enter a name."
  Abort

  Push $INI_HOSTINSTANCE
  Push "\"
  Push "\\"
  Call StrRep
  Pop "$R0"
  StrCpy $INI_2SLASHHOSTINSTANCE $R0

  FileOpen $0 "$TEMP\dbconnect.js" w
  FileWrite $0 "var connection = WScript.CreateObject($\"ADODB.connection$\");$\n"
  FileWrite $0 "connection.Provider = $\"sqloledb$\";$\n"
  FileWrite $0 "connection.Properties($\"Data Source$\").Value = $\"$INI_2SLASHHOSTINSTANCE$\";$\n"
  FileWrite $0 "connection.Properties($\"Initial Catalog$\").Value = $\"$INI_DBNAME$\";$\n"
  FileWrite $0 "try$\n"
  FileWrite $0 "{$\n"
  FileWrite $0 "connection.Open($\"$\", $\"$INI_USERID$\", $\"$INI_USERPASS$\");$\n"
  FileWrite $0 "}$\n"
  FileWrite $0 "catch(err)$\n"
  FileWrite $0 "{$\n"
  FileWrite $0 "WScript.Quit(1);$\n"
  FileWrite $0 "}$\n"
  FileWrite $0 "WScript.Quit(0);$\n"

  FileClose $0

  nsExec::ExecToStack '"cscript" "$TEMP\dbconnect.js"'
  Pop $0
  StrCmp $0 "0" +3 ""
    MessageBox MB_ICONEXCLAMATION|MB_OK "Connection test failed.  Please check connection details and ensure they are correct."
    Abort
  
  StrCpy $1 $OLD_DB_EXISTS ;Keep old value in case the user aborts to change DB Name
  StrCpy $OLD_DB_EXISTS True
  
  Push "$INI_DBNAME"
  Push "$INI_USERID"
  Push "$INI_USERPASS"
  Push "$INI_HOSTINSTANCE"
  Call GetDBVersion
  Pop $PRIOR_DB_VERSION

  ${If} $PRIOR_DB_VERSION != ${MAJOR_VERSION}.${MINOR_VERSION}.${BUILD}.${REVISION}
     MessageBox MB_ICONSTOP|MB_OK "The installer has detected an existing database with the version $PRIOR_DB_VERSION that does not match the version of this installer.  The installer cannot proceed unless the database is first upgraded."
     StrCpy $OLD_DB_EXISTS $1 ;Reverting back to old value
     Abort     
  ${EndIf}
FunctionEnd

Function PageEnterpriseServer
  ${IfThen} ${ENTERPRISEMODE} == False ${|} Return ${|}

  !insertmacro MUI_HEADER_TEXT "$(PageEnterpriseServer_TITLE)" "$(PageEnterpriseServer_SUBTITLE)"
  !insertmacro MUI_INSTALLOPTIONS_DISPLAY "PageEnterpriseServer.ini"
FunctionEnd

Function ValidatePageEnterpriseServer
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_ESHOST "PageEnterpriseServer.ini" "Field 3" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_ESPORT "PageEnterpriseServer.ini" "Field 5" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_ESUSER "PageEnterpriseServer.ini" "Field 7" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_ESPASS "PageEnterpriseServer.ini" "Field 9" "State"
  StrCmp $INI_ESHOST "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Enterprise Server hostname/ip cannot be blank. Please a proper value."
  Abort
  StrCmp $INI_ESPORT "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Enterprise Server Port cannot be blank. Please enter a port."
  Abort
  StrCmp $INI_ESUSER "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Enterprise Username cannot be blank. Please enter a Username."
  Abort
  StrCmp $INI_ESPASS "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Enterprise User Password cannot be blank. Please enter a Password."
  Abort
FunctionEnd

Function PageRisServer
  !insertmacro MUI_HEADER_TEXT "$(PageRisServer_TITLE)" "$(PageRisServer_SUBTITLE)"
  !insertmacro MUI_INSTALLOPTIONS_DISPLAY "PageRisSparrowServer.ini"
FunctionEnd

Function ValidatePageRisServer
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_RISHOST "PageRisSparrowServer.ini" "Field 2" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_RISPORT "PageRisSparrowServer.ini" "Field 4" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_SPARROWHOST "PageRisSparrowServer.ini" "Field 6" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_SPARROWPORT "PageRisSparrowServer.ini" "Field 8" "State"
  StrCmp $INI_RISHOST "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Ris Server hostname/ip cannot be blank. Please a proper value."
  Abort
  StrCmp $INI_RISPORT "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Ris Server Port cannot be blank. Please enter a port."
  Abort
  StrCmp $INI_SPARROWHOST "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Sparrow Server hostname/ip cannot be blank. Please a proper value."
  Abort
  StrCmp $INI_SPARROWPORT "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Sparrow Server Port cannot be blank. Please enter a port."
  Abort
FunctionEnd

Function SetAppConfigEnterpriseSettings
  ## Enterprise Server connection
    ;RemoteCoreServiceSettings
    ${xml::GotoPath} "/configuration/applicationSettings/ClearCanvas.Enterprise.Common.RemoteCoreServiceSettings" $0
    ${xml::FirstChildElement} "setting" $0 $1

    loopRemoteCoreServiceSettingBaseUrl:
    ${xml::GetAttribute} "name" $0 $1
    StrCmp "BaseUrl" $0 foundRemoteCoreServiceSettingBaseUrl ;breaks loop

    ${xml::NextSiblingElement} "setting" $0 $1
    StrCmp $1 "0" loopRemoteCoreServiceSettingBaseUrl AppConfigFailed ;loops unless an error occurred

    foundRemoteCoreServiceSettingBaseUrl:
    ${xml::FirstChildElement} "value" $0 $1
    ${xml::SetText} "net.tcp://$INI_ESHOST:$INI_ESPORT/" $1

    ##InProcessCoreServiceProvider
    ${xml::GotoPath} "/configuration/applicationSettings/ClearCanvas.Common.ExtensionSettings/setting/value/extensions" $0
    ${xml::FirstChildElement} "extension" $0 $1

    loopInProcessCoreServiceProvider:
    ${xml::GetAttribute} "class" $0 $1
    StrCmp "ClearCanvas.Enterprise.Core.InProcessCoreServiceProvider, ClearCanvas.Enterprise.Core" $0 foundInProcessCoreServiceProvider ;breaks loop
    ${xml::NextSiblingElement} "extension" $0 $1
    StrCmp $1 "0" loopInProcessCoreServiceProvider AppConfigFailed ;loops unless an error occurred

    foundInProcessCoreServiceProvider:
    ${xml::SetAttribute} "enabled" "false" $0

    ##RemoteCoreServiceProvider
    ${xml::GotoPath} "/configuration/applicationSettings/ClearCanvas.Common.ExtensionSettings/setting/value/extensions" $0
    ${xml::FirstChildElement} "extension" $0 $1

    loopRemoteCoreServiceProvider:
    ${xml::GetAttribute} "class" $0 $1
    StrCmp "ClearCanvas.Enterprise.Common.RemoteCoreServiceProvider, ClearCanvas.Enterprise.Common" $0 foundRemoteCoreServiceProvider ;breaks loop
    ${xml::NextSiblingElement} "extension" $0 $1
    StrCmp $1 "0" loopRemoteCoreServiceProvider AppConfigFailed ;loops unless an error occurred

    foundRemoteCoreServiceProvider:
    ${xml::SetAttribute} "enabled" "true" $0
    Return
    
    AppConfigFailed:
      MessageBox MB_OK|MB_ICONSTOP "A failure has occurred on enterprise service component configuration. Review the installation log for details.  A reinstallation will be required."
FunctionEnd

Function SetAppConfigHostnameAndPortSettings
    ;ClearCanvas.Ris.Server.WebServicesSettings
    ${xml::GotoPath} "/configuration/applicationSettings/ClearCanvas.Ris.Server.WebServicesSettings" $0
    ${xml::FirstChildElement} "setting" $0 $1

    loopRisBaseUrl:
    ${xml::GetAttribute} "name" $0 $1
    StrCmp "BaseUrl" $0 foundRisBaseUrl ;breaks loop

    ${xml::NextSiblingElement} "setting" $0 $1
    StrCmp $1 "0" loopRisBaseUrl AppConfigFailed ;loops unless an error occurred

    foundRisBaseUrl:
    ${xml::FirstChildElement} "value" $0 $1
    ${xml::SetText} "net.tcp://$INI_RISHOST:$INI_RISPORT/" $1


    ;ClearCanvas.Sparrow.Server.WebServicesSettings
    ${xml::GotoPath} "/configuration/applicationSettings/ClearCanvas.Sparrow.Server.WebServicesSettings" $0
    ${xml::FirstChildElement} "setting" $0 $1

    loopSparrowBaseUrl:
    ${xml::GetAttribute} "name" $0 $1
    StrCmp "BaseUrl" $0 foundSparrowBaseUrl ;breaks loop

    ${xml::NextSiblingElement} "setting" $0 $1
    StrCmp $1 "0" loopSparrowBaseUrl AppConfigFailed ;loops unless an error occurred

    foundSparrowBaseUrl:
    ${xml::FirstChildElement} "value" $0 $1
    ${xml::SetText} "net.tcp://$INI_SPARROWHOST:$INI_SPARROWPORT/" $1
    
    Return

    AppConfigFailed:
      MessageBox MB_OK|MB_ICONSTOP "A failure has occurred on ris service component configuration. Review the installation log for details.  A reinstallation will be required."
FunctionEnd

Function SetAppConfigHibernateSettings
  ${xml::GotoPath} "/configuration/hibernate-configuration/session-factory" $0
  ${xml::FirstChildElement} "property" $0 $1

  loopAppConnectionString:
  ${xml::GetAttribute} "name" $0 $1
  StrCmp "connection.connection_string" $0 foundAppConnectionString ;breaks loop

  ${xml::NextSiblingElement} "property" $0 $1
  StrCmp $1 "0" loopAppConnectionString AppConfigFailed ;loops unless an error occurred

  foundAppConnectionString:
  ${xml::SetText} "Data Source=$INI_HOSTINSTANCE;Initial Catalog=$INI_DBNAME;User Id=$INI_USERID;Password=$INI_USERPASS" $0

  ${xml::GotoPath} "/configuration/hibernate-configuration/session-factory" $0
  ${xml::FirstChildElement} "property" $0 $1

  loopDefaultSchema:
  ${xml::GetAttribute} "name" $0 $1
  StrCmp "default_schema" $0 foundDefaultSchema ;breaks loop
  
  ${xml::NextSiblingElement} "property" $0 $1
  StrCmp $1 "0" loopDefaultSchema AppConfigFailed 

  foundDefaultSchema:
  ${xml::SetText} "$INI_DBNAME.dbo" $0

  Return
  
  AppConfigFailed:
    MessageBox MB_OK|MB_ICONSTOP "A failure has occurred on hibernate configuration. Review the installation log for details.  A reinstallation will be required."

FunctionEnd

Function SetClientAppConfig
    ;RemoteCoreServiceSettings
    ${xml::GotoPath} "/configuration/applicationSettings/ClearCanvas.Enterprise.Common.RemoteCoreServiceSettings" $0
    ${xml::FirstChildElement} "setting" $0 $1

    loopRemoteCoreServiceSettingBaseUrl:
    ${xml::GetAttribute} "name" $0 $1
    StrCmp "BaseUrl" $0 foundRemoteCoreServiceSettingBaseUrl ;breaks loop

    ${xml::NextSiblingElement} "setting" $0 $1
    StrCmp $1 "0" loopRemoteCoreServiceSettingBaseUrl AppConfigFailed ;loops unless an error occurred

    foundRemoteCoreServiceSettingBaseUrl:
    ${xml::FirstChildElement} "value" $0 $1
    ${xml::SetText} "net.tcp://$INI_ESHOST:$INI_ESPORT/" $1

    ;ClearCanvas.Ris.Server.WebServicesSettings
    ${xml::GotoPath} "/configuration/applicationSettings/ClearCanvas.Ris.Client.WebServicesSettings" $0
    ${xml::FirstChildElement} "setting" $0 $1

    loopApplicationServicesBaseUrl:
    ${xml::GetAttribute} "name" $0 $1
    StrCmp "ApplicationServicesBaseUrl" $0 foundApplicationServicesBaseUrl ;breaks loop

    ${xml::NextSiblingElement} "setting" $0 $1
    StrCmp $1 "0" loopApplicationServicesBaseUrl AppConfigFailed ;loops unless an error occurred

    foundApplicationServicesBaseUrl:
    ${xml::FirstChildElement} "value" $0 $1
    ${xml::SetText} "net.tcp://$INI_RISHOST:$INI_RISPORT/" $1

    ;ClearCanvas.Sparrow.Server.WebServicesSettings
    ${xml::GotoPath} "/configuration/applicationSettings/ClearCanvas.Sparrow.Client.WebServicesSettings" $0
    ${xml::FirstChildElement} "setting" $0 $1

    loopSparrowBaseUrl:
    ${xml::GetAttribute} "name" $0 $1
    StrCmp "ApplicationServicesBaseUrl" $0 foundSparrowBaseUrl ;breaks loop

    ${xml::NextSiblingElement} "setting" $0 $1
    StrCmp $1 "0" loopSparrowBaseUrl AppConfigFailed ;loops unless an error occurred

    foundSparrowBaseUrl:
    ${xml::FirstChildElement} "value" $0 $1
    ${xml::SetText} "net.tcp://$INI_SPARROWHOST:$INI_SPARROWPORT/" $1

    Return

    AppConfigFailed:
      MessageBox MB_OK|MB_ICONSTOP "A failure has occurred on ris service component configuration. Review the installation log for details.  A reinstallation will be required."
FunctionEnd

Function DetectOldDb
  FileOpen $0 "$TEMP\dbexists.js" w
  FileWrite $0 "var result = new ActiveXObject($\"ADODB.Recordset$\");$\n"
  FileWrite $0 "var connection = WScript.CreateObject($\"ADODB.connection$\");$\n"
  FileWrite $0 "connection.ConnectionString = $\"PROVIDER=SQLOLEDB.1;USER ID=$INI_USERID;PASSWORD=$INI_USERPASS;INITIAL CATALOG=master;DATA SOURCE=$INI_2SLASHHOSTINSTANCE$\"$\n"

  FileWrite $0 "connection.Open();$\n"

  FileWrite $0 "result = connection.execute($\"IF EXISTS (SELECT name FROM sys.databases WHERE name = N'$INI_DBNAME') select 1 as [test] ELSE select 0 as [test]$\");$\n"
  FileWrite $0 "if(result($\"test$\") == 0)$\n"
  FileWrite $0 "  WScript.Quit(0);$\n"
  FileWrite $0 "else$\n"
  FileWrite $0 "  WScript.Quit(1);$\n"

  FileClose $0

  nsExec::ExecToStack '"cscript" "$TEMP\dbexists.js"'
  Pop $0
  
  Delete "$TEMP\dbexists.js"
 
  ${If} "$0" == "1"
    Push True      
  ${Else}
    Push False
  ${EndIf} 
FunctionEnd  

Function HandleOldDb
  StrCpy $OLD_DB_NO_UPGRADE False
  
  Call DetectOldDb
  Pop $0
  
  StrCmp $0 "False" resultNoDB
  StrCmp $0 "True" resultDB
  
resultDB:
  StrCpy $OLD_DB_EXISTS True
  
  Push "$INI_DBNAME"
  Push "$INI_USERID"
  Push "$INI_USERPASS"
  Push "$INI_HOSTINSTANCE"
  Call GetDBVersion
  Pop $PRIOR_DB_VERSION

  ${If} $PRIOR_DB_VERSION == ${MAJOR_VERSION}.${MINOR_VERSION}.${BUILD}.${REVISION}
     MessageBox MB_ICONINFORMATION|MB_OK "The installer has detected an existing database that matches the version of this installer.  The installer will proceed to use this database without attempting to re-create or upgrade this database."
     StrCpy $SAME_DB_VERSION True
     Goto oldDBNoUpgrade
  ${EndIf}

  ${If} $PRIOR_DB_VERSION == ${MOSTRECENTPRIORVERSION}
    goto exitCanUpgrade
  ${Else}
    goto exitCannotUpgrade
  ${EndIf}
  
  exitCannotUpgrade:
    MessageBox MB_ICONSTOP|MB_OK "Installer has detected an existing database with version $PRIOR_DB_VERSION but this installer cannot upgrade the detected database version.  The installer cannot proceed. Installation will be Aborted."
    Quit

  exitCanUpgrade:
    MessageBox MB_ICONEXCLAMATION|MB_OKCANCEL "Installer has detected an existing db. To continue, the database must be upgraded.$\n$\n`Cancel` will abort installation." IDOK oldDBUpgrade
    Quit

oldDBNoUpgrade:
  StrCpy $PERFORM_DB_UPGRADE False
  StrCpy $OLD_DB_NO_UPGRADE True
  ; Must stop attempt to create database again if it already exists and turn off upgrade sections
  !insertmacro UnSelectSection ${GRPDB}
  goto performUninstallOfPreviousVersion

oldDBUpgrade:
  StrCpy $PERFORM_DB_UPGRADE True

  ; Must stop attempt to create database again if it already exists and turn on upgrade sections
  !insertmacro UnSelectSection ${GRPDB}
  !insertmacro SetSectionFlag ${SECUPGRADEDB} ${SF_SELECTED}
  goto performUninstallOfPreviousVersion

resultNoDB:
  StrCpy $OLD_DB_EXISTS False
  StrCpy $PERFORM_DB_UPGRADE False
  goto performUninstallOfPreviousVersion


## All paths go through this section
performUninstallOfPreviousVersion:
  #Determine whether or not prior DB needs to be removed
  ${If} $PERFORM_DB_UPGRADE == "True"
    StrCpy $R4 "False"
  ${Else}
    StrCpy $R4 "True"
  ${EndIf}
  Return
FunctionEnd

Function ReplaceInCreateDB
	; save R1
	Push $R1
	Exch
	; A sequence of replacements.
        ; the string to replace in is at the top of the stack
	Push "++DB++" ; string to find
	Push $INI_DBNAME ; string to replace it with
	Call StrRep ; see elsewhere in NSIS Wiki
        ; the string to replace in is at the top of the stack again
	;Push "++DBFOLDER++" ; string to find
	;Push $INI_DBFILEDIR ; string to replace it with
	;Call StrRep
   ; Push "++LOGFOLDER++" ; string to find
	;Push $INI_DBLOGDIR ; string to replace it with
	;Call StrRep
        ; and so on
	; restore stack
	Exch
	Pop $R1
FunctionEnd

Function ReplaceInUser
	Push $R1
	Exch
	Push "++DB++"
	Push $INI_DBNAME
	Call StrRep
	Push "++USERID++"
	Push $INI_USERID
	Call StrRep
        Push "++USERPASS++"
	Push $INI_USERPASS
	Call StrRep
	Exch
	Pop $R1
FunctionEnd

Function ReplaceInRemoveDB
	Push $R1
	Exch
	Push "++DB++"
	Push $INI_DBNAME
	Call StrRep
	Exch
	Pop $R1
FunctionEnd

Function ReplaceInRemoveUser
	Push $R1
	Exch
	Push "++USERID++"
	Push $INI_USERID
	Call StrRep
	Exch
	Pop $R1
FunctionEnd

Function ReplaceInDBJscript
	Push $R1
	Exch
	Push "++HOST++++EXPRESS++"
	Push $INI_2SLASHHOSTINSTANCE
	Call StrRep
	Push "++ADMINID++"
	Push $INI_ADMINID
	Call StrRep
        Push "++ADMINPASS++"
	Push $INI_ADMINPASS
	Call StrRep
	Exch
	Pop $R1
FunctionEnd

Function un.RemoveDBandUser
  IfFileExists "$INSTDIR\scripts" +2
    Return

  IfSilent +1 nonSilent
    StrCmp $INI_REMOVEDB "True" remove doNotRemove

nonSilent:
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Remove the RIS database during uninstall?$\n$\nWarning: once the database is removed it cannot be restored.  It can however always be removed at a later time." IDNO doNotRemove
  
remove:
  DetailPrint "Removing database and RIS user..."
  nsExec::ExecToLog '"cscript" "$INSTDIR\scripts\dbfile.js" "$INSTDIR\scripts\RemoveDB.sql"'
  nsExec::ExecToLog '"cscript" "$INSTDIR\scripts\dbfile.js" "$INSTDIR\scripts\RemoveUser.sql"'

doNotRemove:
FunctionEnd

Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK "$(^Name) was successfully removed from your computer."
FunctionEnd

Function un.onInit
  ;For Silent Install
  ${un.GetParameters} $R0
  ${un.GetOptions} $R0 /REMOVEDB= $INI_REMOVEDB
  
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Are you sure you want to completely remove $(^Name) and all of its components?" /SD IDYES IDYES +2
  Abort
FunctionEnd

Section Uninstall
  !undef UN
  !define UN "un."
  
  SetShellVarContext all

  IfFileExists "$INSTDIR\ClearCanvas.Server.ShredHostService.exe" 0 +2
  Call un.RemoveService
  
  IfFileExists "$INSTDIR\web" 0 +3
  StrCpy $VDIRNAME "${PRODUCT_VDIR_NAME}"
  Call un.DeleteVDir

  IfFileExists $INSTDIR\scripts 0 +2
  Call un.RemoveDBandUser
  
  Delete "$INSTDIR\${PRODUCT_NAME}.url"
  Delete "$INSTDIR\uninst.exe"

  Delete "$INSTDIR\model.ddl"
  Delete "$INSTDIR\hibernate.cfg.xml"
  Delete "$INSTDIR\actionmodels.xml"
  Delete "$INSTDIR\Logging.config"
  Delete "$INSTDIR\CCRISAdminGuide.chm"
  Delete "$INSTDIR\ClearCanvas.Ris.Server.Executable.exe.config"
  Delete "$INSTDIR\ClearCanvas.Ris.Server.Executable.exe"
  Delete "$INSTDIR\ClearCanvas.Server.ShredHostService.exe.config"
  Delete "$INSTDIR\ClearCanvas.Server.ShredHostService.exe"

  Delete "${PRODUCT_STARTMENU_FOLDER}\RIS Admin Guide.lnk"
  Delete "${PRODUCT_STARTMENU_FOLDER}\Uninstall.lnk"
  Delete "${PRODUCT_STARTMENU_FOLDER}\Website.lnk"
  Delete "${PRODUCT_STARTMENU_FOLDER}\${PRODUCT_SHORTCUT_NAME}.lnk"

  RMDir "$SMPROGRAMS\${PRODUCT_NAME}"
  RMDir /r "$INSTDIR\scripts"
  RMDir /r "$INSTDIR\plugins"
  RMDir /r "$INSTDIR\common"
  RMDir /r "$INSTDIR\web"
  RMDir /r "$INSTDIR\SampleData\"
  RMDir /r "$INSTDIR\clientfiles"

  Delete "$INSTDIR\*.*"

  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
  SetAutoClose true
  
  StrCpy $0 "$INSTDIR\uninstall.log"
  Push $0
  Call un.DumpLog
SectionEnd