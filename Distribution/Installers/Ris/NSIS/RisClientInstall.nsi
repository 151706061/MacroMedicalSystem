; Script generated by the HM NIS Edit Script Wizard.

; defines required for upgrade process
; the '1 ##VERSION string is used by the build script as a token
!define MAJOR_VERSION 1 ##MAJOR
!define MINOR_VERSION 1 ##MINOR
!define BUILD 1 ##BUILDNUMBER
!define REVISION 1 ##REVISIONNUMBER

; define for build process
; the "RisClient" ##VERSION string is used by the build script as a token
!define DISTRIBUTION "RisClient" ##DISTRIBUTION

; define required for Win2K install
; the '0 ##WIN2K string is used by the build script as a token for find & replace
!define WIN2K 0 ##WIN2K
; needed as a hack since the dotnet stuff exceeded the max path length
!define DOTNETPACKAGEDIR "C:\DotNetPackage"

; HM NIS Edit Wizard helper defines
!define PRODUCT_NAME "ClearCanvas Ris Client"
!define PRODUCT_VERSION "${MAJOR_VERSION}.${MINOR_VERSION}"
!define PRODUCT_PUBLISHER "ClearCanvas Inc"
!define PRODUCT_WEB_SITE "http://www.clearcanvas.ca"
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"

; MUI 1.67 compatible ------
!include "MUI.nsh"
!include "LogicLib.nsh"
!include "DumpLog.nsh"
!include "dotNETCC.nsh"
!include "FileFunc.nsh"
!include "XML.nsh"

;Macros
!insertmacro GetParameters
!insertmacro GetOptions

; Check for .NET Framework defines
!define DOTNET_VERSION_REQ "3"

; MUI Settings
!define MUI_ABORTWARNING
!define MUI_ICON "${NSISDIR}\Contrib\Graphics\Icons\modern-install.ico"
!define MUI_UNICON "${NSISDIR}\Contrib\Graphics\Icons\modern-uninstall.ico"

; Platform-specific Settings (x86 vs. x64)
!ifdef PLATFORM_X64
!define PLATFORM_NAME "x64"
!define PLATFORM_PROGRAMFILES $PROGRAMFILES64
!define PLATFORM_SUBFOLDER "x64"
!define PLATFORM_VC2008 "{350AA351-21FA-3270-8B7A-835434E766AD}"
!define PLATFORM_VC2008SP1 "{8220EEFE-38CD-377E-8595-13398D740ACE}"
!else
!define PLATFORM_X64 "false"
!define PLATFORM_NAME "x86"
!define PLATFORM_PROGRAMFILES $PROGRAMFILES
!define PLATFORM_SUBFOLDER ""
!define PLATFORM_VC2008 "{FF66E9F6-83E7-3A3E-AF14-8DE9A809A6A4}"
!define PLATFORM_VC2008SP1 "{9A25302D-30C0-39D9-BD6F-21E6EC160475}"
!endif

; Welcome page
!insertmacro MUI_PAGE_WELCOME
; License page
!insertmacro MUI_PAGE_LICENSE "..\..\..\..\License.rtf"
; Components page
!insertmacro MUI_PAGE_COMPONENTS
; Directory page
!insertmacro MUI_PAGE_DIRECTORY
; Custom page - Retrieves Server info
Page custom PageRisServer ValidatePageRisServer
; Instfiles page
!insertmacro MUI_PAGE_INSTFILES
; Finish page
!define MUI_FINISHPAGE_RUN "$INSTDIR\ClearCanvas.Desktop.Executable.exe"
!insertmacro MUI_PAGE_FINISH

; Uninstaller pages
!insertmacro MUI_UNPAGE_INSTFILES

; Language files
!insertmacro MUI_LANGUAGE "English"

ReserveFile "PageRisServerClientSide.ini"
!insertmacro MUI_RESERVEFILE_INSTALLOPTIONS
; MUI end ------


Name "${PRODUCT_NAME} ${PRODUCT_VERSION}"
OutFile "ClearCanvas Ris Client.exe"
InstallDir "${PLATFORM_PROGRAMFILES}\ClearCanvas\${PRODUCT_NAME}"
InstallDirRegKey HKLM "${PRODUCT_DIR_REGKEY}" ""
ShowInstDetails show
ShowUnInstDetails show



; Variables
; Collected in PageRisServerClientSide.ini
Var INI_SERVERNAME
Var INI_SERVERPORT

SectionGroup /e "Core Components" GRPCORE
  Section "-InstallDir"
    SectionIn RO
    SetShellVarContext all
    SetOutPath "$INSTDIR"
    SetOverwrite ifnewer
    File /x *.svn* /x app.ico "..\..\..\..\Distribution\Build\${DISTRIBUTION}\${PLATFORM_SUBFOLDER}\Release\*.*"
    ;File /x *.svn* "..\..\..\..\Distribution\Installers\Ris\Scripts\*.*"
    CreateDirectory "$SMPROGRAMS\ClearCanvas\ClearCanvas Ris Client"
    CreateShortCut "$SMPROGRAMS\ClearCanvas\ClearCanvas Ris Client\ClearCanvas Ris Client.lnk" "$INSTDIR\ClearCanvas.Desktop.Executable.exe"
    CreateShortCut "$DESKTOP\ClearCanvas Ris Client.lnk" "$INSTDIR\ClearCanvas.Desktop.Executable.exe"
  SectionEnd

  Section "-CommonDir"
    SectionIn RO
    SetOutPath "$INSTDIR\common"
    File /r /x *.svn* "..\..\..\..\Distribution\Build\${DISTRIBUTION}\${PLATFORM_SUBFOLDER}\Release\common\*.*"
  SectionEnd

  Section "-PluginsDir"
    SectionIn RO
    SetOutPath "$INSTDIR\plugins"
    File /r /x *.svn* /x *Sparrow* "..\..\..\..\Distribution\Build\${DISTRIBUTION}\${PLATFORM_SUBFOLDER}\Release\plugins\*.*"
  SectionEnd

  Section "-Win2KOnly"
    SectionIn RO
    StrCmp "${WIN2K}" "0" NotWin2K
    SetOutPath "$INSTDIR"
    File /nonfatal /r /x *.svn* "${DOTNETPACKAGEDIR}\*.*"
  NotWin2K:
  SectionEnd

  Section "-GenerateConfig"
    SectionIn RO
    DetailPrint "Configuring Executable"
    ${xml::LoadFile} "$INSTDIR\ClearCanvas.Desktop.Executable.exe.config" $0
    ${xml::GotoPath} "/configuration/applicationSettings/ClearCanvas.Sparrow.Client.WebServicesSettings" $0
    ${xml::FirstChildElement} "setting" $0 $1
    
    loopSparrowServer:
    ${xml::GetAttribute} "name" $0 $1
    StrCmp "ApplicationServicesBaseUrl" $0 foundSparrowServer ;breaks loop

    ${xml::NextSiblingElement} "setting" $0 $1
    StrCmp $1 "0" loopSparrowServer findFailed ;loops unless an error occurred

    foundSparrowServer:
    ${xml::FirstChildElement} "value" $0 $1
    ${xml::SetText} "net.tcp://$INI_SPARROWSERVERNAME:8001/" $0
    
    
    ${xml::GotoPath} "/configuration/applicationSettings/ClearCanvas.Ris.Client.WebServicesSettings" $0
    ${xml::FirstChildElement} "setting" $0 $1

    loopRisServer:
    ${xml::GetAttribute} "name" $0 $1
    StrCmp "ApplicationServicesBaseUrl" $0 foundRisServer ;breaks loop

    ${xml::NextSiblingElement} "setting" $0 $1
    StrCmp $1 "0" loopRisServer findFailed ;loops unless an error occurred


    foundRisServer:
    ${xml::FirstChildElement} "value" $0 $1
    ${xml::SetText} "net.tcp://$INI_SERVERNAME:8000/" $0
    
    
    ${xml::GotoPath} "/configuration/applicationSettings/ClearCanvas.Ris.Client.WebResourcesSettings" $0
    ${xml::FirstChildElement} "setting" $0 $1

    loopWebServer:
    ${xml::GetAttribute} "name" $0 $1
    StrCmp "BaseUrl" $0 foundWebServer ;breaks loop

    ${xml::NextSiblingElement} "setting" $0 $1
    StrCmp $1 "0" loopWebServer findFailed ;loops unless an error occurred


    foundWebServer:
    ${xml::FirstChildElement} "value" $0 $1
    ${xml::SetText} "http://$INI_SERVERNAME/RIS" $0

    ${xml::SaveFile} "$INSTDIR\ClearCanvas.Desktop.Executable.exe.config" $0
    ${xml::Unload}
    
    AccessControl::GrantOnFile "$INSTDIR\ClearCanvas.Desktop.Executable.exe.config" "Users" "GenericRead + GenericWrite + GenericExecute + Delete"
    Return
    
    findFailed:
    MessageBox MB_OK|MB_ICONSTOP "A failure has occurred on service component configuration."
    Return
  SectionEnd
  
  Section "-Permissions"
    AccessControl::GrantOnFile "$INSTDIR" "Users" "GenericRead + GenericWrite + GenericExecute + Delete"
  SectionEnd
SectionGroupEnd

SectionGroup /e "Sparrow Components" GRPSPARROW
  Section "-SparrowPluginsDir"
    SetOutPath "$INSTDIR\plugins"
    File /nonfatal /r /x *.svn* "..\..\..\..\Distribution\Build\${DISTRIBUTION}\${PLATFORM_SUBFOLDER}\Release\plugins\*Sparrow*"
  SectionEnd
SectionGroupEnd

Section -AdditionalIcons
  SetOutPath $INSTDIR
  WriteIniStr "$INSTDIR\${PRODUCT_NAME}.url" "InternetShortcut" "URL" "${PRODUCT_WEB_SITE}"
  CreateShortCut "$SMPROGRAMS\ClearCanvas\ClearCanvas Ris Client\Website.lnk" "$INSTDIR\${PRODUCT_NAME}.url"
  CreateShortCut "$SMPROGRAMS\ClearCanvas\ClearCanvas Ris Client\Uninstall.lnk" "$INSTDIR\uninst.exe"
SectionEnd

Section -Post
  WriteUninstaller "$INSTDIR\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayIcon" "$INSTDIR\ClearCanvas.Desktop.Executable.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"

  StrCpy $0 "$INSTDIR\install.log"
  Push $0
  Call DumpLog
SectionEnd

Function .onInit
  ; Check for Platform compared to installer platform
  GetVersion::WindowsPlatformArchitecture
   Pop $R0
  ${If} $R0 == "32"
  ${AndIf} ${PLATFORM_NAME} == "x64"
    MessageBox MB_OK|MB_ICONSTOP "A platform mismatch has been detected.$\n$\nThe 64-bit version of ${PRODUCT_NAME} cannot be installed on a 32-bit Operating System.  Installation will now be aborted." /SD IDOK
    Abort
  ${ElseIf} $R0 == "64"
  ${AndIf} ${PLATFORM_NAME} == "x86"
    MessageBox MB_OK|MB_ICONSTOP "A platform mismatch has been detected.$\n$\nThe 32-bit version of ${PRODUCT_NAME} cannot be installed on a 64-bit Operating System.  Installation will now be aborted." /SD IDOK
    Abort
  ${EndIf}
  
  ; Check for .NET Framework Install
  ; discovered an unexpected formatting idiosyncrasy for the version string passed into CheckDotNet
  ; e.g. if the req'd version is 3.0.1 or higher but installed version is 3.0.04502.0
  ; using 3.0.1 or 3.0.10... 3.0.1000 doesn't work.  Have to specify 3.0.10000 or a greater number of zeroes
  StrCmp "${WIN2K}" "1" OkOnWin2kInstallSteps
  IfSilent +2
    !insertmacro CheckDotNET "${DOTNET_VERSION_REQ}"

  ;For Silent Install
  ${GetParameters} $R0
  ClearErrors
  ${GetOptions} $R0 /SERVERNAME= $INI_SERVERNAME
  ${GetOptions} $R0 /SERVERPORT= $INI_SERVERPORT
  
  ; Check for prior or conflicting versions and prompt to uninstall them before continuing
  Call HandlePriorInstall

OkOnWin2kInstallSteps:
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageRisServerClientSide.ini"
FunctionEnd

LangString PageRisServer_TITLE ${LANG_ENGLISH} "Server Hostname"
LangString PageRisServer_SUBTITLE ${LANG_ENGLISH} "This page is used to enter the Server Hostname."

Function PageRisServer
  !insertmacro MUI_HEADER_TEXT "$(PageRisServer_TITLE)" "$(PageRisServer_SUBTITLE)"
  !insertmacro MUI_INSTALLOPTIONS_DISPLAY "PageRisServerClientSide.ini"
FunctionEnd

Function ValidatePageRisServer
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_SERVERNAME "PageRisServerClientSide.ini" "Field 4" "State"
  StrCmp $INI_SERVERNAME "" "" +3
    MessageBox MB_ICONEXCLAMATION|MB_OK "Ris Server hostname cannot be blank. Please enter a hostname."
    Abort
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_SERVERPORT "PageRisServerClientSide.ini" "Field 6" "State"
  StrCmp $INI_SERVERPORT "" "" +3
    MessageBox MB_ICONEXCLAMATION|MB_OK "Ris Server Port cannot be blank. Please enter a port."
    Abort
FunctionEnd

Function ReplaceInFile
	Exch $R0 ;file name to search in
	Exch
	Exch $R4 ;callback function handle
	Push $R1 ;file handle
	Push $R2 ;temp file name
	Push $R3 ;temp file handle
	Push $R5 ;line read

	GetTempFileName $R2
  	FileOpen $R1 $R0 r ;file to search in
  	FileOpen $R3 $R2 w ;temp file

loop_read:
 	ClearErrors
 	FileRead $R1 $R5 ;read line
 	Push $R5 ; put line on stack
 	Call $R4
 	Pop $R5 ; read line from stack
 	IfErrors exit
 	FileWrite $R3 $R5 ;write modified line
	Goto loop_read
exit:
  	FileClose $R1
  	FileClose $R3

   	SetDetailsPrint none
  	Delete $R0
  	Rename $R2 $R0
  	Delete $R2
   	SetDetailsPrint both

	; pop in reverse order
	Pop $R5
	Pop $R3
	Pop $R2
	Pop $R1
	Pop $R4
	Pop $R0
FunctionEnd

Function StrRep
  Exch $R4 ; $R4 = Replacement String
  Exch
  Exch $R3 ; $R3 = String to replace (needle)
  Exch 2
  Exch $R1 ; $R1 = String to do replacement in (haystack)
  Push $R2 ; Replaced haystack
  Push $R5 ; Len (needle)
  Push $R6 ; len (haystack)
  Push $R7 ; Scratch reg
  StrCpy $R2 ""
  StrLen $R5 $R3
  StrLen $R6 $R1
loop:
  StrCpy $R7 $R1 $R5
  StrCmp $R7 $R3 found
  StrCpy $R7 $R1 1 ; - optimization can be removed if U know len needle=1
  StrCpy $R2 "$R2$R7"
  StrCpy $R1 $R1 $R6 1
  StrCmp $R1 "" done loop
found:
  StrCpy $R2 "$R2$R4"
  StrCpy $R1 $R1 $R6 $R5
  StrCmp $R1 "" done loop
done:
  StrCpy $R3 $R2
  Pop $R7
  Pop $R6
  Pop $R5
  Pop $R2
  Pop $R1
  Pop $R4
  Exch $R3
FunctionEnd

Function HandlePriorInstall
  ## Test for existence using the UninstallString
  ReadRegStr $R0 HKLM \
  "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}" \
  "UninstallString"
  StrCmp $R0 "" noPriorInstall

  ## Get file version
  ;Making use of the Uninstall path to build the path to the exe
  StrCpy $R1 $R0 -10
  GetDllVersion "$R1ClearCanvas.Desktop.Executable.exe" $R2 $R3
  IntOp $R4 $R2 / 0x00010000
  IntOp $R5 $R2 & 0x0000FFFF
  IntOp $R6 $R3 / 0x00010000
  IntOp $R7 $R3 & 0x0000FFFF
  ;StrCpy $R3 "$R4.$R5.$R6.$R7"

  IntCmp ${MAJOR_VERSION} $R4 +1 installedVersionHigher installedVersionLower
  IntCmp ${MINOR_VERSION} $R5 +1 installedVersionHigher installedVersionLower
  IntCmp ${BUILD} $R6 +1 installedVersionHigher installedVersionLower
  IntCmp ${REVISION} $R7 sameVersionInstalled installedVersionHigher installedVersionLower


  installedVersionHigher:
  MessageBox MB_OK|MB_ICONSTOP \
  "The Installer has detected that a NEWER version of ${PRODUCT_NAME} is already installed. $\n$\nTo continue with this installation please first uninstall ${PRODUCT_NAME}." \
  /SD IDOK
  Abort

  sameVersionInstalled:
  MessageBox MB_OK|MB_ICONSTOP \
  "The Installer has detected that the SAME version of ${PRODUCT_NAME} is already installed. $\n$\nTo continue with this installation please first uninstall ${PRODUCT_NAME}." \
  /SD IDOK
  Abort

  installedVersionLower:
  MessageBox MB_OKCANCEL|MB_ICONEXCLAMATION \
  "Installer has detected that an older ${PRODUCT_NAME} version is already installed. $\n$\nClick `OK` to proceed with removing this version or `Cancel` to cancel this upgrade." \
  /SD IDOK \
  IDOK beginUninstall
  Abort

  ;Run the uninstaller
  beginUninstall:
  ClearErrors
  IfSilent "" +3
    ExecWait '$R0 /S _?=$R1' $R2
    Goto uninstallAttempted

  ExecWait '$R0 _?=$R1' $R2
    
  uninstallAttempted:
  StrCmp $R2 "0" done failedUninstall
  Abort

  IfErrors failedUninstall
    ;You can either use Delete /REBOOTOK in the uninstaller or add some code
    ;here to remove the uninstaller. Use a registry key to check
    ;whether the user has chosen to uninstall. If you are using an uninstaller
    ;components page, make sure all sections are uninstalled.
  failedUninstall:
  MessageBox MB_OK|MB_ICONSTOP "Installation cannot proceed because there was a problem with the uninstall of the previous version." /SD IDOK
  Abort

  done:
  Delete "$R0"
  Return

  noPriorInstall:
  Return
FunctionEnd


Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK "$(^Name) was successfully removed from your computer." /SD IDOK
FunctionEnd

Function un.onInit
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Are you sure you want to completely remove $(^Name) and all of its components?" /SD IDYES IDYES +2
  Abort
FunctionEnd

Function un.KillPro
   StrCpy $0 "ClearCanvas.Desktop.Executable.exe"
   DetailPrint "Searching for processes called '$0'"
   KillProc::FindProcesses
   StrCmp $1 "-1" killError
   DetailPrint "-> Found $0 processes"

   StrCmp $0 "0" completed
   Sleep 1500

   StrCpy $0 "ClearCanvas.Desktop.Executable.exe"
   DetailPrint "Killing all processes called '$0'"
   KillProc::KillProcesses
   StrCmp $1 "-1" killError
   DetailPrint "-> Killed $0 processes, failed to kill $1 processes"
   Sleep 1500

   Goto completed

   killError:
   DetailPrint "-> Error: The application is running and cannot be stopped. Please close before uninstalling"
   Abort

   completed:
   DetailPrint "Uninstalling"

FunctionEnd

Section Uninstall

  SetShellVarContext all

  ${If} ${PLATFORM_NAME} == "x86"
    Call un.KillPro
  ${ElseIf} ${PLATFORM_NAME} == "x64"
    MessageBox MB_OK|MB_ICONEXCLAMATION "Ensure that all instances of ${PRODUCT_NAME} are closed before continuing with the uninstall." /SD IDOK
  ${EndIf}
  
  Delete "$INSTDIR\${PRODUCT_NAME}.url"
  Delete "$INSTDIR\uninst.exe"
  RMDir /r "$INSTDIR\plugins"
  RMDir /r "$INSTDIR\common"
  Delete "$SMPROGRAMS\ClearCanvas\ClearCanvas Ris Client\Uninstall.lnk"
  Delete "$SMPROGRAMS\ClearCanvas\ClearCanvas Ris Client\Website.lnk"
  Delete "$DESKTOP\ClearCanvas Ris Client.lnk"
  Delete "$SMPROGRAMS\ClearCanvas\ClearCanvas Ris Client\ClearCanvas Ris Client.lnk"
  RMDir "$SMPROGRAMS\ClearCanvas\ClearCanvas Ris Client"

  Delete "$INSTDIR\*.*"

  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
  SetAutoClose true

  StrCpy $0 "$INSTDIR\uninstall.log"
  Push $0
  Call un.DumpLog
SectionEnd