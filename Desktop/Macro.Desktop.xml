<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Macro.Desktop</name>
    </assembly>
    <members>
        <member name="T:Macro.Desktop.XMouseButtons">
            <summary>
            Enumeration of the (potentially) available mouse buttons.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XMouseButtons.None">
            <summary>
            Represents no mouse buttons (the empty value).
            </summary>
        </member>
        <member name="F:Macro.Desktop.XMouseButtons.Left">
            <summary>
            The left mouse button (mouse button 1).
            </summary>
        </member>
        <member name="F:Macro.Desktop.XMouseButtons.Right">
            <summary>
            The right mouse button (mouse button 2).
            </summary>
        </member>
        <member name="F:Macro.Desktop.XMouseButtons.Middle">
            <summary>
            The middle mouse button (mouse button 3).
            </summary>
        </member>
        <member name="F:Macro.Desktop.XMouseButtons.XButton1">
            <summary>
            The first X mouse button (mouse button 4).
            </summary>
        </member>
        <member name="F:Macro.Desktop.XMouseButtons.XButton2">
            <summary>
            The second X mouse button (mouse button 5).
            </summary>
        </member>
        <member name="T:Macro.Desktop.Workspace">
            <summary>
            Represents a workspace within a desktop window.
            </summary>
        </member>
        <member name="T:Macro.Desktop.DesktopObject">
            <summary>
            Abstract base class for desktop objects such as windows, workspaces and shelves.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IDesktopObject">
            <summary>
            Defines the public interface to a <see cref="T:Macro.Desktop.DesktopObject"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IDesktopObject.Activate">
            <summary>
            Activates the object.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IDesktopObject.Close">
            <summary>
            Tries to close the object, interacting with the user if necessary.
            </summary>
            <returns>True if the object is closed, otherwise false.</returns>
        </member>
        <member name="M:Macro.Desktop.IDesktopObject.Close(Macro.Desktop.UserInteraction)">
            <summary>
            Tries to close the object, interacting with the user only if specified.
            </summary>
            <param name="interactive">A value specifying whether user interaction is allowed.</param>
            <returns>True if the object is closed, otherwise false.</returns>
        </member>
        <member name="M:Macro.Desktop.IDesktopObject.QueryCloseReady">
            <summary>
            Checks if the object is in a closable state (would be able to close without user interaction).
            </summary>
            <returns>True if the object can be closed without user interaction.</returns>
        </member>
        <member name="P:Macro.Desktop.IDesktopObject.Name">
            <summary>
            Gets the runtime name of the object, or null if the object is not named.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IDesktopObject.Title">
            <summary>
            Gets the title that is presented to the user on the screen.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IDesktopObject.State">
            <summary>
            Gets the current state of the object.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IDesktopObject.Active">
            <summary>
            Gets a value indicating whether this object is currently active.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IDesktopObject.Visible">
            <summary>
            Gets a value indicating whether this object is currently visible.
            </summary>
        </member>
        <member name="E:Macro.Desktop.IDesktopObject.ActiveChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.IDesktopObject.Active"/> property changes.
            </summary>
        </member>
        <member name="E:Macro.Desktop.IDesktopObject.VisibleChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.IDesktopObject.Visible"/> property changes.
            </summary>
        </member>
        <member name="E:Macro.Desktop.IDesktopObject.TitleChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.IDesktopObject.Title"/> property changes.
            </summary>
        </member>
        <member name="E:Macro.Desktop.IDesktopObject.Closing">
            <summary>
            Occurs when the object is about to close.
            </summary>
        </member>
        <member name="E:Macro.Desktop.IDesktopObject.Closed">
            <summary>
            Occurs when the object has closed.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.#ctor(Macro.Desktop.DesktopObjectCreationArgs)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.Activate">
            <summary>
            Activates the object.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.QueryCloseReady">
            <summary>
            Checks if the object is in a closable state (would be able to close without user interaction).
            </summary>
            <returns>True if the object can be closed without user interaction.</returns>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.Close">
            <summary>
            Tries to close the object, interacting with the user if necessary.
            </summary>
            <returns>True if the object is closed, otherwise false.</returns>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.Close(Macro.Desktop.UserInteraction)">
            <summary>
            Tries to close the object, interacting with the user only if specified.
            </summary>
            <param name="interactive">A value specifying whether user interaction is allowed.</param>
            <returns>True if the object is closed, otherwise false.</returns>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.System#IDisposable#Dispose">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.CreateView">
            <summary>
            Factory method to create a view for this object.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.Initialize">
            <summary>
            Initializes the object, prior to it becoming visible on the screen.
            </summary>
            <remarks>
            Override this method to perform custom initialization.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.CanClose">
            <summary>
            Asks the object whether it is in a closable state without user intervention.
            </summary>
            <remarks>
            The default implementation just returns true. Override this method to customize the behaviour.
            The object must respond to this method without interacting with the user.  Therefore it should respond conservatively
            (e.g. respond with false if there may be unsaved data).
            </remarks>
            <returns>True if the object can be closed, otherwise false.</returns>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.PrepareClose(Macro.Desktop.CloseReason)">
            <summary>
            Gives the object an opportunity to prepare before being closed.
            </summary>
            <remarks>
            The object is free to interact with the user in this method, in order to make any preparations
            prior to being closed.  The object may return false if it still cannot close (e.g. there is
            unsaved data, and the user, when prompted, elects to cancel the close operation).
            </remarks>
            <param name="reason">The reason for closing the object.</param>
            <returns>True if the object is ready to close, or false it the object cannot be closed.</returns>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.Dispose(System.Boolean)">
            <summary>
            Called to dispose of this object.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.OnOpening(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Macro.Desktop.DesktopObject.Opening"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.OnOpened(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Macro.Desktop.DesktopObject.Opened"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.OnClosing(Macro.Desktop.ClosingEventArgs)">
            <summary>
            Raises the <see cref="E:Macro.Desktop.DesktopObject.Closing"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.OnClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Macro.Desktop.DesktopObject.Closed"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Macro.Desktop.DesktopObject.VisibleChanged"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.OnActiveChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Macro.Desktop.DesktopObject.ActiveChanged"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.OnTitleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Macro.Desktop.DesktopObject.TitleChanged"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.RaiseActiveChanged">
            <summary>
            Raises the <see cref="E:Macro.Desktop.DesktopObject.ActiveChanged"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.Open">
            <summary>
            Opens this object.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.Close(Macro.Desktop.UserInteraction,Macro.Desktop.CloseReason)">
            <summary>
            Closes this object.
            </summary>
            <returns>True if the object was closed, otherwise false.</returns>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.AssertState(Macro.Desktop.DesktopObjectState[])">
            <summary>
            Asserts that the object is in one of the specified valid states.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.DoActivate">
            <summary>
            Activates this object.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.OnInternalActiveChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Macro.Desktop.DesktopObject.InternalActiveChanged"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObject.OnCurrentUICultureChanged">
            <summary>
            Called when the current application UI culture has changed.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DesktopObject.Name">
            <summary>
            Gets the runtime name of the object, or null if the object is not named.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DesktopObject.State">
            <summary>
            Gets the current state of the object.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DesktopObject.Title">
            <summary>
            Gets the title that is presented to the user on the screen.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DesktopObject.Visible">
            <summary>
            Gets a value indicating whether this object is currently visible.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DesktopObject.Active">
            <summary>
            Gets a value indicating whether this object is currently active.
            </summary>
        </member>
        <member name="E:Macro.Desktop.DesktopObject.Opening">
            <summary>
            Occurs when the object is about to open.
            </summary>
        </member>
        <member name="E:Macro.Desktop.DesktopObject.Opened">
            <summary>
            Occurs when the object has opened.
            </summary>
        </member>
        <member name="E:Macro.Desktop.DesktopObject.Closing">
            <summary>
            Occurs when the object is about to close.
            </summary>
        </member>
        <member name="E:Macro.Desktop.DesktopObject.Closed">
            <summary>
            Occurs when the object has closed.
            </summary>
        </member>
        <member name="E:Macro.Desktop.DesktopObject.VisibleChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.DesktopObject.Visible"/> property changes.
            </summary>
        </member>
        <member name="E:Macro.Desktop.DesktopObject.ActiveChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.DesktopObject.Active"/> property changes.
            </summary>
        </member>
        <member name="E:Macro.Desktop.DesktopObject.TitleChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.DesktopObject.Title"/> property changes.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DesktopObject.View">
            <summary>
            Gets the view for this object.
            </summary>
        </member>
        <member name="E:Macro.Desktop.DesktopObject.InternalActiveChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.DesktopObject.Active"/> property changes.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IWorkspace">
            <summary>
            Defines the public interface to a <see cref="T:Macro.Desktop.Workspace"/>.
            </summary>
            <remarks>
            This interface exists mainly for backward compatibility.  New application
            code should use the <see cref="T:Macro.Desktop.Workspace"/> class.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.IWorkspace.ShowDialogBox(Macro.Desktop.DialogBoxCreationArgs)">
            <summary>
            Shows a dialog box in front of this workspace.
            </summary>
            <param name="args">Arguments used to create the dialog box.</param>
            <returns>The newly created dialog box object.</returns>
        </member>
        <member name="P:Macro.Desktop.IWorkspace.DesktopWindow">
            <summary>
            Gets the desktop window that owns this workspace.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IWorkspace.Component">
            <summary>
            Gets the hosted component.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IWorkspace.CommandHistory">
            <summary>
            Gets the command history associated with this workspace.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IWorkspace.UserClosable">
            <summary>
            Gets a value indicating whether this workspace can be closed directly by the user.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Workspace.#ctor(Macro.Desktop.WorkspaceCreationArgs,Macro.Desktop.DesktopWindow)">
            <summary>
            Constructor.
            </summary>
            <param name="args">Arguments for creation of the <see cref="T:Macro.Desktop.Workspace"/>.</param>
            <param name="desktopWindow">The <see cref="P:Macro.Desktop.Workspace.DesktopWindow"/> that owns the <see cref="T:Macro.Desktop.Workspace"/>.</param>
        </member>
        <member name="M:Macro.Desktop.Workspace.CanClose">
            <summary>
            Asks the object whether it is in a closable state without user intervention.
            </summary>
            <returns>True if the object can be closed, otherwise false.</returns>
        </member>
        <member name="M:Macro.Desktop.Workspace.PrepareClose(Macro.Desktop.CloseReason)">
            <summary>
            Gives the hosted component a chance to prepare for a forced exit.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Workspace.OnClosing(Macro.Desktop.ClosingEventArgs)">
            <summary>
            Overridden to prevent closing the <see cref="T:Macro.Desktop.Workspace"/> if <see cref="P:Macro.Desktop.Workspace.UserClosable"/> is false.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Workspace.Initialize">
            <summary>
            Starts the hosted component.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Workspace.Dispose(System.Boolean)">
            <summary>
            Stops the hosted component.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Workspace.CreateView">
            <summary>
            Creates a view for this workspace.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Workspace.CreateWorkspaceDialogBoxView(Macro.Desktop.WorkspaceDialogBox)">
            <summary>
            Creates a dialog box view for the specified dialog box.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Workspace.ShowDialogBox(Macro.Desktop.DialogBoxCreationArgs)">
            <summary>
            Shows a dialog box in front of this workspace.
            </summary>
            <param name="args">Arguments used to create the dialog box.</param>
            <returns>The newly created dialog box object.</returns>
        </member>
        <member name="P:Macro.Desktop.Workspace.Component">
            <summary>
            Gets the hosted component.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Workspace.DesktopWindow">
            <summary>
            Gets the desktop window that owns this workspace.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Workspace.CommandHistory">
            <summary>
            Gets the command history associated with this workspace.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Workspace.UserClosable">
            <summary>
            Gets a value indicating whether this workspace can be closed directly by the user.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Workspace.Actions">
            <summary>
            Gets the set of actions that are exported from the hosted component.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Workspace.WorkspaceView">
            <summary>
            Gets the view for this object as an <see cref="T:Macro.Desktop.IWorkspaceView"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Workspace.Macro#Desktop#IWorkspace#DesktopWindow">
            <summary>
            Gets the <see cref="T:Macro.Desktop.IDesktopWindow"/> that owns this <see cref="T:Macro.Desktop.Workspace"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ApplicationComponentHost">
            <summary>
            Abstract base class for application component hosts.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IApplicationComponentHost">
            <summary>
            Defines the interface to an application component host as seen by the hosted application component.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IApplicationComponentHost.Exit">
            <summary>
            Instructs the host to terminate if, for instance, the user has pressed an OK or Cancel button.
            </summary>
            <remarks>
            The host will subsequently call <see cref="M:Macro.Desktop.IApplicationComponent.Stop"/>.  Not all hosts
            support this method.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.IApplicationComponentHost.ShowMessageBox(System.String,Macro.Common.MessageBoxActions)">
            <summary>
            Asks the host to display a message box to the user.
            </summary>
            <param name="message">The message to display.</param>
            <param name="buttons">The buttons to display.</param>
            <returns>A result indicating which button the user pressed.</returns>
        </member>
        <member name="M:Macro.Desktop.IApplicationComponentHost.SetTitle(System.String)">
            <summary>
            Asks the host to set the title for this component in the UI.
            </summary>
            <remarks>
            Not all hosts support this method.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.IApplicationComponentHost.Title">
            <summary>
            Gets or sets the title that the host displays in the UI above this component.
            </summary>
            <remarks>
            Not all hosts support this property.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.IApplicationComponentHost.CommandHistory">
            <summary>
            Gets the <see cref="P:Macro.Desktop.IApplicationComponentHost.CommandHistory"/> object associated with this host.
            </summary>
            <remarks>
            Not all hosts support this property.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.IApplicationComponentHost.DesktopWindow">
            <summary>
            Gets the <see cref="P:Macro.Desktop.IApplicationComponentHost.DesktopWindow"/> associated with this host.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponentHost.#ctor(Macro.Desktop.IApplicationComponent)">
            <summary>
            Default constructor.
            </summary>
            <param name="component">The component to be hosted.</param>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponentHost.StartComponent">
            <summary>
            Starts the hosted component.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponentHost.StopComponent">
            <summary>
            Stops the hosted component.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponentHost.Exit">
            <summary>
            Asks the host to exit.
            </summary>
            <exception cref="T:System.NotSupportedException">The host does not support exit requests.</exception>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponentHost.ShowMessageBox(System.String,Macro.Common.MessageBoxActions)">
            <summary>
            Shows a message box in the associated desktop window.
            </summary>
            <param name="message"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponentHost.SetTitle(System.String)">
            <summary>
            Asks the host to set the title in the user-interface.
            </summary>
            <exception cref="T:System.NotSupportedException">The host does not support titles.</exception>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponentHost.IsStarted">
            <summary>
            Gets a value indicating whether the hosted component has been started.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponentHost.Component">
            <summary>
            Gets the hosted component.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponentHost.ComponentView">
            <summary>
            Gets the view for the hosted component, creating it if it has not yet been created.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponentHost.CommandHistory">
            <summary>
            Gets the associated command history object.
            </summary>
            <exception cref="T:System.NotSupportedException">The host does not support command history.</exception>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponentHost.Title">
            <summary>
            Gets or sets the title displayed in the user-interface.
            </summary>
            <exception cref="T:System.NotSupportedException">The host does not support titles.</exception>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponentHost.DesktopWindow">
            <summary>
            Gets the associated desktop window.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IWorkspaceHost">
            <summary>
            Extends <see cref="T:Macro.Desktop.IApplicationComponentHost"/> with functionality specific to workspaces.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IWorkspaceHost.IsWorkspaceActive">
            <summary>
            Gets a value indicating whether the workspace in which the component
            is hosted is currently the active workspace.
            </summary>
        </member>
        <member name="E:Macro.Desktop.IWorkspaceHost.IsWorkspaceActiveChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.IWorkspaceHost.IsWorkspaceActive"/> property changes.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationRulesSettings.Save(Macro.Common.Configuration.ISettingsStore)">
            <summary>
            Saves any changes made to the rules document to the specified settings store.
            </summary>
            <param name="settingsStore"></param>
        </member>
        <member name="P:Macro.Desktop.Validation.ValidationRulesSettings.RulesDocument">
            <summary>
            Gets the XML rules document.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Validation.ValidationRulesSettings.CustomRulesXml">
            <summary>
            XML document specifying custom user-interface validation rules.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ShelfCollection">
            <summary>
            Represents the collection of <see cref="T:Macro.Desktop.Shelf"/> objects for a desktop window.
            </summary>
        </member>
        <member name="T:Macro.Desktop.DesktopObjectCollection`1">
            <summary>
            Generic abstract base class for collections of <see cref="T:Macro.Desktop.DesktopObject"/> subclasses.
            </summary>
            <typeparam name="T">The type of <see cref="T:Macro.Desktop.DesktopObject"/> subclass.</typeparam>
        </member>
        <member name="M:Macro.Desktop.DesktopObjectCollection`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObjectCollection`1.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObjectCollection`1.Contains(`0)">
            <summary>
            Checks if the specified item exists in this collection.
            </summary>
            <param name="obj">The desktop object to look for.</param>
        </member>
        <member name="M:Macro.Desktop.DesktopObjectCollection`1.Contains(System.String)">
            <summary>
            Checks if this collection contains an item with the specified name.
            </summary>
            <param name="name">The name of the object to look for.</param>
        </member>
        <member name="M:Macro.Desktop.DesktopObjectCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObjectCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> for the collection.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObjectCollection`1.System#IDisposable#Dispose">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObjectCollection`1.OnItemOpening(Macro.Common.Utilities.ItemEventArgs{`0})">
            <summary>
            Raises the <see cref="E:Macro.Desktop.DesktopObjectCollection`1.ItemOpening"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObjectCollection`1.OnItemOpened(Macro.Common.Utilities.ItemEventArgs{`0})">
            <summary>
            Raises the <see cref="E:Macro.Desktop.DesktopObjectCollection`1.ItemOpened"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObjectCollection`1.OnItemClosing(Macro.Desktop.ClosingItemEventArgs{`0})">
            <summary>
            Raises the <see cref="E:Macro.Desktop.DesktopObjectCollection`1.ItemClosing"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObjectCollection`1.OnItemClosed(Macro.Desktop.ClosedItemEventArgs{`0})">
            <summary>
            Raises the <see cref="E:Macro.Desktop.DesktopObjectCollection`1.ItemClosed"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObjectCollection`1.OnItemVisibilityChanged(Macro.Common.Utilities.ItemEventArgs{`0})">
            <summary>
            Raises the <see cref="E:Macro.Desktop.DesktopObjectCollection`1.ItemVisibilityChanged"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObjectCollection`1.OnItemActivationChangedInternal(Macro.Common.Utilities.ItemEventArgs{`0})">
            <summary>
            Raises the <see cref="E:Macro.Desktop.DesktopObjectCollection`1.ItemActivationChanged"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObjectCollection`1.OnItemActivationChanged(Macro.Common.Utilities.ItemEventArgs{`0})">
            <summary>
            Raises the <see cref="E:Macro.Desktop.DesktopObjectCollection`1.ItemActivationChanged"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObjectCollection`1.Dispose(System.Boolean)">
            <summary>
            Disposes of this collection, first disposing of each object in the collection.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObjectCollection`1.Open(`0)">
            <summary>
            Opens the specified object.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObjectCollection`1.Add(`0)">
            <summary>
            Adds the specified object to the collection.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObjectCollection`1.Remove(`0)">
            <summary>
            Removes the specified object from the collection.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DesktopObjectCollection`1.Item(System.String)">
            <summary>
            Gets the object in the collection with the specified name.
            </summary>
            <param name="name">The name of the desktop object.</param>
        </member>
        <member name="P:Macro.Desktop.DesktopObjectCollection`1.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="E:Macro.Desktop.DesktopObjectCollection`1.ItemOpening">
            <summary>
            Occurs when a new item is about to open, after it has been added to the collection.
            </summary>
        </member>
        <member name="E:Macro.Desktop.DesktopObjectCollection`1.ItemOpened">
            <summary>
            Occurs after a new item has opened.
            </summary>
        </member>
        <member name="E:Macro.Desktop.DesktopObjectCollection`1.ItemClosing">
            <summary>
            Occurs before an item is about to close.
            </summary>
        </member>
        <member name="E:Macro.Desktop.DesktopObjectCollection`1.ItemClosed">
            <summary>
            Occurs after an item has closed and been removed from the collection. 
            </summary>
        </member>
        <member name="E:Macro.Desktop.DesktopObjectCollection`1.ItemVisibilityChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.DesktopObject.Visible"/> property of an item in the collection changes.
            </summary>
        </member>
        <member name="E:Macro.Desktop.DesktopObjectCollection`1.ItemActivationChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.DesktopObject.Active"/> property of an item in the collection changes.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ShelfCollection.#ctor(Macro.Desktop.DesktopWindow)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ShelfCollection.AddNew(Macro.Desktop.IApplicationComponent,System.String,Macro.Desktop.ShelfDisplayHint)">
            <summary>
            Opens a new shelf.
            </summary>
            <param name="component">The <see cref="T:Macro.Desktop.IApplicationComponent"/> that is to be hosted in the returned <see cref="T:Macro.Desktop.Shelf"/>.</param>
            <param name="title">The title of the <see cref="T:Macro.Desktop.Shelf"/>.</param>
            <param name="displayHint">A hint for how the <see cref="T:Macro.Desktop.Shelf"/> should be initially displayed.</param>
        </member>
        <member name="M:Macro.Desktop.ShelfCollection.AddNew(Macro.Desktop.IApplicationComponent,System.String,System.String,Macro.Desktop.ShelfDisplayHint)">
            <summary>
            Opens a new shelf.
            </summary>
            <param name="component">The <see cref="T:Macro.Desktop.IApplicationComponent"/> that is to be hosted in the returned <see cref="T:Macro.Desktop.Shelf"/>.</param>
            <param name="title">The title of the <see cref="T:Macro.Desktop.Shelf"/>.</param>
            <param name="name">A name/identifier for the <see cref="T:Macro.Desktop.Shelf"/>.</param>
            <param name="displayHint">A hint for how the <see cref="T:Macro.Desktop.Shelf"/> should be initially displayed.</param>
        </member>
        <member name="M:Macro.Desktop.ShelfCollection.AddNew(Macro.Desktop.ShelfCreationArgs)">
            <summary>
            Opens a new shelf given the input <see cref="T:Macro.Desktop.ShelfCreationArgs"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ShelfCollection.CreateShelf(Macro.Desktop.ShelfCreationArgs)">
            <summary>
            Creates a new shelf.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Command">
            <summary>
            Abstract base class for commands.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Command.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Command.Execute">
            <summary>
            Executes the command.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Command.Name">
            <summary>
            Gets or sets the command name.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.ValidationMethodForAttributeException">
            <summary>
            Thrown by <see cref="T:Macro.Desktop.Validation.ValidationMethodForAttribute"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.ValidationMethodForAttribute">
            <summary>
            Attribute used to decorate a method as a validation method.
            </summary>
            <remarks>
            The property matching <see cref="P:Macro.Desktop.Validation.ValidationMethodForAttribute.PropertyName"/> will be validated
            via the decorated method.  The method must match the signature of
            <see cref="T:Macro.Desktop.Validation.ValidationMethodForAttribute.ValidationMethod"/>.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationMethodForAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="propertyName">The property the decorated method is intended to validate.</param>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationMethodForAttribute.CreateRule(System.Reflection.MethodInfo)">
            <summary>
            Factory method that creates an <see cref="T:Macro.Desktop.Validation.IValidationRule"/> for 
            the property with the name <see cref="P:Macro.Desktop.Validation.ValidationMethodForAttribute.PropertyName"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Validation.ValidationMethodForAttribute.PropertyName">
            <summary>
            Identifies the property whose validation will be done via the decorated method.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.ValidationMethodForAttribute.ValidationMethod">
            <summary>
            Defines the method signature for methods decorated with <see cref="T:Macro.Desktop.Validation.ValidationMethodForAttribute"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.IApplicationComponentContainerValidationStrategy">
            <summary>
            Defines the interface to provide custom validation strategies for application components.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.IApplicationComponentContainerValidationStrategy.HasValidationErrors(Macro.Desktop.IApplicationComponentContainer)">
            <summary>
            Determines whether the specified container has validation errors, according to this strategy.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.IApplicationComponentContainerValidationStrategy.ShowValidation(Macro.Desktop.IApplicationComponentContainer,System.Boolean)">
            <summary>
            Displays validation errors for the specified container to the user, according to the logic
            encapsulated in this strategy.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.SimpleActionModel">
            <summary>
            Represents a simple, in memory action model that is created in code, not via attributes.
            </summary>
            <remarks>
            The <see cref="T:Macro.Desktop.Actions.SimpleActionModel"/> is particularly useful for action models that 
            are created in code and/or are not intended to be dynamic or extensible.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.Actions.ActionModelRoot">
            <summary>
            Represents the root node of an action model.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.ActionModelNode">
            <summary>
            Represents a node in an action model.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelNode.#ctor(Macro.Desktop.PathSegment)">
            <summary>
            Protected constructor.
            </summary>
            <param name="pathSegment">The segment of the action path to which this node corresponds.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelNode.CloneNode(Macro.Desktop.PathSegment)">
            <summary>
            Used by the <see cref="M:Macro.Desktop.Actions.ActionModelNode.CloneTree"/> method.
            </summary>
            <remarks>
            Derived classes must override this method to return a clone node.  This clone should
            not copy the sub-tree.
            </remarks>
            <param name="pathSegment">The path segment which this node represents.</param>
            <returns>A new node of this type.</returns>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelNode.Merge(Macro.Desktop.Actions.ActionModelNode)">
            <summary>
            Merges the specified model into this model.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelNode.GetActionsInOrder">
            <summary>
            Performs an in-order traversal of this model and returns the set of actions as an array.
            </summary>
            <returns>An array of <see cref="T:Macro.Desktop.Actions.IAction"/> objects.</returns>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelNode.GetLeafNodesInOrder">
            <summary>
            Performs an in-order traversal of this model and returns the leaf nodes as an array.
            </summary>
            <returns>An array of leaf <see cref="T:Macro.Desktop.Actions.ActionModelNode"/>s.</returns>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelNode.Insert(Macro.Desktop.Path,System.Int32,System.Converter{Macro.Desktop.PathSegment,Macro.Desktop.Actions.ActionModelNode})">
            <summary>
            Traverses the specified path, inserting <see cref="T:Macro.Desktop.Actions.BranchNode"/>s as necessary, until the end of the path
            is reached, at which point the <paramref name="leafNodeProvider"/> is called to provide a leaf node to insert.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelNode.FindChild(Macro.Desktop.PathSegment)">
            <summary>
            Finds a child of this node, based on the specified <see cref="P:Macro.Desktop.Actions.ActionModelNode.PathSegment"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelNode.CloneTree">
            <summary>
            Creates a copy of the subtree beginning at this node.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.ActionModelNode.PathSegment">
            <summary>
            Gets the action path segment represented by this node.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.ActionModelNode.ChildNodes">
            <summary>
            Gets the list of child nodes of this node.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelRoot.CreateModel(System.String,System.String,Macro.Desktop.Actions.IActionSet)">
            <summary>
            Creates the action model with the specified namespace and site, using the specified
            set of actions as input.
            </summary>
            <remarks>
            If an action model specification for the namespace/site
            does not exist, it will be created.  If it does exist, it will be used as guidance
            in constructing the action model tree.
            </remarks>
            <param name="namespace">A namespace to qualify the site, typically the class name of the calling class is a good choice.</param>
            <param name="site">The site (<see cref="P:Macro.Desktop.Actions.ActionPath.Site"/>).</param>
            <param name="actions">The set of actions from which to construct the model.</param>
            <returns>An action model tree.</returns>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelRoot.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelRoot.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="site">The site to which this model corresponds.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelRoot.InsertActions(Macro.Desktop.Actions.IAction[])">
            <summary>
            Inserts the specified actions into this model in the specified order.
            </summary>
            <param name="actions">The actions to insert.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelRoot.InsertAction(Macro.Desktop.Actions.IAction)">
            <summary>
            Inserts the specified action into this model.
            </summary>
            <param name="action">The action to insert.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelRoot.InsertSeparator(Macro.Desktop.Path)">
            <summary>
            Inserts a separator into the action model at the specified path.
            </summary>
            <param name="separatorPath"></param>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelRoot.CloneNode(Macro.Desktop.PathSegment)">
            <summary>
            Used by the <see cref="M:Macro.Desktop.Actions.ActionModelNode.CloneTree"/> method.
            </summary>
            <param name="pathSegment">The path segment which this node represents.</param>
            <returns>A new node of this type.</returns>
        </member>
        <member name="P:Macro.Desktop.Actions.ActionModelRoot.Site">
            <summary>
            Gets the site (the first component of the path).
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.SimpleActionModel.#ctor(Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="resolver">The <see cref="T:Macro.Common.Utilities.IResourceResolver"/> used to resolve the path and icons for the actions.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.SimpleActionModel.AddAction(System.Object,System.String,System.String)">
            <summary>
            Adds an action to the action model.
            </summary>
            <param name="key">The action key, so that actions can be easily retrieve via the <see cref="P:Macro.Desktop.Actions.SimpleActionModel.Item(System.Object)"/> indexer.</param>
            <param name="displayName">The display name for the action.</param>
            <param name="icon">The resource name of the icon.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.SimpleActionModel.AddAction(System.Object,System.String,System.String,Macro.Desktop.Actions.ClickHandlerDelegate)">
            <summary>
            Adds an action to the action model.
            </summary>
            <param name="key">The action key, so that actions can be easily retrieve via the <see cref="P:Macro.Desktop.Actions.SimpleActionModel.Item(System.Object)"/> indexer.</param>
            <param name="displayName">The display name for the action.</param>
            <param name="icon">The resource name of the icon.</param>
            <param name="clickHandler">The click handler of the action.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.SimpleActionModel.AddAction(System.Object,System.String,System.String,System.String)">
            <summary>
            Adds an action to the action model.
            </summary>
            <param name="key">The action key, so that actions can be easily retrieve via the <see cref="P:Macro.Desktop.Actions.SimpleActionModel.Item(System.Object)"/> indexer.</param>
            <param name="displayName">The display name for the action.</param>
            <param name="icon">The resource name of the icon.</param>
            <param name="tooltip">The action tooltip.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.SimpleActionModel.AddAction(System.Object,System.String,System.String,System.String,Macro.Desktop.Actions.ClickHandlerDelegate)">
            <summary>
            Adds an action to the action model.
            </summary>
            <param name="key">The action key, so that actions can be easily retrieve via the <see cref="P:Macro.Desktop.Actions.SimpleActionModel.Item(System.Object)"/> indexer.</param>
            <param name="displayName">The display name for the action.</param>
            <param name="icon">The resource name of the icon.</param>
            <param name="tooltip">The action tooltip.</param>
            <param name="clickHandler">The click handler of the action.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.SimpleActionModel.AddAction(System.Object,System.String,System.String,System.String,Macro.Desktop.Actions.ClickHandlerDelegate,System.String)">
            <summary>
            Adds an action to the action model.
            </summary>
            <param name="key">The action key, so that actions can be easily retrieve via the <see cref="P:Macro.Desktop.Actions.SimpleActionModel.Item(System.Object)"/> indexer.</param>
            <param name="displayName">The display name for the action.</param>
            <param name="icon">The resource name of the icon.</param>
            <param name="tooltip">The action tooltip.</param>
            <param name="clickHandler">The click handler of the action.</param>
            <param name="authorityToken">The authority token for the action.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.SimpleActionModel.AddAction(System.Object,System.String,System.String,System.String,Macro.Desktop.Actions.ClickHandlerDelegate,Macro.Common.Specifications.ISpecification)">
            <summary>
            Adds an action to the action model.
            </summary>
            <param name="key">The action key, so that actions can be easily retrieve via the <see cref="P:Macro.Desktop.Actions.SimpleActionModel.Item(System.Object)"/> indexer.</param>
            <param name="displayName">The display name for the action.</param>
            <param name="icon">The resource name of the icon.</param>
            <param name="tooltip">The action tooltip.</param>
            <param name="clickHandler">The click handler of the action.</param>
            <param name="permissionSpec">The permission specification for the action.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.SimpleActionModel.AddTextBoxAction(System.Object,System.String,Macro.Common.Specifications.ISpecification)">
            <summary>
            Adds a <see cref="T:Macro.Desktop.Actions.TextBoxAction"/> to this action model.
            </summary>
            <param name="key"></param>
            <param name="tooltip"></param>
            <param name="permissionSpec"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Actions.SimpleActionModel.AddSeparator">
            <summary>
            Adds a separator at the current position.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.SimpleActionModel.Item(System.Object)">
            <summary>
            Gets actions by key.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ToolStripSettings">
            <summary>
            Stores general settings for toolbars and menus.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ToolStripSettings.WrapLongToolstrips">
            <summary>
            Controls if tool strips longer than the window size should be wrapped.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ToolStripSettings.IconSize">
            <summary>
            Controls the size of toolstrip buttons.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ToolStripSettings.ToolStripDock">
            <summary>
            User&apos;s preference as to where the main toolbar should be docked.
            </summary>
        </member>
        <member name="T:Macro.Desktop.SuggestionsProvidedEventArgs">
            <summary>
            Event args for the <see cref="E:Macro.Desktop.ISuggestionProvider.SuggestionsProvided"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SuggestionsProvidedEventArgs.#ctor(System.Collections.IList)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.Desktop.SuggestionsProvidedEventArgs.Items">
            <summary>
            Gets the list of suggested items.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ISuggestionProvider">
            <summary>
            Defines an interface to an object that provides suggestions dynamically based on text entered by the user.
            </summary>
            <remarks>
            This interface has been designed so that the implementation may optionally provide suggestions
            in an asynchronous manner.  The <see cref="M:Macro.Desktop.ISuggestionProvider.SetQuery(System.String)"/> method is called repeatedly as the 
            user modifies the query string in the user-interface.  The implementation can respond by raising
            the <see cref="E:Macro.Desktop.ISuggestionProvider.SuggestionsProvided"/> event to provide a list of suggestions based on the query.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.ISuggestionProvider.SetQuery(System.String)">
            <summary>
            Called by the user-inteface to inform this object of changes in the user query text.
            </summary>
        </member>
        <member name="E:Macro.Desktop.ISuggestionProvider.SuggestionsProvided">
            <summary>
            Notifies the user-interfaces that an updated list of suggestions is available.
            </summary>
        </member>
        <member name="T:Macro.Desktop.GalleryToolExtensionPoint">
            <summary>
            Extension point for tools that operate on a <see cref="T:Macro.Desktop.GalleryComponent"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IGalleryToolContext">
            <summary>
            <see cref="T:Macro.Desktop.Tools.IToolContext"/> class for tools that operate on a <see cref="T:Macro.Desktop.GalleryComponent"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Tools.IToolContext">
            <summary>
            Base interface for all tool context interfaces.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IGalleryToolContext.Activate(Macro.Desktop.IGalleryItem)">
            <summary>
            Activates the specified <see cref="T:Macro.Desktop.IGalleryItem"/>.
            </summary>
            <param name="item">The item to activate.</param>
        </member>
        <member name="M:Macro.Desktop.IGalleryToolContext.Select(System.Collections.Generic.IEnumerable{Macro.Desktop.IGalleryItem})">
            <summary>
            Selects the specified <see cref="T:Macro.Desktop.IGalleryItem"/>s.
            </summary>
            <remarks>
            Unselection of all items can be accomplished by passing an empty enumeration to <see cref="M:Macro.Desktop.IGalleryToolContext.Select(System.Collections.Generic.IEnumerable{Macro.Desktop.IGalleryItem})"/>.
            </remarks>
            <param name="selection">The items to select.</param>
        </member>
        <member name="M:Macro.Desktop.IGalleryToolContext.Select(Macro.Desktop.IGalleryItem)">
            <summary>
            Selects the specified <see cref="T:Macro.Desktop.IGalleryItem"/>.
            </summary>
            <remarks>
            Unselection of all items can be accomplished by passing an empty enumeration to <see cref="M:Macro.Desktop.IGalleryToolContext.Select(System.Collections.Generic.IEnumerable{Macro.Desktop.IGalleryItem})"/>.
            </remarks>
            <param name="item">The item to select.</param>
        </member>
        <member name="E:Macro.Desktop.IGalleryToolContext.SelectionChanged">
            <summary>
            Indicates that the current selection of <see cref="T:Macro.Desktop.IGalleryItem"/>s in the gallery has changed.
            </summary>
        </member>
        <member name="E:Macro.Desktop.IGalleryToolContext.ItemActivated">
            <summary>
            Indicates that an <see cref="T:Macro.Desktop.IGalleryItem"/> in the gallery has been activated
            </summary>
        </member>
        <member name="P:Macro.Desktop.IGalleryToolContext.DesktopWindow">
            <summary>
            Gets the <see cref="T:Macro.Desktop.IDesktopWindow"/> that the <see cref="T:Macro.Desktop.GalleryComponent"/> is on.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IGalleryToolContext.DataSource">
            <summary>
            Gets the underlying <see cref="T:System.ComponentModel.IBindingList"/> of <see cref="T:Macro.Desktop.IGalleryItem"/>s.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IGalleryToolContext.Selection">
            <summary>
            Gets the current selection of <see cref="T:Macro.Desktop.IGalleryItem"/>s.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IGalleryToolContext.SelectedData">
            <summary>
            Gets the data objects of the current selection of <see cref="T:Macro.Desktop.IGalleryItem"/>s.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IGalleryItem">
            <summary>
            An item for display in a gallery-style view.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IGalleryItem.Image">
            <summary>
            The image/icon to display.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IGalleryItem.Name">
            <summary>
            The name of the object.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IGalleryItem.Description">
            <summary>
            A brief description of the object.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IGalleryItem.Item">
            <summary>
            The actual object that is being visually represented in the gallery.
            </summary>
        </member>
        <member name="T:Macro.Desktop.DesktopWindowFactoryExtensionPoint">
            <summary>
            Defines an extension point for providing a custom factory for creating instances of <see cref="T:Macro.Desktop.DesktopWindow"/>.
            </summary>
            <remarks>
            Provide an extension to this point if you have subclassed <see cref="T:Macro.Desktop.DesktopWindow"/> and you want to be 
            able to provide instances of your subclass to the framework when it requests creation of a new desktop window.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.IDesktopWindowFactory">
            <summary>
            Defines the interface to extensions of <see cref="T:Macro.Desktop.DesktopWindowFactoryExtensionPoint"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IDesktopWindowFactory.CreateWindow(Macro.Desktop.DesktopWindowCreationArgs,Macro.Desktop.Application)">
            <summary>
            Creates a new desktop window for the specified arguments.
            </summary>
            <param name="args">Arguments that control the creation of the desktop window.</param>
            <param name="application">The application with which the window is associated.</param>
            <returns>A new desktop window instance.</returns>
        </member>
        <member name="T:Macro.Desktop.DefaultDesktopWindowFactory">
            <summary>
            Default desktop window factory used when no extensions are provided.
            </summary>
        </member>
        <member name="T:Macro.Desktop.WorkspaceFactoryExtensionPoint">
            <summary>
            Defines an extension point for providing a custom factory for creating instances of <see cref="T:Macro.Desktop.Workspace"/>.
            </summary>
            <remarks>
            Provide an extension to this point if you have subclassed <see cref="T:Macro.Desktop.Workspace"/> and you want to be 
            able to provide instances of your subclass to the framework when it requests creation of a new workspace.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.IWorkspaceFactory">
            <summary>
            Defines the interface to extensions of <see cref="T:Macro.Desktop.WorkspaceFactoryExtensionPoint"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IWorkspaceFactory.CreateWorkspace(Macro.Desktop.WorkspaceCreationArgs,Macro.Desktop.DesktopWindow)">
            <summary>
            Creates a new workspace for the specified arguments.
            </summary>
            <param name="args">Arguments that control the creation of the workspace.</param>
            <param name="window">The desktop window with which the workspace is associated.</param>
            <returns>A new workspace instance.</returns>
        </member>
        <member name="T:Macro.Desktop.DefaultWorkspaceFactory">
            <summary>
            Default workspace factory used when no extensions are provided.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ShelfFactoryExtensionPoint">
            <summary>
            Defines an extension point for providing a custom factory for creating instances of <see cref="T:Macro.Desktop.Shelf"/>.
            </summary>
            <remarks>
            Provide an extension to this point if you have subclassed <see cref="T:Macro.Desktop.Shelf"/> and you want to be 
            able to provide instances of your subclass to the framework when it requests creation of a new shelf.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.IShelfFactory">
            <summary>
            Defines the interface to extensions of <see cref="T:Macro.Desktop.ShelfFactoryExtensionPoint"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IShelfFactory.CreateShelf(Macro.Desktop.ShelfCreationArgs,Macro.Desktop.DesktopWindow)">
            <summary>
            Creates a new shelf for the specified arguments.
            </summary>
            <param name="args">Arguments that control the creation of the shelf.</param>
            <param name="window">The desktop window with which the shelf is associated.</param>
            <returns>A new shelf instance.</returns>
        </member>
        <member name="T:Macro.Desktop.DefaultShelfFactory">
            <summary>
            Default shelf factory used when no extensions are provided.
            </summary>
        </member>
        <member name="T:Macro.Desktop.DialogBoxFactoryExtensionPoint">
            <summary>
            Defines an extension point for providing a custom factory for creating instances of <see cref="T:Macro.Desktop.DialogBox"/>.
            </summary>
            <remarks>
            Provide an extension to this point if you have subclassed <see cref="T:Macro.Desktop.DialogBox"/> and you want to be 
            able to provide instances of your subclass to the framework when it requests creation of a new dialog box.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.IDialogBoxFactory">
            <summary>
            Defines the interface to extensions of <see cref="T:Macro.Desktop.DialogBoxFactoryExtensionPoint"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IDialogBoxFactory.CreateDialogBox(Macro.Desktop.DialogBoxCreationArgs,Macro.Desktop.DesktopWindow)">
            <summary>
            Creates a new dialog box for the specified arguments.
            </summary>
            <param name="args">Arguments that control the creation of the dialog.</param>
            <param name="window">The desktop window with which the dialog is associated.</param>
            <returns>A new dialog instance.</returns>
        </member>
        <member name="T:Macro.Desktop.DefaultDialogBoxFactory">
            <summary>
            Default dialog factory used when no extensions are provided.
            </summary>
        </member>
        <member name="T:Macro.Desktop.WorkspaceDialogBoxFactoryExtensionPoint">
            <summary>
            Defines an extension point for providing a custom factory for creating instances of <see cref="T:Macro.Desktop.WorkspaceDialogBox"/>.
            </summary>
            <remarks>
            Provide an extension to this point if you have subclassed <see cref="T:Macro.Desktop.WorkspaceDialogBox"/> and you want to be 
            able to provide instances of your subclass to the framework when it requests creation of a new workspace dialog.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.IWorkspaceDialogBoxFactory">
            <summary>
            Defines the interface to extensions of <see cref="T:Macro.Desktop.WorkspaceDialogBoxFactoryExtensionPoint"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IWorkspaceDialogBoxFactory.CreateWorkspaceDialogBox(Macro.Desktop.DialogBoxCreationArgs,Macro.Desktop.Workspace)">
            <summary>
            Creates a new dialog box for the specified arguments.
            </summary>
            <param name="args">Arguments that control the creation of the dialog.</param>
            <param name="workspace">The workspace with which the dialog is associated.</param>
            <returns>A new dialog instance.</returns>
        </member>
        <member name="T:Macro.Desktop.DefaultWorkspaceDialogBoxFactory">
            <summary>
            Default dialog factory used when no extensions are provided.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DefaultWorkspaceDialogBoxFactory.CreateWorkspaceDialogBox(Macro.Desktop.DialogBoxCreationArgs,Macro.Desktop.Workspace)">
            <summary>
            Creates a new dialog box for the specified arguments.
            </summary>
            <param name="args">Arguments that control the creation of the dialog.</param>
            <param name="workspace">The workspace with which the dialog is associated.</param>
            <returns>A new dialog instance.</returns>
        </member>
        <member name="T:Macro.Desktop.NavigatorComponentContainer">
            <summary>
            An application component that acts as a container for other application components.
            </summary>
            <remarks>
            The child components are treated as "pages", where each page is a node in a tree.
            Only one page is displayed at a time, however, a navigation tree is provided on the side
            to aid the user in navigating the set of pages.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.PagedComponentContainer`1">
            <summary>
            Abstract base class for application component containers that support multiple pages.
            </summary>
            <typeparam name="TPage">The type of the page in the container.</typeparam>
        </member>
        <member name="T:Macro.Desktop.ApplicationComponentContainer">
            <summary>
            Abstract base class for application components that act as containers for other application components.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ApplicationComponent">
            <summary>
            Abstract base class for all application components. 
            </summary>
            <remarks>
            Components should extend this class rather than implement <see cref="T:Macro.Desktop.IApplicationComponent"/> directly,
            as it provides a default implementation suitable for most situations.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.IApplicationComponent">
            <summary>
            Defines the interface to an application component as seen by an application component host.
            </summary>
            <remarks>
            An application component must implement this interface in order to be hosted by the desktop framework.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.IApplicationComponent.SetHost(Macro.Desktop.IApplicationComponentHost)">
            <summary>
            Called by the framework to initialize the component with a host.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IApplicationComponent.Start">
            <summary>
            Called by the framework to initialize the component.
            </summary>
            <remarks>
            This method will be called before the component becomes visible
            on the screen.  All significant initialization should be performed
            here rather than in the constructor.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.IApplicationComponent.Stop">
            <summary>
            Called by the framework to allow the component to perform any clean-up.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IApplicationComponent.ShowValidation(System.Boolean)">
            <summary>
            Shows or hides validation errors.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IApplicationComponent.CanExit">
            <summary>
            Called by the framework to determine if this component in a state
            such that it can be stopped without user interaction.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IApplicationComponent.PrepareExit">
            <summary>
            Called by the framework in the case where the host has initiated the exit, rather than the component,
            to give the component a chance to prepare prior to being stopped.
            </summary>
            <returns>Whether or not the component is capable of exiting at this time.</returns>
        </member>
        <member name="P:Macro.Desktop.IApplicationComponent.ExportedActions">
            <summary>
            Allows the component to export a set of actions to the host.
            </summary>
            <remarks>
            It is up to the host implementation to determine what, if anything,
            is done with the actions.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.IApplicationComponent.GlobalActionsNamespace">
            <summary>
            Allows the component to specify the namespace that qualifies its global action models. This value may not be null.
            </summary>
            <remarks>
            <para>
            This value is used by the default implementation of <see cref="T:Macro.Desktop.IDesktopWindow"/> to qualify the action model
            to be used for the global toolbar and menu sites.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.Desktop.IApplicationComponent.IsStarted">
            <summary>
            Returns true if the component is live.
            </summary>
            <remarks>
            A component is considered live after the Start()
            method has been called, and before the Stop() method is called.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.IApplicationComponent.Modified">
            <summary>
            Allows the host to determine whether this component holds modified
            data that may need to be saved.
            </summary>
        </member>
        <member name="E:Macro.Desktop.IApplicationComponent.ModifiedChanged">
            <summary>
            Notifies the host that the value of the <see cref="P:Macro.Desktop.IApplicationComponent.Modified"/> property has changed.
            </summary>
        </member>
        <member name="E:Macro.Desktop.IApplicationComponent.AllPropertiesChanged">
            <summary>
            Notifies the host that the value of any or all properties may have changed.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IApplicationComponent.HasValidationErrors">
            <summary>
            Gets a value indicating whether there are any validation errors based on the current state of the component.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IApplicationComponent.ValidationVisible">
            <summary>
            Gets a value indicating whether validation errors should be visible on the user-interface.
            </summary>
        </member>
        <member name="E:Macro.Desktop.IApplicationComponent.ValidationVisibleChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.IApplicationComponent.ValidationVisible"/> property has changed.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IApplicationComponent.ExitCode">
            <summary>
            Gets or sets the exit code for the component.
            </summary>
        </member>
        <member name="E:Macro.Desktop.IApplicationComponent.Started">
            <summary>
            Occurs after the component has started.
            </summary>
        </member>
        <member name="E:Macro.Desktop.IApplicationComponent.Stopped">
            <summary>
            Occurs after the component has stopped.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.LaunchAsWorkspace(Macro.Desktop.IDesktopWindow,Macro.Desktop.IApplicationComponent,System.String,Macro.Desktop.ApplicationComponentExitDelegate)">
            <summary>
            Executes the specified application component in a new workspace; the exit callback will be invoked
            when the workspace is closed.
            </summary>
            <remarks>
            If the specified component throws an exception from the <see cref="M:Macro.Desktop.ApplicationComponent.Start"/> method, that exception
            will be propagated to the caller of this method and the component will not be launched.
            </remarks>
            <param name="desktopWindow">The desktop window in which the workspace will run.</param>
            <param name="component">The application component to launch.</param>
            <param name="title">The title of the workspace.</param>
            <param name="exitCallback">An optional callback to invoke when the workspace is closed.</param>
            <returns>The workspace that is hosting the component.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.LaunchAsWorkspace(Macro.Desktop.IDesktopWindow,Macro.Desktop.IApplicationComponent,System.String,System.String,Macro.Desktop.ApplicationComponentExitDelegate)">
            <summary>
            Executes the specified application component in a new workspace; the exit callback will be invoked
            when the workspace is closed.
            </summary>
            <param name="desktopWindow">The desktop window in which the workspace will run.</param>
            <param name="component">The application component to launch.</param>
            <param name="title">The display title of the workspace.</param>
            <param name="name">The unique name of the workspace.</param>
            <param name="exitCallback">An optional callback to invoke when the workspace is closed.</param>
            <returns>The workspace that is hosting the component.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.LaunchAsWorkspace(Macro.Desktop.IDesktopWindow,Macro.Desktop.IApplicationComponent,System.String,System.String)">
            <summary>
            Executes the specified application component in a new workspace.
            </summary>
            <remarks>
            If the specified component throws an exception from the <see cref="M:Macro.Desktop.ApplicationComponent.Start"/> method, that exception
            will be propagate to the caller of this method and the component will not be launched.
            </remarks>
            <param name="desktopWindow">The desktop window in which the workspace will run.</param>
            <param name="component">The application component to launch.</param>
            <param name="title">The title of the workspace.</param>
            <param name="name">A name that will be assigned to the workspace.</param>
            <returns>The workspace that is hosting the component.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.LaunchAsWorkspace(Macro.Desktop.IDesktopWindow,Macro.Desktop.IApplicationComponent,System.String)">
            <summary>
            Executes the specified application component in a new workspace.
            </summary>
            <remarks>
            If the specified component throws an exception from the <see cref="M:Macro.Desktop.ApplicationComponent.Start"/> method, that exception
            will be propagated to the caller of this method and the component will not be launched.
            </remarks>
            <param name="desktopWindow">The desktop window in which the workspace will run.</param>
            <param name="component">The application component to launch.</param>
            <param name="title">The title of the workspace.</param>
            <returns>The workspace that is hosting the component.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.LaunchAsWorkspace(Macro.Desktop.IDesktopWindow,Macro.Desktop.WorkspaceCreationArgs)">
            <summary>
            Executes the specified application component in a new workspace.
            </summary>
            <remarks>
            If the specified component throws an exception from the <see cref="M:Macro.Desktop.ApplicationComponent.Start"/> method, that exception
            will be propagate to the caller of this method and the component will not be launched.
            </remarks>
            <param name="desktopWindow">The desktop window in which the workspace will run.</param>
            <param name="creationArgs">A <see cref="T:Macro.Desktop.WorkspaceCreationArgs"/> object.</param>
            <returns>The workspace that is hosting the component.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.LaunchAsWorkspace(Macro.Desktop.IDesktopWindow,Macro.Desktop.WorkspaceCreationArgs,Macro.Desktop.ApplicationComponentExitDelegate)">
            <summary>
            Private helper method to support LaunchAsWorkspace.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.LaunchAsShelf(Macro.Desktop.IDesktopWindow,Macro.Desktop.IApplicationComponent,System.String,Macro.Desktop.ShelfDisplayHint,Macro.Desktop.ApplicationComponentExitDelegate)">
            <summary>
            Executes the specified application component in a new shelf; the exit callback will be invoked
            when the shelf is closed.
            </summary>
            <remarks>
            If the specified component throws an exception from its <see cref="M:Macro.Desktop.ApplicationComponent.Start"/> method, that exception
            will be propagated to the caller of this method and the component will not be launched.
            </remarks>
            <param name="desktopWindow">The desktop window in which the shelf will run.</param>
            <param name="component">The application component to launch.</param>
            <param name="title">The title of the shelf.</param>
            <param name="displayHint">A hint as to how the shelf should initially be displayed.</param>
            <param name="exitCallback">The callback to invoke when the shelf is closed.</param>
            <returns>The shelf that is hosting the component.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.LaunchAsShelf(Macro.Desktop.IDesktopWindow,Macro.Desktop.IApplicationComponent,System.String,System.String,Macro.Desktop.ShelfDisplayHint,Macro.Desktop.ApplicationComponentExitDelegate)">
            <summary>
            Executes the specified application component in a new shelf; the exit callback will be invoked
            when the shelf is closed.
            </summary>
            <remarks>
            If the specified component throws an exception from its <see cref="M:Macro.Desktop.ApplicationComponent.Start"/> method, that exception
            will be propagated to the caller of this method and the component will not be launched.
            </remarks>
            <param name="desktopWindow">The desktop window in which the shelf will run.</param>
            <param name="component">The application component to launch.</param>
            <param name="title">The title of the shelf.</param>
            <param name="name">The unique name shelf.</param>
            <param name="displayHint">A hint as to how the shelf should initially be displayed.</param>
            <param name="exitCallback">The callback to invoke when the shelf is closed.</param>
            <returns>The shelf that is hosting the component.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.LaunchAsShelf(Macro.Desktop.IDesktopWindow,Macro.Desktop.IApplicationComponent,System.String,System.String,Macro.Desktop.ShelfDisplayHint)">
            <summary>
            Executes the specified application component in a new shelf.
            </summary>
            <remarks>
            If the specified component throws an exception from its <see cref="M:Macro.Desktop.ApplicationComponent.Start"/> method, that exception
            will be propagate to the caller of this method and the component will not be launched.
            </remarks>
            <param name="desktopWindow">The desktop window in which the shelf will run.</param>
            <param name="component">The application component to launch.</param>
            <param name="title">The title of the shelf.</param>
            <param name="name">The unique name of the shelf.</param>
            <param name="displayHint">A hint as to how the shelf should initially be displayed.</param>
            <returns>The shelf that is hosting the component.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.LaunchAsShelf(Macro.Desktop.IDesktopWindow,Macro.Desktop.IApplicationComponent,System.String,Macro.Desktop.ShelfDisplayHint)">
            <summary>
            Executes the specified application component in a new shelf.
            </summary>
            <remarks>
            If the specified component throws an exception from its <see cref="M:Macro.Desktop.ApplicationComponent.Start"/> method, that exception
            will be propagate to the caller of this method and the component will not be launched.
            </remarks>
            <param name="desktopWindow">The desktop window in which the shelf will run.</param>
            <param name="component">The application component to launch.</param>
            <param name="title">The title of the shelf.</param>
            <param name="displayHint">A hint as to how the shelf should initially be displayed.</param>
            <returns>The shelf that is hosting the component.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.LaunchAsShelf(Macro.Desktop.IDesktopWindow,Macro.Desktop.ShelfCreationArgs)">
            <summary>
            Executes the specified application component in a new shelf.
            </summary>
            <remarks>
            If the specified component throws an exception from its <see cref="M:Macro.Desktop.ApplicationComponent.Start"/> method, that exception
            will be propagate to the caller of this method and the component will not be launched.
            </remarks>
            <param name="desktopWindow">The desktop window in which the shelf will run.</param>
            <param name="creationArgs">A <see cref="T:Macro.Desktop.ShelfCreationArgs"/> object.</param>
            <returns>The shelf that is hosting the component.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.LaunchAsShelf(Macro.Desktop.IDesktopWindow,Macro.Desktop.ShelfCreationArgs,Macro.Desktop.ApplicationComponentExitDelegate)">
            <summary>
            Private helper method to support LaunchAsShelf
            </summary>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.LaunchAsDialog(Macro.Desktop.IDesktopWindow,Macro.Desktop.IApplicationComponent,System.String)">
            <summary>
            Executes the specified application component in a modal dialog box; this call will block until
            the dialog box is closed.
            </summary>
            <remarks>
            If the specified component throws an exception from its <see cref="M:Macro.Desktop.ApplicationComponent.Start"/> method, that exception
            will be propagate to the caller of this method and the component will not be launched.
            </remarks>
            <param name="desktopWindow">The desktop window in which the dialog box is centered.</param>
            <param name="component">The application component to launch.</param>
            <param name="title">The title of the dialog box.</param>
            <returns>The exit code that the component exits with.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.LaunchAsDialog(Macro.Desktop.IDesktopWindow,Macro.Desktop.DialogBoxCreationArgs)">
            <summary>
            Executes the specified application component in a modal dialog box.  This call will block until
            the dialog box is closed.
            </summary>
            <remarks>
            If the specified component throws an exception from its <see cref="M:Macro.Desktop.ApplicationComponent.Start"/> method, that exception
            will be propagate to the caller of this method and the component will not be launched.
            </remarks>
            <param name="desktopWindow">The desktop window in which the dialog box is centered.</param>
            <param name="creationArgs">A <see cref="T:Macro.Desktop.DialogBoxCreationArgs"/> object.</param>
            <returns>The exit code that the component exits with.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.LaunchAsWorkspaceDialog(Macro.Desktop.IDesktopWindow,Macro.Desktop.IApplicationComponent,System.String)">
            <summary>
            Executes the specified application component in a workspace dialog.
            </summary>
            <remarks>
            If the specified component throws an exception from its <see cref="M:Macro.Desktop.ApplicationComponent.Start"/> method, that exception
            will be propagate to the caller of this method and the component will not be launched.
            </remarks>
            <param name="desktopWindow">The desktop window that owns the active workspace in which the dialog is launched.</param>
            <param name="component">The application component to launch.</param>
            <param name="title">The title of the dialog.</param>
            <returns>The newly created dialog box object.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.LaunchAsWorkspaceDialog(Macro.Desktop.IDesktopWindow,Macro.Desktop.DialogBoxCreationArgs)">
            <summary>
            Executes the specified application component in a workspace dialog.
            </summary>
            <remarks>
            If the specified component throws an exception from its <see cref="M:Macro.Desktop.ApplicationComponent.Start"/> method, that exception
            will be propagate to the caller of this method and the component will not be launched.
            </remarks>
            <param name="desktopWindow">The desktop window that owns the active workspace in which the dialog is launched.</param>
            <param name="creationArgs">A <see cref="T:Macro.Desktop.DialogBoxCreationArgs"/> object.</param>
            <returns>The newly created dialog object.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.Exit(Macro.Desktop.ApplicationComponentExitCode)">
            <summary>
            Sets the exit code and asks the host to exit in a single call.
            </summary>
            <param name="exitCode"></param>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.NotifyModifiedChanged">
            <summary>
            Convenience method to fire the <see cref="E:Macro.Desktop.ApplicationComponent.ModifiedChanged"/> event.
            </summary>
            <remarks>
            It is not necessary to explicitly call this method if the 
            default implementation of the <see cref="P:Macro.Desktop.ApplicationComponent.Modified"/> property is used,
            since the event is fired automatically when the property is set.
            This method is provided for situations where the subclass has chosen
            to override the <see cref="P:Macro.Desktop.ApplicationComponent.Modified"/> property.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.NotifyPropertyChanged(System.String)">
            <summary>
            Notifies subscribers of the <see cref="E:Macro.Desktop.ApplicationComponent.PropertyChanged"/> event that the specified property has changed.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.NotifyAllPropertiesChanged">
            <summary>
            Notifies subscribers of the <see cref="E:Macro.Desktop.ApplicationComponent.AllPropertiesChanged"/> that all properties may have changed.
            </summary>
            <remarks>
            A view should respond to this event by refreshing itself completely.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.SetHost(Macro.Desktop.IApplicationComponentHost)">
            <summary>
            Called by the framework to set the host.
            </summary>
            <remarks>
            For internal framework use only.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.Start">
            <summary>
            Called by the host to initialize the application component.
            </summary>
             <remarks>
            Override this method to implement custom initialization logic.  Overrides must be sure to call the base implementation.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.Stop">
            <summary>
            Called by the host when the application component is being terminated.
            </summary>
            <remarks>
            Override this method to implement custom termination logic.  Overrides must be sure to call the base implementation.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.CanExit">
            <summary>
            Called by the framework to determine if this component is in a state
            such that it can be stopped without user interaction.
            </summary>
            <remarks>
            <para>
            The behaviour of the default implementation depends upon the type of host.  If the component is running
            in an <see cref="T:Macro.Desktop.IShelfHost"/> or an <see cref="T:Macro.Desktop.IDialogBoxHost"/>, this method always returns true.
            Otherwise, it checks the <see cref="P:Macro.Desktop.ApplicationComponent.Modified"/> property and returns
            false if data has been modified.
            </para>
            <para>
            Override this method to provide custom logic for responding to this query.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.PrepareExit">
            <summary>
            Called by the framework in the case where the host has initiated the exit, rather than the component,
            to give the component a chance to prepare prior to being stopped.
            </summary>
            <remarks>
            The behaviour of the default implementation depends upon the type of host.  If the component is running
            in a <see cref="T:Macro.Desktop.IShelfHost"/> or an <see cref="T:Macro.Desktop.IDialogBoxHost"/>, this method always returns true.
            Otherwise, it checks the <see cref="P:Macro.Desktop.ApplicationComponent.Modified"/> property to see if data has been modified.
            If data has been modified, a standard confirmation dialog is presented, asking the user whether the changes
            should be discarded, or the exit cancelled.
            </remarks>
            <returns>
            True if there are no modifications or the user elects to discard modifications, otherwise false.
            </returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponent.ShowValidation(System.Boolean)">
            <summary>
            Sets the <see cref="P:Macro.Desktop.ApplicationComponent.ValidationVisible"/> property and raises the <see cref="E:Macro.Desktop.ApplicationComponent.ValidationVisibleChanged"/> event.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponent.Validation">
            <summary>
            Gets or sets the <see cref="T:Macro.Desktop.Validation.ValidationRuleSet"/> that is associated with this component.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponent.MetaContextMenuModel">
            <summary>
            Gets the meta context-menu model. The menu is displayed when clicking on the background of an application component.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponent.Host">
            <summary>
            Gets the <see cref="T:Macro.Desktop.IApplicationComponentHost"/> that is hosting this component.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponent.ExportedActions">
            <summary>
            Returns the set of actions that the component wishes to export to the desktop.
            </summary>
            <remarks>
            The default implementation of this method returns an empty action set.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponent.GlobalActionsNamespace">
            <summary>
            Allows the component to specify the namespace that qualifies its global action models. This value should not be null.
            </summary>
            <remarks>
            <para>
            This value is used by the default implementation of <see cref="T:Macro.Desktop.IDesktopWindow"/> to qualify the action model
            to be used for the global toolbar and menu sites.
            </para>
            <para>
            The default implementation returns the default global action model namespace.
            </para>
            </remarks>
        </member>
        <member name="E:Macro.Desktop.ApplicationComponent.Started">
            <summary>
            Occurs after the component has started.
            </summary>
        </member>
        <member name="E:Macro.Desktop.ApplicationComponent.Stopped">
            <summary>
            Occurs after the component has stopped.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponent.IsStarted">
            <summary>
            Gets a value indicating whether this component is live or not. 
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponent.Modified">
            <summary>
            Gets or sets a value indicating whether data has been modified.
            </summary>
        </member>
        <member name="E:Macro.Desktop.ApplicationComponent.AllPropertiesChanged">
            <summary>
            Occurs when all properties may have changed, and the entire view should be updated to reflect
            the component's data.
            </summary>
        </member>
        <member name="E:Macro.Desktop.ApplicationComponent.ModifiedChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.ApplicationComponent.Modified"/> property has changed.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponent.ExitCode">
            <summary>
            Gets or sets the exit code for the component.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponent.HasValidationErrors">
            <summary>
            Gets a value indicating whether the component currently has data validation errors.
            </summary>
            <remarks>
            The default implementation checks the <see cref="P:Macro.Desktop.ApplicationComponent.Validation"/> property to see if the
            rule set contains any rules that are not satisfied.  Override this property to implement
            custom behaviour.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponent.ValidationVisible">
            <summary>
            Gets a value indicating whether the view should display validation errors to the user.
            </summary>
        </member>
        <member name="E:Macro.Desktop.ApplicationComponent.ValidationVisibleChanged">
            <summary>
            Occurs when the value of the <see cref="P:Macro.Desktop.ApplicationComponent.ValidationVisible"/> property changes.
            </summary>
        </member>
        <member name="E:Macro.Desktop.ApplicationComponent.PropertyChanged">
            <summary>
            Notifies subscribers that one of the component's properties has changed.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponent.System#ComponentModel#IDataErrorInfo#Error">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponent.System#ComponentModel#IDataErrorInfo#Item(System.String)">
            <summary>
            Gets the error message, taken from the results of <see cref="P:Macro.Desktop.ApplicationComponent.Validation"/>, that arose due to the
            value of the input <paramref name="propertyName"/>.
            </summary>
            <param name="propertyName">The name of the property to check for errors.</param>
            <returns>A string representation of the error, or null if there isn't one.</returns>
        </member>
        <member name="T:Macro.Desktop.IApplicationComponentMetaToolContext">
            <summary>
            Defines the interface for a tool context for tools that extend <see cref="T:Macro.Desktop.ApplicationComponentMetaToolExtensionPoint"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IApplicationComponentMetaToolContext.DesktopWindow">
            <summary>
            Gets the desktop window in which the application component is running.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IApplicationComponentMetaToolContext.Component">
            <summary>
            Gets the running application component.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IApplicationComponentContainer">
            <summary>
            Defines an interface that must be implemented by application component containers (components
            that host other components).
            </summary>
        </member>
        <member name="M:Macro.Desktop.IApplicationComponentContainer.EnsureVisible(Macro.Desktop.IApplicationComponent)">
            <summary>
            Ensures that the specified component is made visible to the user.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IApplicationComponentContainer.EnsureStarted(Macro.Desktop.IApplicationComponent)">
            <summary>
            Ensures that the specified component has been started. 
            </summary>
            <remarks>
            A container may choose not to start components until they are actually displayed for the first time.
            This method ensures that a component is started regardless of whether it has ever been displayed.
            This is necessary, for instance, if the component is to be validated as part of validating the container.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.IApplicationComponentContainer.ContainedComponents">
            <summary>
            Gets all contained components.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IApplicationComponentContainer.VisibleComponents">
            <summary>
            Get the contained components that are currently visible to the user.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponentContainer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponentContainer.ShowValidation(System.Boolean)">
            <summary>
            Sets the <see cref="P:Macro.Desktop.ApplicationComponent.ValidationVisible"/> property and raises the 
            <see cref="E:Macro.Desktop.ApplicationComponent.ValidationVisibleChanged"/> event.
            </summary>
            <remarks>
            The default implementation of this property delegates to the <see cref="P:Macro.Desktop.ApplicationComponentContainer.ValidationStrategy"/> object.
            Invoking this property may cause any unstarted components in the container to be started,
            which means that it may throw exceptions.
            </remarks>
            <param name="show"></param>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponentContainer.EnsureVisible(Macro.Desktop.IApplicationComponent)">
            <summary>
            Ensures that the specified component is visible.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponentContainer.EnsureStarted(Macro.Desktop.IApplicationComponent)">
            <summary>
            Ensures that the specified component has been started.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponentContainer.ValidationStrategy">
            <summary>
            Gets or sets the validation strategy that determines how this container responds
            to validation requests.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponentContainer.HasValidationErrors">
            <summary>
            Gets a value indicating whether there are any data validation errors.
            </summary>
            <remarks>
            The default implementation of this property delegates to the <see cref="P:Macro.Desktop.ApplicationComponentContainer.ValidationStrategy"/> object.
            Invoking this property may cause any unstarted components in the container to be started,
            which means that it may throw exceptions.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponentContainer.ContainedComponents">
            <summary>
            Gets an enumeration of the contained components.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponentContainer.VisibleComponents">
            <summary>
            Gets an enumeration of the components that are currently visible.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ApplicationComponentContainer.ContainedComponentHost">
            <summary>
            Defines an application component host appropriate for the components the 
            <see cref="T:Macro.Desktop.ApplicationComponentContainer"/> will contain.  The host overrides delegate to
            the host of the parent container.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ApplicationComponentContainer.ContainedComponentHost.#ctor(Macro.Desktop.ApplicationComponentContainer,Macro.Desktop.IApplicationComponent)">
            <summary>
            Contruct the contained sub host with the <see cref="T:Macro.Desktop.ApplicationComponentContainer"/>
            owner that will provide access to the real host.  The contained component is passed
            to the base <see cref="T:Macro.Desktop.ApplicationComponentHost"/>.
            </summary>
            <param name="owner"></param>
            <param name="component"></param>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponentContainer.ContainedComponentHost.DesktopWindow">
            <summary>
            Gets the associated desktop window.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponentContainer.ContainedComponentHost.Title">
            <summary>
            Gets the title displayed in the user-interface.
            </summary>
            <remarks>
            The title generally cannot be set.  This behavior is inherited from the 
            base.
            </remarks>
            <exception cref="T:System.NotSupportedException">The host does not support setting the title.</exception>
        </member>
        <member name="P:Macro.Desktop.ApplicationComponentContainer.ContainedComponentHost.OwnerHost">
            <summary>
            Provide access to the owning host in case subclasses need to override host behavior not 
            already handled by this class.
            </summary>
        </member>
        <member name="M:Macro.Desktop.PagedComponentContainer`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.PagedComponentContainer`1.Start">
            <summary>
            Called by the host to initialize the application component.
            </summary>
             <remarks>
            <para>
            Automatically moves to and starts the first contained page.
            </para>
            <para>
            Override this method to implement custom initialization logic.  Overrides must be sure to call the base implementation.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Desktop.PagedComponentContainer`1.Stop">
            <summary>
            Called by the host when the application component is being terminated.
            </summary>
            <remarks>
            <para>
            Calls <see cref="M:Macro.Desktop.ApplicationComponent.Stop"/> on all contained <see cref="T:Macro.Desktop.IApplicationComponent"/>s.
            </para>
            <para>
            Override this method to implement custom termination logic.  Overrides must be sure to call the base implementation.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Desktop.PagedComponentContainer`1.EnsureVisible(Macro.Desktop.IApplicationComponent)">
            <summary>
            Ensures that the specified component is visible.
            </summary>
        </member>
        <member name="M:Macro.Desktop.PagedComponentContainer`1.EnsureStarted(Macro.Desktop.IApplicationComponent)">
            <summary>
            Ensures that the specified component has been started.
            </summary>
        </member>
        <member name="M:Macro.Desktop.PagedComponentContainer`1.GetPageView(Macro.Desktop.ContainerPage)">
            <summary>
            Gets the view for the specified page.
            </summary>
        </member>
        <member name="M:Macro.Desktop.PagedComponentContainer`1.MoveTo(System.Int32)">
            <summary>
            Moves to the page at the specified index.
            </summary>
        </member>
        <member name="M:Macro.Desktop.PagedComponentContainer`1.EnsureStarted(Macro.Desktop.ContainerPage)">
            <summary>
            Ensures that the specified <see cref="T:Macro.Desktop.ContainerPage"/> is started, regardless of whether or not it is visible.
            </summary>
        </member>
        <member name="M:Macro.Desktop.PagedComponentContainer`1.EnsureStopped(Macro.Desktop.ContainerPage)">
            <summary>
            Ensures that the specified <see cref="T:Macro.Desktop.ContainerPage"/> is stopped, regardless of whether or not it is visible.
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:Macro.Desktop.PagedComponentContainer`1.OnComponentModifiedChanged(Macro.Desktop.IApplicationComponent)">
            <summary>
            Does nothing unless overridden.
            </summary>
            <remarks>
            This method is called each time a child component's <see cref="E:Macro.Desktop.IApplicationComponent.ModifiedChanged"/>
            event has fired.  Override this method when custom handling is required for the container.
            </remarks>
            <param name="component">The component whose <see cref="E:Macro.Desktop.IApplicationComponent.ModifiedChanged"/> event has fired.</param>
        </member>
        <member name="M:Macro.Desktop.PagedComponentContainer`1.StopAll">
            <summary>
            Calls <see cref="M:Macro.Desktop.IApplicationComponent.Stop"/> on all child components.
            </summary>
        </member>
        <member name="M:Macro.Desktop.PagedComponentContainer`1.AnyPageModified">
            <summary>
            True if <see cref="P:Macro.Desktop.IApplicationComponent.Modified"/> returns true for any child component.
            </summary>
        </member>
        <member name="P:Macro.Desktop.PagedComponentContainer`1.Pages">
            <summary>
            Returns the current set of pages.
            </summary>
        </member>
        <member name="P:Macro.Desktop.PagedComponentContainer`1.ContainedComponents">
            <summary>
            Gets an enumeration of the contained components.
            </summary>
        </member>
        <member name="P:Macro.Desktop.PagedComponentContainer`1.VisibleComponents">
            <summary>
            Gets an enumeration of the contained components that are currently visible.
            </summary>
        </member>
        <member name="P:Macro.Desktop.PagedComponentContainer`1.CurrentPage">
            <summary>
            Gets or sets the current page.
            </summary>
        </member>
        <member name="P:Macro.Desktop.PagedComponentContainer`1.CurrentPageIndex">
            <summary>
            Gets the index of the current page.
            </summary>
        </member>
        <member name="E:Macro.Desktop.PagedComponentContainer`1.CurrentPageChanged">
            <summary>
            Occurs when the current page has changed.
            </summary>
        </member>
        <member name="T:Macro.Desktop.PagedComponentContainer`1.PageHost">
            <summary>
            Defines an application component host for one page.
            </summary>        
        </member>
        <member name="M:Macro.Desktop.NavigatorComponentContainer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.NavigatorComponentContainer.#ctor(System.Boolean)">
            <summary>
            Protected constructor.
            </summary>
            <param name="showApply">Indicates whether or not to show an apply button.</param>
        </member>
        <member name="M:Macro.Desktop.NavigatorComponentContainer.Forward">
            <summary>
            Advances to the next page.
            </summary>
        </member>
        <member name="M:Macro.Desktop.NavigatorComponentContainer.Back">
            <summary>
            Sets the current page back to the previous page.
            </summary>
        </member>
        <member name="M:Macro.Desktop.NavigatorComponentContainer.Accept">
            <summary>
            Causes the component to exit, accepting any changes made by the user.
            </summary>
            <remarks>
            Override this method if desired.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.NavigatorComponentContainer.Apply">
            <summary>
            Applies any changes from the contained pages.
            </summary>
            <remarks>
            <para>
            If this method is not overridden, it will essentially do nothing other
            than set <see cref="P:Macro.Desktop.NavigatorComponentContainer.ApplyEnabled"/> to false; therefore, you should override
            it if <see cref="P:Macro.Desktop.NavigatorComponentContainer.ShowApply"/> is true.
            </para>
            <para>
            If and only if there are no validation errors will <see cref="P:Macro.Desktop.NavigatorComponentContainer.ApplyEnabled"/> be
            set to false.  Overriding methods can use the value of <see cref="P:Macro.Desktop.NavigatorComponentContainer.ApplyEnabled"/> to
            decide whether or not to perform an action as a result of the user having clicked
            the Apply button (e.g. check that it is indeed false, then apply).
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Desktop.NavigatorComponentContainer.Cancel">
            <summary>
            Causes the component to exit, discarding any changes made by the user.
            </summary>
            <remarks>
            Override this method if desired.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.NavigatorComponentContainer.MoveTo(System.Int32)">
            <summary>
            Moves to the page at the specified index.
            </summary>
        </member>
        <member name="M:Macro.Desktop.NavigatorComponentContainer.OnComponentModifiedChanged(Macro.Desktop.IApplicationComponent)">
            <summary>
            Sets <see cref="P:Macro.Desktop.NavigatorComponentContainer.AcceptEnabled"/> based on the value of <see cref="P:Macro.Desktop.ApplicationComponent.Modified"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.NavigatorComponentContainer.ShowTree">
            <summary>
            Gets whether the components will show the tree pane.
            </summary>
        </member>
        <member name="P:Macro.Desktop.NavigatorComponentContainer.StartFullyExpanded">
            <summary>
            Gets a value indicating whether the components starts with the entire tree expanded.
            </summary>
            <remarks>
            Setting this value has no effect after the component has started.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.NavigatorComponentContainer.ForwardEnabled">
            <summary>
            Indicates whether it is possible to advance one page.
            </summary>
            <returns> True unless the current page is the last page.</returns>
        </member>
        <member name="E:Macro.Desktop.NavigatorComponentContainer.ForwardEnabledChanged">
            <summary>
            Notifies that the <see cref="P:Macro.Desktop.NavigatorComponentContainer.ForwardEnabled"/> property has changed.
            </summary>
        </member>
        <member name="P:Macro.Desktop.NavigatorComponentContainer.BackEnabled">
            <summary>
            Indicates whether it is possible to go back one page.
            </summary>
            <returns>True unless the current page is the first page.</returns>
        </member>
        <member name="E:Macro.Desktop.NavigatorComponentContainer.BackEnabledChanged">
            <summary>
            Notifies that the <see cref="P:Macro.Desktop.NavigatorComponentContainer.BackEnabled"/> property has changed.
            </summary>
        </member>
        <member name="P:Macro.Desktop.NavigatorComponentContainer.AcceptEnabled">
            <summary>
            Indicates whether the accept button should be enabled.
            </summary>
        </member>
        <member name="E:Macro.Desktop.NavigatorComponentContainer.AcceptEnabledChanged">
            <summary>
            Notifies that the <see cref="P:Macro.Desktop.NavigatorComponentContainer.AcceptEnabled"/> property has changed.
            </summary>
        </member>
        <member name="P:Macro.Desktop.NavigatorComponentContainer.ShowApply">
            <summary>
            Gets whether an Apply button should be shown.
            </summary>
        </member>
        <member name="P:Macro.Desktop.NavigatorComponentContainer.ApplyEnabled">
            <summary>
            Gets whether or not the Apply button should be enabled.
            </summary>
            <remarks>
            When <see cref="P:Macro.Desktop.NavigatorComponentContainer.ShowApply"/> is false, this property has no meaning.
            </remarks>
        </member>
        <member name="E:Macro.Desktop.NavigatorComponentContainer.ApplyEnabledChanged">
            <summary>
            Fires when <see cref="P:Macro.Desktop.NavigatorComponentContainer.ApplyEnabled"/> has changed.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.ConfigurationDialogComponent.NavigatorPagePathComparer.Compare(Macro.Desktop.NavigatorPage,Macro.Desktop.NavigatorPage)">
            <summary>
            Compares two <see cref="T:Macro.Desktop.NavigatorPage"/>s.
            </summary>
        </member>
        <member name="T:Macro.Desktop.AsyncTask">
            <summary>
            Provides a simple mechanism for executing code asynchronously.
            </summary>
        </member>
        <member name="M:Macro.Desktop.AsyncTask.Run(Macro.Desktop.AsyncTask.Action,Macro.Desktop.AsyncTask.Action)">
            <summary>
            Runs specified code asynchronously, executing the continuation code when the asynchronous code completes.
            </summary>
            <remarks>
            The <paramref name="asyncCode"/> block is executed on the thread pool.  When this block completes, the
            <paramref name="continuationCode"/> block is executed on the calling thread.  If an exception is thrown
            in the async block, the exeception is logged and the continuation code is not executed.
            This method returns immediately to the caller.  Subsequent calls to this method will cause any pending
            prior call to be effectively abandoned.
            </remarks>
            <param name="asyncCode"></param>
            <param name="continuationCode"></param>
        </member>
        <member name="M:Macro.Desktop.AsyncTask.Run(Macro.Desktop.AsyncTask.Action,Macro.Desktop.AsyncTask.Action,System.Action{System.Exception})">
            <summary>
            Runs specified code asynchronously, executing the continuation code when the asynchronous code completes.
            </summary>
            <remarks>
            The <paramref name="asyncCode"/> block is executed on the thread pool.  When this block completes, the
            <paramref name="continuationCode"/> block is executed on the calling thread.  If an exception is thrown
            in the async block, the <paramref name="errorHandler"/> is executed instead of the continuation block.
            This method returns immediately to the caller.  Subsequent calls to this method will cause any pending
            prior call to be effectively abandoned.
            </remarks>
            <param name="asyncCode"></param>
            <param name="continuationCode"></param>
            <param name="errorHandler"></param>
        </member>
        <member name="M:Macro.Desktop.AsyncTask.Cancel">
            <summary>
            Causes any pending asynchronous execution to be discarded (the continuation/error handler will not be called). 
            </summary>
        </member>
        <member name="M:Macro.Desktop.AsyncTask.DefaultErrorHandler(System.Exception)">
            <summary>
            Default error handler, used when no error handler is explicitly provided.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Macro.Desktop.AsyncTask.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            Cancels any pending asynchronous results.
            </remarks>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Macro.Desktop.AsyncTask.ThreadCulture">
            <summary>
            Gets or sets the culture for the asynchronous task. If NULL, the culture will not be modified.
            </summary>
        </member>
        <member name="P:Macro.Desktop.AsyncTask.ThreadUICulture">
            <summary>
            Gets or sets the culture used by the Resource Manager to look up culture-specific resources for the asynchronous task. If NULL, the culture will not be modified.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ApplicationThemeResourceResolver">
            <summary>
            An <see cref="T:Macro.Desktop.ApplicationTheme"/>-enabled implementation of <see cref="T:Macro.Common.Utilities.IResourceResolver"/>.
            </summary>
            <remarks>
            <para>
            Resolves resources by searching the set of assemblies (specified in the constructor)
            in order for a matching resource. If the application is currently using a <see cref="T:Macro.Desktop.ApplicationTheme"/>
            and the theme provides a matching resource, the themed resource will be returned.
            </para>
            <para>Instances of this class are immutable and thread-safe.</para>
            </remarks>
            <seealso cref="T:Macro.Desktop.ApplicationTheme"/>
            <seealso cref="T:Macro.Desktop.ApplicationThemeManager"/>
        </member>
        <member name="M:Macro.Desktop.ApplicationThemeResourceResolver.#ctor(System.Reflection.Assembly[])">
            <summary>
            Constructs a resource resolver that will look in the specified set of assemblies for resources.
            </summary>
            <param name="assemblies">The set of assemblies to search.</param>
        </member>
        <member name="M:Macro.Desktop.ApplicationThemeResourceResolver.#ctor(System.Reflection.Assembly)">
            <summary>
            Constructs an object that will search the specified assembly.
            </summary>
            <param name="assembly">The assembly to search.</param>
        </member>
        <member name="M:Macro.Desktop.ApplicationThemeResourceResolver.#ctor(System.Reflection.Assembly,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Constructs a resource resolver that will look in the specified assembly for resources.
            </summary>
            <param name="assembly">The assembly to search.</param>
            <param name="fallback">The fallback <see cref="T:Macro.Common.Utilities.IResourceResolver"/> to use when an object cannot be resolved by this resolver.</param>
        </member>
        <member name="M:Macro.Desktop.ApplicationThemeResourceResolver.#ctor(System.Reflection.Assembly[],Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Constructs a resource resolver that will look in the specified set of assemblies for resources.
            </summary>
            <param name="assemblies">Assemblies covered by this resolver.</param>
            <param name="fallback">A fallback resolver, that will be invoked if resources are not found in the specified assemblies.</param>
        </member>
        <member name="M:Macro.Desktop.ApplicationThemeResourceResolver.#ctor(System.Type,System.Boolean)">
            <summary>
            Constructs a resource resolver that will find resources in the assembly containing the specified type,
            and optionally those assemblies containing its base types.
            </summary>
            <param name="type"></param>
            <param name="walkInheritanceChain">If true, assemblies containing base types of the specified type will also be included.</param>
        </member>
        <member name="M:Macro.Desktop.ApplicationThemeResourceResolver.#ctor(System.Type,System.Boolean,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Constructs a resource resolver that will find resources in the assembly containing the specified type,
            and optionally those assemblies containing its base types.
            </summary>
            <param name="type"></param>
            <param name="walkInheritanceChain">If true, assemblies containing base types of the specified type will also be included.</param>
            <param name="fallback"></param>
        </member>
        <member name="M:Macro.Desktop.ApplicationThemeResourceResolver.OpenImage(System.String)">
            <summary>
            Attempts to resolve and open an image resource from the specified name, which may be partially
            qualified or entirely unqualified, by searching the assemblies associated with this <see cref="T:Macro.Common.Utilities.ResourceResolver"/> in order.
            </summary>
            <remarks>
            Since application themes typically override graphical resources in the form of images, this helper method is provided to
            invoke <see cref="M:Macro.Common.Utilities.IResourceResolver.OpenResource(System.String)"/> and automatically reconstitute the <see cref="T:System.IO.Stream"/> into an <see cref="T:System.Drawing.Image"/>.
            </remarks>
            <param name="resourceName">A partially qualified or unqualified resource name.</param>
            <returns>The loaded resource image.</returns>
            <exception cref="T:System.Resources.MissingManifestResourceException">if the resource name could not be resolved.</exception>
        </member>
        <member name="P:Macro.Desktop.ApplicationThemeResourceResolver.UseApplicationTheme">
            <summary>
            Gets or sets a value controlling whether or not the current application theme will be used when resolving resources with this <see cref="T:Macro.Common.Utilities.IResourceResolver"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.KeyboardActionAttribute">
            <summary>
            Declares a keyboard action with the specifed action identifier and path hint.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.ClickActionAttribute">
            <summary>
            Abstract base class for the set of attributes that are used to declare "click" actions.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.ActionInitiatorAttribute">
            <summary>
            Abstract base class for the set of attributes that are used to declare an action.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.ActionAttribute">
            <summary>
            Abstract base class for the set of attributes that are used to specify actions declaratively.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionAttribute.#ctor(System.String)">
            <summary>
            Attribute constructor.
            </summary>
            <param name="actionID">A logical action identifier.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionAttribute.QualifiedActionID(System.Object)">
            <summary>
            Returns the logical action ID qualified by the type name of the specified target object.
            </summary>
            <param name="target">The object whose type should be used to qualify the action ID.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionAttribute.Apply(Macro.Desktop.Actions.IActionBuildingContext)">
            <summary>
            Applies this attribute to an <see cref="T:Macro.Desktop.Actions.IAction"/> instance, via the specified <see cref="T:Macro.Desktop.Actions.IActionBuildingContext"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionInitiatorAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="actionID">The unique identifer of the action.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.ClickActionAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="actionID">The logical action ID.</param>
            <param name="path">The action path.</param>
            <param name="clickHandler">The name of the method that will be invoked when the action is clicked.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.ClickActionAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="actionID">The logical action ID.</param>
            <param name="path">The action path.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.ClickActionAttribute.Apply(Macro.Desktop.Actions.IActionBuildingContext)">
            <summary>
            Applies this attribute to an <see cref="T:Macro.Desktop.Actions.IAction"/> instance, via the specified <see cref="T:Macro.Desktop.Actions.IActionBuildingContext"/>.
            </summary>
            <remarks>
            Because this action is an <see cref="T:Macro.Desktop.Actions.ActionInitiatorAttribute"/>, this method actually
            creates the associated <see cref="T:Macro.Desktop.Actions.ClickAction"/>.  <see cref="T:Macro.Desktop.Actions.ActionDecoratorAttribute"/>s
            merely modify the properties of the action.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Actions.ClickActionAttribute.CreateAction(System.String,Macro.Desktop.Actions.ActionPath,Macro.Desktop.Actions.ClickActionFlags,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Creates the <see cref="T:Macro.Desktop.Actions.ClickAction"/> represented by this attribute.
            </summary>
            <param name="actionID">The logical action ID.</param>
            <param name="path">The action path.</param>
            <param name="flags">Flags that specify the click behaviour of the action.</param>
            <param name="resolver">The object used to resolve the action path and icons.</param>
        </member>
        <member name="P:Macro.Desktop.Actions.ClickActionAttribute.ClickHandler">
            <summary>
            Gets the name of the method that will be invoked when the action is clicked.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.ClickActionAttribute.InitiallyAvailable">
            <summary>
            Gets or sets a value indicating whether or not the action should be available by default when not overriden by the action model.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.ClickActionAttribute.Flags">
            <summary>
            Gets or sets the flags that customize the behaviour of the action.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.ClickActionAttribute.KeyStroke">
            <summary>
            Gets or sets the key-stroke that should invoke the action from the keyboard.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.ClickActionAttribute.Path">
            <summary>
            The suggested location of the action in the action model.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.KeyboardActionAttribute.#ctor(System.String,System.String)">
            <summary>
            Declares a keyboard action with the specified action ID and path hint.
            </summary>
            <param name="actionID">The fully qualified action ID.</param>
            <param name="pathHint">The suggested location of this action in the toolbar model.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.KeyboardActionAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Declares a keyboard action with the specified action ID, path hint and click-handler.
            </summary>
            <param name="actionID">The fully qualified action ID.</param>
            <param name="pathHint">The suggested location of this action in the toolbar model.</param>
            <param name="clickHandler">The name of the click handler to bind to on the target object.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.KeyboardActionAttribute.CreateAction(System.String,Macro.Desktop.Actions.ActionPath,Macro.Desktop.Actions.ClickActionFlags,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Creates the <see cref="T:Macro.Desktop.Actions.KeyboardAction"/> represented by this attribute.
            </summary>
            <param name="actionID">The logical action ID.</param>
            <param name="path">The action path.</param>
            <param name="flags">Flags that specify the click behaviour of the action.</param>
            <param name="resolver">The object used to resolve the action path and icons.</param>
        </member>
        <member name="T:Macro.Desktop.XMouseButtonsConverter">
            <summary>
            Provides a <see cref="T:System.ComponentModel.TypeConverter"/> to convert <see cref="T:Macro.Desktop.XMouseButtons"/> values to and from localized and invariant <see cref="T:System.String"/> representations.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XMouseButtonsConverter.ButtonSeparator">
            <summary>
            The character used to separate individual buttons.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XMouseButtonsConverter._stringParser">
            <remarks>
            <![CDATA[The pattern is effectively @"^\s*(.+?)(?:\s*\+\s*(.+?)(?:\s*\+\s*(.+?)(?:\s*\+\s*(.+?)(?:\s*\+\s*(.+?))?)?)?)?\s*$" for a ButtonSeparator of '+']]>
            </remarks>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonsConverter.#cctor">
            <summary>
            Type initializer for <see cref="T:Macro.Desktop.XMouseButtonsConverter"/>.
            </summary>
            <remarks>
            The cache for the button names in the invariant culture is generated during the type initialization process.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonsConverter.#ctor">
            <summary>
            Constructs a new instance of an <see cref="T:Macro.Desktop.XMouseButtonsConverter"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonsConverter.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Constructs a new instance of an <see cref="T:Macro.Desktop.XMouseButtonsConverter"/> for a specific culture.
            </summary>
            <param name="culture">The culture for which to cache localized button names. If this value is NULL, the <see cref="T:System.Globalization.CultureInfo"/> is obtained using the current thread's <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/> property.</param>
            <remarks>
            The <paramref name="culture"/> parameter is used to cache a set of localized button names, allowing for improved performance when
            converting in the context of the specified culture or the invariant culture.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonsConverter.InitializeMaps(System.Globalization.CultureInfo,System.Collections.Generic.IDictionary{Macro.Desktop.XMouseButtons,System.String},System.Collections.Generic.IDictionary{System.String,Macro.Desktop.XMouseButtons})">
            <summary>
            Initializes the localization maps for the specified culture.
            </summary>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonsConverter.Format(Macro.Desktop.XMouseButtons)">
            <summary>
            Formats a <see cref="T:Macro.Desktop.XMouseButtons"/> value as a string using the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture">current thread's UI CultureInfo</see>.
            </summary>
            <param name="value">The <see cref="T:Macro.Desktop.XMouseButtons"/> value to be formatted.</param>
            <returns>The string representation of the given <paramref name="value"/>.</returns>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonsConverter.Format(Macro.Desktop.XMouseButtons,System.Globalization.CultureInfo)">
            <summary>
            Formats a <see cref="T:Macro.Desktop.XMouseButtons"/> value as a string using the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="value">The <see cref="T:Macro.Desktop.XMouseButtons"/> value to be formatted.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> for which the value should be formatted.</param>
            <returns>The string representation of the given <paramref name="value"/>.</returns>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonsConverter.FormatInvariant(Macro.Desktop.XMouseButtons)">
            <summary>
            Formats a <see cref="T:Macro.Desktop.XMouseButtons"/> value as a string using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="value">The <see cref="T:Macro.Desktop.XMouseButtons"/> value to be formatted.</param>
            <returns>The string representation of the given <paramref name="value"/>.</returns>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonsConverter.Parse(System.String)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.XMouseButtons"/> value using the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture">current thread's UI CultureInfo</see>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <returns>The <see cref="T:Macro.Desktop.XMouseButtons"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.FormatException">Thrown if <paramref name="s"/> is not a valid <see cref="T:Macro.Desktop.XMouseButtons"/> string representation.</exception>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonsConverter.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.XMouseButtons"/> value using the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> for which the string should be parsed.</param>
            <returns>The <see cref="T:Macro.Desktop.XMouseButtons"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.FormatException">Thrown if <paramref name="s"/> is not a valid <see cref="T:Macro.Desktop.XMouseButtons"/> string representation.</exception>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonsConverter.ParseInvariant(System.String)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.XMouseButtons"/> value using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <returns>The <see cref="T:Macro.Desktop.XMouseButtons"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.FormatException">Thrown if <paramref name="s"/> is not a valid <see cref="T:Macro.Desktop.XMouseButtons"/> string representation.</exception>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonsConverter.TryParse(System.String,Macro.Desktop.XMouseButtons@)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.XMouseButtons"/> value using the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture">current thread's UI CultureInfo</see>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <param name="result">The <see cref="T:Macro.Desktop.XMouseButtons"/> value parsed from <paramref name="s"/> if the string was successfully parsed; <see cref="F:Macro.Desktop.XMouseButtons.None"/> otherwise.</param>
            <returns>True if the string was successfully parsed; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonsConverter.TryParse(System.String,System.Globalization.CultureInfo,Macro.Desktop.XMouseButtons@)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.XMouseButtons"/> value using the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> for which the string should be parsed.</param>
            <param name="result">The <see cref="T:Macro.Desktop.XMouseButtons"/> value parsed from <paramref name="s"/> if the string was successfully parsed; <see cref="F:Macro.Desktop.XMouseButtons.None"/> otherwise.</param>
            <returns>True if the string was successfully parsed; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonsConverter.TryParseInvariant(System.String,Macro.Desktop.XMouseButtons@)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.XMouseButtons"/> value using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <param name="result">The <see cref="T:Macro.Desktop.XMouseButtons"/> value parsed from <paramref name="s"/> if the string was successfully parsed; <see cref="F:Macro.Desktop.XMouseButtons.None"/> otherwise.</param>
            <returns>True if the string was successfully parsed; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonsConverter.GetNamesMap(System.Globalization.CultureInfo)">
            <summary>
            Gets the correct localization map for the specified culture.
            </summary>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonsConverter.GetValuesMap(System.Globalization.CultureInfo)">
            <summary>
            Gets the correct localization map for the specified culture.
            </summary>
        </member>
        <member name="P:Macro.Desktop.XMouseButtonsConverter.Default">
            <summary>
            Gets the default instance of <see cref="T:Macro.Desktop.XMouseButtonsConverter"/>.
            </summary>
            <remarks>
            This is equivalent to calling <see cref="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)"/> for the <see cref="T:Macro.Desktop.XMouseButtons"/> <see cref="T:System.Type"/>.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.GuiToolkitExtensionPoint">
            <summary>
            Defines an extension point for providing an implementation of <see cref="T:Macro.Desktop.IGuiToolkit"/>.
            </summary>
            <remarks>
            The application requires one extension of this point.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.SessionManagerExtensionPoint">
            <summary>
            Defines an extension point for providing an optional implementation of <see cref="T:Macro.Desktop.ISessionManager"/>.
            </summary>
            <remarks>
            The framework will use one extension of this point if found, but no extension is required.</remarks>
        </member>
        <member name="T:Macro.Desktop.ApplicationViewExtensionPoint">
            <summary>
            Defines an extension point for a view onto the application.
            </summary>
            <remarks>
            One extension is required, or the application will not run.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.IApplicationToolContext">
            <summary>
            Tool context interface for tools that extend <see cref="T:Macro.Desktop.ApplicationToolExtensionPoint"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ApplicationToolExtensionPoint">
            <summary>
            Defines an extension point for application tools, which are global to the application.
            </summary>
            <remarks>
            Application tools are global to the application. An application tool is instantiated exactly once.
            Application tools cannot have actions because they are not associated with any UI entity.
            Extensions should expect to recieve a tool context of type <see cref="T:Macro.Desktop.IApplicationToolContext"/>.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.Application">
            <summary>
            Singleton class that represents the desktop application.
            </summary>
            <remarks>
            <para>
            This class extends <see cref="T:Macro.Common.ApplicationRootExtensionPoint"/> and provides the implementation of
            <see cref="T:Macro.Common.IApplicationRoot"/> for a desktop application.  This class may be subclassed if necessary.
            In order for the framework to use the subclass, it must be passed to <see cref="M:Macro.Common.Platform.StartApp(Macro.Common.ExtensionFilter,System.String[])"/>.
            (Typically this is done by passing the class name as a command line argument to the executable).
            </para>
            <para>
            The class provides a number of static convenience methods that may be freely used by application code.
            These static members should not be considered thread-safe unless they specifically state that they are.
            </para>
            <para>
            The <see cref="P:Macro.Desktop.Application.Instance"/> property can be used to obtain the singleton instance of the class (or subclass).
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Application.MarshalDelegate(System.Delegate,System.Object[])">
            <summary>
            Marshals a delegate over to the UI thread for execution.
            </summary>
            <remarks>
            If the current thread is not the UI thread, the delegate is "posted" to the UI thread
            for execution, otherwise it is executed immediately.
            </remarks>
            <returns>True, if the delegate was (or will be) executed.</returns>
        </member>
        <member name="M:Macro.Desktop.Application.ShowMessageBox(System.String,Macro.Common.MessageBoxActions)">
            <summary>
            Shows a message box using the application name as the title.
            </summary>
            <remarks>
            It is preferable to use one of the <b>Macro.Desktop.DesktopWindow.ShowMessageBox</b> 
            methods if a desktop window is available, since they will ensure that the message box window is 
            associated with the parent desktop window. This method is provided for situations where a 
            message box needs to be displayed prior to the creation of any desktop windows.
            </remarks>
            <param name="message">The message to display.</param>
            <param name="actions">The actions that the user may take.</param>
            <returns>The resulting action taken by the user.</returns>
            <seealso cref="M:Macro.Desktop.DesktopWindow.ShowMessageBox(System.String,Macro.Common.MessageBoxActions)"/>
            <seealso cref="M:Macro.Desktop.DesktopWindow.ShowMessageBox(System.String,System.String,Macro.Common.MessageBoxActions)"/>
        </member>
        <member name="M:Macro.Desktop.Application.Quit">
            <summary>
            Attempts to close all open desktop windows and terminate the application.
            </summary>
            <remarks>
            The request to quit is not guaranteed to succeed.  Specifically, it will fail if an
            open workspace demands user-interaction in order to close, in which case the user may
            cancel the operation.  The request may also be cancelled programmatically, by handlers
            of the <see cref="E:Macro.Desktop.Application.Quitting"/> event.
            </remarks>
            <returns>True if the application successfully quits, or false if it does not.</returns>
            <seealso cref="M:Macro.Desktop.Application.Shutdown"/>
        </member>
        <member name="M:Macro.Desktop.Application.Shutdown">
            <summary>
            Forcibly closes all open desktop windows and terminates the application.
            </summary>
            <remarks>
            The call will forcibly terminate the application without allowing desktop components
            to cancel the operation. To allow desktop components an opportunity to cancel the operation,
            consider calling <see cref="M:Macro.Desktop.Application.Quit"/> instead.
            </remarks>
            <seealso cref="M:Macro.Desktop.Application.Quit"/>
        </member>
        <member name="M:Macro.Desktop.Application.InvalidateSession">
            <summary>
            Invalidates the current session, which will typically require the user to
            re-authenticate in order to continue using the application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Application.#ctor">
            <summary>
            Default constructor, for internal framework use only.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Application.Macro#Common#IApplicationRoot#RunApplication(System.String[])">
            <summary>
            Implementation of <see cref="M:Macro.Common.IApplicationRoot.RunApplication(System.String[])"/>.  Runs the application.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Application.Initialize(System.String[])">
            <summary>
            Initializes the application. Override this method to perform custom initialization.
            </summary>
            <remarks>
            Initializes the application, including the session manager, application tools and root window.
            The GUI toolkit and application view have already been initialized prior to this method being
            called.
            </remarks>
            <param name="args">Arguments passed in from the command line.</param>
            <returns>True if initialization was successful, false if the application should terminate immediately.</returns>
        </member>
        <member name="M:Macro.Desktop.Application.CleanUp">
            <summary>
            Called after the GUI toolkit message loop terminates, to clean up the application.  Override
            this method to perform custom clean-up.  Be sure to call the base class method.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Application.OnQuitting(Macro.Desktop.QuittingEventArgs)">
            <summary>
            Raises the <see cref="E:Macro.Desktop.Application.Quitting"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Application.OnCurrentUICultureCoreChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Macro.Desktop.Application.CurrentUICultureChanged"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Application.OnCurrentUIThemeCoreChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Macro.Desktop.Application.CurrentUIThemeChanged"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Application.GetName">
            <summary>
            Gets the display name for the application. Override this method to provide a custom display name.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Application.GetVersion">
            <summary>
            Gets the version of the application, which is by default the version of this assembly.
            Override this method to provide custom version information.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Application.CloseAllWindows">
            <summary>
            Closes all desktop windows.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Application.Run(System.String[])">
            <summary>
            Implements the logic to start up the desktop by running the GUI toolkit and creating the application view.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Application.DoQuit(System.Boolean)">
            <summary>
            Implements the logic to terminate the desktop, including closing all windows and terminating the session.
            </summary>
            <returns>True if the application is really going to terminate, false otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.Application.InitializeSessionManager">
            <summary>
            Initializes the session manager, using an extension if one is provided.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Application.CreateDesktopWindowView(Macro.Desktop.DesktopWindow)">
            <summary>
            Creates a view for a desktop window.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Application.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:Macro.Desktop.Application"/> object.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Application.GuiToolkitID">
            <summary>
            Gets the toolkit ID of the currently loaded GUI <see cref="T:Macro.Desktop.IGuiToolkit"/>,
            or null if the toolkit has not been loaded yet.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Application.Name">
            <summary>
            Gets the name of the application.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Application.Version">
            <summary>
            Gets the version of the application.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Application.DesktopWindows">
            <summary>
            Gets the collection of application windows.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Application.ActiveDesktopWindow">
            <summary>
            Gets the currently active window.
            </summary>
            <value>The active window, or null if no windows have been created.</value>
        </member>
        <member name="E:Macro.Desktop.Application.Quitting">
            <summary>
            Occurs when a request has been made for the application to quit.
            </summary>
            <remarks>
            This event is raised after all desktop windows have been closed, but prior to termination of
            the <see cref="T:Macro.Desktop.ISessionManager"/>.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.Application.CurrentUICulture">
            <summary>
            Gets or sets the current application UI <see cref="T:System.Globalization.CultureInfo">culture</see>.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Application.CurrentUICultureChanged">
            <summary>
            Fired when the value of <see cref="P:Macro.Desktop.Application.CurrentUICulture"/> changes.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Application.CurrentUITheme">
            <summary>
            Gets or sets the current application UI <see cref="T:Macro.Desktop.ApplicationTheme">theme</see>.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Application.CurrentUIThemeChanged">
            <summary>
            Fired when the value of <see cref="P:Macro.Desktop.Application.CurrentUITheme"/> changes.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Application.Windows">
            <summary>
            Gets the collection of desktop windows.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Application.GuiToolkit">
            <summary>
            Gets the GUI toolkit.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Application.View">
            <summary>
            Gets the application view.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Application.CurrentUICultureCore">
            <summary>
            Gets or sets the current application UI culture.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Application.CurrentUIThemeCore">
            <summary>
            Gets or sets the current application UI theme.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Application.ApplicationName">
            <summary>
            Gets the cached application name.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Application.ApplicationVersion">
            <summary>
            Gets the cached application version.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Tools.ToolContext">
            <summary>
            Base class for all tool contexts.
            </summary>
            <remarks>
            Developers are encouraged to inherit this class 
            rather than implement <see cref="T:Macro.Desktop.Tools.IToolContext"/> directly.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Tools.ToolContext.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ShelfDisplayHint">
            <summary>
            A set of flags that indicate how a shelf should be displayed.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ShelfDisplayHint.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ShelfDisplayHint.DockLeft">
            <summary>
            Dock the shelf on the left.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ShelfDisplayHint.DockRight">
            <summary>
            Dock the shelf on the right.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ShelfDisplayHint.DockTop">
            <summary>
            Dock the shelf at the top.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ShelfDisplayHint.DockBottom">
            <summary>
            Dock the shelf at the bottom.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ShelfDisplayHint.DockFloat">
            <summary>
            Float the shelf.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ShelfDisplayHint.DockAutoHide">
            <summary>
            Dock the shelf in auto-hide mode.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ShelfDisplayHint.HideOnWorkspaceOpen">
            <summary>
            Hide the shelf whenever a new workspace opens.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ShelfDisplayHint.ShowNearMouse">
            <summary>
            Show the shelf floating (<see cref="F:Macro.Desktop.ShelfDisplayHint.DockFloat"/>) near the mouse.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Trees.SetterDelegate`2">
            <summary>
            A delegate that allows setting whether or not <paramref name="item"/> is checked in a tree.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Trees.CanAcceptDropDelegate`1">
            <summary>
            A delegate that determines whether or not <paramref name="item"/> can accept a dropped item.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Trees.AcceptDropDelegate`1">
            <summary>
            A delegate that finalizes a drop operation.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Trees.TreeItemBinding`1">
            <summary>
            A useful generic implementation of <see cref="T:Macro.Desktop.Trees.ITreeItemBinding"/>.
            </summary>
            <typeparam name="TItem">The type of item being bound to a tree.</typeparam>
        </member>
        <member name="T:Macro.Desktop.Trees.TreeItemBindingBase">
            <summary>
            Base implementation of <see cref="T:Macro.Desktop.Trees.ITreeItemBinding"/>.
            </summary>
            <remarks>
            Provides null default implementations of most methods.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.Trees.ITreeItemBinding">
            <summary>
            Defines the interface to a tree-item binding, which describes how attributes of the visible tree are obtained
            from the underlying item.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.ITreeItemBinding.GetNodeText(System.Object)">
            <summary>
            Gets the text to display for the node representing the specified item.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.ITreeItemBinding.SetNodeText(System.Object,System.String)">
            <summary>
            Sets the text to display for the node representing the specified item.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.ITreeItemBinding.CanSetNodeText(System.Object)">
            <summary>
            Asks if the item text can be changed.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.ITreeItemBinding.GetCheckState(System.Object)">
            <summary>
            Gets a value indicating the <see cref="T:Macro.Desktop.Trees.CheckState"/> of the <paramref name="item"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.ITreeItemBinding.ToggleCheckState(System.Object)">
            <summary>
            Toggles the <see cref="T:Macro.Desktop.Trees.CheckState"/> of the <paramref name="item"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.ITreeItemBinding.GetTooltipText(System.Object)">
            <summary>
            Gets the tooltip to display for the specified item.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.ITreeItemBinding.GetIconSet(System.Object)">
            <summary>
            Gets the image iconset to display for the specified item.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.ITreeItemBinding.GetIsHighlighted(System.Object)">
            <summary>
            Gets whether the specified item should be highlighted.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.ITreeItemBinding.GetResourceResolver(System.Object)">
            <summary>
            Gets the resource resolver used to resolve the icon(s).
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.ITreeItemBinding.CanHaveSubTree(System.Object)">
            <summary>
            Asks if the item can have a subtree.
            </summary>
            <remarks>
            Note that this method should return true to inidicate that it
            is possible that the item might have a subtree.  This allows the view to determine whether to display
            a "plus" sign next to the node, without having to actually call <see cref="M:Macro.Desktop.Trees.ITreeItemBinding.GetSubTree(System.Object)"/>.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Trees.ITreeItemBinding.GetSubTree(System.Object)">
            <summary>
            Gets the <see cref="T:Macro.Desktop.Trees.ITree"/> that represents the subtree for the specified item,
            or null if the item does not have a subtree.
            </summary>
            <remarks>
            Note that <see cref="M:Macro.Desktop.Trees.ITreeItemBinding.CanHaveSubTree(System.Object)"/> is called first,
            and this method will be called only if <see cref="M:Macro.Desktop.Trees.ITreeItemBinding.CanHaveSubTree(System.Object)"/> returns true.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Trees.ITreeItemBinding.GetExpanded(System.Object)">
            <summary>
            Gets a value indicating if the item should be expanded when the tree is initially loaded.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.ITreeItemBinding.SetExpanded(System.Object,System.Boolean)">
            <summary>
            Sets a value indicating whether the specified item is currently expanded.
            </summary>
            <param name="item"></param>
            <param name="expanded"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Trees.ITreeItemBinding.CanAcceptDrop(System.Object,System.Object,Macro.Desktop.DragDropKind,Macro.Desktop.DragDropPosition)">
            <summary>
            Asks the specified item if it can accept the specified drop data in a drag-drop operation.
            </summary>
            <param name="item">The tree item that is being dropped on.</param>
            <param name="dropData">The object being dropped.</param>
            <param name="kind">The drop kind being performed.</param>
            <param name="position">The position of the drop location relative to <paramref name="item"/>.</param>
            <returns>The drop kind that will be accepted.</returns>
        </member>
        <member name="M:Macro.Desktop.Trees.ITreeItemBinding.AcceptDrop(System.Object,System.Object,Macro.Desktop.DragDropKind,Macro.Desktop.DragDropPosition)">
            <summary>
            Informs the specified item that it should accept a drop of the specified data, completing a drag-drop operation.
            </summary>
            <param name="item">The tree item that is being dropped on.</param>
            <param name="dropData">The object being dropped.</param>
            <param name="kind">The drop kind being performed.</param>
            <param name="position">The position of the drop location relative to <paramref name="item"/>.</param>
            <returns>The drop kind that will be accepted.</returns>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBindingBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBindingBase.GetNodeText(System.Object)">
            <summary>
            Gets the text to display for the node representing the specified item.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBindingBase.SetNodeText(System.Object,System.String)">
            <summary>
            Sets the text to display for the node representing the specified item.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBindingBase.CanSetNodeText(System.Object)">
            <summary>
            Asks if the item text can be changed.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBindingBase.GetIsChecked(System.Object)">
            <summary>
            Gets whether or not <paramref name="item"/> is checked.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBindingBase.SetIsChecked(System.Object,System.Boolean)">
            <summary>
            Sets whether or not <paramref name="item"/> is checked.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBindingBase.GetCheckState(System.Object)">
            <summary>
            Gets a value indicating the <see cref="T:Macro.Desktop.Trees.CheckState"/> of the <paramref name="item"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBindingBase.ToggleCheckState(System.Object)">
            <summary>
            Toggles the <see cref="T:Macro.Desktop.Trees.CheckState"/> of the <paramref name="item"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBindingBase.GetTooltipText(System.Object)">
            <summary>
            Gets the tooltip to display for the specified item.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBindingBase.GetIconSet(System.Object)">
            <summary>
            Gets the image iconset to display for the specified item.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBindingBase.GetIsHighlighted(System.Object)">
            <summary>
            Gets whether the specified item should be highlighted.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBindingBase.GetResourceResolver(System.Object)">
            <summary>
            Gets the resource resolver used to resolve the icon(s).
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBindingBase.CanHaveSubTree(System.Object)">
            <summary>
            Asks if the item can have a subtree.
            </summary>
            <remarks>
            Note that this method should return true to inidicate that it
            is possible that the item might have a subtree.  This allows the view to determine whether to display
            a "plus" sign next to the node, without having to actually call <see cref="M:Macro.Desktop.Trees.TreeItemBindingBase.GetSubTree(System.Object)"/>.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBindingBase.GetExpanded(System.Object)">
            <summary>
            Gets a value indicating if the item should be expanded when the tree is initially loaded.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBindingBase.SetExpanded(System.Object,System.Boolean)">
            <summary>
            Sets a value indicating whether the specified item is currently expanded.
            </summary>
            <param name="item"></param>
            <param name="expanded"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBindingBase.GetSubTree(System.Object)">
            <summary>
            Gets the <see cref="T:Macro.Desktop.Trees.ITree"/> that represents the subtree for the specified item,
            or null if the item does not have a subtree.
            </summary>
            <remarks>
            Note that <see cref="M:Macro.Desktop.Trees.TreeItemBindingBase.CanHaveSubTree(System.Object)"/> is called first,
            and this method will be called only if <see cref="M:Macro.Desktop.Trees.TreeItemBindingBase.CanHaveSubTree(System.Object)"/> returns true.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBindingBase.CanAcceptDrop(System.Object,System.Object,Macro.Desktop.DragDropKind)">
            <summary>
            Asks the specified item if it can accept the specified drop data in a drag-drop operation.
            </summary>
            <param name="item">The item being drag-dropped.</param>
            <param name="dropData">Information about the item drag-dropped.</param>
            <param name="kind">The drop kind being performed.</param>
            <returns>The drop kind that will be accepted.</returns>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBindingBase.AcceptDrop(System.Object,System.Object,Macro.Desktop.DragDropKind)">
            <summary>
            Informs the specified item that it should accept a drop of the specified data, completing a drag-drop operation.
            </summary>
            <param name="item">The item being drag-dropped.</param>
            <param name="dropData">Information about the item being drag-dropped.</param>
            <param name="kind">The drop kind being performed.</param>
            <returns>The drop kind that will be accepted.</returns>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBindingBase.CanAcceptDrop(System.Object,System.Object,Macro.Desktop.DragDropKind,Macro.Desktop.DragDropPosition)">
            <summary>
            Asks the specified item if it can accept the specified drop data in a drag-drop operation.
            </summary>
            <param name="item">The item being drag-dropped.</param>
            <param name="dropData">Information about the item drag-dropped.</param>
            <param name="kind">The drop kind being performed.</param>
            <param name="position">The position of the drop location relative to <paramref name="item"/>.</param>
            <returns>The drop kind that will be accepted.</returns>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBindingBase.AcceptDrop(System.Object,System.Object,Macro.Desktop.DragDropKind,Macro.Desktop.DragDropPosition)">
            <summary>
            Informs the specified item that it should accept a drop of the specified data, completing a drag-drop operation.
            </summary>
            <param name="item">The item being drag-dropped.</param>
            <param name="dropData">Information about the item being drag-dropped.</param>
            <param name="kind">The drop kind being performed.</param>
            <param name="position">The position of the drop location relative to <paramref name="item"/>.</param>
            <returns>The drop kind that will be accepted.</returns>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBinding`1.#ctor(System.Converter{`0,System.String},System.Converter{`0,Macro.Desktop.Trees.ITree})">
            <summary>
            Constructor.
            </summary>
            <param name="nodeTextProvider">A delegate providing text for the node in the tree.</param>
            <param name="subTreeProvider">A delegate providing the sub-tree for a node in the tree.</param>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBinding`1.#ctor(System.Converter{`0,System.String})">
            <summary>
            Constructor.
            </summary>
            <param name="nodeTextProvider">A delegate providing text for the node in the tree.</param>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBinding`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBinding`1.GetIsHighlighted(System.Object)">
            <summary>
            Gets whether the specified item should be highlighted.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBinding`1.GetNodeText(System.Object)">
            <summary>
             Gets the text to display for the node representing the specified item.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBinding`1.SetNodeText(System.Object,System.String)">
            <summary>
            Sets the text to display for the node representing the specified item.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBinding`1.CanSetNodeText(System.Object)">
            <summary>
            Asks if the item text can be changed.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBinding`1.GetIsChecked(System.Object)">
            <summary>
             Gets whether or not <paramref name="item" /> is checked.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBinding`1.SetIsChecked(System.Object,System.Boolean)">
            <summary>
             Sets whether or not <paramref name="item" /> is checked.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBinding`1.CanHaveSubTree(System.Object)">
            <summary>
             Asks if the item can have a subtree.
            </summary>
            <remarks>
             Note that this method should return true to inidicate that it
             is possible that the item might have a subtree.  This allows the view to determine whether to display
             a "plus" sign next to the node, without having to actually call <see cref="M:Macro.Desktop.Trees.ITreeItemBinding.GetSubTree(System.Object)" />.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBinding`1.GetSubTree(System.Object)">
            <summary>
             Gets the <see cref="T:Macro.Desktop.Trees.ITree" /> that represents the subtree for the specified item,
             or null if the item does not have a subtree.
            </summary>
            <remarks>
             Note that <see cref="M:Macro.Desktop.Trees.ITreeItemBinding.CanHaveSubTree(System.Object)" /> is called first,
             and this method will be called only if <see cref="M:Macro.Desktop.Trees.ITreeItemBinding.CanHaveSubTree(System.Object)" /> returns true.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBinding`1.GetExpanded(System.Object)">
            <summary>
             Gets a value indicating if the item should be expanded when the tree is initially loaded.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBinding`1.SetExpanded(System.Object,System.Boolean)">
            <summary>
            Sets a value indicating whether the specified item is currently expanded.
            </summary>
            <param name="item"></param>
            <param name="expanded"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBinding`1.GetTooltipText(System.Object)">
            <summary>
             Gets the tooltip to display for the specified item.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBinding`1.GetIconSet(System.Object)">
            <summary>
             Gets the image iconset to display for the specified item.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBinding`1.GetResourceResolver(System.Object)">
            <summary>
             Gets the resource resolver used to resolve the icon(s).
            </summary>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBinding`1.CanAcceptDrop(System.Object,System.Object,Macro.Desktop.DragDropKind)">
            <summary>
             Asks the specified item if it can accept the specified drop data in a drag-drop operation.
            </summary>
            <param name="item">The item being drag-dropped.</param>
            <param name="dropData">Information about the item drag-dropped.</param>
            <param name="kind">The drop kind being performed.</param>
            <returns>
            The drop kind that will be accepted.
            </returns>
        </member>
        <member name="M:Macro.Desktop.Trees.TreeItemBinding`1.AcceptDrop(System.Object,System.Object,Macro.Desktop.DragDropKind)">
            <summary>
             Informs the specified item that it should accept a drop of the specified data, completing a drag-drop operation.
            </summary>
            <param name="item">The item being drag-dropped.</param>
            <param name="dropData">Information about the item being drag-dropped.</param>
            <param name="kind">The drop kind being performed.</param>
            <returns>
            The drop kind that will be accepted.
            </returns>
        </member>
        <member name="P:Macro.Desktop.Trees.TreeItemBinding`1.NodeTextProvider">
            <summary>
            Gets or sets the node text provider for this binding.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Trees.TreeItemBinding`1.NodeTextSetter">
            <summary>
            Gets or sets the node text setter for this binding.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Trees.TreeItemBinding`1.CanSetNodeTextHandler">
            <summary>
            Gets or sets the handler that determines whether or not the text of this item can change.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Trees.TreeItemBinding`1.IsCheckedGetter">
            <summary>
            Gets or sets the node checked status provider for this binding.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Trees.TreeItemBinding`1.IsCheckedSetter">
            <summary>
            Gets or sets the node checked setter for this binding.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Trees.TreeItemBinding`1.TooltipTextProvider">
            <summary>
            Gets or sets the tooltip text provider for this binding.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Trees.TreeItemBinding`1.IconSetProvider">
            <summary>
            Gets or sets the iconset provider for this binding.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Trees.TreeItemBinding`1.ResourceResolverProvider">
            <summary>
            Gets or sets the resource resolver provider for this binding.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Trees.TreeItemBinding`1.CanHaveSubTreeHandler">
            <summary>
            Gets or sets the handler that determines whether or not this item can have a sub-tree.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Trees.TreeItemBinding`1.IsExpandedGetter">
            <summary>
            Gets or sets the subtree expansion state getter for this binding.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Trees.TreeItemBinding`1.IsExpandedSetter">
            <summary>
            Gets or sets the subtree expansion state getter for this binding.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Trees.TreeItemBinding`1.SubTreeProvider">
            <summary>
            Gets or sets the subtree provider for this binding.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Trees.TreeItemBinding`1.CanAcceptDropHandler">
            <summary>
            Gets or sets the handler that decides whether or not an item can be dropped on this node in the tree.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Trees.TreeItemBinding`1.AcceptDropHandler">
            <summary>
            Gets or sets the handler that accepts dropped items onto this node in the tree.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Trees.TreeItemBinding`1.IsHighlightedProvider">
            <summary>
            Gets or sets the handler that indicate whether the node should be highlighted in the tree.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.EnabledStateObserverAttribute">
            <summary>
            Declares an observer binding for the enabled state of an action.
            </summary>
            <remarks>
            This attribute causes the enabled state of the action specified by the action ID to be
            bound to the state of the specified property on the class to which this attribute applies.
            The property name must refer to a public boolean property on the target class that has get access.
            The change event name must refer to a public event on the class that will fire whenever the state of the property
            changes.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.Actions.StateObserverAttribute">
            <summary>
            Abstract base class for action attributes that declare state observers.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.ActionDecoratorAttribute">
            <summary>
            Abstract base class for the set of attributes that are used to decorate an action
            once it has been declared by an <see cref="T:Macro.Desktop.Actions.ActionInitiatorAttribute"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionDecoratorAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="actionID">The unique identifer of the action.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.StateObserverAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="actionID">The unique identifer of the action.</param>
            <param name="observedProperty">The name of the property to bind to.</param>
            <param name="observedChangeEvent">The name of the event to bind to that notifies subscribers of changes in the property value.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.StateObserverAttribute.Bind``1(Macro.Desktop.Actions.IActionBuildingContext,System.String,System.String)">
            <summary>
            Binds an <see cref="T:Macro.Desktop.Actions.IAction"/> instance to the <paramref name="actionProperty"/> and 
            <paramref name="actionEvent"/> on the target object, via the specified <see cref="T:Macro.Desktop.Actions.IActionBuildingContext"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.StateObserverAttribute.ValidateEvent(System.Object,System.String)">
            <summary>
            Validates the event that is to be bound to exists in the target object.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.StateObserverAttribute.ValidateProperty(System.Object,System.String,System.Type)">
            <summary>
            Validates the property that is to be bound to exists in the target object.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.StateObserverAttribute.PropertyName">
            <summary>
            The name of the property to bind to.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.StateObserverAttribute.ChangeEventName">
            <summary>
            The name of the property change notification event to bind to.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.EnabledStateObserverAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Attribute constructor.
            </summary>
            <param name="actionID">The logical action identifier to which this attribute applies.</param>
            <param name="propertyName">The name of the property to bind to.</param>
            <param name="changeEventName">The name of the property change notification event to bind to.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.EnabledStateObserverAttribute.Apply(Macro.Desktop.Actions.IActionBuildingContext)">
            <summary>
            Binds the <see cref="P:Macro.Desktop.Actions.IAction.Enabled"/> property and <see cref="E:Macro.Desktop.Actions.IAction.EnabledChanged"/> event 
            to the corresponding items on the target object, via the specified <see cref="T:Macro.Desktop.Actions.IActionBuildingContext"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.ButtonActionAttribute">
            <summary>
            Declares a button action with the specifed action identifier and path hint.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ButtonActionAttribute.#ctor(System.String,System.String)">
            <summary>
            Attribute constructor.
            </summary>
            <param name="actionID">The logical action identifier to associate with this action.</param>
            <param name="pathHint">The suggested location of this action in the toolbar model.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.ButtonActionAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Attribute constructor.
            </summary>
            <param name="actionID">The logical action identifier to associate with this action.</param>
            <param name="pathHint">The suggested location of this action in the toolbar model.</param>
            <param name="clickHandler">Name of the method that will be invoked when the button is clicked.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.ButtonActionAttribute.CreateAction(System.String,Macro.Desktop.Actions.ActionPath,Macro.Desktop.Actions.ClickActionFlags,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Factory method to instantiate the action.
            </summary>
            <param name="actionID">The logical action identifier to associate with this action.</param>
            <param name="path">The path to the action in the toolbar model.</param>
            <param name="flags">Flags specifying how the button should respond to being clicked.</param>
            <param name="resolver">The action resource resolver used to resolve the action path and icons.</param>
            <returns>A <see cref="T:Macro.Desktop.Actions.ClickAction"/>.</returns>
        </member>
        <member name="T:Macro.Desktop.Actions.ActionResourceResolver">
            <summary>
            A specialization of the <see cref="T:Macro.Common.Utilities.ResourceResolver"/> class for use in resolving resources
            related to actions.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionResourceResolver.#ctor(System.Object)">
            <summary>
            Constructs an instance of this object for the specified action target.
            </summary>
            <remarks>
            The class of the target object determines the primary assembly that will be used to resolve resources.
            </remarks>
            <param name="actionTarget">The action target for which resources will be resolved.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionResourceResolver.#ctor(System.Type)">
            <summary>
            Constructs an instance of this object for the specified action target.
            </summary>
            <remarks>
            The class of the target object determines the primary assembly that will be used to resolve resources.
            </remarks>
            <param name="targetType">The action target type for which resources will be resolved.</param>
        </member>
        <member name="T:Macro.Desktop.ShelfCreationArgs">
            <summary>
            Holds parameters that control the creation of a <see cref="T:Macro.Desktop.Shelf"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.DesktopObjectCreationArgs">
            <summary>
            Abstract base class for passing creation parameters to desktop object factories.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObjectCreationArgs.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopObjectCreationArgs.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="title">The title for the <see cref="T:Macro.Desktop.DesktopObject"/>.</param>
            <param name="name">The name/identifier of the <see cref="T:Macro.Desktop.DesktopObject"/>.</param>
        </member>
        <member name="P:Macro.Desktop.DesktopObjectCreationArgs.Name">
            <summary>
            Gets or sets the name for the desktop object.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DesktopObjectCreationArgs.Title">
            <summary>
            Gets or sets the title for the desktop object.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ShelfCreationArgs.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ShelfCreationArgs.#ctor(Macro.Desktop.IApplicationComponent,System.String,System.String,Macro.Desktop.ShelfDisplayHint)">
            <summary>
            Constructor.
            </summary>
            <param name="component">The <see cref="T:Macro.Desktop.IApplicationComponent"/> that is to be hosted in the <see cref="T:Macro.Desktop.Shelf"/>.</param>
            <param name="title">The title of the <see cref="T:Macro.Desktop.Shelf"/>.</param>
            <param name="name">A name/identifier for the <see cref="T:Macro.Desktop.Shelf"/>.</param>
            <param name="displayHint">A hint for how the <see cref="T:Macro.Desktop.Shelf"/> should be initially displayed.</param>
        </member>
        <member name="M:Macro.Desktop.ShelfCreationArgs.#ctor(Macro.Desktop.IApplicationComponent,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="component">The <see cref="T:Macro.Desktop.IApplicationComponent"/> that is to be hosted in the <see cref="T:Macro.Desktop.Shelf"/>.</param>
            <param name="title">The title of the <see cref="T:Macro.Desktop.Shelf"/>.</param>
            <param name="name">A name/identifier for the <see cref="T:Macro.Desktop.Shelf"/>.</param>
        </member>
        <member name="P:Macro.Desktop.ShelfCreationArgs.Component">
            <summary>
            Gets or sets the component to host.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ShelfCreationArgs.DisplayHint">
            <summary>
            Gets or sets the display hint that affects the initial positioning of the shelf.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ExceptionPolicyExtensionPoint">
            <summary>
             Extension point for <see cref="T:Macro.Desktop.IExceptionPolicy"/>s.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IExceptionPolicy">
            <summary>
            Provides Exception specific handling policies.
            </summary>
            <example>
            <code>
            [ExtensionOf(typeof(ExceptionPolicyExtensionPoint))]
            [ExceptionPolicyFor(typeof(FooException))]
            public class FooExceptionPolicy : IExceptionPolicy
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="M:Macro.Desktop.IExceptionPolicy.Handle(System.Exception,Macro.Desktop.IExceptionHandlingContext)">
            <summary>
             Handles the specified exception.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ExceptionPolicyForAttribute">
            <summary>
             Specifies an exception type to which an <see cref="T:Macro.Desktop.IExceptionPolicy"/> applies.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ExceptionPolicyForAttribute.#ctor(System.Type)">
            <summary>
             Constructor.
            </summary>
            <param name="exceptionType">The type of exception the policy is for.</param>
        </member>
        <member name="P:Macro.Desktop.ExceptionPolicyForAttribute.ExceptionType">
            <summary>
             Gets the type of exception the policy is for.
            </summary>
        </member>
        <member name="T:Macro.Desktop.PagingController`1">
            <summary>
             Default implementation of <see cref="T:Macro.Desktop.IPagingController`1"/>.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="T:Macro.Desktop.IPagingController`1">
            <summary>
            Defines an interface to control pagination through a list of items.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:Macro.Desktop.IPagingController`1.GetNext">
            <summary>
            Gets the next page of items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.IPagingController`1.GetPrevious">
            <summary>
            Gets the previous page of items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.IPagingController`1.GetFirst">
            <summary>
            Resets this instance to the first page of items.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macro.Desktop.IPagingController`1.PageSize">
            <summary>
            Gets the number of items per page.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IPagingController`1.HasNext">
            <summary>
            Gets a value indicating whether there is a next page.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macro.Desktop.IPagingController`1.HasPrevious">
            <summary>
            Gets a value indicating whether there is a previous page.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Macro.Desktop.IPagingController`1.PageChanged">
            <summary>
            Occurs when the current page changes (by calling any of <see cref="M:Macro.Desktop.IPagingController`1.GetFirst"/>, <see cref="M:Macro.Desktop.IPagingController`1.GetNext"/> or <see cref="M:Macro.Desktop.IPagingController`1.GetPrevious"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.PagingController`1.#ctor(System.Int32,Macro.Desktop.PagingController{`0}.PageQueryDelegate)">
            <summary>
            Constructor.
            </summary>
            <param name="pageSize"></param>
            <param name="queryDelegate"></param>
        </member>
        <member name="M:Macro.Desktop.PagingController`1.#ctor(Macro.Desktop.PagingController{`0}.PageQueryDelegate)">
            <summary>
            Constructor.
            </summary>
            <param name="queryDelegate"></param>
        </member>
        <member name="M:Macro.Desktop.PagingController`1.GetNext">
            <summary>
            Gets the next page of items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.PagingController`1.GetPrevious">
            <summary>
            Gets the previous page of items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.PagingController`1.GetFirst">
            <summary>
            Resets this instance to the first page of items.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macro.Desktop.PagingController`1.PageSize">
            <summary>
            Gets or sets the number of items per page.
            </summary>
        </member>
        <member name="P:Macro.Desktop.PagingController`1.HasNext">
            <summary>
            Gets a value indicating whether there is a next page.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macro.Desktop.PagingController`1.HasPrevious">
            <summary>
            Gets a value indicating whether there is a previous page.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Macro.Desktop.PagingController`1.PageChanged">
            <summary>
            Occurs when the current page changes (by calling any of <see cref="M:Macro.Desktop.PagingController`1.GetFirst"/>, <see cref="M:Macro.Desktop.PagingController`1.GetNext"/> or <see cref="M:Macro.Desktop.PagingController`1.GetPrevious"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.PagingController`1.PageQueryDelegate">
            <summary>
            
            </summary>
            <param name="firstRow"></param>
            <param name="maxRows"></param>
            <param name="resultHandler"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.Desktop.InstalledLocales">
            <summary>
            Represents the collection of installed localizations available for use in the application.
            </summary>
        </member>
        <member name="F:Macro.Desktop.InstalledLocales.InvariantLocale">
            <summary>
            Gets a <see cref="T:Macro.Desktop.InstalledLocales.Locale"/> representing the invariant locale.
            </summary>
        </member>
        <member name="M:Macro.Desktop.InstalledLocales.Find(System.String)">
            <summary>
            Finds an installed localization with the specified culture code.
            </summary>
        </member>
        <member name="P:Macro.Desktop.InstalledLocales.Instance">
            <summary>
            Gets the default instance of <see cref="T:Macro.Desktop.InstalledLocales"/> from the application settings.
            </summary>
        </member>
        <member name="P:Macro.Desktop.InstalledLocales.Count">
            <summary>
            Gets the count of installed localizations.
            </summary>
        </member>
        <member name="P:Macro.Desktop.InstalledLocales.Locales">
            <summary>
            Enumerates the installed localizations.
            </summary>
        </member>
        <member name="P:Macro.Desktop.InstalledLocales.AllowedLocales">
            <summary>
            Enumerates the subset of installed localizations that are allowed by the locale policy setting.
            </summary>
        </member>
        <member name="P:Macro.Desktop.InstalledLocales.Default">
            <summary>
            Gets the default <see cref="T:Macro.Desktop.InstalledLocales.Locale"/> of the installed localizations.
            </summary>
        </member>
        <member name="P:Macro.Desktop.InstalledLocales.Selected">
            <summary>
            Gets or sets the selected <see cref="T:Macro.Desktop.InstalledLocales.Locale"/> for the current system user.
            </summary>
            <remarks>
            This value only persists in the local configuration file for the system user and not for the login user as defined by the application
            because the availability of locales is determined by the installation, and never by a central settings store.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.InstalledLocales.Locale">
            <summary>
            Represents a single installed localization.
            </summary>
        </member>
        <member name="F:Macro.Desktop.InstalledLocales.Locale.Culture">
            <summary>
            Gets the culture code of the localization.
            </summary>
        </member>
        <member name="F:Macro.Desktop.InstalledLocales.Locale.Name">
            <summary>
            Gets the name of the localization in the localization's own language and script.
            </summary>
        </member>
        <member name="F:Macro.Desktop.InstalledLocales.Locale.DisplayName">
            <summary>
            Gets the display name of the localization.
            </summary>
            <remarks>
            This value is equal to <see cref="F:Macro.Desktop.InstalledLocales.Locale.Name"/> by default, but can be overridden in the settings.
            </remarks>
        </member>
        <member name="F:Macro.Desktop.InstalledLocales.Locale.InvariantName">
            <summary>
            Gets the name of the localization in the invariant language (i.e. English).
            </summary>
        </member>
        <member name="M:Macro.Desktop.InstalledLocales.Locale.GetCultureInfo">
            <summary>
            Gets a <see cref="T:System.Globalization.CultureInfo"/> representing this locale.
            </summary>
        </member>
        <member name="M:Macro.Desktop.InstalledLocales.Locale.Equals(System.Object)">
            <summary>
            Checks if this locale is equivalent to <paramref name="object"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.InstalledLocales.Locale.Equals(Macro.Desktop.InstalledLocales.Locale)">
            <summary>
            Checks if this locale is equivalent to <paramref name="other"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.InstalledLocales.Locale.op_Equality(Macro.Desktop.InstalledLocales.Locale,Macro.Desktop.InstalledLocales.Locale)">
            <summary>
            Checks if the locales <paramref name="x"/> and <paramref name="y"/> are equivalent.
            </summary>
        </member>
        <member name="M:Macro.Desktop.InstalledLocales.Locale.op_Inequality(Macro.Desktop.InstalledLocales.Locale,Macro.Desktop.InstalledLocales.Locale)">
            <summary>
            Checks if the locales <paramref name="x"/> and <paramref name="y"/> are not equivalent.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.DropDownAction">
            <summary>
            Models a toolbar item that, when clicked, displays a menu containing other <see cref="T:Macro.Desktop.Actions.IAction"/>s.
            </summary>
            <remarks>
            The <see cref="T:Macro.Desktop.Actions.DropDownAction"/> is not itself an <see cref="T:Macro.Desktop.Actions.IClickAction"/>, in that the action of
            clicking it is not customizable; it can only show the associated <see cref="P:Macro.Desktop.Actions.DropDownAction.DropDownMenuModel"/> items.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.Actions.Action">
            <summary>
            Abstract base class providing a default implementation of <see cref="T:Macro.Desktop.Actions.IAction"/>.  
            </summary>
            <remarks>
            Action classes should inherit from this class rather than implement <see cref="T:Macro.Desktop.Actions.IAction"/> directly.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.Actions.IAction">
            <summary>
            Models a user-interface action, such as a menu or toolbar item, in a GUI-toolkit independent way.
            </summary>
            <remarks>
            Provides the base interface for a set of types that model user-interface actions
            independent of any particular GUI-toolkit.
            </remarks>
        </member>
        <member name="E:Macro.Desktop.Actions.IAction.EnabledChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.Actions.IAction.Enabled"/> property of this action changes.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Actions.IAction.VisibleChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.Actions.IAction.Visible"/> property of this action changes.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Actions.IAction.AvailableChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.Actions.IAction.Available"/> property of this action changes.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Actions.IAction.LabelChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.Actions.IAction.Label"/> property of this action changes.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Actions.IAction.TooltipChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.Actions.IAction.Tooltip"/> property of this action changes.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Actions.IAction.IconSetChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.Actions.IAction.IconSet"/> property of this action changes.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IAction.ActionID">
            <summary>
            Gets the fully-qualified logical identifier for this action.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IAction.FormerActionIDs">
            <summary>
            Gets any former <see cref="P:Macro.Desktop.Actions.IAction.ActionID"/>s, in case an <see cref="T:Macro.Desktop.Actions.IAction"/>
            or <see cref="T:Macro.Desktop.Tools.Tool`1"/> has moved.
            </summary>
            <remarks>Use the <see cref="T:Macro.Desktop.Actions.ActionFormerlyAttribute"/> in action declarations to indicate to the framework
            that an action used to have a different <see cref="P:Macro.Desktop.Actions.IAction.ActionID"/>. This way, the action will not lose it's place
            in the action model just because the code moved. Obviously, only do this if, indeed, you want the action
            to maintain it's same place in the action model.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.Actions.IAction.Path">
            <summary>
            Gets or sets the menu or toolbar path for this action.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IAction.GroupHint">
            <summary>
            Gets or sets the group hint for this action.
            </summary>
            <remarks>
            The GroupHint for an action must not be null.  If an action has no groupHint,
            the GroupHint should be "" (default).
            </remarks>
        </member>
        <member name="P:Macro.Desktop.Actions.IAction.Label">
            <summary>
            Gets the label that the action presents in the UI.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IAction.Tooltip">
            <summary>
            Gets the tooltip that the action presents in the UI.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IAction.IconSet">
            <summary>
            Gets the icon that the action presents in the UI.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IAction.Enabled">
            <summary>
            Gets the enablement state that the action presents in the UI.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IAction.Visible">
            <summary>
            Gets the visibility state that the action presents in the UI.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IAction.Available">
            <summary>
            Gets or sets whether or not the action is available as controlled by the user.
            </summary>
            <remarks>
            The value of <see cref="P:Macro.Desktop.Actions.IAction.Available"/> should override both <see cref="P:Macro.Desktop.Actions.IAction.Visible"/> and <see cref="P:Macro.Desktop.Actions.IAction.Enabled"/>
            as it represents the user's desire to see the action at all, rather than tool logic.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.Actions.IAction.Persistent">
            <summary>
            Gets a value indicating whether or not the action is 'persistent'.
            </summary>
            <remarks>
            Actions created via the Action Attributes are considered persistent and are
            committed to the <see cref="T:Macro.Desktop.Actions.ActionModelSettings"/>,
            otherwise they are considered generated and they are not committed.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.Actions.IAction.ResourceResolver">
            <summary>
            Gets the resource resolver associated with this action, that will be used to resolve
            action path and icon resources when required.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IAction.Permissible">
            <summary>
            Gets a value indicating whether this action is permissible.
            </summary>
            <remarks>
            In addition to the <see cref="P:Macro.Desktop.Actions.IAction.Visible"/> and <see cref="P:Macro.Desktop.Actions.IAction.Enabled"/> properties, the view
            will use this property to control whether the action can be invoked.  Typically
            this property is implemented to indicate whether the current user has permission
            to execute the action.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Actions.Action.#ctor(System.String,Macro.Desktop.Actions.ActionPath,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="actionID">The logical action ID.</param>
            <param name="path">The action path.</param>
            <param name="resourceResolver">A resource resolver that will be used to resolve icons associated with this action.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.Action.SetPermissibility(Macro.Common.Specifications.ISpecification)">
            <summary>
            Sets the <see cref="T:Macro.Common.Specifications.ISpecification"/> that is tested to establish whether the 
            current user has sufficient privileges to access the action.
            </summary>
            <remarks>
            This overload is useful when an actions permissibility is a boolean function of a
            multiple authority tokens.  Use the <see cref="T:Macro.Desktop.PrincipalPermissionSpecification"/>, in 
            combination with the <see cref="T:Macro.Common.Specifications.AndSpecification"/> and <see cref="T:Macro.Common.Specifications.OrSpecification"/> classes
            to build up a complex specification for permissibility.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Actions.Action.SetPermissibility(System.String)">
            <summary>
            Sets a single authority token that is tested to establish whether the 
            current user has sufficient privileges to access the action.
            </summary>
            <remarks>
            This overload is useful in the common case where an actions permissibility
            is tied to a single authority token.  To handle a situation where the permissibility
            is a function of multiple authority tokens, use the <see cref="M:Macro.Desktop.Actions.Action.SetPermissibility(Macro.Common.Specifications.ISpecification)"/>
            overload.
            </remarks>
            <param name="authorityToken"></param>
        </member>
        <member name="M:Macro.Desktop.Actions.Action.SetFeatureAuthorization(Macro.Common.Specifications.ISpecification)">
            <summary>
            Sets the <see cref="T:Macro.Common.Specifications.ISpecification"/> that is tested to establish whether the
            current installation is licensed to access the action.
            </summary>
            <param name="featureSpecification">An <see cref="T:Macro.Common.Specifications.ISpecification"/> used to determine whether or not the application license allows access to the action.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.Action.SetFeatureAuthorization(System.String)">
            <summary>
            Sets a feature token that is tested to establish whether the
            current installation is licensed to access the action.
            </summary>
            <param name="featureToken">A feature identification token used to determine whether or not the application license allows access to the action.</param>
        </member>
        <member name="P:Macro.Desktop.Actions.Action.PermissionSpecification">
            <summary>
            Provides internal access to the permission specification.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.Action.FeatureSpecification">
            <summary>
            Gets or sets the <see cref="T:Macro.Common.Specifications.ISpecification"/> that is tested to establish whether the
            current installation is licensed to access the action.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.Action.ActionID">
            <summary>
            Gets the fully-qualified logical identifier for this action.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.Action.FormerActionIDs">
            <summary>
            Gets any former <see cref="P:Macro.Desktop.Actions.IAction.ActionID"/>s, in case an <see cref="T:Macro.Desktop.Actions.IAction"/>
            or <see cref="T:Macro.Desktop.Tools.Tool`1"/> has moved.
            </summary>
            <remarks>Use the <see cref="T:Macro.Desktop.Actions.ActionFormerlyAttribute"/> in action declarations to indicate to the framework
            that an action used to have a different <see cref="P:Macro.Desktop.Actions.IAction.ActionID"/>. This way, the action will not lose it's place
            in the action model just because the code moved. Obviously, only do this if, indeed, you want the action
            to maintain it's same place in the action model.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.Actions.Action.ResourceResolver">
            <summary>
            Gets the resource resolver associated with this action, that will be used to resolve
            action path and icon resources when required.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.Action.Path">
            <summary>
            Gets or sets the menu or toolbar path for this action.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.Action.GroupHint">
            <summary>
            Gets or sets the group hint for this action.
            </summary>
            <remarks>
            The GroupHint for an action must not be null.  If an action has no groupHint,
            the GroupHint should be "" (default).
            </remarks>
        </member>
        <member name="P:Macro.Desktop.Actions.Action.IconSet">
            <summary>
            Gets the icon that the action presents in the UI.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.Action.Label">
            <summary>
            Gets the label that the action presents in the UI.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.Action.Tooltip">
            <summary>
            Gets the tooltip that the action presents in the UI.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.Action.Enabled">
            <summary>
            Gets the enablement state that the action presents in the UI.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.Action.Visible">
            <summary>
            Gets the visibility state that the action presents in the UI.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.Action.Available">
            <summary>
            Gets or sets whether or not the action is available as controlled by the user.
            </summary>
            <remarks>
            The value of <see cref="P:Macro.Desktop.Actions.Action.Available"/> should override <see cref="P:Macro.Desktop.Actions.Action.Visible"/>
            as it represents the user's desire to see the action at all, rather than tool logic.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.Actions.Action.Persistent">
            <summary>
            Gets a value indicating whether or not the action is 'persistent'.
            </summary>
            <remarks>
            Actions created via the Action attributes are considered persistent and are
            committed to the <see cref="T:Macro.Desktop.Actions.ActionModelSettings"/>,
            otherwise they are considered generated and they are not committed.
            </remarks>
        </member>
        <member name="E:Macro.Desktop.Actions.Action.EnabledChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.Actions.IAction.Enabled"/> property of this action changes.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Actions.Action.VisibleChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.Actions.IAction.Visible"/> property of this action changes.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Actions.Action.AvailableChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.Actions.IAction.Available"/> property of this action changes.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Actions.Action.LabelChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.Actions.IAction.Label"/> property of this action changes.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Actions.Action.TooltipChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.Actions.IAction.Tooltip"/> property of this action changes.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Actions.Action.IconSetChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.Actions.IAction.IconSet"/> property of this action changes.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.Action.Permissible">
            <summary>
            Gets a value indicating whether this action is permissible.
            </summary>
            <remarks>
            In addition to the <see cref="P:Macro.Desktop.Actions.IAction.Visible"/> and <see cref="P:Macro.Desktop.Actions.IAction.Enabled"/> properties, the view
            will use this property to control whether the action can be invoked.  Typically
            this property is implemented to indicate whether the current user has permission
            to execute the action.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.Actions.IDropDownAction">
            <summary>
            Models a toolbar item that displays a menu containing other <see cref="T:Macro.Desktop.Actions.IAction"/>s.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IDropDownAction.DropDownMenuModel">
            <summary>
            Gets the menu model for the dropdown.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.DropDownAction.#ctor(System.String,Macro.Desktop.Actions.ActionPath,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="actionID">The logical action ID.</param>
            <param name="path">The action path.</param>
            <param name="resourceResolver">A resource resolver that will be used to resolve resources associated with this action.</param>
        </member>
        <member name="P:Macro.Desktop.Actions.DropDownAction.DropDownMenuModel">
            <summary>
            Gets the menu model for the dropdown.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.ConfigurationApplicationComponent">
            <summary>
            A component that hosts a configuration page, where some settings need to
            be saved when the user dismisses it.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.IConfigurationApplicationComponent">
            <summary>
            Defines an interface for configuration <see cref="T:Macro.Desktop.ApplicationComponent"/>s.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.IConfigurationApplicationComponent.Save">
            <summary>
            Save any settings modified in the hosted component.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.ConfigurationApplicationComponent.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.ConfigurationApplicationComponent.Save">
            <summary>
            Save any settings modified in the hosted component.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.IConfigurationPage">
            <summary>
            An interface defining a configuration page, that is hosted
            in a container component along with other such pages
            (an example would be a typical Tools/Options dialog).
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.IConfigurationPage.GetPath">
            <summary>
            Gets the path to this page.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.IConfigurationPage.GetComponent">
            <summary>
            Gets the <see cref="T:Macro.Desktop.IApplicationComponent"/> that is hosted in this page.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.IConfigurationPage.SaveConfiguration">
            <summary>
            Saves any configuration changes that were made.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.ConfigurationPage`1">
            <summary>
            A default implementation of <see cref="T:Macro.Desktop.Configuration.IConfigurationPage"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:Macro.Desktop.Configuration.IConfigurationApplicationComponent"/>-derived 
            class that will be hosted in this page.  The class must have a parameterless default constructor.</typeparam>
        </member>
        <member name="M:Macro.Desktop.Configuration.ConfigurationPage.GetPath">
            <summary>
            Gets the path to this page.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.ConfigurationPage.GetComponent">
            <summary>
            Gets the <see cref="T:Macro.Desktop.IApplicationComponent"/> that is hosted in this page.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.ConfigurationPage.SaveConfiguration">
            <summary>
            Saves any configuration changes that were made.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.ConfigurationPage`1.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="path">The path to the <see cref="T:Macro.Desktop.Configuration.ConfigurationPage`1"/>.</param>
        </member>
        <member name="T:Macro.Desktop.ApplicationThemeResourceProviderBase">
            <summary>
            Base abstract implementation of <see cref="T:Macro.Desktop.IApplicationThemeResourceProvider"/>.
            </summary>
            <remarks>
            The default implementation assumes that all themed resources are embedded in the assembly in which the implementing type is defined.
            The mapping of the original resource name to the local name of the resource can be overriden using <see cref="M:Macro.Desktop.ApplicationThemeResourceProviderBase.MapResourceName(System.String,System.Reflection.Assembly)"/>.
            </remarks>
            <seealso cref="T:Macro.Desktop.ApplicationThemeManager"/>
            <seealso cref="T:Macro.Desktop.ApplicationThemeResourceProviderExtensionPoint"/>
            <seealso cref="T:Macro.Desktop.IApplicationThemeResourceProvider"/>
        </member>
        <member name="T:Macro.Desktop.IApplicationThemeResourceProvider">
            <summary>
            Defines the methods and properties for accessing GUI element style information.
            </summary>
            <remarks>
            Consider subclassing <see cref="T:Macro.Desktop.ApplicationThemeResourceProviderBase"/> instead of implementing this interface directly.
            </remarks>
            <seealso cref="T:Macro.Desktop.ApplicationThemeManager"/>
            <seealso cref="T:Macro.Desktop.ApplicationThemeResourceProviderBase"/>
            <seealso cref="T:Macro.Desktop.ApplicationThemeResourceProviderExtensionPoint"/>
        </member>
        <member name="M:Macro.Desktop.IApplicationThemeResourceProvider.HasResource(System.String,System.Reflection.Assembly)">
            <summary>
            Checks whether or not the application theme provides a themed replacement for the specified resource name.
            </summary>
            <param name="resourceFullName">The fully-qualified name of the resource being requested.</param>
            <param name="originalAssemblyHint">The original assembly in which the resource was defined, if known. May be NULL if unknown.</param>
            <returns>True if the application theme provides a themed replacement; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.IApplicationThemeResourceProvider.OpenResource(System.String,System.Reflection.Assembly)">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> to the themed replacement for the specified resource name provided by the application theme.
            </summary>
            <param name="resourceFullName">The fully-qualified name of the resource being requested.</param>
            <param name="originalAssemblyHint">The original assembly in which the resource was defined, if known. May be NULL if unknown.</param>
            <returns>A new <see cref="T:System.IO.Stream"/> for the resource if the application theme provides a themed replacement; NULL otherwise.</returns>
        </member>
        <member name="P:Macro.Desktop.IApplicationThemeResourceProvider.Id">
            <summary>
            Gets a string that identifies the application theme.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IApplicationThemeResourceProvider.Name">
            <summary>
            Gets the localized name of the application theme.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IApplicationThemeResourceProvider.Description">
            <summary>
            Gets a localized description of the application theme.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IApplicationThemeResourceProvider.Icon">
            <summary>
            Gets the resource name of an icon for the application theme.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IApplicationThemeResourceProvider.Colors">
            <summary>
            Gets the color scheme associated with the application theme.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ApplicationThemeResourceProviderBase.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes the <see cref="T:Macro.Desktop.ApplicationThemeResourceProviderBase"/>.
            </summary>
            <param name="id">The string that identifies the theme.</param>
            <param name="name">The name of the theme. May be a key to a string resource in an SR table in the same assembly as the implementing type.</param>
            <param name="description">A description of the theme. May be a key to a string resource in an SR table in the same assembly as the implementing type.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="id"/> is NULL or empty.</exception>
        </member>
        <member name="M:Macro.Desktop.ApplicationThemeResourceProviderBase.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes the <see cref="T:Macro.Desktop.ApplicationThemeResourceProviderBase"/>.
            </summary>
            <param name="id">The string that identifies the theme.</param>
            <param name="name">The name of the theme. May be a key to a string resource in an SR table in the same assembly as the implementing type.</param>
            <param name="description">A description of the theme. May be a key to a string resource in an SR table in the same assembly as the implementing type.</param>
            <param name="icon">A resource name to an icon for the theme in the same assembly as the implementing type. May be NULL or empty if no icon is available.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="id"/> is NULL or empty.</exception>
        </member>
        <member name="M:Macro.Desktop.ApplicationThemeResourceProviderBase.MapResourceName(System.String,System.Reflection.Assembly)">
            <summary>
            Called by the default implementations of <see cref="M:Macro.Desktop.ApplicationThemeResourceProviderBase.HasResource(System.String,System.Reflection.Assembly)"/> and <see cref="M:Macro.Desktop.ApplicationThemeResourceProviderBase.OpenResource(System.String,System.Reflection.Assembly)"/> to map a requested resource to
            an expected resource name local to the assembly of the implementing type.
            </summary>
            <remarks>
            <para>The default implementation prepends the theme <see cref="P:Macro.Desktop.ApplicationThemeResourceProviderBase.Id"/> as a namespace qualifier to <paramref name="resourceFullName"/>.</para>
            <para>The expected resource name returned by this function need not actually exist.</para>
            </remarks>
            <param name="resourceFullName">The fully-qualified name of the resource being requested.</param>
            <param name="originalAssemblyHint">The original assembly in which the resource was defined, if known. May be NULL if unknown.</param>
            <returns>The expected resource name, local to the implementing type, of a themed replacement for the specified resource.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationThemeResourceProviderBase.HasResource(System.String,System.Reflection.Assembly)">
            <summary>
            Checks whether or not the application theme provides a themed replacement for the specified resource name.
            </summary>
            <remarks>
            The default implementation calls <see cref="M:Macro.Desktop.ApplicationThemeResourceProviderBase.MapResourceName(System.String,System.Reflection.Assembly)"/> to map the requested resource to the expected resource name
            local to the assembly of the implementing type, if the resource is available as part of this theme.
            </remarks>
            <param name="resourceFullName">The fully-qualified name of the resource being requested.</param>
            <param name="originalAssemblyHint">The original assembly in which the resource was defined, if known. May be NULL if unknown.</param>
            <returns>True if the application theme provides a themed replacement; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationThemeResourceProviderBase.OpenResource(System.String,System.Reflection.Assembly)">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> to the themed replacement for the specified resource name provided by the application theme.
            </summary>
            <remarks>
            The default implementation calls <see cref="M:Macro.Desktop.ApplicationThemeResourceProviderBase.MapResourceName(System.String,System.Reflection.Assembly)"/> to map the requested resource to the expected resource name
            local to the assembly of the implementing type, if the resource is available as part of this theme.
            </remarks>
            <param name="resourceFullName">The fully-qualified name of the resource being requested.</param>
            <param name="originalAssemblyHint">The original assembly in which the resource was defined, if known. May be NULL if unknown.</param>
            <returns>A new <see cref="T:System.IO.Stream"/> for the resource if the application theme provides a themed replacement; NULL otherwise.</returns>
        </member>
        <member name="P:Macro.Desktop.ApplicationThemeResourceProviderBase.StandardColorBase">
            <summary>
            Gets the base standard colour.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationThemeResourceProviderBase.StandardColorDark">
            <summary>
            Gets a dark variant of the standard colour.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationThemeResourceProviderBase.StandardColorLight">
            <summary>
            Gets a light variant of the standard colour.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IApplicationThemeColors">
            <summary>
            Defines the color scheme associated with an application theme.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IApplicationThemeColors.StandardColorBase">
            <summary>
            Gets the base standard colour.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IApplicationThemeColors.StandardColorDark">
            <summary>
            Gets a dark variant of the standard colour.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IApplicationThemeColors.StandardColorLight">
            <summary>
            Gets a light variant of the standard colour.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.LabelValueObserverAttribute">
            <summary>
            Declares an observer binding for the Label value of an action.
            </summary>
            <remarks>
            This attribute causes the Label value of the action specified by the action ID to be
            bound to the state of the specified property on the class to which this attribute applies.
            The property name must refer to a public string property on the target class that has get access.
            The change event name must refer to a public event on the class that will fire whenever the value of the property
            changes.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Actions.LabelValueObserverAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Attribute constructor.
            </summary>
            <param name="actionID">The logical action identifier to which this attribute applies.</param>
            <param name="propertyName">The name of the property to bind to.</param>
            <param name="changeEventName">The name of the property change notification event to bind to.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.LabelValueObserverAttribute.Apply(Macro.Desktop.Actions.IActionBuildingContext)">
            <summary>
            Binds the <see cref="P:Macro.Desktop.Actions.IAction.Label"/> property and <see cref="E:Macro.Desktop.Actions.IAction.LabelChanged"/> event 
            to the corresponding items on the target object, via the specified <see cref="T:Macro.Desktop.Actions.IActionBuildingContext"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.CrudActionModel">
            <summary>
            A convenience class for creating an action model with standard Add, Edit, and Delete actions.
            </summary>
            <remarks>
            An instance of this class can be configured to have any or all of Add, Edit, and Delete actions.
            Standard labels and icons will be used for these actions, however you can freely modify these values.
            You may also add additional custom actions to an instance of this class.
            </remarks>
        </member>
        <member name="F:Macro.Desktop.Actions.CrudActionModel.IconAddResource">
            <summary>
            Resource key for the "Add" icon.
            </summary>
        </member>
        <member name="F:Macro.Desktop.Actions.CrudActionModel.IconEditResource">
            <summary>
            Resource key for the "Edit" icon.
            </summary>
        </member>
        <member name="F:Macro.Desktop.Actions.CrudActionModel.IconDeleteResource">
            <summary>
            Resource key for the "Delete" icon.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.CrudActionModel.#ctor">
            <summary>
            Constructor that creates an instance with Add, Edit and Delete actions.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.CrudActionModel.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor that allows specifying which of Add, Edit, and Delete actions should appear.
            </summary>
            <param name="add"></param>
            <param name="edit"></param>
            <param name="delete"></param>
        </member>
        <member name="M:Macro.Desktop.Actions.CrudActionModel.#ctor(System.Boolean,System.Boolean,System.Boolean,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Constructor that allows specifying which of Add, Edit, and Delete actions should appear.
            </summary>
            <param name="add"></param>
            <param name="edit"></param>
            <param name="delete"></param>
            <param name="fallBackResolver"></param>
        </member>
        <member name="P:Macro.Desktop.Actions.CrudActionModel.Add">
            <summary>
            Gets the Add action.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.CrudActionModel.Edit">
            <summary>
            Gets the Edit action.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.CrudActionModel.Delete">
            <summary>
            Gets the Delete action.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.ActionModelSettings">
            <summary>
            Provides services for storing an action model to an XML document, and rebuilding that action model from the document.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelSettings.BuildAndSynchronize(System.String,System.String,Macro.Desktop.Actions.IActionSet)">
            <summary>
            Builds an in-memory action model from the specified XML model and the specified set of actions.
            </summary>
            <remarks>
            The actions will be ordered according to the XML model.  Any actions that are not a part of the
            XML model will be added to the memory model and inserted into the XML model based on a 'group hint'.
            The XML model is automatically persisted, and new models that have never before been persisted
            will be added.
            </remarks>
            <param name="namespace">A namespace to qualify the site.</param>
            <param name="site">The site.</param>
            <param name="actions">The set of actions to include. This set should be prefiltered on <paramref name="site"/>.</param>
            <returns>An <see cref="T:Macro.Desktop.Actions.ActionModelNode"/> representing the root of the action model.</returns>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelSettings.BuildAbstractActionModel(System.String,System.String,Macro.Desktop.Actions.IActionSet)">
            <summary>
            Builds an in-memory abstract action model from the specified XML model and the specified set of known actions.
            </summary>
            <remarks>
            This method functions similarly to <see cref="M:Macro.Desktop.Actions.ActionModelSettings.BuildAndSynchronize(System.String,System.String,Macro.Desktop.Actions.IActionSet)"/> except that the resulting action model
            consists solely of <see cref="T:Macro.Desktop.Actions.AbstractAction"/>s which are not actually associated with any concrete actions on tools or components.
            </remarks>
            <param name="namespace">A namespace to qualify the site.</param>
            <param name="site">The site.</param>
            <param name="actions">The set of actions to include. This set should be prefiltered on <paramref name="site"/>.</param>
            <returns>An <see cref="T:Macro.Desktop.Actions.ActionModelNode"/> representing the root of the action model.</returns>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelSettings.PersistAbstractActionModel(System.String,System.String,Macro.Desktop.Actions.ActionModelRoot)">
            <summary>
            Persists an in-memory abstract action model to the XML model.
            </summary>
            <remarks>
            This method functions as a counterpart to <see cref="M:Macro.Desktop.Actions.ActionModelSettings.BuildAbstractActionModel(System.String,System.String,Macro.Desktop.Actions.IActionSet)"/>. The specified abstract action model
            (created by <see cref="M:Macro.Desktop.Actions.ActionModelSettings.BuildAbstractActionModel(System.String,System.String,Macro.Desktop.Actions.IActionSet)"/>, or potentially modified further) is flattened and its nodes
            written out to the XML mode, replacing any existing model at the same qualified site. This allows action model
            configuration interfaces to make changes to the action model.
            </remarks>
            <param name="namespace">A namespace to qualify the site.</param>
            <param name="site">The site.</param>
            <param name="abstractActionModel">The abstract action model to be persisted.</param>
            <returns>An <see cref="T:Macro.Desktop.Actions.ActionModelNode"/> representing the root of the action model.</returns>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelSettings.BuildActionMap(Macro.Desktop.Actions.IActionSet)">
            <summary>
            Builds a map of action IDs to actions.
            </summary>
            <param name="actions">the set of actions from which to build a map</param>
            <returns>a map of action IDs to actions</returns>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelSettings.CreateXmlActionModel(System.String)">
            <summary>
            Creates the specified action model, but *does not* immediately append it to the xmlDoc.
            Since not all actions are persistent (e.g. some could be generated), we need to figure
            out how many actions (if any) belonging to the node will be persisted in the store
            before adding the action to the store.
            </summary>
            <param name="id">the id of the "action-model" to create</param>
            <returns>An "action-model" element</returns>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelSettings.CreateXmlAction(System.Xml.XmlDocument,Macro.Desktop.Actions.IAction)">
            <summary>
            Creates an "action" node for insertion into an "action-model" node in the Xml store.
            </summary>
            <param name="action">the action whose relevant properties are to be used to create the node</param>
            <returns>an "action" element</returns>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelSettings.SynchronizeAction(System.Xml.XmlElement,Macro.Desktop.Actions.IAction)">
            <summary>
            Sets all the relevant attributes on the <paramref name="xmlAction"/> from the <paramref name="action"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelSettings.FindXmlActionModel(System.String)">
            <summary>
            Finds a stored model in the XML doc with the specified model ID.
            </summary>
            <param name="id">The model ID</param>
            <returns>An "action-model" element, or null if not found</returns>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelSettings.FindXmlAction(System.Xml.XmlElement,Macro.Desktop.Actions.IAction)">
            <summary>
            Finds an action with the specified id in the specified "action-model" node.
            </summary>
            <param name="action">the <see cref="T:Macro.Desktop.Actions.IAction"/> whose "action" node should be found</param>
            <param name="xmlActionModel">the "action-model" node to search in</param>
            <param name="includeFormerIds">Specifies whether any "former" IDs the action has had should be included in the search.</param>
            <returns>the XmlElement of the action if found, otherwise null</returns>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelSettings.Synchronize(System.String,System.Collections.Generic.IDictionary{System.String,Macro.Desktop.Actions.IAction})">
            <summary>
            Synchronizes persistent actions with the xml store.
            Refer to <see cref="M:Macro.Desktop.Actions.ActionModelSettings.BuildAndSynchronize(System.String,System.String,Macro.Desktop.Actions.IActionSet)"/> for more details.
            </summary>
            <param name="actionModelID">the ID of the action model</param>
            <param name="actionMap">the actions that are to be synchronized/added to the store</param>
            <returns>the "action-model" node with the specified actionModelID</returns>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelSettings.UpdateGroupHints(System.Xml.XmlElement,System.Collections.Generic.IDictionary{System.String,Macro.Desktop.Actions.IAction})">
            <summary>
            Updates all the group hints in the xml from the given set of actions.  Group-hints are
            always taken from the actions themselves.
            </summary>
            <param name="xmlActionModel">the "action-model" to validate</param>
            <param name="actionMap">the set of actions against which to validate the "action-model"</param>
            <returns>a boolean indicating whether anything was modified</returns>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelSettings.GetActionNodeList(System.Xml.XmlElement)">
            <summary>
            Gets an ordered list of <see cref="T:System.Xml.XmlElement"/> children of <paramref name="xmlActionModel"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelSettings.Build(System.String,System.Xml.XmlElement,System.Collections.Generic.IDictionary{System.String,Macro.Desktop.Actions.IAction})">
            <summary>
            Builds an in-memory action model from the specified XML model and the specified set of actions.
            The actions will be ordered according to the XML model.
            </summary>
            <param name="site">the action model site</param>
            <param name="xmlActionModel">an XML "action-model" node</param>
            <param name="actions">the set of actions that the model should contain</param>
            <returns>an <see cref="T:Macro.Desktop.Actions.ActionModelNode"/> representing the root of the action model</returns>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelSettings.ProcessXmlAction(System.Xml.XmlElement,Macro.Desktop.Actions.IAction)">
            <summary>
            Processes an <paramref name="xmlAction"/> element in the XML model, deserializing the persisted values into the provided <paramref name="action"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelSettings.ProcessSeparator(System.Collections.Generic.IList{System.Xml.XmlElement},System.Int32,System.Collections.Generic.IDictionary{System.String,Macro.Desktop.Actions.IAction})">
            <summary>
            Processes a separator node in the XML action model.
            </summary>
            <param name="actionNodes"></param>
            <param name="i"></param>
            <param name="actions"></param>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelSettings.GetLongestCommonPath(System.String,System.String)">
            <summary>
            Gets the longest common path between two paths.
            </summary>
            <param name="path1"></param>
            <param name="path2"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelSettings.GetFirstExistingAdjacentAction(System.Collections.Generic.IList{System.Xml.XmlElement},System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,Macro.Desktop.Actions.IAction})">
            <summary>
            Finds the first XML action element adjacent to the start position for which an action exists. 
            </summary>
            <param name="actionNodes"></param>
            <param name="start"></param>
            <param name="increment"></param>
            <param name="actions"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelSettings.GetFirstAdjacentAction(System.Collections.Generic.IList{System.Xml.XmlElement},System.Int32,System.Int32)">
            <summary>
            Finds the first XML action element adjacent to the start position (i.e. separators excluded)
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelSettings.AppendActionToXmlModel(System.Xml.XmlDocument,System.Xml.XmlElement,Macro.Desktop.Actions.IAction)">
            <summary>
            Appends the specified action to the specified XML action model.  The "group-hint"
            attribute of the action to be inserted is compared with the "group-hint" of the
            actions in the xml model and an appropriate place to insert the action is determined
            based on the MatchScore method of the <see cref="T:Macro.Desktop.Actions.GroupHint"/>.
            </summary>
            <param name="xmlActionModel">the "action-model" node to insert an action into</param>
            <param name="action">the action to be inserted</param>
            <returns>a boolean indicating whether anything was added/removed/modified</returns>
        </member>
        <member name="P:Macro.Desktop.Actions.ActionModelSettings.ActionModelsXml">
            <summary>
            Action model XML document.
            </summary>
        </member>
        <member name="T:Macro.Desktop.NavigatorComponentContainerViewExtensionPoint">
            <summary>
            Defines an extension point for views onto the <see cref="T:Macro.Desktop.NavigatorComponentContainer"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.StartedComponentsValidationStrategy">
            <summary>
            Implements a validation strategy that considers only the contained nodes that have been visited.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.StartedComponentsValidationStrategy.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.StartedComponentsValidationStrategy.HasValidationErrors(Macro.Desktop.IApplicationComponentContainer)">
            <summary>
            Determines whether the specified container has validation errors, according to this strategy.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.StartedComponentsValidationStrategy.ShowValidation(Macro.Desktop.IApplicationComponentContainer,System.Boolean)">
            <summary>
            Displays validation errors for the specified container to the user, according to the logic
            encapsulated in this strategy.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.ValidationAttributeException">
            <summary>
            Thrown by <see cref="T:Macro.Desktop.Validation.ValidationAttribute"/> when errors occur creating validation rules.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.ValidateNotNullAttribute">
            <summary>
            Validates that a property is not null.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.ValidationAttribute">
            <summary>
            Abstract base class for validation attributes.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationAttribute.GetLocalizedCustomMessage(Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Gets the custom message localized according to the specified resource resolver.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationAttribute.CheckPropertyIsType(System.Reflection.PropertyInfo,System.Type[])">
            <summary>
            Validates that the specified property is assignable to one of the specified types.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationAttribute.CreatePropertyGetter(System.Reflection.PropertyInfo)">
            <summary>
            Factory method to create a delegate that invokes the getter of the specified property.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationAttribute.CreateRule(System.Reflection.PropertyInfo,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Factory method to create an <see cref="T:Macro.Desktop.Validation.IValidationRule"/> based on this attribute.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationAttribute.CreateRule(System.Reflection.PropertyInfo,Macro.Desktop.Validation.ValidationAttribute.PropertyGetter,System.String)">
            <summary>
            Factory method to create an <see cref="T:Macro.Desktop.Validation.IValidationRule"/> based on this attribute.
            </summary>
            <param name="property">The property on which the attribute is applied.</param>
            <param name="getter">A delegate that, when invoked, returns the current value of the property.</param>
            <param name="customMessage">A custom message to be displayed, or null if none was supplied.</param>
            <returns></returns>
        </member>
        <member name="P:Macro.Desktop.Validation.ValidationAttribute.Message">
            <summary>
            Gets or sets the custom message to be displayed when a validation error occurs.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.ValidationAttribute.PropertyGetter">
            <summary>
            Delegate used to get the value of a property from an <see cref="T:Macro.Desktop.IApplicationComponent"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateNotNullAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateNotNullAttribute.CreateRule(System.Reflection.PropertyInfo,Macro.Desktop.Validation.ValidationAttribute.PropertyGetter,System.String)">
            <summary>
            Factory method to create an <see cref="T:Macro.Desktop.Validation.IValidationRule"/> based on this attribute.
            </summary>
            <param name="property">The property on which the attribute is applied.</param>
            <param name="getter">A delegate that, when invoked, returns the current value of the property.</param>
            <param name="customMessage">A custom message to be displayed, or null if none was supplied.</param>
            <returns></returns>
        </member>
        <member name="T:Macro.Desktop.Trees.Tree`1">
            <summary>
            A useful generic implementation of <see cref="T:Macro.Desktop.Trees.ITree"/>.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="T:Macro.Desktop.Trees.ITree">
            <summary>
            Defines the interface to a tree, which provides a presentation model for viewing hierarchical data.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Trees.ITree.Binding">
            <summary>
            Obtains the <see cref="T:Macro.Desktop.Trees.ITreeItemBinding"/> that defines how items in this tree are mapped to the view.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Trees.ITree.Items">
            <summary>
            Obtains a reference to the collection of items in this tree.
            </summary>
            <remarks>
            <para>
            Note that this collection contains only the immediate items.  Each 
            item may provide a sub-tree, which can be obtained via the
            <see cref="M:Macro.Desktop.Trees.ITreeItemBinding.GetSubTree(System.Object)"/> method.
            </para>
            <para>
            In general, it is advisable that the implementation of the root <see cref="T:Macro.Desktop.Trees.ITree"/> should encapsulate
            a single ancestor root tree item, whose <see cref="T:Macro.Desktop.IItemCollection"/> is returned in <see cref="P:Macro.Desktop.Trees.ITree.Items"/>.
            Because only the root's children are returned in this interface, the tree view will still show them
            as "top-level" nodes, but they will still be related to each other through a common ancestor item.
            This is important, because a number of <see cref="T:Macro.Desktop.Trees.ITree"/> features, such as check states, reordering,
            and view updates triggered from the model side depend on the existence of a parent node.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Trees.Tree`1.#ctor(Macro.Desktop.Trees.ITreeItemBinding)">
            <summary>
            Constructor.
            </summary>
            <param name="binding">The tree item binding.</param>
        </member>
        <member name="M:Macro.Desktop.Trees.Tree`1.#ctor(Macro.Desktop.Trees.ITreeItemBinding,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="binding">The tree item binding.</param>
            <param name="items">The set of items that are initially contained in this tree.</param>
        </member>
        <member name="P:Macro.Desktop.Trees.Tree`1.Items">
            <summary>
            Gets the <see cref="T:Macro.Desktop.IItemCollection`1"/> associated with this tree.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Trees.Tree`1.Binding">
            <summary>
            Gets or sets the item binding associated with this tree.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Trees.Tree`1.Macro#Desktop#Trees#ITree#Items">
            <summary>
            Gets the <see cref="T:Macro.Desktop.IItemCollection"/> associated with this tree.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.MenuActionAttribute">
            <summary>
            Declares a menu button action with the specifed action identifier and path hint.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.MenuActionAttribute.#ctor(System.String,System.String)">
            <summary>
            Attribute constructor.
            </summary>
            <param name="actionID">The logical action identifier to associate with this action.</param>
            <param name="pathHint">The suggested location of this action in the menu model.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.MenuActionAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Attribute constructor.
            </summary>
            <param name="actionID">The logical action identifier to associate with this action.</param>
            <param name="pathHint">The suggested location of this action in the toolbar model.</param>
            <param name="clickHandler">Name of the method that will be invoked when the button is clicked.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.MenuActionAttribute.CreateAction(System.String,Macro.Desktop.Actions.ActionPath,Macro.Desktop.Actions.ClickActionFlags,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Creates the <see cref="T:Macro.Desktop.Actions.MenuAction"/> represented by this attribute.
            </summary>
            <param name="actionID">The logical action ID.</param>
            <param name="path">The action path.</param>
            <param name="flags">Flags that specify the click behaviour of the action.</param>
            <param name="resolver">The object used to resolve the action path and icons.</param>
        </member>
        <member name="T:Macro.Desktop.DialogSizeHint">
            <summary>
            An enumeration that can be used to provide a <see cref="T:Macro.Desktop.DialogBox"/> with a hint for what size it should display.
            </summary>
        </member>
        <member name="F:Macro.Desktop.DialogSizeHint.Auto">
            <summary>
            Indicates that the dialog should size itself to the content.
            </summary>
        </member>
        <member name="F:Macro.Desktop.DialogSizeHint.Small">
            <summary>
            Indicates that the dialog should be small.
            </summary>
        </member>
        <member name="F:Macro.Desktop.DialogSizeHint.Medium">
            <summary>
            Indicates that the dialog should be medium.
            </summary>
        </member>
        <member name="F:Macro.Desktop.DialogSizeHint.Large">
            <summary>
            Indicatest that the dialog should be large.
            </summary>
        </member>
        <member name="T:Macro.Desktop.DialogBox">
            <summary>
            Represents a dialog box.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DialogBox.#ctor(Macro.Desktop.DialogBoxCreationArgs,Macro.Desktop.DesktopWindow)">
            <summary>
            Constructor.
            </summary>
            <param name="args">Creation args for the dialog box.</param>
            <param name="desktopWindow">The <see cref="T:Macro.Desktop.DesktopWindow"/> that owns the dialog box.</param>
        </member>
        <member name="M:Macro.Desktop.DialogBox.Initialize">
            <summary>
            Starts the hosted component.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DialogBox.RunModal">
            <summary>
            Runs this dialog on a modal loop, blocking until the dialog is closed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.DialogBox.CanClose">
            <summary>
            Checks if the hosted component can close without user interaction.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DialogBox.PrepareClose(Macro.Desktop.CloseReason)">
            <summary>
            Gives the hosted component a chance to prepare for a forced exit.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DialogBox.Dispose(System.Boolean)">
            <summary>
            Disposes of this object.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DialogBox.CreateView">
            <summary>
            Creates a view for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macro.Desktop.DialogBox.Component">
            <summary>
            Gets the component hosted by this dialog box.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DialogBox.SizeHint">
            <summary>
            Gets the dialog size hint.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DialogBox.DialogSizeHint">
            <summary>
            Gets the dialog size hint.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DialogBox.AllowUserResize">
            <summary>
            Gets a value indicating whether or not the user should be allowed to resize the dialog.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DialogBox.Size">
            <summary>
            Gets the explicit size of the dialog, if specified.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DialogBox.DialogBoxView">
            <summary>
            Gets the view for this object as a <see cref="T:Macro.Desktop.IDialogBoxView"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IDialogBoxHost">
            <summary>
            Extends <see cref="T:Macro.Desktop.IApplicationComponentHost"/> with functionality specific to dialog boxes.
            </summary>
        </member>
        <member name="T:Macro.Desktop.UndoableCommand">
            <summary>
            Abstract base class for 'undoable' commands.
            </summary>
        </member>
        <member name="M:Macro.Desktop.UndoableCommand.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.UndoableCommand.Unexecute">
            <summary>
            Performs and 'undo' of the <see cref="M:Macro.Desktop.Command.Execute"/> operation.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Trees.CheckState">
            <summary>
            Enumeration of values representing the check state of nodes in an <see cref="T:Macro.Desktop.Trees.ITree"/>.
            </summary>
        </member>
        <member name="F:Macro.Desktop.Trees.CheckState.Unchecked">
            <summary>
            Indicates the unchecked state. <see cref="T:System.Int32">Integer</see> value of -1.
            </summary>
        </member>
        <member name="F:Macro.Desktop.Trees.CheckState.Partial">
            <summary>
            Indicates the unknown/indeterminate/partial check state. <see cref="T:System.Int32">Integer</see> value of 0.
            </summary>
        </member>
        <member name="F:Macro.Desktop.Trees.CheckState.Checked">
            <summary>
            Indicates the checked state. <see cref="T:System.Int32">Integer</see> value of 1.
            </summary>
        </member>
        <member name="T:Macro.Desktop.StockDesktopTools">
            <summary>
            Implementation of standard desktop tools.
            </summary>
            <remarks>
            For internal framework use only.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.Tools.Tool`1">
            <summary>
            Abstract base class providing a default implementation of <see cref="T:Macro.Desktop.Tools.ITool"/>.
            </summary>
            <remarks>
            Tool classes should inherit this class rather than implement <see cref="T:Macro.Desktop.Tools.ITool"/> directly.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.Tools.ToolBase">
            <summary>
            Abstract base class providing a default implementation of <see cref="T:Macro.Desktop.Tools.ITool"/>.
            </summary>
            <remarks>
            Tool classes may inherit this class, but inheriting 
            from <see cref="T:Macro.Desktop.Tools.Tool`1"/> is recommended.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.Tools.ITool">
            <summary>
            Defines a tool.
            </summary>
            <remarks>
            Developers are encouraged to subclass <see cref="T:Macro.Desktop.Tools.Tool`1"/> 
            or one of its subclasses rather than implement this interface directly.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Tools.ITool.SetContext(Macro.Desktop.Tools.IToolContext)">
            <summary>
            Called by the framework to set the tool context.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tools.ITool.Initialize">
            <summary>
            Called by the framework to allow the tool to initialize itself.
            </summary>
            <remarks>
            This method will be called after <see cref="M:Macro.Desktop.Tools.ITool.SetContext(Macro.Desktop.Tools.IToolContext)"/> has been called, 
            which guarantees that the tool will have access to its context when this method is called.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.Tools.ITool.Actions">
            <summary>
            Gets the set of actions that act on this tool.
            </summary>
            <remarks>
            This property is not guaranteed to be a dynamic property - that is, you should not assume
            this property will always return a different set of actions depending on the internal state 
            of the tool.  The class that owns the tool decides when to access this property, and 
            whether or not the actions can be dynamic will be dependent on the implementation of that class.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Tools.ToolBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tools.ToolBase.SetContext(Macro.Desktop.Tools.IToolContext)">
            <summary>
            Called by the framework to set the tool context.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tools.ToolBase.Initialize">
            <summary>
            Called by the framework to allow the tool to initialize itself.
            </summary>
            <remarks>
            This method will be called after <see cref="M:Macro.Desktop.Tools.ToolBase.SetContext(Macro.Desktop.Tools.IToolContext)"/> has been called, 
            which guarantees that the tool will have access to its context when this method is called.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Tools.ToolBase.Dispose(System.Boolean)">
            <summary>
            Disposes of this object; override this method to do any necessary cleanup.
            </summary>
            <param name="disposing">True if this object is being disposed, false if it is being finalized.</param>
        </member>
        <member name="M:Macro.Desktop.Tools.ToolBase.Dispose">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tools.ToolBase.ContextBase">
            <summary>
            Provides an untyped reference to the context in which the tool is operating.
            </summary>
            <remarks>
            Attempting to access this property before <see cref="M:Macro.Desktop.Tools.ToolBase.SetContext(Macro.Desktop.Tools.IToolContext)"/> 
            has been called (e.g in the constructor of this tool) will return null.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.Tools.ToolBase.Actions">
            <summary>
            Gets the set of actions that act on this tool.
            </summary>
            <remarks>
            <see cref="P:Macro.Desktop.Tools.ITool.Actions"/> mentions that this property should not be considered dynamic.
            This implementation assumes that the actions are <b>not</b> dynamic by lazily initializing
            the actions and storing them.  If you wish to return actions dynamically, you must override
            this property.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Tools.Tool`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tools.Tool`1.Context">
            <summary>
            Provides a typed reference to the context in which the tool is operating.
            </summary>
            <remarks>
            Attempting to access this property before <see cref="M:Macro.Desktop.Tools.ITool.SetContext(Macro.Desktop.Tools.IToolContext)"/> has 
            been called (e.g in the constructor of this tool) will return null.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.StockDesktopTools.CloseWindowTool">
            <summary>
            Closes the <see cref="T:Macro.Desktop.IDesktopWindow"/> that owns this tool.
            </summary>
            <remarks>
            For internal framework use only.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.StockDesktopTools.CloseWindowTool.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.StockDesktopTools.CloseWindowTool.CloseWindow">
            <summary>
            Closes the <see cref="T:Macro.Desktop.IDesktopWindow"/> that owns this tool.
            </summary>
        </member>
        <member name="T:Macro.Desktop.StockDesktopTools.CloseWorkspaceTool">
            <summary>
            Closes the active <see cref="T:Macro.Desktop.IWorkspace"/>.
            </summary>
            <remarks>
            For internal framework use only.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.StockDesktopTools.CloseWorkspaceTool.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.StockDesktopTools.CloseWorkspaceTool.Dispose(System.Boolean)">
            <summary>
            Disposes of this object; override to do custom cleanup.
            </summary>
            <param name="disposing">True if this object is being disposed, false if it is being finalized</param>
        </member>
        <member name="M:Macro.Desktop.StockDesktopTools.CloseWorkspaceTool.Initialize">
            <summary>
             Called by the framework to allow the tool to initialize itself.  This method will
             be called after <see cref="!:SetContext" /> has been called, which guarantees that 
             the tool will have access to its context when this method is called.
            </summary>
        </member>
        <member name="M:Macro.Desktop.StockDesktopTools.CloseWorkspaceTool.CloseWorkspace">
            <summary>
            Closes the active <see cref="T:Macro.Desktop.IWorkspace"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.StockDesktopTools.CloseWorkspaceTool.Enabled">
            <summary>
            Gets the enabled state of the tool.
            </summary>
        </member>
        <member name="E:Macro.Desktop.StockDesktopTools.CloseWorkspaceTool.EnabledChanged">
            <summary>
            Raised when the <see cref="P:Macro.Desktop.StockDesktopTools.CloseWorkspaceTool.Enabled"/> property has changed.
            </summary>
        </member>
        <member name="P:Macro.Desktop.LocalePolicy.AllowedLocalizationsList">
            <summary>
            Comma-separated list of culture codes allowed for use
            </summary>
        </member>
        <member name="P:Macro.Desktop.FormatSettings.DateFormat">
            <summary>
            Date format string
            </summary>
        </member>
        <member name="P:Macro.Desktop.FormatSettings.TimeFormat">
            <summary>
            Time format string (use hh:mm tt for non-military)
            </summary>
        </member>
        <member name="P:Macro.Desktop.FormatSettings.DateTimeFormat">
            <summary>
            Date and time format string (use hh:mm tt for non-military)
            </summary>
        </member>
        <member name="P:Macro.Desktop.FormatSettings.DescriptiveDateThresholdInDays">
            <summary>
            Threshold for usage of relative datetime terms. A setting of 0 turns off relative terms.
            </summary>
        </member>
        <member name="P:Macro.Desktop.FormatSettings.DescriptiveFormattingEnabled">
            <summary>
            Specifies whether descriptive date formatting (e.g. &quot;today&quot;, &quot;2 days ago&quot;, etc) is enabled.
            </summary>
        </member>
        <member name="T:Macro.Desktop.DialogBoxCollection">
            <summary>
            Represents the collection of <see cref="T:Macro.Desktop.DialogBox"/> objects owned by a desktop window.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DialogBoxCollection.#ctor(Macro.Desktop.DesktopWindow)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">The <see cref="T:Macro.Desktop.DesktopWindow"/> that owns the dialog box.</param>
        </member>
        <member name="M:Macro.Desktop.DialogBoxCollection.AddNew(Macro.Desktop.DialogBoxCreationArgs)">
            <summary>
            Creates a new dialog box with the specified arguments.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DialogBoxCollection.CreateDialogBox(Macro.Desktop.DialogBoxCreationArgs)">
            <summary>
            Creates a new <see cref="T:Macro.Desktop.DialogBox"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.CompositeUndoableCommand">
            <summary>
            An <see cref="T:Macro.Desktop.UndoableCommand"/> whose only purpose is to process other <see cref="T:Macro.Desktop.UndoableCommand"/>s in
            a repeatable manner, such that the entire set of commands can be undone/redone.
            </summary>
            <remarks>
            The <see cref="T:Macro.Desktop.CompositeUndoableCommand"/> doesn't place any explicit restrictions as to whether
            or not a <see cref="T:Macro.Desktop.UndoableCommand"/> has already been executed or unexecuted, but rather it
            leaves the details up to the consumer.  Typically, before adding a <see cref="T:Macro.Desktop.CompositeUndoableCommand"/>
            to the <see cref="T:Macro.Desktop.CommandHistory"/>, it (or it's contained commands) must be Executed first.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.CompositeUndoableCommand.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.CompositeUndoableCommand.Enqueue(Macro.Desktop.UndoableCommand)">
            <summary>
            Adds/Enqueues an <see cref="T:Macro.Desktop.UndoableCommand"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.CompositeUndoableCommand.Execute">
            <summary>
            <see cref="M:Macro.Desktop.CompositeUndoableCommand.Execute"/>s each command, from the beginning to the end.
            </summary>
        </member>
        <member name="M:Macro.Desktop.CompositeUndoableCommand.Unexecute">
            <summary>
            <see cref="M:Macro.Desktop.CompositeUndoableCommand.Unexecute"/>s each command, from the end to the beginning.
            </summary>
        </member>
        <member name="P:Macro.Desktop.CompositeUndoableCommand.Count">
            <summary>
            Gets the number of commands in this <see cref="T:Macro.Desktop.CompositeUndoableCommand"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ICodeEditor">
            <summary>
            Defines an interface to an editor that is specialized for editing source code.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ICodeEditor.GetComponent">
            <summary>
            Gets the application component that implements the code editor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.ICodeEditor.InsertText(System.String)">
            <summary>
            Inserts the specified text into the editor at the current caret location.
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:Macro.Desktop.ICodeEditor.Text">
            <summary>
            Gets or sets the text that appears in the editor.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ICodeEditor.Language">
            <summary>
            Gets or sets the language by file extension (e.g. xml, cs, js, rb).
            </summary>
        </member>
        <member name="P:Macro.Desktop.ICodeEditor.Modified">
            <summary>
            Gets or sets whether the contents of the editor have been modified.
            </summary>
        </member>
        <member name="E:Macro.Desktop.ICodeEditor.ModifiedChanged">
            <summary>
            Occurs when the value of the <see cref="P:Macro.Desktop.ICodeEditor.Modified"/> property changes.
            </summary>
        </member>
        <member name="T:Macro.Desktop.CodeEditorExtensionPoint">
            <summary>
            Defines an extension point for an editor that is specialized for editing source code.
            </summary>
        </member>
        <member name="T:Macro.Desktop.CodeEditorFactory">
            <summary>
            Factory for creating instances of <see cref="T:Macro.Desktop.ICodeEditor"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.CodeEditorFactory.CreateCodeEditor">
            <summary>
            Creates an returns an instance of <see cref="T:Macro.Desktop.ICodeEditor"/>.
            If an extension of <see cref="T:Macro.Desktop.CodeEditorExtensionPoint"/> exists, an instance of this extension
            will be returned.  Otherwise, a default implementation will be returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Configuration.ActionModel.AbstractActionModelTreeBranch.AppendChild(Macro.Desktop.Configuration.ActionModel.AbstractActionModelTreeNode)">
            <summary>
            Use only for performing initial population of the node.
            </summary>
        </member>
        <member name="T:Macro.Desktop.AlertLevel">
            <summary>
            Defines the possible levels for alerts.
            </summary>
        </member>
        <member name="F:Macro.Desktop.AlertLevel.Info">
            <summary>
            An informational alert notifies the user of an event that is not a problem.
            </summary>
        </member>
        <member name="F:Macro.Desktop.AlertLevel.Warning">
            <summary>
            A warning alert notifies the user of a potentially problematic event.
            </summary>
        </member>
        <member name="F:Macro.Desktop.AlertLevel.Error">
            <summary>
            An error alert notifies the user of a failure which will likely require some corrective action.
            </summary>
        </member>
        <member name="M:Macro.Desktop.AlertLevelExtensions.GetIcon(Macro.Desktop.AlertLevel)">
            <summary>
            Gets the icon corresponding to the specified alert level.
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.Desktop.Actions.ActionNode">
            <summary>
            Node that represents an action.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionNode.#ctor(Macro.Desktop.PathSegment,Macro.Desktop.Actions.IAction)">
            <summary>
            Constructor
            </summary>
            <param name="pathSegment"></param>
            <param name="action"></param>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionNode.CloneNode(Macro.Desktop.PathSegment)">
            <summary>
            Used by the <see cref="M:Macro.Desktop.Actions.ActionModelNode.CloneTree"/> method.
            </summary>
            <remarks>
            Derived classes must override this method to return a clone node.  This clone should
            not copy the sub-tree.
            </remarks>
            <param name="pathSegment">The path segment which this node represents.</param>
            <returns>A new node of this type.</returns>
        </member>
        <member name="P:Macro.Desktop.Actions.ActionNode.Action">
            <summary>
            Gets the action associated with this node, or null if this node is not a leaf node.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.BranchNode">
            <summary>
            Node that represents a branch.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.BranchNode.#ctor(Macro.Desktop.PathSegment)">
            <summary>
            Constructor
            </summary>
            <param name="pathSegment"></param>
        </member>
        <member name="T:Macro.Desktop.Actions.SeparatorNode">
            <summary>
            Node that represents a separator.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.SeparatorNode.#ctor(Macro.Desktop.PathSegment)">
            <summary>
            Constructor.
            </summary>
            <param name="pathSegment"></param>
        </member>
        <member name="M:Macro.Desktop.Actions.SeparatorNode.CloneNode(Macro.Desktop.PathSegment)">
            <summary>
            Used by the <see cref="M:Macro.Desktop.Actions.ActionModelNode.CloneTree"/> method.
            </summary>
            <remarks>
            Derived classes must override this method to return a clone node.  This clone should
            not copy the sub-tree.
            </remarks>
            <param name="pathSegment">The path segment which this node represents.</param>
            <returns>A new node of this type.</returns>
        </member>
        <member name="T:Macro.Desktop.Actions.ActionFormerlyAttribute">
            <summary>
            Indicates to the framework that an action used to have one or more different IDs
            and should replace the old entries in the action model configuration.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionFormerlyAttribute.#ctor(System.String,System.String[])">
            <summary>
            Attribute constructor.
            </summary>
            <param name="actionID">The id of the action.</param>
            <param name="formerActionIds">One or more fully qualified "former" action IDs.</param>
        </member>
        <member name="T:Macro.Desktop.Tables.TableColumnBase`1">
            <summary>
            Abstract base implementation of <see cref="T:Macro.Desktop.Tables.ITableColumn"/> for use with the <see cref="P:Macro.Desktop.Tables.TableColumnBase`1.Table"/> class.
            </summary>
            <remarks>
            Application code should use the concrete <see cref="T:Macro.Desktop.Tables.TableColumn`2"/> class.
            </remarks>
            <typeparam name="TItem">The type of item on which the table is based.</typeparam>
        </member>
        <member name="T:Macro.Desktop.Tables.ITableColumn">
            <summary>
            Defines a column in an <see cref="T:Macro.Desktop.Tables.ITable"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.ITableColumn.GetTooltipText(System.Object)">
            <summary>
            Gets the tooltip of this column for the specified item.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.ITableColumn.GetValue(System.Object)">
            <summary>
            Gets the value of this column for the specified item.
            </summary>
            <param name="item">The item from which the value is to be obtained</param>
        </member>
        <member name="M:Macro.Desktop.Tables.ITableColumn.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of this column on the specified item, assuming this is not a read-only column.
            </summary>
            <param name="item">The item on which the value is to be set.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.ITableColumn.FormatValue(System.Object)">
            <summary>
            Format the value of this column for the specified item.
            </summary>
            <param name="value">The value.</param>
            <returns>The formatted value</returns>
        </member>
        <member name="M:Macro.Desktop.Tables.ITableColumn.ClickLink(System.Object)">
            <summary>
            Sets the click action of this column on the specified item.
            </summary>
            <param name="item">The item on which the value is to be set.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.ITableColumn.GetComparer(System.Boolean)">
            <summary>
            Get a comparer that can be used to sort items in the specified direction.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.ITableColumn.GetCellEditor">
            <summary>
            Gets the editor that allows cells in this column to be edited, or null if no custom editor is provided.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Tables.ITableColumn.IsEditable(System.Object)">
            <summary>
            Gets a value indicating whether the specified item is editable.
            This method will only ever be called if <see cref="P:Macro.Desktop.Tables.ITableColumn.ReadOnly"/> is false.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Macro.Desktop.Tables.ITableColumn.Name">
            <summary>
            The identifying name of the column.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.ITableColumn.DisplayName">
            <summary>
            The heading text of the column.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.ITableColumn.ColumnType">
            <summary>
            The type of data that the column holds.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.ITableColumn.Visible">
            <summary>
            Gets or sets a value indicating whether this column is visible.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.ITableColumn.ResourceResolver">
            <summary>
            Gets or sets a resource resolver.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Tables.ITableColumn.VisibleChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.Tables.ITableColumn.Visible"/> property has changed.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.ITableColumn.WidthFactor">
            <summary>
            A factor that influences the width of the column relative to other columns.
            </summary>
            <remarks>
            A value of 1.0 is default.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.Tables.ITableColumn.WidthPercent">
            <summary>
            Gets the width of this column as a percentage of the overall table width.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.ITableColumn.ReadOnly">
            <summary>
            Indicates whether this column is read-only.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.ITableColumn.HasClickableLink">
            <summary>
            Indicates whether this column is clickable.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.ITableColumn.CellRow">
            <summary>
            Gets the cell row for which this column will be displayed in.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumnBase`1.#ctor(System.String,System.Type,System.Single,System.Comparison{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="columnType">The type of value that the column holds.</param>
            <param name="widthFactor">A weighting factor that is applied to the width of the column.</param>
            <param name="comparison">A custom comparison operator that is used for sorting based on this column.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumnBase`1.#ctor(System.String,System.String,System.Type,System.Single,System.Comparison{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="columnName">The identifying name of the column.</param>
            <param name="columnDisplayName">The display name of the column.</param>
            <param name="columnType">The type of value that the column holds.</param>
            <param name="widthFactor">A weighting factor that is applied to the width of the column.</param>
            <param name="comparison">A custom comparison operator that is used for sorting based on this column.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumnBase`1.#ctor(System.String,System.Type,System.Single,System.Comparison{`0},System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="columnType">The type of value that the column holds.</param>
            <param name="widthFactor">A weighting factor that is applied to the width of the column.</param>
            <param name="comparison">A custom comparison operator that is used for sorting based on this column.</param>
            <param name="cellRow">The cell row this column will be displayed in.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumnBase`1.#ctor(System.String,System.String,System.Type,System.Single,System.Comparison{`0},System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="columnName">The identifying name of the column.</param>
            <param name="columnDisplayName">The display name of the column.</param>
            <param name="columnType">The type of value that the column holds.</param>
            <param name="widthFactor">A weighting factor that is applied to the width of the column.</param>
            <param name="comparison">A custom comparison operator that is used for sorting based on this column.</param>
            <param name="cellRow">The cell row this column will be displayed in.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumnBase`1.GetTooltipText(System.Object)">
            <summary>
             Gets the tooltip of this column for the specified item.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumnBase`1.GetValue(System.Object)">
            <summary>
            Gets the value of this column for the specified item.
            </summary>
            <param name="item">The item from which the value is to be obtained</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumnBase`1.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of this column on the specified item, assuming this is not a read-only column.
            </summary>
            <param name="item">The item on which the value is to be set.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumnBase`1.FormatValue(System.Object)">
            <summary>
            Format the value of this column for the specified item.
            </summary>
            <param name="value">The value.</param>
            <returns>The formatted value</returns>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumnBase`1.ClickLink(System.Object)">
            <summary>
            Sets the click action of this column on the specified item.
            </summary>
            <param name="item">The item on which the value is to be set.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumnBase`1.GetComparer(System.Boolean)">
            <summary>
            Get a comparer that can be used to sort items in the specified direction.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumnBase`1.GetCellEditor">
            <summary>
            Gets the editor that allows cells in this column to be edited, or null if no custom editor is provided.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumnBase`1.IsEditable(System.Object)">
            <summary>
            Gets whether or not the specified <paramref name="item"/> can be edited.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumnBase`1.ValueComparsion(`0,`0)">
            <summary>
            Default comparison used when TColumn is IComparable.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumnBase`1.NopComparison(`0,`0)">
            <summary>
            Default comparison used when TColumn is not IComparable (in which case, sorting is not possible).
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.TableColumnBase`1.Comparison">
            <summary>
            Gets or sets the comparison delegate that will be used to sort the table according to this column.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.TableColumnBase`1.EditableHandler">
            <summary>
            Gets or sets the delegate that determines whether a given item is editable.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.TableColumnBase`1.CellEditor">
            <summary>
            Gets or sets a custom cell editor for this column.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.TableColumnBase`1.Table">
            <summary>
            Used by the framework to associate this column with a parent <see cref="P:Macro.Desktop.Tables.TableColumnBase`1.Table"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.TableColumnBase`1.Name">
            <summary>
            The identifying name of the column.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.TableColumnBase`1.DisplayName">
            <summary>
            The heading text of the column.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.TableColumnBase`1.ColumnType">
            <summary>
            The type of data that the column holds.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.TableColumnBase`1.Visible">
            <summary>
            Gets or sets a value indicating whether this column is visible.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.TableColumnBase`1.ResourceResolver">
            <summary>
            Gets or sets a resource resolver.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Tables.TableColumnBase`1.VisibleChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.Tables.TableColumnBase`1.Visible"/> property has changed.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.TableColumnBase`1.WidthFactor">
            <summary>
            A factor that influences the width of the column relative to other columns.
            </summary>
            <remarks>
            A value of 1.0 is default.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.Tables.TableColumnBase`1.WidthPercent">
            <summary>
            Gets the width of this column as a percentage of the overall table width.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.TableColumnBase`1.ReadOnly">
            <summary>
            Indicates whether this column is read-only.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.TableColumnBase`1.HasClickableLink">
            <summary>
            Indicates whether this column is clickable
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.TableColumnBase`1.CellRow">
            <summary>
            Gets the cell row for which this column will be displayed in.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Tables.TableColumnBase`1.SortComparer">
            <summary>
            Comparer for sorting operations
            </summary>
        </member>
        <member name="T:Macro.Desktop.Tables.ColorSelector`1">
            <summary>
            A delegate for selecting color based on an object based on
            an item in <see cref="P:Macro.Desktop.Tables.ITable.Items"/>.
            </summary>
            <returns>Name of a predefined color.</returns>
        </member>
        <member name="T:Macro.Desktop.Tables.Table`1">
            <summary>
            A useful generic implementation of <see cref="T:Macro.Desktop.Tables.ITable"/>.
            </summary>
            <typeparam name="TItem">The type of item that this table holds.</typeparam>
        </member>
        <member name="T:Macro.Desktop.Tables.ITable">
            <summary>
            Defines the interface to a table, which provides a presentation model for viewing data in a tabular form.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.ITable.Sort">
            <summary>
            Sorts this table according to the cached sort parameters, if any exist.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.ITable.Sort(Macro.Desktop.Tables.TableSortParams)">
            <summary>
            Sorts this table according to the specified sort parameters.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.ITable.Filter">
            <summary>
            Filters this table according to the cached filter parameters, if any exist.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.ITable.Filter(Macro.Desktop.Tables.TableFilterParams)">
            <summary>
            Filters this table accordint ot the specified filter parameters.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.ITable.RemoveFilter">
            <summary>
            Removes the applied filter, if one exists.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.ITable.GetItemBackgroundColor(System.Object)">
            <summary>
            Gets the color for the background of a cell row.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.ITable.GetItemOutlineColor(System.Object)">
            <summary>
            Gets color for the outline of a cell row.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.ITable.ItemType">
            <summary>
            Returns the <see cref="T:System.Type"/> of the items in this table.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.ITable.Items">
            <summary>
            Gets the collection of items in the table.
            </summary>
            <remarks>
            <para>
            The returned collection is filtered if <see cref="M:Macro.Desktop.Tables.ITable.Filter"/> has been called.  To
            ensure all items are returned, use <see cref="M:Macro.Desktop.Tables.ITable.RemoveFilter"/> prior to using this property.
            </para>
            <para>
            CF: <see cref="P:Macro.Desktop.Tables.ITable`1.Items"/> which always returns the complete collection.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.Desktop.Tables.ITable.Columns">
            <summary>
            Get the collection of columns.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.ITable.SortParams">
            <summary>
            Gets the cached sort parameters, or returns null if this table has not been sorted.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.ITable.IsFiltered">
            <summary>
            Gets a value indicating if the table is filtered or not.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.ITable.FilterParams">
            <summary>
            Gets the cached filter parameters, or returns null if this table has not been filtered.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.ITable.BaseColumnWidthChars">
            <summary>
            Gets the base column width for this table, in units that correspond roughly to the
            width of one character.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.ITable.CellRowCount">
            <summary>
            Gets the number of cell rows in each row.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Tables.ITable`1">
            <summary>
            Defines an additional interface to a table, which provides generic methods for viewing its data.
            Used in conjunction with <see cref="T:Macro.Desktop.Tables.ITable"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.ITable`1.Items">
            <summary>
            Gets the collection of items in the table.
            </summary>
            <remarks>The returned collection is never filtered.  CF: <see cref="P:Macro.Desktop.Tables.ITable.Items"/> which may return a filtered list.</remarks>
        </member>
        <member name="P:Macro.Desktop.Tables.ITable`1.Columns">
            <summary>
            Gets the collection of columns.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.Table`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.Table`1.#ctor(System.Int32)">
            <summary>
             Constructs a table with the specified number of cells in each row.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.Table`1.Sort">
            <summary>
            Sorts this table according to the cached sort parameters, if any exist.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.Table`1.Sort(Macro.Desktop.Tables.TableSortParams)">
            <summary>
            Sorts this table according to the specified sort parameters.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.Table`1.Filter(Macro.Desktop.Tables.TableFilterParams)">
            <summary>
            Filters this table according to the specified filter parameters.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.Table`1.Filter">
            <summary>
            Filters this table according to the cached filter parameters, if any exist.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.Table`1.RemoveFilter">
            <summary>
            Removes the applied filter, if one exists.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.Table`1.GetItemBackgroundColor(System.Object)">
            <summary>
            Gets the color for the background of a cell row.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.Table`1.GetItemOutlineColor(System.Object)">
            <summary>
            Gets color for the outline of a cell row.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.Table`1.BackgroundColorSelector">
            <summary>
            Gets and sets the background color of a cell row.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.Table`1.OutlineColorSelector">
            <summary>
            Gets and sets the outline color of a cell row.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.Table`1.ItemType">
            <summary>
            Returns the <see cref="T:System.Type"/> of the items in this table.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.Table`1.SortParams">
            <summary>
            Gets the cached sort parameters, or returns null if this table has not been sorted.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.Table`1.Macro#Desktop#Tables#ITable#Columns">
            <summary>
            Get the collection of columns.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Tables.Table`1.Sorted">
            <summary>
            Occurs after the table is sorted.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.Table`1.BaseColumnWidthChars">
            <summary>
            Gets the base column width for this table, in units that correspond roughly to the
            width of one character.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.Table`1.Macro#Desktop#Tables#ITable#Items">
            <summary>
            Gets the collection of items in the table.
            </summary>
            <remarks>
            <para>
            The returned collection is filtered if <see cref="M:Macro.Desktop.Tables.Table`1.Filter"/> has been called.  To
            ensure all items are returned, use <see cref="M:Macro.Desktop.Tables.Table`1.RemoveFilter"/> prior to using this property.
            </para>
            <para>
            CF: <see cref="P:Macro.Desktop.Tables.ITable`1.Items"/> which always returns the complete collection.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.Desktop.Tables.Table`1.IsFiltered">
            <summary>
            Gets a value indicating if the table is filtered or not.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.Table`1.FilterParams">
            <summary>
            Gets the cached filter parameters, or returns null if this table is not filtered.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.Table`1.CellRowCount">
            <summary>
            Gets the number of cell rows in each row.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.Table`1.Columns">
            <summary>
            Gets the collection of columns for the table.
            </summary>
            <remarks>
            Use this property to add <see cref="T:Macro.Desktop.Tables.ITableColumn"/> objects.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.Tables.Table`1.Items">
            <summary>
            Gets the collection of items in the table.  The returned collection is never filtered.
            </summary>
            <remarks>The returned collection is never filtered.</remarks>
        </member>
        <member name="T:Macro.Desktop.ExceptionPolicyFactory">
            <summary>
             Provides <see cref="T:Macro.Desktop.IExceptionPolicy"/> objects via static <see cref="M:Macro.Desktop.ExceptionPolicyFactory.GetPolicy(System.Type)"/> method.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ExceptionPolicyFactory.GetPolicy(System.Type)">
            <summary>
             Returns an <see cref="T:Macro.Desktop.IExceptionPolicy"/> for a requested <see cref="T:System.Exception"/> type.
            </summary>
            <param name="exceptionType">An <see cref="T:System.Exception"/> derived type.</param>
            <returns>An <see cref="T:Macro.Desktop.IExceptionPolicy"/> for the requested type if found or a <see cref="T:Macro.Desktop.ExceptionPolicyFactory.DefaultExceptionPolicy"/>.</returns>
        </member>
        <member name="T:Macro.Desktop.Tables.TableFilterParams">
            <summary>
            Filter parameters that can be applied to a table.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.TableFilterParams.#ctor(Macro.Desktop.Tables.ITableColumn,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="_column">The column to filter by, null to filter by any column.</param>
            <param name="value">The value to filter by.</param>
        </member>
        <member name="P:Macro.Desktop.Tables.TableFilterParams.Column">
            <summary>
            Gets or sets the column to filter by.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.TableFilterParams.Value">
            <summary>
            Gets or sets the value to filter by.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ReorderableGalleryComponent">
            <summary>
            A <see cref="T:Macro.Desktop.GalleryComponent"/> that supports drag-reordering of displayed items.
            </summary>
            <remarks>
            This class can be overriden to complete the gallery with drag and drop support for importing and exporting both <see cref="T:Macro.Desktop.IGalleryItem"/>s
            and other objects. The default implemention only allowes reordering of items within itself.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.GalleryComponent">
            <summary>
            A component to show an interactive gallery of items.
            </summary>
        </member>
        <member name="M:Macro.Desktop.GalleryComponent.#ctor">
            <summary>
            Constructs an empty <see cref="T:Macro.Desktop.GalleryComponent"/> without any tool actions.
            </summary>
        </member>
        <member name="M:Macro.Desktop.GalleryComponent.#ctor(System.ComponentModel.IBindingList)">
            <summary>
            Constructs a <see cref="T:Macro.Desktop.GalleryComponent"/> with the specified data source and without any tool actions.
            </summary>
            <param name="dataSource">An <see cref="T:System.ComponentModel.IBindingList"/> of <see cref="T:Macro.Desktop.IGalleryItem"/>s.</param>
        </member>
        <member name="M:Macro.Desktop.GalleryComponent.#ctor(System.String,System.String)">
            <summary>
            Constructs an empty <see cref="T:Macro.Desktop.GalleryComponent"/>, automatically adding the actions of
            <see cref="T:Macro.Desktop.GalleryToolExtensionPoint"/>s at the specified action sites.
            </summary>
            <param name="toolbarSite">The site for toolbar actions.</param>
            <param name="contextMenuSite">The site for context menu actions.</param>
        </member>
        <member name="M:Macro.Desktop.GalleryComponent.#ctor(System.ComponentModel.IBindingList,System.String,System.String)">
            <summary>
            Constructs a <see cref="T:Macro.Desktop.GalleryComponent"/> with the specified data source, automatically adding the actions of
            <see cref="T:Macro.Desktop.GalleryToolExtensionPoint"/>s at the specified action sites.
            </summary>
            <param name="dataSource">An <see cref="T:System.ComponentModel.IBindingList"/> of <see cref="T:Macro.Desktop.IGalleryItem"/>s.</param>
            <param name="toolbarSite">The site for toolbar actions.</param>
            <param name="contextMenuSite">The site for context menu actions.</param>
        </member>
        <member name="M:Macro.Desktop.GalleryComponent.UnselectAll">
            <summary>
            Unselects all <see cref="T:Macro.Desktop.IGalleryItem"/>s.
            </summary>
        </member>
        <member name="M:Macro.Desktop.GalleryComponent.Select(System.Collections.Generic.IEnumerable{Macro.Desktop.IGalleryItem})">
            <summary>
            Selects the specified <see cref="T:Macro.Desktop.IGalleryItem"/>s.
            </summary>
            <remarks>
            Unselection of all items can be accomplished by passing an empty enumeration to <see cref="M:Macro.Desktop.GalleryComponent.Select(System.Collections.Generic.IEnumerable{Macro.Desktop.IGalleryItem})"/>.
            </remarks>
            <param name="selection">The items to select.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="selection"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the selected items are not in the <see cref="P:Macro.Desktop.GalleryComponent.DataSource"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:Macro.Desktop.GalleryComponent.DataSource"/> is null.</exception>
        </member>
        <member name="M:Macro.Desktop.GalleryComponent.Select(Macro.Desktop.IGalleryItem)">
            <summary>
            Selects the specified <see cref="T:Macro.Desktop.IGalleryItem"/>.
            </summary>
            <remarks>
            Unselection of all items can be accomplished by passing an empty enumeration to <see cref="M:Macro.Desktop.GalleryComponent.Select(System.Collections.Generic.IEnumerable{Macro.Desktop.IGalleryItem})"/>.
            </remarks>
            <param name="item">The item to select.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="item"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="item"/> is not in the <see cref="P:Macro.Desktop.GalleryComponent.DataSource"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:Macro.Desktop.GalleryComponent.DataSource"/> is null.</exception>
        </member>
        <member name="M:Macro.Desktop.GalleryComponent.Activate(Macro.Desktop.IGalleryItem)">
            <summary>
            Activates the specified <see cref="T:Macro.Desktop.IGalleryItem"/>.
            </summary>
            <param name="item">The item to activate.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="item"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="item"/> is not in the <see cref="P:Macro.Desktop.GalleryComponent.DataSource"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:Macro.Desktop.GalleryComponent.DataSource"/> is null.</exception>
        </member>
        <member name="M:Macro.Desktop.GalleryComponent.BeginDrag(System.Collections.Generic.IList{Macro.Desktop.IGalleryItem})">
            <summary>
            Signals the component that a drag &amp; drop operation involving the specified
            <see cref="T:Macro.Desktop.IGalleryItem"/>s has started on the associated view.
            </summary>
            <remarks>
            </remarks>
            <param name="draggedItems">The <see cref="T:Macro.Desktop.IGalleryItem"/>s being dragged.</param>
        </member>
        <member name="M:Macro.Desktop.GalleryComponent.EndDrag(System.Collections.Generic.IList{Macro.Desktop.IGalleryItem},Macro.Desktop.DragDropOption)">
            <summary>
            Signals the component that a drag &amp; drop operation involving the specified
            <see cref="T:Macro.Desktop.IGalleryItem"/>s has ended with the given action being taken on the items by the drop target.
            </summary>
            <param name="draggedItems">The <see cref="T:Macro.Desktop.IGalleryItem"/>s that were dragged.</param>
            <param name="action">The <see cref="T:Macro.Desktop.DragDropOption"/> action that was taken on the items by the drop target.</param>
        </member>
        <member name="M:Macro.Desktop.GalleryComponent.CheckDrop(Macro.Desktop.IDragDropObject,System.Int32,Macro.Desktop.DragDropOption,Macro.Desktop.ModifierFlags)">
            <summary>
            Checks for allowed drag &amp; drop actions involving the specified foreign data and the given target on this component.
            </summary>
            <param name="droppingData">The <see cref="T:Macro.Desktop.IDragDropObject"/> object that encapsulates all forms of the foreign data.</param>
            <param name="targetIndex">The target index that the user is trying to drop at.</param>
            <param name="actions"></param>
            <param name="modifiers">The modifier keys that are being held by the user.</param>
            <returns>The allowed <see cref="T:Macro.Desktop.DragDropKind"/> actions for this attempted drag &amp; drop operation.</returns>
        </member>
        <member name="M:Macro.Desktop.GalleryComponent.CheckDrop(Macro.Desktop.IDragDropObject,Macro.Desktop.IGalleryItem,Macro.Desktop.DragDropOption,Macro.Desktop.ModifierFlags)">
            <summary>
            Checks for allowed drag &amp; drop actions involving the specified foreign data and the given target on this component.
            </summary>
            <param name="droppingData">The <see cref="T:Macro.Desktop.IDragDropObject"/> object that encapsulates all forms of the foreign data.</param>
            <param name="targetItem">The target item that the user is trying to drop on to.</param>
            <param name="actions"></param>
            <param name="modifiers">The modifier keys that are being held by the user.</param>
            <returns>The allowed <see cref="T:Macro.Desktop.DragDropKind"/> action for this attempted drag &amp; drop operation.</returns>
        </member>
        <member name="M:Macro.Desktop.GalleryComponent.PerformDrop(Macro.Desktop.IDragDropObject,System.Int32,Macro.Desktop.DragDropOption,Macro.Desktop.ModifierFlags)">
            <summary>
            
            </summary>
            <remarks>
            This method or <see cref="M:Macro.Desktop.GalleryComponent.PerformDrop(Macro.Desktop.IDragDropObject,Macro.Desktop.IGalleryItem,Macro.Desktop.DragDropOption,Macro.Desktop.ModifierFlags)"/> may be called
            additional times if the returned action is <see cref="F:Macro.Desktop.DragDropOption.None"/> in order to attempt other ways to drop the item in
            an acceptable manner. It is thus very important that the result be set properly if the drop was accepted and no further attempts
            should be made.
            </remarks>
            <param name="droppedData"></param>
            <param name="targetIndex"></param>
            <param name="action"></param>
            <param name="modifiers"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.GalleryComponent.PerformDrop(Macro.Desktop.IDragDropObject,Macro.Desktop.IGalleryItem,Macro.Desktop.DragDropOption,Macro.Desktop.ModifierFlags)">
            <summary>
            
            </summary>
            <param name="droppedData"></param>
            <param name="targetItem"></param>
            <param name="action"></param>
            <param name="modifiers"></param>
            <returns></returns>
        </member>
        <member name="P:Macro.Desktop.GalleryComponent.ToolSet">
            <summary>
            Gets a <see cref="T:Macro.Desktop.Tools.IToolSet"/> of <see cref="T:Macro.Desktop.GalleryToolExtensionPoint"/> tools.
            </summary>
        </member>
        <member name="P:Macro.Desktop.GalleryComponent.MenuModel">
            <summary>
            Gets or sets the context menu action model.
            </summary>
            <remarks>
            The action model must be set before the view is created. Any changes to the action model are not propagated to the view afterwards.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.GalleryComponent.ToolbarModel">
            <summary>
            Gets or sets the toolbar action model.
            </summary>
            <remarks>
            The action model must be set before the view is created. Any changes to the action model are not propagated to the view afterwards.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.GalleryComponent.DataSource">
            <summary>
            Gets or sets the underlying <see cref="T:System.ComponentModel.IBindingList"/> of <see cref="T:Macro.Desktop.IGalleryItem"/>s.
            </summary>
        </member>
        <member name="E:Macro.Desktop.GalleryComponent.DataSourceChanged">
            <summary>
            Indicates that the underlying <see cref="T:System.ComponentModel.IBindingList"/> of <see cref="T:Macro.Desktop.IGalleryItem"/>s has changed.
            </summary>
        </member>
        <member name="P:Macro.Desktop.GalleryComponent.MultiSelect">
            <summary>
            Gets or sets if this <see cref="T:Macro.Desktop.GalleryComponent"/> supports selection of multiple <see cref="T:Macro.Desktop.IGalleryItem"/>s simultaneously.
            </summary>
        </member>
        <member name="P:Macro.Desktop.GalleryComponent.Selection">
            <summary>
            Gets the current selection of <see cref="T:Macro.Desktop.IGalleryItem"/>s.
            </summary>
        </member>
        <member name="P:Macro.Desktop.GalleryComponent.SelectedData">
            <summary>
            Gets the data objects of the current selection of <see cref="T:Macro.Desktop.IGalleryItem"/>s.
            </summary>
        </member>
        <member name="E:Macro.Desktop.GalleryComponent.SelectionChanged">
            <summary>
            Indicates that the current selection of <see cref="T:Macro.Desktop.IGalleryItem"/>s in the gallery has changed.
            </summary>
        </member>
        <member name="E:Macro.Desktop.GalleryComponent.ItemActivated">
            <summary>
            Indicates that an <see cref="T:Macro.Desktop.IGalleryItem"/> in the gallery has been activated
            </summary>
        </member>
        <member name="P:Macro.Desktop.GalleryComponent.HideSelection">
            <summary>
            Gets or sets if the gallery should show selection accents when the control is not in focus.
            </summary>
        </member>
        <member name="P:Macro.Desktop.GalleryComponent.ShowDescription">
            <summary>
            Gets or sets if the gallery should show the <see cref="P:Macro.Desktop.IGalleryItem.Description"/> of each <see cref="T:Macro.Desktop.IGalleryItem"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.GalleryComponent.MaxDescriptionLines">
            <summary>
            Gets or sets the maximum lines of <see cref="P:Macro.Desktop.IGalleryItem.Description"/> that should be displayed.
            </summary>
        </member>
        <member name="P:Macro.Desktop.GalleryComponent.ImageSize">
            <summary>
            Gets or sets the size of the icons that the gallery should show.
            </summary>
        </member>
        <member name="P:Macro.Desktop.GalleryComponent.AllowRenaming">
            <summary>
            Gets or sets if the gallery should allow renaming of <see cref="T:Macro.Desktop.IGalleryItem"/>s.
            </summary>
        </member>
        <member name="P:Macro.Desktop.GalleryComponent.AllowsDropOnItem">
            <summary>
            Gets if the gallery supports any drag and drop interaction on top of items.
            </summary>
        </member>
        <member name="P:Macro.Desktop.GalleryComponent.AllowsDropAtIndex">
            <summary>
            Gets if the gallery supports any drag and drop interaction in between items.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.#ctor">
            <summary>
            Constructs an empty <see cref="T:Macro.Desktop.ReorderableGalleryComponent"/> without any tool actions.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.#ctor(System.ComponentModel.IBindingList)">
            <summary>
            Constructs a <see cref="T:Macro.Desktop.ReorderableGalleryComponent"/> with the specified data source and without any tool actions.
            </summary>
            <param name="dataSource">An <see cref="T:System.ComponentModel.IBindingList"/> of <see cref="T:Macro.Desktop.IGalleryItem"/>s.</param>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.#ctor(System.String,System.String)">
            <summary>
            Constructs an empty <see cref="T:Macro.Desktop.ReorderableGalleryComponent"/>, automatically adding the actions of
            <see cref="T:Macro.Desktop.GalleryToolExtensionPoint"/>s at the specified action sites.
            </summary>
            <param name="toolbarSite">The site for toolbar actions.</param>
            <param name="contextMenuSite">The site for context menu actions.</param>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.#ctor(System.ComponentModel.IBindingList,System.String,System.String)">
            <summary>
            Constructs a <see cref="T:Macro.Desktop.ReorderableGalleryComponent"/> with the specified data source, automatically adding the actions of
            <see cref="T:Macro.Desktop.GalleryToolExtensionPoint"/>s at the specified action sites.
            </summary>
            <param name="dataSource">An <see cref="T:System.ComponentModel.IBindingList"/> of <see cref="T:Macro.Desktop.IGalleryItem"/>s.</param>
            <param name="toolbarSite">The site for toolbar actions.</param>
            <param name="contextMenuSite">The site for context menu actions.</param>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.ExtractGalleryItemList(Macro.Desktop.IDragDropObject)">
            <summary>
            Gets a list of  <see cref="T:Macro.Desktop.IGalleryItem"/>s from the given <see cref="T:Macro.Desktop.IDragDropObject">data wrapper</see>.
            </summary>
            <param name="dataObject">The data wrapper object.</param>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Macro.Desktop.IGalleryItem"/>s, or null if the wrapper did not contain a list of 0 or more IGalleryItems.</returns>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.BeginDrag(System.Collections.Generic.IList{Macro.Desktop.IGalleryItem})">
            <summary>
            Signals the component that a drag &amp; drop operation involving the specified
            <see cref="T:Macro.Desktop.IGalleryItem"/>s has started on the associated view.
            </summary>
            <remarks>
            </remarks>
            <param name="draggedItems">The <see cref="T:Macro.Desktop.IGalleryItem"/>s being dragged.</param>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.EndDrag(System.Collections.Generic.IList{Macro.Desktop.IGalleryItem},Macro.Desktop.DragDropOption)">
            <summary>
            Signals the component that a drag &amp; drop operation involving the specified
            <see cref="T:Macro.Desktop.IGalleryItem"/>s has ended with the given action being taken on the items by the drop target.
            </summary>
            <param name="draggedItems">The <see cref="T:Macro.Desktop.IGalleryItem"/>s that were dragged.</param>
            <param name="action">The <see cref="T:Macro.Desktop.DragDropOption"/> action that was taken on the items by the drop target.</param>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.CheckDrop(Macro.Desktop.IDragDropObject,System.Int32,Macro.Desktop.DragDropOption,Macro.Desktop.ModifierFlags)">
            <summary>
            Checks for allowed drag &amp; drop actions involving the specified foreign data and the given target on this component.
            </summary>
            <param name="droppingData">The <see cref="T:Macro.Desktop.IDragDropObject"/> object that encapsulates all forms of the foreign data.</param>
            <param name="targetIndex">The target index that the user is trying to drop at.</param>
            <param name="actions"></param>
            <param name="modifiers">The modifier keys that are being held by the user.</param>
            <returns>The allowed <see cref="T:Macro.Desktop.DragDropKind"/> actions for this attempted drag &amp; drop operation.</returns>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.CheckDrop(Macro.Desktop.IDragDropObject,Macro.Desktop.IGalleryItem,Macro.Desktop.DragDropOption,Macro.Desktop.ModifierFlags)">
            <summary>
            Checks for allowed drag &amp; drop actions involving the specified foreign data and the given target on this component.
            </summary>
            <param name="droppingData">The <see cref="T:Macro.Desktop.IDragDropObject"/> object that encapsulates all forms of the foreign data.</param>
            <param name="targetItem">The target item that the user is trying to drop on to.</param>
            <param name="actions"></param>
            <param name="modifiers">The modifier keys that are being held by the user.</param>
            <returns>The allowed <see cref="T:Macro.Desktop.DragDropKind"/> action for this attempted drag &amp; drop operation.</returns>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.PerformDrop(Macro.Desktop.IDragDropObject,System.Int32,Macro.Desktop.DragDropOption,Macro.Desktop.ModifierFlags)">
            <summary>
            
            </summary>
            <remarks>
            This method or <see cref="M:Macro.Desktop.GalleryComponent.PerformDrop(Macro.Desktop.IDragDropObject,Macro.Desktop.IGalleryItem,Macro.Desktop.DragDropOption,Macro.Desktop.ModifierFlags)"/> may be called
            additional times if the returned action is <see cref="F:Macro.Desktop.DragDropOption.None"/> in order to attempt other ways to drop the item in
            an acceptable manner. It is thus very important that the result be set properly if the drop was accepted and no further attempts
            should be made.
            </remarks>
            <param name="droppedData"></param>
            <param name="targetIndex"></param>
            <param name="action"></param>
            <param name="modifiers"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.PerformDrop(Macro.Desktop.IDragDropObject,Macro.Desktop.IGalleryItem,Macro.Desktop.DragDropOption,Macro.Desktop.ModifierFlags)">
            <summary>
            
            </summary>
            <param name="droppedData"></param>
            <param name="targetItem"></param>
            <param name="action"></param>
            <param name="modifiers"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.CheckDropLocalItems(System.Collections.Generic.IList{Macro.Desktop.IGalleryItem},System.Int32,Macro.Desktop.DragDropOption,Macro.Desktop.ModifierFlags)">
            <summary>
            Checks if drag-dropping <see cref="T:Macro.Desktop.IGalleryItem"/>s from within this gallery to the specified target index is allowed.
            </summary>
            <param name="droppingItems">The list of <see cref="T:Macro.Desktop.IGalleryItem"/>s to drop.</param>
            <param name="targetIndex">The target index at which the <paramref name="droppingItems"/> are being dropped.</param>
            <param name="actions">The interactions that are being allowed by the data source.</param>
            <param name="modifiers">The modifier keys that currently being pressed.</param>
            <returns>The allowed interactions for dropping the <paramref name="droppingItems"/> here.</returns>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.CheckDropForeignItems(System.Collections.Generic.IList{Macro.Desktop.IGalleryItem},System.Int32,Macro.Desktop.DragDropOption,Macro.Desktop.ModifierFlags)">
            <summary>
            Checks if drag-dropping <see cref="T:Macro.Desktop.IGalleryItem"/>s from outside this gallery to the specified target index is allowed.
            </summary>
            <param name="droppingItems">The list of <see cref="T:Macro.Desktop.IGalleryItem"/>s to drop.</param>
            <param name="targetIndex">The target index at which the <paramref name="droppingItems"/> are being dropped.</param>
            <param name="actions">The interactions that are being allowed by the data source.</param>
            <param name="modifiers">The modifier keys that currently being pressed.</param>
            <returns>The allowed interactions for dropping the <paramref name="droppingItems"/> here.</returns>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.CheckDropForeignObject(Macro.Desktop.IDragDropObject,System.Int32,Macro.Desktop.DragDropOption,Macro.Desktop.ModifierFlags)">
            <summary>
            Checks if drag-dropping non-<see cref="T:Macro.Desktop.IGalleryItem"/> objects from outside this gallery to the specified index is allowed.
            </summary>
            <param name="droppingData">The data object to drop.</param>
            <param name="targetIndex">The target index at which the <paramref name="droppingData"/> is being dropped.</param>
            <param name="actions">The interactions that are being allowed by the data source.</param>
            <param name="modifiers">The modifier keys that currently being pressed.</param>
            <returns>The allowed interactions for dropping the <paramref name="droppingData"/> here.</returns>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.CheckDropLocalItems(System.Collections.Generic.IList{Macro.Desktop.IGalleryItem},Macro.Desktop.IGalleryItem,Macro.Desktop.DragDropOption,Macro.Desktop.ModifierFlags)">
            <summary>
            Checks if drag-dropping <see cref="T:Macro.Desktop.IGalleryItem"/>s from within this gallery on top of the specified item is allowed.
            </summary>
            <param name="droppingItems">The list of <see cref="T:Macro.Desktop.IGalleryItem"/>s to drop.</param>
            <param name="targetItem">The target <see cref="T:Macro.Desktop.IGalleryItem"/> at which the <paramref name="droppingItems"/> are being dropped.</param>
            <param name="actions">The interactions that are being allowed by the data source.</param>
            <param name="modifiers">The modifier keys that currently being pressed.</param>
            <returns>The allowed interactions for dropping the <paramref name="droppingItems"/> here.</returns>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.CheckDropForeignItems(System.Collections.Generic.IList{Macro.Desktop.IGalleryItem},Macro.Desktop.IGalleryItem,Macro.Desktop.DragDropOption,Macro.Desktop.ModifierFlags)">
            <summary>
            Checks if drag-dropping <see cref="T:Macro.Desktop.IGalleryItem"/>s from outside this gallery on top of the specified item is allowed.
            </summary>
            <param name="droppingItems">The list of <see cref="T:Macro.Desktop.IGalleryItem"/>s to drop.</param>
            <param name="targetItem">The target <see cref="T:Macro.Desktop.IGalleryItem"/> at which the <paramref name="droppingItems"/> are being dropped.</param>
            <param name="actions">The interactions that are being allowed by the data source.</param>
            <param name="modifiers">The modifier keys that currently being pressed.</param>
            <returns>The allowed interactions for dropping the <paramref name="droppingItems"/> here.</returns>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.CheckDropForeignObject(Macro.Desktop.IDragDropObject,Macro.Desktop.IGalleryItem,Macro.Desktop.DragDropOption,Macro.Desktop.ModifierFlags)">
            <summary>
            Checks if drag-dropping non-<see cref="T:Macro.Desktop.IGalleryItem"/> objects from outside this gallery on top of the specified item is allowed.
            </summary>
            <param name="droppingData">The data object to drop.</param>
            <param name="targetItem">The target <see cref="T:Macro.Desktop.IGalleryItem"/> at which the <paramref name="droppingData"/> is being dropped.</param>
            <param name="actions">The interactions that are being allowed by the data source.</param>
            <param name="modifiers">The modifier keys that currently being pressed.</param>
            <returns>The allowed interactions for dropping the <paramref name="droppingData"/> here.</returns>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.PerformDropLocalItems(System.Collections.Generic.IList{Macro.Desktop.IGalleryItem},System.Int32,Macro.Desktop.DragDropOption,Macro.Desktop.ModifierFlags)">
            <summary>
            Performs a drag-drop of <see cref="T:Macro.Desktop.IGalleryItem"/>s from within this gallery to the specified target index.
            </summary>
            <param name="droppedItems">The list of <see cref="T:Macro.Desktop.IGalleryItem"/>s to drop.</param>
            <param name="targetIndex">The target index at which the <paramref name="droppedItems"/> are being dropped.</param>
            <param name="actions">The interaction to take.</param>
            <param name="modifiers">The modifier keys that were pressed at the time of the drop.</param>
            <returns>The actual interaction on the <paramref name="droppedItems"/> that was taken.</returns>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.PerformDropForeignItems(System.Collections.Generic.IList{Macro.Desktop.IGalleryItem},System.Int32,Macro.Desktop.DragDropOption,Macro.Desktop.ModifierFlags)">
            <summary>
            Performs a drag-drop of <see cref="T:Macro.Desktop.IGalleryItem"/>s from outside this gallery to the specified target index.
            </summary>
            <param name="droppedItems">The list of <see cref="T:Macro.Desktop.IGalleryItem"/>s to drop.</param>
            <param name="targetIndex">The target index at which the <paramref name="droppedItems"/> are being dropped.</param>
            <param name="actions">The interaction to take.</param>
            <param name="modifiers">The modifier keys that were pressed at the time of the drop.</param>
            <returns>The actual interaction on the <paramref name="droppedItems"/> that was taken.</returns>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.PerformDropForeignObject(Macro.Desktop.IDragDropObject,System.Int32,Macro.Desktop.DragDropOption,Macro.Desktop.ModifierFlags)">
            <summary>
            Performs a drag-drop of a non-<see cref="T:Macro.Desktop.IGalleryItem"/> object from outside this gallery to the specified index.
            </summary>
            <param name="droppedData">The data object to drop.</param>
            <param name="targetIndex">The target index at which the <paramref name="droppedData"/> is being dropped.</param>
            <param name="actions">The interaction to take.</param>
            <param name="modifiers">The modifier keys that were pressed at the time of the drop.</param>
            <returns>The actual interaction on the <paramref name="droppedData"/> that was taken.</returns>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.PerformDropLocalItems(System.Collections.Generic.IList{Macro.Desktop.IGalleryItem},Macro.Desktop.IGalleryItem,Macro.Desktop.DragDropOption,Macro.Desktop.ModifierFlags)">
            <summary>
            Performs a drag-drop of <see cref="T:Macro.Desktop.IGalleryItem"/>s from within this gallery on top of the specified item.
            </summary>
            <param name="droppedItems">The list of <see cref="T:Macro.Desktop.IGalleryItem"/>s to drop.</param>
            <param name="targetItem">The target <see cref="T:Macro.Desktop.IGalleryItem"/> at which the <paramref name="droppedItems"/> are being dropped.</param>
            <param name="actions">The interaction to take.</param>
            <param name="modifiers">The modifier keys that were pressed at the time of the drop.</param>
            <returns>The actual interaction on the <paramref name="droppedItems"/> that was taken.</returns>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.PerformDropForeignItems(System.Collections.Generic.IList{Macro.Desktop.IGalleryItem},Macro.Desktop.IGalleryItem,Macro.Desktop.DragDropOption,Macro.Desktop.ModifierFlags)">
            <summary>
            Performs a drag-drop of <see cref="T:Macro.Desktop.IGalleryItem"/>s from outside this gallery on top of the specified item.
            </summary>
            <param name="droppedItems">The list of <see cref="T:Macro.Desktop.IGalleryItem"/>s to drop.</param>
            <param name="targetItem">The target <see cref="T:Macro.Desktop.IGalleryItem"/> at which the <paramref name="droppedItems"/> are being dropped.</param>
            <param name="actions">The interaction to take.</param>
            <param name="modifiers">The modifier keys that were pressed at the time of the drop.</param>
            <returns>The actual interaction on the <paramref name="droppedItems"/> that was taken.</returns>
        </member>
        <member name="M:Macro.Desktop.ReorderableGalleryComponent.PerformDropForeignObject(Macro.Desktop.IDragDropObject,Macro.Desktop.IGalleryItem,Macro.Desktop.DragDropOption,Macro.Desktop.ModifierFlags)">
            <summary>
            Performs a drag-drop of a non-<see cref="T:Macro.Desktop.IGalleryItem"/> object from outside this gallery on top of the specified item.
            </summary>
            <param name="droppedData">The data object to drop.</param>
            <param name="targetItem">The target <see cref="T:Macro.Desktop.IGalleryItem"/> at which the <paramref name="droppedData"/> is being dropped.</param>
            <param name="actions">The interaction to take.</param>
            <param name="modifiers">The modifier keys that were pressed at the time of the drop.</param>
            <returns>The actual interaction on the <paramref name="droppedData"/> that was taken.</returns>
        </member>
        <member name="P:Macro.Desktop.ReorderableGalleryComponent.DraggedItems">
            <summary>
            Gets or sets the list of items being dragged.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ReorderableGalleryComponent.AllowsDropAtIndex">
            <summary>
            Gets if the gallery supports any drag and drop interaction in between items.
            </summary>
        </member>
        <member name="T:Macro.Desktop.CloseHelperComponentViewExtensionPoint">
            <summary>
            Extension point for views onto <see cref="T:Macro.Desktop.CloseHelperComponent"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.CloseHelperComponent">
            <summary>
            The <see cref="T:Macro.Desktop.CloseHelperComponent"/> assists the user in completing remaining work 
            that is preventing open workspaces from closing.
            </summary>
            <remarks>
            This component is shown when an <see cref="T:Macro.Desktop.IDesktopWindow"/> is being closed or 
            the application is shutting down.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.CloseHelperComponent.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.CloseHelperComponent.Refresh">
            <summary>
            Refreshes the active <see cref="T:Macro.Desktop.IWorkspace"/>s and determines which ones cannot be
            closed because there is input required from the user.
            </summary>
        </member>
        <member name="M:Macro.Desktop.CloseHelperComponent.Start">
            <summary>
            Called by the host to initialize the application component.
            </summary>
             <remarks>
            Override this method to implement custom initialization logic.  Overrides must be sure to call the base implementation.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.CloseHelperComponent.Stop">
            <summary>
            Called by the host when the application component is being terminated.
            </summary>
            <remarks>
            Override this method to implement custom termination logic.  Overrides must be sure to call the base implementation.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.CloseHelperComponent.Workspaces">
            <summary>
            Gets an <see cref="T:Macro.Desktop.Tables.ITable"/> containing the workspaces that still require user input in order to close.
            </summary>
        </member>
        <member name="P:Macro.Desktop.CloseHelperComponent.SelectedWorkspace">
            <summary>
            Gets or sets the currently selected <see cref="T:Macro.Desktop.IWorkspace"/>.
            </summary>
            <remarks>
            When the selected workspace is set, it is immediately activated.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.Configuration.ConfigurationDialogSettings.ShowApplyButton">
            <summary>
            Specifies whether or not the Apply button should be visible in the configuration dialog.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.ActionModel.IActionModelConfigurationComponent">
            <summary>
            Interface for the <see cref="T:Macro.Desktop.Configuration.ActionModel.ActionModelConfigurationComponent"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.ActionModel.IActionModelConfigurationComponent.ActionModelTreeRoot">
            <summary>
            Gets the current action model configuration <see cref="T:Macro.Desktop.Trees.ITree"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.ActionModel.IActionModelConfigurationComponent.EnforceFlatActionModel">
            <summary>
            Gets a value indicating whether or not the action model configuration tree must be flat.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.ActionModel.IActionModelConfigurationComponent.ToolbarActionModel">
            <summary>
            Gets the toolbar action model for the component's view.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.ActionModel.IActionModelConfigurationComponent.ContextMenuActionModel">
            <summary>
            Gets the context menu action model for the component's view.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.ActionModel.IActionModelConfigurationComponent.SelectedNode">
            <summary>
            Gets or sets the currently selected node in the <see cref="P:Macro.Desktop.Configuration.ActionModel.IActionModelConfigurationComponent.ActionModelTreeRoot"/>.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Configuration.ActionModel.IActionModelConfigurationComponent.SelectedNodeChanged">
            <summary>
            Fired when the value of <see cref="P:Macro.Desktop.Configuration.ActionModel.IActionModelConfigurationComponent.SelectedNode"/> changes.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.ActionModel.IActionModelConfigurationComponent.SelectedNodeProperties">
            <summary>
            Gets the extended properties components of the currently selected node.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.ActionModel.IActionModelConfigurationComponent.ValidationPolicy">
            <summary>
            Gets or sets the current validation policy in effect.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IDesktopAlertContext.UnacknowledgedErrorWarningCount">
            TODO (CR Jun 2012): That's a mouthful :)
        </member>
        <member name="T:Macro.Desktop.Actions.PropertyGetDelegate`1">
            <summary>
            Delegate used to get a property of type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.PropertySetDelegate`1">
            <summary>
            Delegate used to set a property of type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.DynamicObservablePropertyBinding`1">
            <summary>
            Provides a dynamic implementation of <see cref="T:Macro.Desktop.Actions.IObservablePropertyBinding`1"/>.
            </summary>
            <typeparam name="T">The type of the underlying property.</typeparam>
            <remarks>
            This class can be used for runtime binding to an arbitrary property and corresponding change
            notification event of a target object.  Binding is accomplished using reflection, which means
            that compile-time knowledge of the type of the target object is not needed.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.Actions.IObservablePropertyBinding`1">
            <summary>
            Defines a generic mechanism for binding to an arbitrary observable property of an object.
            </summary>
            <remarks>
            An observable property is any property which has a corresponding change notification event.
            </remarks>
            <typeparam name="T">The type of the property.</typeparam>
        </member>
        <member name="E:Macro.Desktop.Actions.IObservablePropertyBinding`1.PropertyChanged">
            <summary>
            The event that provides notification of when the <see cref="P:Macro.Desktop.Actions.IObservablePropertyBinding`1.PropertyValue"/> has changed.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IObservablePropertyBinding`1.PropertyValue">
            <summary>
            Gets or sets the underlying property value.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.DynamicObservablePropertyBinding`1.#ctor(System.Object,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="target">The target object to bind to.</param>
            <param name="propertyName">The name of the property to bind to on the target object.</param>
            <param name="propertyChangedEventName">The name of a change notification event on the target object.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.DynamicObservablePropertyBinding`1.CreatePropertyGetDelegate(System.Object,System.String)">
            <summary>
            Creates a delegate that can get the specified property on the specified target object.
            </summary>
            <param name="target">The target object.</param>
            <param name="propertyName">The name of the property to bind.</param>
            <returns>A delegate that can be used to get the property.</returns>
        </member>
        <member name="M:Macro.Desktop.Actions.DynamicObservablePropertyBinding`1.CreatePropertySetDelegate(System.Object,System.String)">
            <summary>
            Creates a delegate that can set the specified property on the specified target object.
            </summary>
            <param name="target">The target object.</param>
            <param name="propertyName">The name of the property to bind.</param>
            <returns>A delegate that can be used to set the property.</returns>
        </member>
        <member name="M:Macro.Desktop.Actions.DynamicObservablePropertyBinding`1.AddEventHandler(System.EventHandler,System.Object,System.String)">
            <summary>
            Adds the specified handler to the specified event on the target object.
            </summary>
            <param name="handler">An event handler.</param>
            <param name="target">The target object.</param>
            <param name="eventName">The name of the event to add the handler to.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.DynamicObservablePropertyBinding`1.RemoveEventHandler(System.EventHandler,System.Object,System.String)">
            <summary>
            Removes the specified handler from the specified event on the target object.
            </summary>
            <param name="handler">An event handler.</param>
            <param name="target">The target object.</param>
            <param name="eventName">The name of the event to remove the handler from.</param>
        </member>
        <member name="P:Macro.Desktop.Actions.DynamicObservablePropertyBinding`1.PropertyValue">
            <summary>
            Gets or sets the property value.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Actions.DynamicObservablePropertyBinding`1.PropertyChanged">
            <summary>
            Event that is fired when the <see cref="P:Macro.Desktop.Actions.DynamicObservablePropertyBinding`1.PropertyValue"/> has changed.
            </summary>
        </member>
        <member name="T:Macro.Desktop.SR">
            <summary>
              强类型资源类，用于查找本地化字符串等。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ResourceManager">
            <summary>
              返回此类使用的缓存 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.Culture">
            <summary>
              为使用此强类型资源类的所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.AlertFilterAll">
            <summary>
              查找类似 All 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.AlertFilterErrorsAndWarnings">
            <summary>
              查找类似 Errors and Warnings 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.AlertFilterErrorsOnly">
            <summary>
              查找类似 Errors only 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ColumnLevel">
            <summary>
              查找类似 Level 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ColumnMessage">
            <summary>
              查找类似 Message 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ColumnTime">
            <summary>
              查找类似 Time 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.DescriptionDefaultTheme">
            <summary>
              查找类似 Default Theme 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.DescriptionExceptionHandlerSettings">
            <summary>
              查找类似 Configures global exception handling behaviour. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.DescriptionFormatSettings">
            <summary>
              查找类似 Allows configuration of display format of common items such as dates, times, etc. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionActionBuilderEventDoesNotExist">
            <summary>
              查找类似 The event {0} does not exist for class {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionActionBuilderMethodDoesNotExist">
            <summary>
              查找类似 The method {0} does not exist for class {1}, or it does not have the correct signature. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionActionBuilderPropertyDoesNotExist">
            <summary>
              查找类似 The property {0} does not exist for class {1}, or it does not have the correct return type. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionActionBuilderPropertyDoesNotHavePublicGetMethod">
            <summary>
              查找类似 The property {0} on class {1} does not have a public get method. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionActiveWorkspaceCannotBeNull">
            <summary>
              查找类似 Cannot set the active workspace to null. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionAssociateViewAttributeNotSpecified">
            <summary>
              查找类似 An AssociateViewAttribute must be specified for the input Type in order to create the Associated View. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionCannotLoadExceptionDialogSetting">
            <summary>
              查找类似 Cannot load exception dialog settings - defaulting to detailed view 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionCannotSetPaneAfterContainerStarted">
            <summary>
              查找类似 Cannot set pane after container has been started. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionComponentAlreadyStarted">
            <summary>
              查找类似 Component has already been started. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionComponentNeverStarted">
            <summary>
              查找类似 Component was never started, or has already been stopped. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionContainerAlreadyStarted">
            <summary>
              查找类似 Container has already been started 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionContainerNeverStarted">
            <summary>
              查找类似 Container was never started, or has already been stopped. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionDesktopViewNotCreated">
            <summary>
              查找类似 The main desktop view has not been created. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionFailedToSave">
            <summary>
              查找类似 An error occured while attempting to save changes to this item 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionInvalidActionPath">
            <summary>
              查找类似 Invalid action path.  Path must have 2 or more segments. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionObjectAlreadyInCollection">
            <summary>
              查找类似 Collection already contains this object 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionObjectWithNameAlreadyExists">
            <summary>
              查找类似 An object with the name {0} already exists 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionReferencePropertyMustBeOfSameType">
            <summary>
              查找类似 Reference property must be of same type as validating property. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionReferenceValueMustBeOfSameType">
            <summary>
              查找类似 Reference value must be of same type as validating property. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionStackComponentCannotExit">
            <summary>
              查找类似 Component cannot exit because it is not at the top of the component stack. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionStackComponentCannotPop">
            <summary>
              查找类似 Cannot pop - component stack is empty. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionTableColumnMustBeAddedToDetermineWidth">
            <summary>
              查找类似 This column must be added to a table to determine its percentage width. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionTableItemNotFoundInCollection">
            <summary>
              查找类似 Table item not found in collection. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ExceptionUpgradeNotSupported">
            <summary>
              查找类似 Application configuration upgrades are performed by the LocalFileSettingsProvider included in the .NET framework. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.FormatAttributeCannotBeAppliedToPropertyType">
            <summary>
              查找类似 {0} attribute cannot be applied to property of type {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.FormatDesktopWindowTitle">
            <summary>
              查找类似 {0} [{1}] 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.FormatMoreThanXCharactersRequired">
            <summary>
              查找类似 More than {0} characters required 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.FormatMustBeGreaterThan">
            <summary>
              查找类似 Must be greater than {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.FormatMustBeGreaterThanOrEqualTo">
            <summary>
              查找类似 Must be greater than or equal to {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.FormatMustBeLessThan">
            <summary>
              查找类似 Must be less than {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.FormatMustBeLessThanOrEqualTo">
            <summary>
              查找类似 Must be less than or equal to {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.FormatRangeCharactersRequired">
            <summary>
              查找类似 Between {0} and {1} characters required 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.FormatTotalDaysUsed">
            <summary>
              查找类似 Evaluated For {0} Days 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.InvalidCustomDateFormat">
            <summary>
              查找类似 The custom date format must be from the available list. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.LabelAllActions">
            <summary>
              查找类似 All Actions 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.LabelColor">
            <summary>
              查找类似 Colour 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.LabelConfigurationWarningOffline">
            <summary>
              查找类似 (Offline) Values shown may not be accurate, and changes may not be saved. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.LabelDefault">
            <summary>
              查找类似 Default 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.LabelEdit">
            <summary>
              查找类似 Edit 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.LabelEvaluation">
            <summary>
              查找类似 Evaluation 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.LabelEvaluationWithDays">
            <summary>
              查找类似 Evaluation ({0} days) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.LabelImport">
            <summary>
              查找类似 Import 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.LabelLarge">
            <summary>
              查找类似 Large 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.LabelMedium">
            <summary>
              查找类似 Medium 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.LabelMonochrome">
            <summary>
              查找类似 Monochrome 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.LabelNewGroup">
            <summary>
              查找类似 New Group 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.LabelNotForDiagnosticUse">
            <summary>
              查找类似 Not for Diagnostic Use 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.LabelNotForHumanDiagnosis">
            <summary>
              查找类似 Not for Human Diagnosis 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.LabelReset">
            <summary>
              查找类似 Reset 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.LabelResetAll">
            <summary>
              查找类似 Reset All 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.LabelSaveAll">
            <summary>
              查找类似 Save All 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.LabelSeparator">
            <summary>
              查找类似 (Separator) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.LabelSmall">
            <summary>
              查找类似 Small 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuAbout">
            <summary>
              查找类似 About 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuAdmin">
            <summary>
              查找类似 Admin 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuAlertViewer">
            <summary>
              查找类似 Alerts 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuCloseWindow">
            <summary>
              查找类似 Close 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuCloseWorkspace">
            <summary>
              查找类似 Close Workspace 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuConfigureSettings">
            <summary>
              查找类似 Settings Editor 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuContents">
            <summary>
              查找类似 Contents 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuEdit">
            <summary>
              查找类似 &amp;编辑 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuFile">
            <summary>
              查找类似 &amp;文件 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuHelp">
            <summary>
              查找类似 &amp;帮助 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuIndex">
            <summary>
              查找类似 Index 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuInsertGroupAfter">
            <summary>
              查找类似 Insert Group After 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuInsertGroupAsChild">
            <summary>
              查找类似 Add Group 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuInsertGroupBefore">
            <summary>
              查找类似 Insert Group Before 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuInsertSeparatorAfter">
            <summary>
              查找类似 Insert Separator After 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuInsertSeparatorAsChild">
            <summary>
              查找类似 Add Separator 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuInsertSeparatorBefore">
            <summary>
              查找类似 Insert Separator Before 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuOptions">
            <summary>
              查找类似 Preferences 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuRemove">
            <summary>
              查找类似 Remove 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuRename">
            <summary>
              查找类似 Rename 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuTools">
            <summary>
              查找类似 &amp;工具 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuUtilities">
            <summary>
              查找类似 Utilities 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MenuView">
            <summary>
              查找类似 View 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MessageConfirmCancelTask">
            <summary>
              查找类似 The background task is still running.  Are you sure you want to cancel? 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MessageConfirmDiscardChangesBeforeClosing">
            <summary>
              查找类似 Data has been modified and changes will be lost.  Discard changes and close? 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MessageConfirmImportSettingsMetaData">
            <summary>
              查找类似 Import settings meta-data defined in locally installed plugins? 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MessageDisplayLanguageChangedRestartRequired">
            <summary>
              查找类似 The application must restart in order to apply the new display language. Would you like to restart now? 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MessageNoConfigurationPagesExist">
            <summary>
              查找类似 No configuration pages exist. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MessageNodeNotEmpty">
            <summary>
              查找类似 This group contains one or more items. Items may not be deleted, but can be hidden. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MessageReset">
            <summary>
              查找类似 Reset this setting back to its default value? 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MessageResetAll">
            <summary>
              查找类似 Reset all settings back to default values? 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MessageSaveModified">
            <summary>
              查找类似 Settings have been modified.  Save changes? 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MessageSaveSettingFailed">
            <summary>
              查找类似 Failed to save the selected settings values.  Please ensure the values entered are properly formatted for the data type. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MessageSettingsStoreOffline">
            <summary>
              查找类似 The settings store is currently offline.  Please try again later. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MessageUnexpectedErrorQuit">
            <summary>
              查找类似 An error has occurred which prevents the further use of this application. This application will now shut down to prevent damage to the system. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MessageUnrecognizedFormat">
            <summary>
              查找类似 Unrecognized format 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MessageUpdatingPreferences">
            <summary>
              查找类似 Updating your personal preferences ... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MessageUserUpgradeFailures">
            <summary>
              查找类似 One or more errors have occurred while updating your preferences.  Some of your preferences may not have been properly configured. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.MessageValueRequired">
            <summary>
              查找类似 Value required 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleAdd">
            <summary>
              查找类似 Add 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleAlertViewer">
            <summary>
              查找类似 Alerts 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleCancel">
            <summary>
              查找类似 Cancel 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleClose">
            <summary>
              查找类似 Close 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleCloseAssistant">
            <summary>
              查找类似 Close Assistant 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleDateFormat">
            <summary>
              查找类似 Date Format 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleDefaultValue">
            <summary>
              查找类似 Default Value 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleDelete">
            <summary>
              查找类似 Delete 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleDescription">
            <summary>
              查找类似 Description 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleEdit">
            <summary>
              查找类似 Edit 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleEditValue">
            <summary>
              查找类似 Edit Value 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleGroup">
            <summary>
              查找类似 Group 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleMenuOptions">
            <summary>
              查找类似 Preferences 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleNext">
            <summary>
              查找类似 Next Page 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitlePrevious">
            <summary>
              查找类似 Previous Page 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleProperty">
            <summary>
              查找类似 Property 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleRename">
            <summary>
              查找类似 Rename 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleScope">
            <summary>
              查找类似 Scope 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleSettingsEditor">
            <summary>
              查找类似 Settings Editor 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleToolbar">
            <summary>
              查找类似 Toolbar 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleType">
            <summary>
              查找类似 Type 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleUpdatingPreferences">
            <summary>
              查找类似 Updating Preferences ... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleValue">
            <summary>
              查找类似 Value 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TitleVersion">
            <summary>
              查找类似 Version 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ToolbarAddGroup">
            <summary>
              查找类似 Add Group 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ToolbarAddSeparator">
            <summary>
              查找类似 Add Separator 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ToolbarRemove">
            <summary>
              查找类似 Remove 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.ToolbarRename">
            <summary>
              查找类似 Rename 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TooltipActionNotPermitted">
            <summary>
              查找类似 You can configure this item, but you do not have permission to use it. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TooltipFormatActionNotPermitted">
             <summary>
               查找类似 {0}:
            You can configure this item, but you do not have permission to use it. 的本地化字符串。
             </summary>
        </member>
        <member name="P:Macro.Desktop.SR.TooltipImportSettingsMetaData">
            <summary>
              查找类似 Import settings meta-data from local plugins 的本地化字符串。
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.NoComponentsValidationStrategy">
            <summary>
            Implements a validation strategy that does not consider any nodes.
            </summary>
            <remarks>
            This is effectively equivalent to having no validation at all.  The 
            container is always considered valid, regardless of the validity
            of contained nodes.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Validation.NoComponentsValidationStrategy.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.NoComponentsValidationStrategy.HasValidationErrors(Macro.Desktop.IApplicationComponentContainer)">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.NoComponentsValidationStrategy.ShowValidation(Macro.Desktop.IApplicationComponentContainer,System.Boolean)">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.MenuAction">
            <summary>
            Models a menu item action.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.ClickAction">
            <summary>
            Default implementation of <see cref="T:Macro.Desktop.Actions.IClickAction"/> which models a user-interface action that is invoked by
            a click, such as a toolbar button or a menu item.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.IClickAction">
            <summary>
            Extends the <see cref="T:Macro.Desktop.Actions.IAction"/> interface for actions that have single-click
            behaviour, such as menu items and toolbar buttons.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.IClickAction.Click">
            <summary>
            Called by the UI when the user clicks on the action.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Actions.IClickAction.CheckedChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.Actions.IClickAction.Checked"/> property of this action changes.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IClickAction.IsCheckAction">
            <summary>
            Gets a value indicating whether this action is a "check" action, that is, an action that behaves as a toggle.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IClickAction.Checked">
            <summary>
            Gets the checked state that the action should present in the UI, if this is a "check" action.
            </summary>
            <remarks>
            This property has no meaning if <see cref="P:Macro.Desktop.Actions.IClickAction.IsCheckAction"/> returns false.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.Actions.IClickAction.CheckParents">
            <summary>
            Gets a value indicating whether parent items should be checked if this
            <see cref="T:Macro.Desktop.Actions.IClickAction"/> is checked.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IClickAction.KeyStroke">
            <summary>
            Gets or sets the keystroke that the UI should attempt to intercept to invoke the action.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ClickAction.#ctor(System.String,Macro.Desktop.Actions.ActionPath,Macro.Desktop.Actions.ClickActionFlags,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="actionID">The fully qualified action ID.</param>
            <param name="path">The action path.</param>
            <param name="flags">Flags that control the style of the action.</param>
            <param name="resourceResolver">A resource resolver that will be used to resolve text and image resources.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.ClickAction.SetClickHandler(Macro.Desktop.Actions.ClickHandlerDelegate)">
            <summary>
            Sets the delegate that will respond when this action is clicked.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ClickAction.Click">
            <summary>
            Called by the UI when the user clicks on the action.
            </summary>
            <remarks>This method will do nothing when <see cref="M:Macro.Desktop.Actions.ClickAction.CanClick"/> returns false.</remarks>
        </member>
        <member name="M:Macro.Desktop.Actions.ClickAction.CanClick">
            <summary>
            Determines whether or not the internal "click handler" can be called,
            based on the <see cref="P:Macro.Desktop.Actions.IAction.Visible"/>, <see cref="P:Macro.Desktop.Actions.IAction.Enabled"/>
            and <see cref="P:Macro.Desktop.Actions.IAction.Permissible"/> properties.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.ClickAction.KeyStroke">
            <summary>
            Gets the keystroke that the UI should attempt to intercept to invoke the action.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.ClickAction.IsCheckAction">
            <summary>
            Gets a value indicating whether this action is a "check" action, that is, an action that behaves as a toggle.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.ClickAction.Checked">
            <summary>
            Gets the checked state that the action should present in the UI, if this is a "check" action.
            </summary>
            <remarks>
            This property has no meaning if <see cref="P:Macro.Desktop.Actions.IClickAction.IsCheckAction"/> returns false.
            </remarks>
        </member>
        <member name="E:Macro.Desktop.Actions.ClickAction.CheckedChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.Actions.IClickAction.Checked"/> property of this action changes.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.ClickAction.CheckParents">
            <summary>
            Gets a value indicating whether parent items should be checked if this
            <see cref="T:Macro.Desktop.Actions.IClickAction"/> is checked.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.MenuAction.#ctor(System.String,Macro.Desktop.Actions.ActionPath,Macro.Desktop.Actions.ClickActionFlags,Macro.Common.Utilities.IResourceResolver)">
            <summary>.
            Constructor
            </summary>
            <param name="actionID">The fully qualified action ID.</param>
            <param name="path">The action path.</param>
            <param name="flags">Flags that control the style of the action.</param>
            <param name="resourceResolver">A resource resolver that will be used to resolve text and image resources.</param>
        </member>
        <member name="T:Macro.Desktop.SplitPane">
            <summary>
            A <see cref="T:Macro.Desktop.SplitPane"/> hosts a single <see cref="T:Macro.Desktop.IApplicationComponent"/> in one
            side of a <see cref="T:Macro.Desktop.SplitComponentContainer"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SplitPane.#ctor(System.String,Macro.Desktop.IApplicationComponent,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="name">The name of the <see cref="T:Macro.Desktop.SplitPane"/>.</param>
            <param name="component">The <see cref="T:Macro.Desktop.IApplicationComponent"/> to be hosted.</param>
            <param name="fix">Whether or not the pane should be fixed (based on size).  Only one of the two <see cref="T:Macro.Desktop.SplitPane"/>s can be fixed.</param>
        </member>
        <member name="M:Macro.Desktop.SplitPane.#ctor(System.String,Macro.Desktop.IApplicationComponent,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="name">The name of the <see cref="T:Macro.Desktop.SplitPane"/>.</param>
            <param name="component">The <see cref="T:Macro.Desktop.IApplicationComponent"/> to be hosted.</param>
            <param name="initialWeight">The initial weighting factor for determing the <see cref="T:Macro.Desktop.SplitPane"/>'s initial size.</param>
        </member>
        <member name="P:Macro.Desktop.SplitPane.Name">
            <summary>
            Gets the name of the <see cref="T:Macro.Desktop.SplitPane"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.SplitPane.Component">
            <summary>
            Gets the component that is displayed on this pane.
            </summary>
        </member>
        <member name="P:Macro.Desktop.SplitPane.Weight">
            <summary>
            Gets the weight that was assigned to this pane
            </summary>
        </member>
        <member name="P:Macro.Desktop.SplitPane.Fixed">
            <summary>
            Gets whether or not this pane should be 'fixed', based on its size.
            </summary>
        </member>
        <member name="P:Macro.Desktop.SplitPane.ComponentHost">
            <summary>
            Gets the component host for this pane.
            </summary>
            <remarks>
            For internal framework use only.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.ItemChangeType">
            <summary>
            Enumerates the types of item changes.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ItemChangeType.ItemAdded">
            <summary>
            An item was added to the table.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ItemChangeType.ItemInserted">
            <summary>
            An item was inserted to the table.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ItemChangeType.ItemChanged">
            <summary>
            An item in the table was changed.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ItemChangeType.ItemRemoved">
            <summary>
            An item was removed from the table.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ItemChangeType.Reset">
            <summary>
            All items in the table may have changed.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ItemChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Macro.Desktop.IItemCollection.ItemsChanged"/> event.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ItemChangedEventArgs.ChangeType">
            <summary>
            Gets the type of change that occured.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ItemChangedEventArgs.ItemIndex">
            <summary>
            Gets the index of the item that changed.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ItemChangedEventArgs.Item">
            <summary>
            Gets the item that has changed.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IItemCollection">
            <summary>
            Defines the interface to the collection of items.
            </summary>
            <remarks>
            Do not implement this interface.  It is 
            not considered part of the public API and is subject to change.
            </remarks>
        </member>
        <member name="E:Macro.Desktop.IItemCollection.TransactionStarted">
            <summary>
            Occurs when a transaction has started.
            </summary>
        </member>
        <member name="E:Macro.Desktop.IItemCollection.ItemsChanged">
            <summary>
            Occurs when an item in the collection has changed.
            </summary>
        </member>
        <member name="E:Macro.Desktop.IItemCollection.TransactionCompleted">
            <summary>
            Occurs when a transaction has completed.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IItemCollection`1">
            <summary>
            Defines the interface to the collection of items.
            </summary>
            <remarks>
            Do not implement this interface.  It is likely to be removed
            in subsequent versions of the framework and is 
            not considered part of the public API.
            </remarks>
            <typeparam name="TItem">The item type.</typeparam>
        </member>
        <member name="T:Macro.Desktop.DragDropKind">
            <summary>
            Enumeration of types of drag-drop operations.
            </summary>
        </member>
        <member name="F:Macro.Desktop.DragDropKind.None">
            <summary>
            No-op.
            </summary>
        </member>
        <member name="F:Macro.Desktop.DragDropKind.Move">
            <summary>
            The drag-drop operation is a move operation.
            </summary>
        </member>
        <member name="F:Macro.Desktop.DragDropKind.Copy">
            <summary>
            The drag-drop operation is a copy operation.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IExceptionHandlingContext">
            <summary>
             Provides contextual information for an <see cref="T:Macro.Desktop.IExceptionPolicy"/> to handle an <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IExceptionHandlingContext.Log(Macro.Common.LogLevel,System.Exception)">
            <summary>
             Logs the specified exception.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IExceptionHandlingContext.Abort">
            <summary>
             Aborts the exception-causing operation.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IExceptionHandlingContext.ShowMessageBox(System.String)">
            <summary>
             Shows the specified detail message in a message box in the context's <see cref="T:Macro.Desktop.IDesktopWindow"/>.
            </summary>
             <remarks>
             Automatically prepends the contextual message supplied by the application component to the detail message.
             </remarks>
            <param name="detailMessage">The message to be shown.</param>
        </member>
        <member name="M:Macro.Desktop.IExceptionHandlingContext.ShowMessageBox(System.String,System.Boolean)">
            <summary>
             Shows the specified detail message in a message box in the context's <see cref="T:Macro.Desktop.IDesktopWindow"/>.
            </summary>
             <remarks>
             Optionally prepends the contextual message supplied by the application component to the detail message.
             </remarks>
            <param name="detailMessage">The message to be shown.</param>
            <param name="prependContextualMessage">Indicates whether or not to prepend the <see cref="P:Macro.Desktop.IExceptionHandlingContext.ContextualMessage"/>
             before <paramref name="detailMessage"/>.</param>
        </member>
        <member name="P:Macro.Desktop.IExceptionHandlingContext.DesktopWindow">
            <summary>
             The <see cref="T:Macro.Desktop.IDesktopWindow"/> of the component in which the exception has occurred.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IExceptionHandlingContext.ContextualMessage">
            <summary>
             A contextual user-friendly message provided by the component which should be common for all exceptions.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ExceptionHandlerSettings.ShowStackTraceInDialog">
            <summary>
            Indicates whether exception stack trace is shown in a dialog box.  For security reasons, this should not be enabled in production.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.VisibleStateObserverAttribute">
            <summary>
            Declares an observer binding for the visible state of an action.
            </summary>
            <remarks>
            This attribute causes the visible state of the action specified by the action ID to be
            bound to the state of the specified property on the class to which this attribute applies.
            The property name must refer to a public boolean property on the target class that has get access.
            The change event name must refer to a public event on the class that will fire whenever the state of the property
            changes.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Actions.VisibleStateObserverAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Attribute constructor.
            </summary>
            <param name="actionID">The logical action identifier to which this attribute applies.</param>
            <param name="propertyName">The name of the property to bind to.</param>
            <param name="changeEventName">The name of the property change notification event to bind to.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.VisibleStateObserverAttribute.Apply(Macro.Desktop.Actions.IActionBuildingContext)">
            <summary>
            Binds the <see cref="P:Macro.Desktop.Actions.IAction.Visible"/> property and <see cref="E:Macro.Desktop.Actions.IAction.VisibleChanged"/> event 
            to the corresponding items on the target object, via the specified <see cref="T:Macro.Desktop.Actions.IActionBuildingContext"/>.
            </summary>
        </member>
        <member name="F:Macro.Desktop.PhoneHome._periodicCallInterval">
            <summary>
            Interval between periodic calls while application is active.
            </summary>
        </member>
        <member name="F:Macro.Desktop.PhoneHome._startupCallDelay">
            <summary>
            Delay before initial call when application is starting up.
            </summary>
        </member>
        <member name="F:Macro.Desktop.PhoneHome._shutdownCallTimeout">
            <summary>
            Timeout for final call when application is shutting down.
            </summary>
        </member>
        <member name="M:Macro.Desktop.PhoneHome.Startup">
            <summary>
            Start up the phone home service.
            </summary>
        </member>
        <member name="M:Macro.Desktop.PhoneHome.ShutDown">
            <summary>
            Shut down the phone home service.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ModifierFlagsConverter">
            <summary>
            Provides a <see cref="T:System.ComponentModel.TypeConverter"/> to convert <see cref="T:Macro.Desktop.ModifierFlags"/> values to and from localized and invariant <see cref="T:System.String"/> representations.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ModifierFlagsConverter.ModifierSeparator">
            <summary>
            The character used to separate individual modifiers.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ModifierFlagsConverter._stringParser">
            <remarks>
            <![CDATA[The pattern is effectively @"^\s*(.+?)(?:\s*\+\s*(.+?)(?:\s*\+\s*(.+?))?)?\s*$" for a ModifierSeparator of '+']]>
            </remarks>
        </member>
        <member name="M:Macro.Desktop.ModifierFlagsConverter.#cctor">
            <summary>
            Type initializer for <see cref="T:Macro.Desktop.ModifierFlagsConverter"/>.
            </summary>
            <remarks>
            The cache for the modifier names in the invariant culture is generated during the type initialization process.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.ModifierFlagsConverter.#ctor">
            <summary>
            Constructs a new instance of an <see cref="T:Macro.Desktop.ModifierFlagsConverter"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ModifierFlagsConverter.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Constructs a new instance of an <see cref="T:Macro.Desktop.ModifierFlagsConverter"/> for a specific culture.
            </summary>
            <param name="culture">The culture for which to cache localized modifier names. If this value is NULL, the <see cref="T:System.Globalization.CultureInfo"/> is obtained using the current thread's <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/> property.</param>
            <remarks>
            The <paramref name="culture"/> parameter is used to cache a set of localized modifier names, allowing for improved performance when
            converting in the context of the specified culture or the invariant culture.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.ModifierFlagsConverter.InitializeMaps(System.Globalization.CultureInfo,System.Collections.Generic.IDictionary{Macro.Desktop.ModifierFlags,System.String},System.Collections.Generic.IDictionary{System.String,Macro.Desktop.ModifierFlags})">
            <summary>
            Initializes the localization maps for the specified culture.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ModifierFlagsConverter.Format(Macro.Desktop.ModifierFlags)">
            <summary>
            Formats a <see cref="T:Macro.Desktop.ModifierFlags"/> value as a string using the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture">current thread's UI CultureInfo</see>.
            </summary>
            <param name="value">The <see cref="T:Macro.Desktop.ModifierFlags"/> value to be formatted.</param>
            <returns>The string representation of the given <paramref name="value"/>.</returns>
        </member>
        <member name="M:Macro.Desktop.ModifierFlagsConverter.Format(Macro.Desktop.ModifierFlags,System.Globalization.CultureInfo)">
            <summary>
            Formats a <see cref="T:Macro.Desktop.ModifierFlags"/> value as a string using the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="value">The <see cref="T:Macro.Desktop.ModifierFlags"/> value to be formatted.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> for which the value should be formatted.</param>
            <returns>The string representation of the given <paramref name="value"/>.</returns>
        </member>
        <member name="M:Macro.Desktop.ModifierFlagsConverter.FormatInvariant(Macro.Desktop.ModifierFlags)">
            <summary>
            Formats a <see cref="T:Macro.Desktop.ModifierFlags"/> value as a string using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="value">The <see cref="T:Macro.Desktop.ModifierFlags"/> value to be formatted.</param>
            <returns>The string representation of the given <paramref name="value"/>.</returns>
        </member>
        <member name="M:Macro.Desktop.ModifierFlagsConverter.Parse(System.String)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.ModifierFlags"/> value using the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture">current thread's UI CultureInfo</see>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <returns>The <see cref="T:Macro.Desktop.ModifierFlags"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.FormatException">Thrown if <paramref name="s"/> is not a valid <see cref="T:Macro.Desktop.ModifierFlags"/> string representation.</exception>
        </member>
        <member name="M:Macro.Desktop.ModifierFlagsConverter.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.ModifierFlags"/> value using the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> for which the string should be parsed.</param>
            <returns>The <see cref="T:Macro.Desktop.ModifierFlags"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.FormatException">Thrown if <paramref name="s"/> is not a valid <see cref="T:Macro.Desktop.ModifierFlags"/> string representation.</exception>
        </member>
        <member name="M:Macro.Desktop.ModifierFlagsConverter.ParseInvariant(System.String)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.ModifierFlags"/> value using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <returns>The <see cref="T:Macro.Desktop.ModifierFlags"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.FormatException">Thrown if <paramref name="s"/> is not a valid <see cref="T:Macro.Desktop.ModifierFlags"/> string representation.</exception>
        </member>
        <member name="M:Macro.Desktop.ModifierFlagsConverter.TryParse(System.String,Macro.Desktop.ModifierFlags@)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.ModifierFlags"/> value using the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture">current thread's UI CultureInfo</see>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <param name="result">The <see cref="T:Macro.Desktop.ModifierFlags"/> value parsed from <paramref name="s"/> if the string was successfully parsed; <see cref="F:Macro.Desktop.ModifierFlags.None"/> otherwise.</param>
            <returns>True if the string was successfully parsed; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.ModifierFlagsConverter.TryParse(System.String,System.Globalization.CultureInfo,Macro.Desktop.ModifierFlags@)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.ModifierFlags"/> value using the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> for which the string should be parsed.</param>
            <param name="result">The <see cref="T:Macro.Desktop.ModifierFlags"/> value parsed from <paramref name="s"/> if the string was successfully parsed; <see cref="F:Macro.Desktop.ModifierFlags.None"/> otherwise.</param>
            <returns>True if the string was successfully parsed; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.ModifierFlagsConverter.TryParseInvariant(System.String,Macro.Desktop.ModifierFlags@)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.ModifierFlags"/> value using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <param name="result">The <see cref="T:Macro.Desktop.ModifierFlags"/> value parsed from <paramref name="s"/> if the string was successfully parsed; <see cref="F:Macro.Desktop.ModifierFlags.None"/> otherwise.</param>
            <returns>True if the string was successfully parsed; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.ModifierFlagsConverter.GetNamesMap(System.Globalization.CultureInfo)">
            <summary>
            Gets the correct localization map for the specified culture.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ModifierFlagsConverter.GetValuesMap(System.Globalization.CultureInfo)">
            <summary>
            Gets the correct localization map for the specified culture.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ModifierFlagsConverter.Default">
            <summary>
            Gets the default instance of <see cref="T:Macro.Desktop.ModifierFlagsConverter"/>.
            </summary>
            <remarks>
            This is equivalent to calling <see cref="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)"/> for the <see cref="T:Macro.Desktop.ModifierFlags"/> <see cref="T:System.Type"/>.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.Configuration.Standard.CustomDateFormatSettings.AvailableCustomFormats">
            <summary>
            A list of custom date formats the user can select from to set their own preferred date format.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.SettingEditorComponentViewExtensionPoint">
            <summary>
            Extension point for views onto <see cref="T:Macro.Desktop.Configuration.SettingEditorComponent"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.SettingEditorComponent">
            <summary>
            Used by the <see cref="T:Macro.Desktop.Configuration.SettingsManagementComponent"/> to show
            the default and current values of a setting, allowing the current value to be edited.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.SettingEditorComponent.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.SettingEditorComponent.Accept">
            <summary>
            The user has accepted the changes (if any).
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.SettingEditorComponent.Cancel">
            <summary>
            The user has cancelled the changes (if any).
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.SettingEditorComponent.DefaultValue">
            <summary>
            Gets the default setting value.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.SettingEditorComponent.CurrentValue">
            <summary>
            Gets or sets the current setting value.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.ActionSet">
            <summary>
            Default implementation of <see cref="T:Macro.Desktop.Actions.IActionSet"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.IActionSet">
            <summary>
            Represents an unordered set of actions.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.IActionSet.Select(System.Predicate{Macro.Desktop.Actions.IAction})">
            <summary>
            Returns a subset of this set containing only the elements for which the predicate is true.
            </summary>
            <param name="predicate">The predicate to test.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.IActionSet.Union(Macro.Desktop.Actions.IActionSet)">
            <summary>
            Returns a set that corresponds to the union of this set with another set.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IActionSet.Count">
            <summary>
            Gets the number of actions in the set.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionSet.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionSet.#ctor(System.Collections.Generic.IEnumerable{Macro.Desktop.Actions.IAction})">
            <summary>
            Constructs an action set containing the specified actions.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionSet.Select(System.Predicate{Macro.Desktop.Actions.IAction})">
            <summary>
            Returns a subset of this set containing only the elements for which the predicate is true.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionSet.Union(Macro.Desktop.Actions.IActionSet)">
            <summary>
            Returns a set that corresponds to the union of this set with another set.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionSet.GetEnumerator">
            <summary>
            Gets an enumerator for the <see cref="T:Macro.Desktop.Actions.IAction"/>s in the set.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the <see cref="T:Macro.Desktop.Actions.IAction"/>s in the set.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.ActionSet.Count">
            <summary>
            Gets the number of actions in the set.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.ActionPath">
            <summary>
            A subclass of <see cref="T:Macro.Desktop.Path"/> that is used by <see cref="T:Macro.Desktop.Actions.IAction"/> to represent an action path.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Path">
            <summary>
            Represents a path.
            </summary>
            <remarks>
            Instances of this class are immutable.
            </remarks>
        </member>
        <member name="F:Macro.Desktop.Path.Empty">
            <summary>
            Gets the empty <see cref="T:Macro.Desktop.Path"/> object.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Path.#ctor(System.String,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Creates a new <see cref="T:Macro.Desktop.Path"/> from the specified path string, resolving
            resource keys in the path string using the specified <see cref="T:Macro.Common.Utilities.ResourceResolver"/>.
            </summary>
            <remarks>
            <para>
            The path string is a string of the form A[/B[/C...]] where the forward slash delineates
            segments.  To include a slash character as part of a segment, escape it by preceding it
            with a single quote, e.g. '/.
            </para>
            <para>
            Each segment may be either a literal or a resource key.  Localization
            will be attempted on each path segment by treating the segment as a resource key,
            and path segments that fail as resource keys will be treated as literals.
            </para>
            </remarks>
            <param name="pathString">The path string to parse.</param>
            <param name="resolver">The <see cref="T:Macro.Common.Utilities.IResourceResolver"/> to use for localization.</param>
        </member>
        <member name="M:Macro.Desktop.Path.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Macro.Desktop.Path"/> from the specified path string, with no resource resolver.
            </summary>
            <remarks>
            <para>
            The path string is a string of the form A[/B[/C...]] where the forward slash delineates
            segments.  To include a slash character as part of a segment, escape it by preceding it
            with a single quote, e.g. '/.
            </para>
            <para>
            The path string must only contain literals, because there is no resource resolver to perform
            localization.
            </para>
            </remarks>
            <param name="pathString"></param>
        </member>
        <member name="M:Macro.Desktop.Path.#ctor(Macro.Desktop.PathSegment)">
            <summary>
            Creates a new single segment <see cref="T:Macro.Desktop.Path"/> from the specified segment.
            </summary>
            <param name="segment"></param>
        </member>
        <member name="M:Macro.Desktop.Path.#ctor(System.Collections.Generic.IEnumerable{Macro.Desktop.PathSegment})">
            <summary>
            Internal constructor.
            </summary>
            <param name="segments"></param>
        </member>
        <member name="M:Macro.Desktop.Path.SubPath(System.Int32,System.Int32)">
            <summary>
            Gets a new <see cref="T:Macro.Desktop.Path"/> object representing the specified sub-path.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Path.Append(Macro.Desktop.Path)">
            <summary>
            Returns a new <see cref="T:Macro.Desktop.Path"/> object obtained by appending <paramref name="other"/> path
            to this path.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Path.Append(Macro.Desktop.PathSegment)">
            <summary>
             Returns a new <see cref="T:Macro.Desktop.Path"/> object obtained by appending <paramref name="segment"/> to this path.
            </summary>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Path.ToString">
            <summary>
            Converts this path back to the original string on which it was based.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Path.GetCommonPath(Macro.Desktop.Path)">
            <summary>
            Returns a new <see cref="T:Macro.Desktop.Path"/> object representing the longest common path
            between this object and <paramref name="other"/>.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Path.StartsWith(Macro.Desktop.Path)">
            <summary>
            Returns true if this path starts with <paramref name="other"/>.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Path.Equals(Macro.Desktop.Path)">
            <summary>
            Gets whether or not this instance is equal to <paramref name="other"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Path.Equals(System.Object)">
            <summary>
            Gets whether or not this instance is equal to <paramref name="obj"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Path.GetHashCode">
            <summary>
            Gets a hash code.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Path.op_Equality(Macro.Desktop.Path,Macro.Desktop.Path)">
            <summary>
            Determines whether <paramref name="left"/> is equivalent to <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Path.op_Inequality(Macro.Desktop.Path,Macro.Desktop.Path)">
            <summary>
            Determines whether <paramref name="left"/> is not equivalent to <paramref name="right"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Path.Segments">
            <summary>
            Gets the individual segments contained in this path.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Path.LastSegment">
            <summary>
            The final segment in this path, or null if this path is empty.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Path.LocalizedPath">
            <summary>
            Gets the full path string, localized.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionPath.#ctor(System.String,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Constructs an action path from the specified path string, using the specified resource resolver.
            </summary>
            <param name="pathString">A string respresenting the path.</param>
            <param name="resolver">A resource resolver used to localize each path segment. If
            the resource resolver is null, the path segments will be treated as localized text.</param>
        </member>
        <member name="P:Macro.Desktop.Actions.ActionPath.Site">
            <summary>
            Gets the action site (the first segment of the action path).
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.ValidationRule">
            <summary>
            Default implementation of <see cref="T:Macro.Desktop.Validation.IValidationRule"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.IValidationRule">
            <summary>
            Defines the interface to a validation rule that is applied to a <see cref="T:Macro.Desktop.IApplicationComponent"/>.
            </summary>
            <remarks>
            The <see cref="P:Macro.Desktop.Validation.IValidationRule.PropertyName"/> property specifies a property of the application component
            that the rule applies to.  Any validation error message will be displayed next to the GUI object
            that is bound to this property.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Validation.IValidationRule.GetResult(Macro.Desktop.IApplicationComponent)">
            <summary>
            Obtains the current result of evaluating this rule based on the current state of the application component.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Validation.IValidationRule.PropertyName">
            <summary>
            Gets the name of the property on the application component that this rule applies to.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationRule.#ctor(System.String,Macro.Desktop.Validation.ValidationRule.ValidationDelegate)">
            <summary>
            Constructor.
            </summary>
            <param name="propertyName">The property to which this rule applies.</param>
            <param name="callback">A method that performs the validation.</param>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationRule.#ctor(System.String,Macro.Common.Specifications.ISpecification)">
            <summary>
            Constructor that accepts an instance of a <see cref="T:Macro.Common.Specifications.ISpecification"/>.
            </summary>
            <remarks>
            The specification defines the validation rule.
            </remarks>
            <param name="propertyName">The property to which the rule applies.</param>
            <param name="spec">The specification to use to evaluate the rule.</param>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationRule.GetResult(Macro.Desktop.IApplicationComponent)">
            <summary>
            Obtains the current result of evaluating this rule based on the current state of the application component.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Validation.ValidationRule.PropertyName">
            <summary>
            Gets the name of the property on the application component that this rule applies to.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.ValidationRule.ValidationDelegate">
            <summary>
            Delegate used to validate an <see cref="T:Macro.Desktop.IApplicationComponent"/> and return the 
            results as a <see cref="T:Macro.Common.Specifications.TestResult"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.ValidationRule.SpecificationEvaluator">
            <summary>
            Helper class for evaluating a specification as a validation rule.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Trees.ITreeItemCollection">
            <summary>
            Defines the interface to the collection of items maintained by a tree.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Trees.ITreeItemCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Trees.ITreeItemCollection.Item(System.Int32)">
            <summary>
            Gets the item at the specified <paramref name="index"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.IActionBuildingContext">
            <summary>
            Used by the action attribute mechanism to maintain context 
            between attributes that co-operate to build the same action.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IActionBuildingContext.Action">
            <summary>
            Gets or sets the action that is being built.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IActionBuildingContext.ResourceResolver">
            <summary>
            Gets the resource resolver that is supplied to the action.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IActionBuildingContext.ActionTarget">
            <summary>
            Gets the target object on which the action operates.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IActionBuildingContext.ActionID">
            <summary>
            Gets the logical action ID for the action.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IShelfView">
            <summary>
            Defines the interface to a view for a <see cref="T:Macro.Desktop.Shelf"/> object.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IDesktopObjectView">
            <summary>
            Defines a base interface for views that serve desktop objects.
            </summary>
            <remarks>
            The view provides the on-screen representation of the object.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.IView">
            <summary>
            A base interface for all classes that represent UI views.
            </summary>
            <remarks>
            <para>
            A view is a class that provides a UI representation for another object (the model).
            </para>
            <para>
            The purpose of a view class is to separate the presentation from the application logic,
            allowing the application to work with different GUI toolkits.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.Desktop.IView.GuiToolkitID">
            <summary>
            Gets the toolkitID of the GUI tookit in which the view is implemented.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IView.GuiElement">
            <summary>
            Gets the underlying GUI component for this view.
            </summary>
            <remarks>
            The type of the returned object is specific to a given GUI toolkit.  For example,
            a view implemented in Windows Forms would return a Windows Forms Control object.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.IDesktopObjectView.SetTitle(System.String)">
            <summary>
            Sets the title that is displayed to the user.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IDesktopObjectView.Open">
            <summary>
            Opens the view (makes it first visible on the screen).
            </summary>
        </member>
        <member name="M:Macro.Desktop.IDesktopObjectView.Show">
            <summary>
            Shows the view.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IDesktopObjectView.Hide">
            <summary>
            Hides the view.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IDesktopObjectView.Activate">
            <summary>
            Activates the view.
            </summary>
        </member>
        <member name="E:Macro.Desktop.IDesktopObjectView.VisibleChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.IDesktopObjectView.Visible"/> property changes.
            </summary>
        </member>
        <member name="E:Macro.Desktop.IDesktopObjectView.ActiveChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.IDesktopObjectView.Active"/> property changes.
            </summary>
        </member>
        <member name="E:Macro.Desktop.IDesktopObjectView.CloseRequested">
            <summary>
            Occurs when the user has requested that the object be closed.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IDesktopObjectView.Visible">
            <summary>
            Gets a value indicating whether the view is visible on the screen.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IDesktopObjectView.Active">
            <summary>
            Gets a value indicating whether the view is active.
            </summary>
        </member>
        <member name="T:Macro.Desktop.DesktopToolExtensionPoint">
            <summary>
            Defines an extension point for desktop tools, which are instantiated once per desktop window.
            </summary>
            <remarks>
            Desktop tools are owned by a desktop window. A desktop tool is instantiated once per desktop window.
            Extensions should expect to recieve a tool context of type <see cref="T:Macro.Desktop.IDesktopToolContext"/>.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.IDesktopToolContext">
            <summary>
            Tool context interface provided to tools that extend <see cref="T:Macro.Desktop.DesktopToolExtensionPoint"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IDesktopToolContext.DesktopWindow">
            <summary>
            Gets the desktop window that the tool is associated with.
            </summary>
        </member>
        <member name="T:Macro.Desktop.DesktopWindow">
            <summary>
            Represents a desktop window (an application main window).
            </summary>
        </member>
        <member name="T:Macro.Desktop.IDesktopWindow">
            <summary>
            Defines the public interface to a <see cref="T:Macro.Desktop.DesktopWindow"/>.
            </summary>
            <remarks>
            This interface exists mainly for backward compatibility.  New application
            code should use the <see cref="T:Macro.Desktop.DesktopWindow"/> class.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.IDesktopWindow.ShowMessageBox(System.String,Macro.Common.MessageBoxActions)">
            <summary>
            Shows a message box in front of this window.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="buttons">The buttons to display in the message box.</param>
            <returns>The result of the user dismissing the message box.</returns>
        </member>
        <member name="M:Macro.Desktop.IDesktopWindow.ShowMessageBox(System.String,System.String,Macro.Common.MessageBoxActions)">
            <summary>
            Shows a message box in front of this window.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="title">The title of the message box.</param>
            <param name="buttons">The buttons to display in the message box.</param>
            <returns>The result of the user dismissing the message box.</returns>
        </member>
        <member name="M:Macro.Desktop.IDesktopWindow.ShowAlert(Macro.Desktop.AlertLevel,System.String)">
            <summary>
            Shows a desktop alert.
            </summary>
            <param name="level">The alert level.</param>
            <param name="message">The message to display.</param>
        </member>
        <member name="M:Macro.Desktop.IDesktopWindow.ShowAlert(Macro.Desktop.AlertLevel,System.String,System.String,System.Action{Macro.Desktop.DesktopWindow},System.Boolean)">
            <summary>
            Shows a desktop alert.
            </summary>
            <param name="level">The alert level.</param>
            <param name="message">The message to display.</param>
            <param name="linkText">The link text to display.</param>
            <param name="linkAction">The link action to display.</param>
            <param name="dismissOnLinkClicked"> </param>
        </member>
        <member name="M:Macro.Desktop.IDesktopWindow.ShowAlert(Macro.Desktop.AlertNotificationArgs)">
            <summary>
            Shows a desktop alert.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Macro.Desktop.IDesktopWindow.ShowDialogBox(Macro.Desktop.IApplicationComponent,System.String)">
            <summary>
            Shows a dialog box in front of this window.
            </summary>
            <param name="component">The <see cref="T:Macro.Desktop.IApplicationComponent"/> to be hosted in the dialog.</param>
            <param name="title">The title of the dialog box.</param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.IDesktopWindow.ShowDialogBox(Macro.Desktop.DialogBoxCreationArgs)">
            <summary>
            Shows a dialog box in front of this window.
            </summary>
            <param name="args">Arguments used to create the dialog box.</param>
            <returns>The result of the user dismissing the dialog box.</returns>
        </member>
        <member name="M:Macro.Desktop.IDesktopWindow.ShowSaveFileDialogBox(Macro.Desktop.FileDialogCreationArgs)">
            <summary>
            Shows a 'Save File' common dialog.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.IDesktopWindow.ShowOpenFileDialogBox(Macro.Desktop.FileDialogCreationArgs)">
            <summary>
            Shows an 'Open File' common dialog.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.IDesktopWindow.ShowSelectFolderDialogBox(Macro.Desktop.SelectFolderDialogCreationArgs)">
            <summary>
            Shows a 'Select Folder' common dialog.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:Macro.Desktop.IDesktopWindow.Workspaces">
            <summary>
            Gets the collection of workspaces associated with this window.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IDesktopWindow.ActiveWorkspace">
            <summary>
            Gets the currently active workspace, or null if there are no workspaces.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IDesktopWindow.Shelves">
            <summary>
            Gets the collection of shelves associated with this window.
            </summary>
        </member>
        <member name="F:Macro.Desktop.DesktopWindow.GlobalMenus">
            <summary>
            Defines the global menu action site.
            </summary>
        </member>
        <member name="F:Macro.Desktop.DesktopWindow.GlobalToolbars">
            <summary>
            Defines the global toolbar action site.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.#ctor(Macro.Desktop.DesktopWindowCreationArgs,Macro.Desktop.Application)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.ShowMessageBox(System.String,Macro.Common.MessageBoxActions)">
            <summary>
            Shows a message box in front of this window.
            </summary>
            <param name="message">The message to show in the message box.</param>
            <param name="buttons">The buttons to display in the message box.</param>
            <returns>The button the user selected to dismiss the message box.</returns>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.ShowMessageBox(System.String,System.String,Macro.Common.MessageBoxActions)">
            <summary>
            Shows a message box in front of this window.
            </summary>
            <param name="message">The message to show in the message box.</param>
            <param name="title">The title of the message box.</param>
            <param name="buttons">The buttons to display in the message box.</param>
            <returns>The button the user selected to dismiss the message box.</returns>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.ShowAlert(Macro.Desktop.AlertLevel,System.String)">
            <summary>
            Shows a desktop alert.
            </summary>
            <param name="level">The alert level.</param>
            <param name="message">The message to display.</param>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.ShowAlert(Macro.Desktop.AlertLevel,System.String,System.String,System.Action{Macro.Desktop.DesktopWindow},System.Boolean)">
            <summary>
            Shows a desktop alert.
            </summary>
            <param name="level">The alert level.</param>
            <param name="message">The message to display.</param>
            <param name="linkText">The link text to display.</param>
            <param name="linkAction">The link action to display.</param>
            <param name="dismissOnLinkClicked"> </param>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.ShowAlert(Macro.Desktop.AlertNotificationArgs)">
            <summary>
            Shows a desktop alert.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.ShowDialogBox(Macro.Desktop.DialogBoxCreationArgs)">
            <summary>
            Shows a dialog box in front of this window.
            </summary>
            <param name="args">Creation helper object.</param>
            <returns>The button the user selected to dismiss the dialog.</returns>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.ShowSaveFileDialogBox(Macro.Desktop.FileDialogCreationArgs)">
            <summary>
            Shows a 'Save File' common dialog.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.ShowOpenFileDialogBox(Macro.Desktop.FileDialogCreationArgs)">
            <summary>
            Shows an 'Open File' common dialog.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.ShowSelectFolderDialogBox(Macro.Desktop.SelectFolderDialogCreationArgs)">
            <summary>
            Shows a 'Select Folder' common dialog.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.ShowDialogBox(Macro.Desktop.IApplicationComponent,System.String)">
            <summary>
            Shows a dialog box in front of this window.
            </summary>
            <param name="component">The application component to be hosted in the dialog.</param>
            <param name="title">The dialog's title.</param>
            <returns>The button the user selected to dismiss the dialog.</returns>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.OnOpened(System.EventArgs)">
            <summary>
            Creates the desktop tools (via <see cref="T:Macro.Desktop.DesktopToolExtensionPoint"/>) and initializes
            the view.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.CanClose">
            <summary>
            Checks if all workspaces can close without any user interaction.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.PrepareClose(Macro.Desktop.CloseReason)">
            <summary>
            Attempts to close all workspaces and shelves.
            </summary>
            <param name="reason">The reason for closing all workspaces and shelves.</param>
            <returns>Whether or not all affected objects were closed successfully.</returns>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.Dispose(System.Boolean)">
            <summary>
            Disposes of this object, its toos, dialogs, shelves and workspaces.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.MakeTitle(System.String,Macro.Desktop.Workspace)">
            <summary>
            Creates the title that is displayed in the title bar.
            </summary>
            <remarks>
            Override this method to customize the title. 
            </remarks>
            <param name="baseTitle">The base title for the window.</param>
            <param name="activeWorkspace">The active workspace, from which additional text will be added to the title.</param>
            <returns>The title for the window.</returns>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.CreateView">
            <summary>
            Creates a view for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.OnCurrentUICultureChanged">
            <summary>
            Called when the current application UI culture has changed.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.UpdateTitleChangedEventSubscription(Macro.Desktop.Workspace)">
            <summary>
            Subscribes to or unsubscribes from TitleChanged event for the specified <see cref="T:Macro.Desktop.Workspace"/> depending on whether it is active or not
            </summary>
            <param name="workspace"></param>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.UpdateTitle(System.Object,System.EventArgs)">
            <summary>
            Updates the view's title
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.CreateWorkspaceView(Macro.Desktop.Workspace)">
            <summary>
            Creates a workspace view for the specified workspace.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.CreateShelfView(Macro.Desktop.Shelf)">
            <summary>
            Creates a shelf view for the specified shelf.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.CreateDialogView(Macro.Desktop.DialogBox)">
            <summary>
            Creates a dialog box view for the specified dialog box.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.UpdateView">
            <summary>
            Updates the view's title, menu and toolbars.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopWindow.BuildActionModel(System.String)">
            <summary>
            Builds the action model for the specified site.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DesktopWindow.Workspaces">
            <summary>
            Gets the collection of workspaces associated with this window.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DesktopWindow.ActiveWorkspace">
            <summary>
            Gets the currently active workspace, or null if there are no workspaces.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DesktopWindow.Shelves">
            <summary>
            Gets the collection of shelves associated with this window.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DesktopWindow.DesktopWindowView">
            <summary>
            Gets the view for this object as an <see cref="T:Macro.Desktop.IDesktopWindowView"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DesktopWindow.DesktopTools">
            <summary>
            Gets the tool set associated with this desktop window.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DesktopWindow.MenuModel">
            <summary>
            Gets the current menu model.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DesktopWindow.ToolbarModel">
            <summary>
            Gets the current toolbar model.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ProgressBarStyle">
            <summary>
            Copied from System.Windows.Forms.ProgressBarStyle so we don't need dependency from System.Windows.Forms.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ProgressBarStyle.Blocks">
            <summary>
            The progress bar appears as block segments.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ProgressBarStyle.Continuous">
            <summary>
            The progress bar is continuous, not blocky.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ProgressBarStyle.Marquee">
            <summary>
            Marquee mode, doesn't actually show progress, just activity.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ProgressDialog">
            <summary>
            Contains static methods used to show a progress dialog box.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ProgressDialog.Show(Macro.Common.Utilities.BackgroundTask,Macro.Desktop.IDesktopWindow,System.Boolean,Macro.Desktop.ProgressBarStyle,System.String)">
            <summary>
            Show the progress dialog to to the user.
            </summary>
            <param name="task">The <see cref="T:Macro.Common.Utilities.BackgroundTask"/> to execute.</param>
            <param name="desktopWindow">Desktop window that parents the progress dialog.</param>
            <param name="autoClose">Close the progress dialog after task completion.</param>
            <param name="progressBarStyle">The style of the progress bar.</param>
        </member>
        <member name="M:Macro.Desktop.ProgressDialog.Show``1(Macro.Desktop.IDesktopWindow,System.Collections.Generic.IList{``0},System.Func{``0,System.Int32,System.String},System.Boolean)">
            <summary>
            Shows a progress dialog that processes the specified list of items on a background task.
            </summary>
            <remarks>
            This is essentially a convenience method for processing a list of items.  It creates a background task internally.
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="desktopWindow"></param>
            <param name="items"></param>
            <param name="processor"></param>
            <param name="cancelable"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.Desktop.Actions.TooltipValueObserverAttribute">
            <summary>
            Declares an observer binding for the Tooltip value of an action.
            </summary>
            <remarks>
            This attribute causes the Tooltip value of the action specified by the action ID to be
            bound to the state of the specified property on the class to which this attribute applies.
            The property name must refer to a public string property on the target class that has get access.
            The change event name must refer to a public event on the class that will fire whenever the value of the property
            changes.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Actions.TooltipValueObserverAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Attribute constructor.
            </summary>
            <param name="actionID">The logical action identifier to which this attribute applies.</param>
            <param name="propertyName">The name of the property to bind to.</param>
            <param name="changeEventName">The name of the property change notification event to bind to.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.TooltipValueObserverAttribute.Apply(Macro.Desktop.Actions.IActionBuildingContext)">
            <summary>
            Binds the <see cref="P:Macro.Desktop.Actions.IAction.Tooltip"/> property and <see cref="E:Macro.Desktop.Actions.IAction.TooltipChanged"/> event 
            to the corresponding items on the target object, via the specified <see cref="T:Macro.Desktop.Actions.IActionBuildingContext"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Tables.FilteredItemCollection`1">
            <summary>
            Adds filtering capablities to <see cref="T:Macro.Desktop.ItemCollection`1"/> 
            for use with <see cref="T:Macro.Desktop.Tables.ITable`1"/>s.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ItemCollection`1">
             <summary>
             Default implementation of <see cref="T:Macro.Desktop.IItemCollection`1"/>.
             </summary>
             <remarks>
             Do not subclass this class.  It is likely to be removed
             in subsequent versions of the framework and is 
             not considered part of the public API.
             </remarks>
            <typeparam name="TItem">The type of item that the table holds.</typeparam>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.#ctor(Macro.Desktop.ItemCollection{`0})">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.BeginTransaction">
            <summary>
            Begins a transaction, returning a scope object that must be disposed to denote
            the end of the transaction.
            </summary>
            <remarks>
            This is not a transaction in the true sense, because it cannot be rolled back.
            The purpose of the transaction is to allow objects that are listening for
            <see cref="E:Macro.Desktop.ItemCollection`1.ItemsChanged"/> events to know that a number of changes are being made
            in close succession that ought to be considered part of a single logical change. 
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.FindInsertionPoint(`0,System.Comparison{`0})">
            <summary>
            Finds the appropriate insertion point for the specified item, given that the collection is sorted according
            to the specified comparison.
            </summary>
            <param name="item">The item for which to determine the insertion point.</param>
            <param name="comparison">The comparison by which the collection is sorted.</param>
            <returns>A positive integer indicating the appropriate insertion point.</returns>
            <remarks>
            Assuming the item collection is already sorted by the specified comparison, this method
            will locate the correct insertion point for the specified item using a binary search.
            This index value can then be passed to the <see cref="M:Macro.Desktop.ItemCollection`1.Insert(System.Int32,`0)"/> method.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.NotifyItemUpdated(System.Int32)">
            <summary>
            Notifies the table that the item at the specified index has changed in some way.
            </summary>
            <remarks>
            Use this method to cause the view to update itself to reflect the changed item.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.NotifyItemUpdated(`0)">
            <summary>
            Notifies the table that the specified item has changed in some way.
            </summary>
            <remarks>
            Use this method to cause the view to update itself to reflect the changed item.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds all items in the specified enumeration.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts items in the collection using the specified <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.Replace(System.Predicate{`0},`0)">
            <summary>
            Sets any items in the collection matching the specified constraint to the specified new value. 
            </summary>
            <param name="constraint">A predicate against which all items in the collection will be compared, and replaced with the new value.</param>
            <param name="newValue">The new value with which to replace all matching items in the collection.</param>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.FindIndex(System.Predicate{`0})">
            <summary>
            Searches the collection for an item that satisfies the specified constraint and returns
            the index of the first such item.
            </summary>
            <returns>The index of the first matching item, or -1 if no matching items are found.</returns>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.Add(System.Object)">
            <summary>
            Adds an item to the collection, returning the index of the item's position in the collection.
            </summary>
            <remarks>
            The method returns -1 if the item is not of the correct type.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.Contains(System.Object)">
            <summary>
            Gets whether or not the item is in the collection.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.IndexOf(System.Object)">
            <summary>
            Gets the index of the item in the collection, or -1 if it doesn't exist.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified item at the given index.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.Remove(System.Object)">
            <summary>
            Removes the specified item from the collection.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.IndexOf(`0)">
            <summary>
            Gets the index of the specified item, or -1 if it doesn't exist.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified item at the given index.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire contents of the collection to <paramref name="array"/>, starting at <paramref name="index"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.Add(`0)">
            <summary>
            Adds the specified item to the collection.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.Contains(`0)">
            <summary>
            Gets whether or not the collection contains the specified item.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire contents of the collection to the specified <paramref name="array"/>, starting
            at the given <paramref name="arrayIndex"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.Remove(`0)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <returns>True if the item existed in the collection and was removed, otherwise false.</returns>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> for the collection.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.ChangeCollection(System.Func{Macro.Desktop.ItemChangedEventArgs})">
            <summary>
            Wraps code blocks that modify the collection, ensuring the proper
            event notifications are made.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.NotifyItemsChanged(Macro.Desktop.ItemChangeType,System.Int32,`0)">
            <summary>
            Raises the <see cref="E:Macro.Desktop.ItemCollection`1.ItemsChanged"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ItemCollection`1.MergeSort(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <summary>
            Performs a stable merge sort on the given <paramref name="list"/> using the given <paramref name="comparer"/>.
            The range of items sorted is [<paramref name="rangeStart"/>, <paramref name="rangeStop"/>).
            </summary>
        </member>
        <member name="E:Macro.Desktop.ItemCollection`1.TransactionStarted">
            <summary>
            Occurs when the collection is about to change.
            </summary>
        </member>
        <member name="E:Macro.Desktop.ItemCollection`1.ItemsChanged">
            <summary>
            Occurs when an item in the collection has changed.
            </summary>
        </member>
        <member name="E:Macro.Desktop.ItemCollection`1.TransactionCompleted">
            <summary>
            Occurs after the collection has changed.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ItemCollection`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            gets the item at the specified index.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ItemCollection`1.IsReadOnly">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ItemCollection`1.IsFixedSize">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ItemCollection`1.Item(System.Int32)">
            <summary>
            Gets the item at the given index.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ItemCollection`1.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ItemCollection`1.SyncRoot">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ItemCollection`1.IsSynchronized">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ItemCollection`1.List">
            <summary>
            Gets the internal list of items.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.FilteredItemCollection`1.#ctor(Macro.Desktop.Tables.ITable{`0},Macro.Desktop.Tables.TableFilterParams)">
            <summary>
            Constructor.
            </summary>
            <param name="table">The <see cref="T:Macro.Desktop.Tables.Table`1"/> to filter.</param>
            <param name="filterParams">The filter parameters.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.FilteredItemCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items to the collection.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.FilteredItemCollection`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the collection using the specified <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.FilteredItemCollection`1.Replace(System.Predicate{`0},`0)">
            <summary>
            Replaces all items in the collection with <paramref name="newValue"/> that
            match the input <paramref name="constraint"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.FilteredItemCollection`1.FindIndex(System.Predicate{`0})">
            <summary>
            Gets the index of an item in the collection matching the given <param name="constraint"/>.
            </summary>
            <returns>The index of the item, or -1 if no such item exists.</returns>
        </member>
        <member name="M:Macro.Desktop.Tables.FilteredItemCollection`1.Clear">
            <summary>
            Clears the entire collection.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.FilteredItemCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified <paramref name="index"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.FilteredItemCollection`1.IndexOf(`0)">
            <summary>
            Gets the index of an item in the collection.
            </summary>
            <returns>The index of the item, or -1 if no such item exists.</returns>
        </member>
        <member name="M:Macro.Desktop.Tables.FilteredItemCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts <paramref name="index"/> into the collection at the specified <paramref name="index"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.FilteredItemCollection`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire contents of the collection to <paramref name="array"/>, 
            starting at <paramref name="index"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.FilteredItemCollection`1.Add(`0)">
            <summary>
            Adds <paramref name="item"/> to the collection.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.FilteredItemCollection`1.Contains(`0)">
            <summary>
            Gets whether or not <paramref name="item"/> exists in the collection.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.FilteredItemCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire contents of the collection to <paramref name="array"/>, 
            starting at <paramref name="arrayIndex"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.FilteredItemCollection`1.Remove(`0)">
            <summary>
            Removes <paramref name="item"/> from the collection.
            </summary>
            <returns>True if the item existed in the collection and was removed, otherwise false.</returns>
        </member>
        <member name="M:Macro.Desktop.Tables.FilteredItemCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> for the collection.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.FilteredItemCollection`1.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.FilteredItemCollection`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets the item at the specified <paramref name="index"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.FilteredItemCollection`1.System#Collections#Generic#IList{TItem}#Item(System.Int32)">
            <summary>
            Gets the item at the specified <paramref name="index"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.FilteredItemCollection`1.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ApplicationThemeResourceProviderExtensionPoint">
            <summary>
            Extension point for <see cref="T:Macro.Desktop.IApplicationThemeResourceProvider"/> implementations.
            </summary>
            <remarks>
            <para>Extensions of this extension point may not provide an empty or NULL value for <see cref="P:Macro.Desktop.IApplicationThemeResourceProvider.Id"/>.</para>
            <para>Consider subclassing <see cref="T:Macro.Desktop.ApplicationThemeResourceProviderBase"/> instead of implementing the <see cref="T:Macro.Desktop.IApplicationThemeResourceProvider"/> interface directly.</para>
            </remarks>
            <seealso cref="T:Macro.Desktop.ApplicationThemeManager"/>
            <seealso cref="T:Macro.Desktop.ApplicationThemeResourceProviderBase"/>
            <seealso cref="T:Macro.Desktop.IApplicationThemeResourceProvider"/>
        </member>
        <member name="T:Macro.Desktop.Actions.ActionFeatureAttribute">
            <summary>
            Associates a feature token with an action.
            </summary>
            <remarks>
            This attribute sets a feature identification token with an action, allowing the permissibility of the action
            to be controlled by application licensing in addition to the other rules of permissibility such as user
            authority tokens.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionFeatureAttribute.#ctor(System.String,System.String)">
            <summary>
            Associates a feature token with the specified action ID.
            </summary>
            <param name="actionId">String identifying the action to which this attribute applies.</param>
            <param name="featureToken">Feature identification token to be checked against application licensing.</param>
        </member>
        <member name="P:Macro.Desktop.Actions.ActionFeatureAttribute.FeatureToken">
            <summary>
            Gets the feature identification token to be checked against application licensing.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ViewFactory">
            <summary>
            Provides a convenient set of methods for instantiating views.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ViewFactory.CreateView(Macro.Common.IExtensionPoint,System.String)">
            <summary>
            Creates a view for the specified extension point and GUI toolkit.
            </summary>
            <param name="extensionPoint">The view extension point.</param>
            <param name="toolkitID">The desired GUI toolkit.</param>
            <returns>The view object that was created.</returns>
            <exception cref="T:System.NotSupportedException">A view extension matching the specified GUI toolkit does not exist.</exception>
        </member>
        <member name="M:Macro.Desktop.ViewFactory.CreateView(Macro.Common.IExtensionPoint)">
            <summary>
            Creates a view for the specified extension point and current GUI toolkit.
            </summary>
            <param name="extensionPoint">The view extension point.</param>
            <returns>The view object that was created.</returns>
            <exception cref="T:System.NotSupportedException">A view extension matching the GUI toolkit of the main view does not exist.</exception>
            <exception cref="T:System.InvalidOperationException">The main workstation view has not yet been created.</exception>
        </member>
        <member name="M:Macro.Desktop.ViewFactory.CreateAssociatedView(System.Type)">
            <summary>
            Creates a view based on the view extension point that is associated with the specified
            model type.  The model type is any class that has a <see cref="T:Macro.Desktop.AssociateViewAttribute"/> attribute
            specified.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ApplicationComponentExitCode">
            <summary>
            Indicates the exit status of an application component.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ApplicationComponentExitCode.None">
            <summary>
            Implies that nothing of significance occured; the component was closed or cancelled.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ApplicationComponentExitCode.Accepted">
            <summary>
            For an editable component, implies that data was changed and the user accepted the changes.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ApplicationComponentExitCode.Error">
            <summary>
            An error occured during the component execution.
            </summary>
        </member>
        <member name="T:Macro.Desktop.PathSegment">
            <summary>
            Represents a single segment of a <see cref="T:Macro.Desktop.Path"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.PathSegment.#ctor(System.String)">
            <summary>
             Creates a <see cref="T:Macro.Desktop.PathSegment"/> from the specified string, treated as a literal.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Macro.Desktop.PathSegment.#ctor(System.String,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Creates a <see cref="T:Macro.Desktop.PathSegment"/> from the specified string, which may be either a resource key or a literal.
            </summary>
            <param name="p"></param>
            <param name="resolver"></param>
        </member>
        <member name="M:Macro.Desktop.PathSegment.#ctor(System.String,System.String)">
            <summary>
            Internal constructor.
            </summary>
            <param name="key">The resource key or unlocalized path segment string.</param>
            <param name="localized">The localized path segment string.</param>
        </member>
        <member name="M:Macro.Desktop.PathSegment.op_Inequality(Macro.Desktop.PathSegment,Macro.Desktop.PathSegment)">
            <summary>
            </summary>
            <param name="pathSegment1"></param>
            <param name="pathSegment2"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.PathSegment.op_Equality(Macro.Desktop.PathSegment,Macro.Desktop.PathSegment)">
            <summary>
            </summary>
            <param name="pathSegment1"></param>
            <param name="pathSegment2"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.PathSegment.Equals(Macro.Desktop.PathSegment)">
            <summary>
            Gets whether or not <paramref name="pathSegment"/> is equal to this object.
            </summary>
        </member>
        <member name="M:Macro.Desktop.PathSegment.Equals(System.Object)">
            <summary>
            Gets whether or not <paramref name="obj"/> is equal to this object.
            </summary>
        </member>
        <member name="M:Macro.Desktop.PathSegment.GetHashCode">
            <summary>
            Gets a hash code.
            </summary>
        </member>
        <member name="P:Macro.Desktop.PathSegment.ResourceKey">
            <summary>
            Gets the resource key or unlocalized text.
            </summary>
        </member>
        <member name="P:Macro.Desktop.PathSegment.LocalizedText">
            <summary>
            Gets the localized text.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Tables.TableColumnEventArgs">
            <summary>
            Event args used when a table column changes.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumnEventArgs.#ctor(Macro.Desktop.Tables.TableColumnChangeType,Macro.Desktop.Tables.ITableColumn)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.TableColumnEventArgs.ChangeType">
            <summary>
            The type of change that occured.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.TableColumnEventArgs.Column">
            <summary>
            The column that changed.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Tables.TableColumn`2">
            <summary>
            Implementation of <see cref="T:Macro.Desktop.Tables.ITableColumn"/> for use with the <see cref="T:Macro.Desktop.Tables.Table`1"/> class.
            </summary>
            <typeparam name="TItem">The type of item on which the table is based.</typeparam>
            <typeparam name="TColumn">The type of value that this column holds.</typeparam>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.#ctor(System.String,Macro.Desktop.Tables.TableColumn{`0,`1}.GetColumnValueDelegate{`0,`1},Macro.Desktop.Tables.TableColumn{`0,`1}.SetColumnValueDelegate{`0,`1},System.Single,System.Comparison{`0},System.Int32)">
            <summary>
            Constructs a multi-cellrow table column.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
            <param name="valueSetter">A delegate that accepts an item and a value, and pushes the value to the item.  May be null if the column is read-only.</param>
            <param name="widthFactor">A weighting factor that is applied to the width of the column.</param>
            <param name="comparison">A custom comparison operator that is used for sorting based on this column.</param>
            <param name="cellRow">The cell row this column will be displayed in.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.#ctor(System.String,System.String,Macro.Desktop.Tables.TableColumn{`0,`1}.GetColumnValueDelegate{`0,`1},Macro.Desktop.Tables.TableColumn{`0,`1}.SetColumnValueDelegate{`0,`1},System.Single,System.Comparison{`0},System.Int32)">
            <summary>
            Constructs a multi-cellrow table column.
            </summary>
            <param name="columnName">The identifying name of the column.</param>
            <param name="columnDisplayName">The display name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
            <param name="valueSetter">A delegate that accepts an item and a value, and pushes the value to the item.  May be null if the column is read-only.</param>
            <param name="widthFactor">A weighting factor that is applied to the width of the column.</param>
            <param name="comparison">A custom comparison operator that is used for sorting based on this column.</param>
            <param name="cellRow">The cell row this column will be displayed in.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.#ctor(System.String,Macro.Desktop.Tables.TableColumn{`0,`1}.GetColumnValueDelegate{`0,`1},Macro.Desktop.Tables.TableColumn{`0,`1}.SetColumnValueDelegate{`0,`1},System.Int32)">
            <summary>
            Constructs a Multi-cellrow table column with no comparison delegate.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
            <param name="valueSetter">A delegate that accepts an item and a value, and pushes the value to the item.  May be null if the column is read-only.</param>
            <param name="cellRow">The cell row this column will be displayed in.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.#ctor(System.String,Macro.Desktop.Tables.TableColumn{`0,`1}.GetColumnValueDelegate{`0,`1},Macro.Desktop.Tables.TableColumn{`0,`1}.SetColumnValueDelegate{`0,`1},System.Single,System.Int32)">
            <summary>
            Constructs a Multi-cellrow table column with specific width factor but no comparison delegate.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
            <param name="valueSetter">A delegate that accepts an item and a value, and pushes the value to the item.  May be null if the column is read-only.</param>
            <param name="widthFactor">A weighting factor that is applied to the width of the column.</param>
            <param name="cellRow">The cell row this column will be displayed in.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.#ctor(System.String,Macro.Desktop.Tables.TableColumn{`0,`1}.GetColumnValueDelegate{`0,`1},System.Int32)">
            <summary>
            Constructs a read-only Multi-cellrow table column with no comparison delegate.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
            <param name="cellRow">The cell row this column will be display in.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.#ctor(System.String,Macro.Desktop.Tables.TableColumn{`0,`1}.GetColumnValueDelegate{`0,`1},System.Single,System.Int32)">
            <summary>
            Constructs a read-only Multi-cellrow table column with specific width factor but no comparison delegate.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
            <param name="widthFactor">A weighting factor that is applied to the width of the column.</param>
            <param name="cellRow">The cell row this column will be displayed in.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.#ctor(System.String,System.String,Macro.Desktop.Tables.TableColumn{`0,`1}.GetColumnValueDelegate{`0,`1},Macro.Desktop.Tables.TableColumn{`0,`1}.SetColumnValueDelegate{`0,`1},System.Int32)">
            <summary>
            Constructs a Multi-cellrow table column with no comparison delegate.
            </summary>
            <param name="columnName">The identifying name of the column.</param>
            <param name="columnDisplayName">The display name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
            <param name="valueSetter">A delegate that accepts an item and a value, and pushes the value to the item.  May be null if the column is read-only.</param>
            <param name="cellRow">The cell row this column will be displayed in.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.#ctor(System.String,System.String,Macro.Desktop.Tables.TableColumn{`0,`1}.GetColumnValueDelegate{`0,`1},Macro.Desktop.Tables.TableColumn{`0,`1}.SetColumnValueDelegate{`0,`1},System.Single,System.Int32)">
            <summary>
            Constructs a Multi-cellrow table column with specific width factor but no comparison delegate.
            </summary>
            <param name="columnName">The identifying name of the column.</param>
            <param name="columnDisplayName">The display name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
            <param name="valueSetter">A delegate that accepts an item and a value, and pushes the value to the item.  May be null if the column is read-only.</param>
            <param name="widthFactor">A weighting factor that is applied to the width of the column.</param>
            <param name="cellRow">The cell row this column will be displayed in.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.#ctor(System.String,System.String,Macro.Desktop.Tables.TableColumn{`0,`1}.GetColumnValueDelegate{`0,`1},System.Int32)">
            <summary>
            Constructs a read-only Multi-cellrow table column with no comparison delegate.
            </summary>
            <param name="columnName">The identifying name of the column.</param>
            <param name="columnDisplayName">The display name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
            <param name="cellRow">The cell row this column will be display in.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.#ctor(System.String,System.String,Macro.Desktop.Tables.TableColumn{`0,`1}.GetColumnValueDelegate{`0,`1},System.Single,System.Int32)">
            <summary>
            Constructs a read-only Multi-cellrow table column with specific width factor but no comparison delegate.
            </summary>
            <param name="columnName">The identifying name of the column.</param>
            <param name="columnDisplayName">The display name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
            <param name="widthFactor">A weighting factor that is applied to the width of the column.</param>
            <param name="cellRow">The cell row this column will be displayed in.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.#ctor(System.String,Macro.Desktop.Tables.TableColumn{`0,`1}.GetColumnValueDelegate{`0,`1},Macro.Desktop.Tables.TableColumn{`0,`1}.SetColumnValueDelegate{`0,`1},System.Single,System.Comparison{`0})">
            <summary>
            Constructs a single-cellrow table column.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
            <param name="valueSetter">A delegate that accepts an item and a value, and pushes the value to the item.  May be null if the column is read-only.</param>
            <param name="widthFactor">A weighting factor that is applied to the width of the column.</param>
            <param name="comparison">A custom comparison operator that is used for sorting based on this column.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.#ctor(System.String,Macro.Desktop.Tables.TableColumn{`0,`1}.GetColumnValueDelegate{`0,`1},Macro.Desktop.Tables.TableColumn{`0,`1}.SetColumnValueDelegate{`0,`1})">
            <summary>
            Constructs a single-cellrow table column with no comparison delegate.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
            <param name="valueSetter">A delegate that accepts an item and a value, and pushes the value to the item.  May be null if the column is read-only.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.#ctor(System.String,Macro.Desktop.Tables.TableColumn{`0,`1}.GetColumnValueDelegate{`0,`1},Macro.Desktop.Tables.TableColumn{`0,`1}.SetColumnValueDelegate{`0,`1},System.Single)">
            <summary>
            Constructs a single-cellrow table column with specific width factor but no comparison delegate.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
            <param name="valueSetter">A delegate that accepts an item and a value, and pushes the value to the item.  May be null if the column is read-only.</param>
            <param name="widthFactor">A weighting factor that is applied to the width of the column.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.#ctor(System.String,Macro.Desktop.Tables.TableColumn{`0,`1}.GetColumnValueDelegate{`0,`1})">
            <summary>
            Constructs a read-only single-cellrow table column with no comparison delegate.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.#ctor(System.String,Macro.Desktop.Tables.TableColumn{`0,`1}.GetColumnValueDelegate{`0,`1},System.Single)">
            <summary>
            Constructs a read-only single-cellrow table column with specific width factor but no comparison delegate.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
            <param name="widthFactor">A weighting factor that is applied to the width of the column.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.#ctor(System.String,System.String,Macro.Desktop.Tables.TableColumn{`0,`1}.GetColumnValueDelegate{`0,`1},Macro.Desktop.Tables.TableColumn{`0,`1}.SetColumnValueDelegate{`0,`1},System.Single,System.Comparison{`0})">
            <summary>
            Constructs a single-cellrow table column.
            </summary>
            <param name="columnName">The identifying name of the column.</param>
            <param name="columnDisplayName">The display name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
            <param name="valueSetter">A delegate that accepts an item and a value, and pushes the value to the item.  May be null if the column is read-only.</param>
            <param name="widthFactor">A weighting factor that is applied to the width of the column.</param>
            <param name="comparison">A custom comparison operator that is used for sorting based on this column.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.#ctor(System.String,System.String,Macro.Desktop.Tables.TableColumn{`0,`1}.GetColumnValueDelegate{`0,`1},Macro.Desktop.Tables.TableColumn{`0,`1}.SetColumnValueDelegate{`0,`1})">
            <summary>
            Constructs a single-cellrow table column with no comparison delegate.
            </summary>
            <param name="columnName">The identifying name of the column.</param>
            <param name="columnDisplayName">The display name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
            <param name="valueSetter">A delegate that accepts an item and a value, and pushes the value to the item.  May be null if the column is read-only.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.#ctor(System.String,System.String,Macro.Desktop.Tables.TableColumn{`0,`1}.GetColumnValueDelegate{`0,`1},Macro.Desktop.Tables.TableColumn{`0,`1}.SetColumnValueDelegate{`0,`1},System.Single)">
            <summary>
            Constructs a single-cellrow table column with specific width factor but no comparison delegate.
            </summary>
            <param name="columnName">The identifying name of the column.</param>
            <param name="columnDisplayName">The display name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
            <param name="valueSetter">A delegate that accepts an item and a value, and pushes the value to the item.  May be null if the column is read-only.</param>
            <param name="widthFactor">A weighting factor that is applied to the width of the column.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.#ctor(System.String,System.String,Macro.Desktop.Tables.TableColumn{`0,`1}.GetColumnValueDelegate{`0,`1})">
            <summary>
            Constructs a read-only single-cellrow table column with no comparison delegate.
            </summary>
            <param name="columnName">The identifying name of the column.</param>
            <param name="columnDisplayName">The display name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.#ctor(System.String,System.String,Macro.Desktop.Tables.TableColumn{`0,`1}.GetColumnValueDelegate{`0,`1},System.Single)">
            <summary>
            Constructs a read-only single-cellrow table column with specific width factor but no comparison delegate.
            </summary>
            <param name="columnName">The identifying name of the column.</param>
            <param name="columnDisplayName">The display name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
            <param name="widthFactor">A weighting factor that is applied to the width of the column.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.GetTooltipText(System.Object)">
            <summary>
            Gets the tooltip of this column for the specified item.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.GetValue(System.Object)">
            <summary>
             Gets the value of this column for the specified item.
            </summary>
            <param name="item">The item from which the value is to be obtained.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.SetValue(System.Object,System.Object)">
            <summary>
             Sets the value of this column on the specified item, assuming this is not a read-only column.
            </summary>
            <param name="item">The item on which the value is to be set.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.FormatValue(System.Object)">
            <summary>
            Format the value of this column for the specified item.
            </summary>
            <param name="value">The value.</param>
            <returns>The formatted value</returns>
        </member>
        <member name="M:Macro.Desktop.Tables.TableColumn`2.ClickLink(System.Object)">
            <summary>
            Sets the click action of this column on the specified item.
            </summary>
            <param name="item">The item on which the value is to be set.</param>
        </member>
        <member name="P:Macro.Desktop.Tables.TableColumn`2.ClickLinkDelegate">
            <summary>
            Gets and sets the delegate that executes when the link is clicked.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.TableColumn`2.ReadOnly">
            <summary>
             Indicates whether this column is read-only.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.TableColumn`2.HasClickableLink">
            <summary>
            Indicates whether this column is clickable
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.TableColumn`2.TooltipTextProvider">
            <summary>
            Gets or sets the tooltip text provider for this binding.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.TableColumn`2.ValueFormatter">
            <summary>
            Gets or sets the value formatter for this binding.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Tables.TableColumn`2.GetColumnValueDelegate`2">
            <summary>
            Delegate that is used to pull the value of a column from an object.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TValue">The expected type of the value to pull.</typeparam>
            <param name="obj">The object from which to pull the value.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Macro.Desktop.Tables.TableColumn`2.SetColumnValueDelegate`2">
            <summary>
            Delegate that is used to push the value of a column to an object.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TValue">The type of the value to push.</typeparam>
            <param name="obj">The object to which the value is pushed.</param>
            <param name="val">The value.</param>
        </member>
        <member name="T:Macro.Desktop.SplitComponentContainerViewExtensionPoint">
            <summary>
            Defines an extension point for views onto the <see cref="T:Macro.Desktop.SplitComponentContainer"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.SplitOrientation">
            <summary>
            Specifies the orientation of the <see cref="T:Macro.Desktop.SplitComponentContainer"/>.
            </summary>
        </member>
        <member name="F:Macro.Desktop.SplitOrientation.Horizontal">
            <summary>
            The <see cref="T:Macro.Desktop.SplitComponentContainer"/> should be split horizontally.
            </summary>
        </member>
        <member name="F:Macro.Desktop.SplitOrientation.Vertical">
            <summary>
            The <see cref="T:Macro.Desktop.SplitComponentContainer"/> should be split vertically.
            </summary>
        </member>
        <member name="T:Macro.Desktop.SplitComponentContainer">
            <summary>
            A component container for hosting two <see cref="T:Macro.Desktop.IApplicationComponent"/>s
            separated by a splitter.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SplitComponentContainer.#ctor(Macro.Desktop.SplitPane,Macro.Desktop.SplitPane,Macro.Desktop.SplitOrientation)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SplitComponentContainer.#ctor(Macro.Desktop.SplitOrientation)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SplitComponentContainer.Start">
            <summary>
            Called by the host to initialize the application component.
            </summary>
             <remarks>
            <para>
            Calls <see cref="M:Macro.Desktop.ApplicationComponent.Start"/> on both of the <see cref="T:Macro.Desktop.SplitPane"/>s.
            </para>
            <para>
            Override this method to implement custom initialization logic.  Overrides must be sure to call the base implementation.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Desktop.SplitComponentContainer.Stop">
            <summary>
            Called by the host when the application component is being terminated.
            </summary>
            <remarks>
            <para>
            Calls <see cref="M:Macro.Desktop.ApplicationComponent.Stop"/> on both of the <see cref="T:Macro.Desktop.SplitPane"/>s.
            </para>
            <para>
            Override this method to implement custom termination logic.  Overrides must be sure to call the base implementation.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Desktop.SplitComponentContainer.EnsureVisible(Macro.Desktop.IApplicationComponent)">
            <summary>
            Ensures that the specified component is visible.
            </summary>
            <remarks>
            Does nothing because both <see cref="T:Macro.Desktop.SplitPane"/>s are already visible.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.SplitComponentContainer.EnsureStarted(Macro.Desktop.IApplicationComponent)">
            <summary>
            Ensures that the specified component has been started.
            </summary>
            <remarks>
            Does nothing because both <see cref="T:Macro.Desktop.SplitPane"/>s are already started.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.SplitComponentContainer.Pane1">
            <summary>
            Gets or sets the first <see cref="T:Macro.Desktop.SplitPane"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.SplitComponentContainer.Pane2">
            <summary>
            Gets or sets the second <see cref="T:Macro.Desktop.SplitPane"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.SplitComponentContainer.SplitOrientation">
            <summary>
            Gets the <see cref="P:Macro.Desktop.SplitComponentContainer.SplitOrientation"/> of the container.
            </summary>
        </member>
        <member name="P:Macro.Desktop.SplitComponentContainer.ExportedActions">
            <summary>
            Returns the set of actions that the component wishes to export to the desktop.
            </summary>
            <remarks>
            The <see cref="T:Macro.Desktop.Actions.IActionSet"/> returned by this method is the union of the 
            exported actions from the two <see cref="T:Macro.Desktop.SplitPane"/>s.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.SplitComponentContainer.ContainedComponents">
            <summary>
            Gets an enumeration of the contained components.
            </summary>
            <remarks>
            Simply returns both <see cref="T:Macro.Desktop.SplitPane"/>s.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.SplitComponentContainer.VisibleComponents">
            <summary>
            Gets an enumeration of the components that are currently visible.
            </summary>
            <remarks>
            Simply returns both <see cref="T:Macro.Desktop.SplitPane"/>s, since they are always visible.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.SplitComponentContainer.SplitPaneHost">
            <summary>
            A host for a <see cref="T:Macro.Desktop.SplitPane"/>.
            </summary>        
        </member>
        <member name="P:Macro.Desktop.SplitComponentContainer.SplitPaneHost.CommandHistory">
            <summary>
            Contained components will use the comand history provided by the host that 
            owns the container.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Format">
            <summary>
            Utility class that assists with formatting objects for display.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Format.Date(System.DateTime)">
            <summary>
            Formats the specified <see cref="T:System.DateTime"/> as a date.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Format.Date(System.Nullable{System.DateTime})">
            <summary>
            Formats the specified <see cref="T:System.DateTime"/> as a date, returning an empty string if null.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Format.Date(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Formats the specific <see cref="T:System.DateTime"/> as a date, descriptive if set by condition, returns an empty string if input date is null.
            </summary>
            <param name="dt"></param>
            <param name="descriptive"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Format.Time(System.DateTime)">
            <summary>
            Formats the specified <see cref="T:System.DateTime"/> as a time.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Format.Time(System.Nullable{System.DateTime})">
            <summary>
            Formats the specified <see cref="T:System.DateTime"/> as a time, returning an empty string if null.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Format.DateTime(System.DateTime)">
            <summary>
            Formats the specified <see cref="T:System.DateTime"/> as a date + time.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Format.DateTime(System.Nullable{System.DateTime})">
            <summary>
            Formats the specified <see cref="T:System.DateTime"/> as a date + time.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Format.DateFormat">
            <summary>
            Gets or sets the default date format string.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Format.TimeFormat">
            <summary>
            Gets or sets the default time format string.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Format.DateTimeFormat">
            <summary>
            Gets or sets the default date-time format string.
            </summary>
        </member>
        <member name="T:Macro.Desktop.FileDialogResult">
            <summary>
            Contains the results of a common file dialog operation.
            </summary>
        </member>
        <member name="M:Macro.Desktop.FileDialogResult.#ctor(Macro.Common.DialogBoxAction,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="action"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Macro.Desktop.FileDialogResult.#ctor(Macro.Common.DialogBoxAction,System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="action"></param>
            <param name="filenames"></param>
        </member>
        <member name="P:Macro.Desktop.FileDialogResult.FileName">
            <summary>
            Gets the filename.
            </summary>
        </member>
        <member name="P:Macro.Desktop.FileDialogResult.FileNames">
            <summary>
            Gets the filenames (if multi-select was enabled).
            </summary>
        </member>
        <member name="P:Macro.Desktop.FileDialogResult.Action">
            <summary>
            Gets the result of the file dialog.
            </summary>
        </member>
        <member name="T:Macro.Desktop.PagingActionModel`1">
            <summary>
            Action model that allows a user to control a <see cref="T:Macro.Desktop.IPagingController`1"/>.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:Macro.Desktop.PagingActionModel`1.#ctor(Macro.Desktop.IPagingController{`0},Macro.Desktop.IDesktopWindow)">
            <summary>
             Constructor.
            </summary>
            <param name="controller"></param>
            <param name="desktopWindow"></param>
        </member>
        <member name="T:Macro.Desktop.DialogBoxCreationArgs">
            <summary>
            Holds parameters that control the creation of a <see cref="T:Macro.Desktop.DialogBox"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DialogBoxCreationArgs.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DialogBoxCreationArgs.#ctor(Macro.Desktop.IApplicationComponent,System.String,System.String,Macro.Desktop.DialogSizeHint)">
            <summary>
            Constructor.
            </summary>
            <param name="component">The component to be hosted in the dialog.</param>
            <param name="title">The title to assign to the dialog.</param>
            <param name="name">The name/identifier of the dialog.</param>
            <param name="sizeHint">The size hint for the dialog.</param>
        </member>
        <member name="M:Macro.Desktop.DialogBoxCreationArgs.#ctor(Macro.Desktop.IApplicationComponent,System.String,System.String,System.Drawing.Size)">
            <summary>
            Constructor.
            </summary>
            <param name="component">The component to be hosted in the dialog.</param>
            <param name="title">The title to assign to the dialog.</param>
            <param name="name">The name/identifier of the dialog.</param>
            <param name="size">The size of the dialog in pixels.</param>
        </member>
        <member name="M:Macro.Desktop.DialogBoxCreationArgs.#ctor(Macro.Desktop.IApplicationComponent,System.String,System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="component">The component to be hosted in the dialog.</param>
            <param name="title">The title to assign to the dialog.</param>
            <param name="name">The name/identifier of the dialog.</param>
            <param name="allowUserResize">A value indicating whether or not the user should be allowed to resize the dialog.</param>
        </member>
        <member name="M:Macro.Desktop.DialogBoxCreationArgs.#ctor(Macro.Desktop.IApplicationComponent,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="component">The component to be hosted in the dialog.</param>
            <param name="title">The title to assign to the dialog.</param>
            <param name="name">The name/identifier of the dialog.</param>
        </member>
        <member name="P:Macro.Desktop.DialogBoxCreationArgs.Component">
            <summary>
            Gets or sets the component to host.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DialogBoxCreationArgs.SizeHint">
            <summary>
            Gets or sets the size hint for the dialog box.
            </summary>
            <seealso cref="P:Macro.Desktop.DialogBoxCreationArgs.Size"/>
        </member>
        <member name="P:Macro.Desktop.DialogBoxCreationArgs.Size">
            <summary>
            Gets or sets an explicit size for the dialog in pixels.  If specified, this property will override <see cref="P:Macro.Desktop.DialogBoxCreationArgs.SizeHint"/>. 
            </summary>
        </member>
        <member name="P:Macro.Desktop.DialogBoxCreationArgs.AllowUserResize">
            <summary>
            Gets or sets a value indicating whether or not the user should be allowed to resize the dialog.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.Standard.DateFormatApplicationComponentViewExtensionPoint">
            <summary>
            Extension point for views onto <see cref="T:Macro.Desktop.Configuration.Standard.DateFormatApplicationComponent"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.Standard.DateFormatApplicationComponent">
            <summary>
            Component that allows the date format to be set for the application.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.Standard.DateFormatApplicationComponent.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.Standard.DateFormatApplicationComponent.Save">
            <summary>
            Saves the changes.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.Standard.DateFormatApplicationComponent.Start">
            <summary>
            Starts/initializes the component.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.Standard.DateFormatApplicationComponent.AvailableCustomFormats">
            <summary>
            Gets the available custom date formats.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.Standard.DateFormatApplicationComponent.FormatOption">
            <summary>
            Get the currently selected format option (<see cref="T:Macro.Desktop.Configuration.Standard.DateFormatApplicationComponent.DateFormatOptions"/>).
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.Standard.DateFormatApplicationComponent.SelectedCustomFormat">
            <summary>
            Gets the currently selected custom format.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.Standard.DateFormatApplicationComponent.CustomFormatsEnabled">
            <summary>
            Gets whether or not the 'custom' format option is enabled.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.Standard.DateFormatApplicationComponent.DateFormat">
            <summary>
            Gets the currently selected date format.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.Standard.DateFormatApplicationComponent.SampleDate">
            <summary>
            Returns a 'sample date', formatted according to the currently selected format.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.Standard.DateFormatApplicationComponent.DateFormatOptions">
            <summary>
            An enumeration of date format options.
            </summary>
        </member>
        <member name="F:Macro.Desktop.Configuration.Standard.DateFormatApplicationComponent.DateFormatOptions.Custom">
            <summary>
            A custom date format.
            </summary>
        </member>
        <member name="F:Macro.Desktop.Configuration.Standard.DateFormatApplicationComponent.DateFormatOptions.SystemShort">
            <summary>
            The 'short' format defined by the system (varies by user).
            </summary>
        </member>
        <member name="F:Macro.Desktop.Configuration.Standard.DateFormatApplicationComponent.DateFormatOptions.SystemLong">
            <summary>
            The 'long' format defined by the system (varies by user).
            </summary>
        </member>
        <member name="T:Macro.Desktop.Tables.ComboBoxCellEditorViewExtensionPoint">
            <summary>
            Defines an extension point for views onto a <see cref="T:Macro.Desktop.Tables.ComboBoxCellEditor"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Tables.ComboBoxCellEditor">
            <summary>
            Implements a <see cref="T:Macro.Desktop.Tables.ITableCellEditor"/> to show a list of choices in a combox box.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Tables.TableCellEditor">
            <summary>
            Abstract base implementation of <see cref="T:Macro.Desktop.Tables.ITableCellEditor"/>, providing common functionality.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Tables.ITableCellEditor">
            <summary>
            Defines an interface to a table cell editor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.ITableCellEditor.SetColumn(Macro.Desktop.Tables.ITableColumn)">
            <summary>
            Called by the framework to associate this editor with the specified column.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Macro.Desktop.Tables.ITableCellEditor.BeginEdit(System.Object)">
            <summary>
            Informs the editor that it is going to begin an edit on the specified item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Macro.Desktop.Tables.ITableCellEditor.Value">
            <summary>
            Gets or sets the value (e.g. content) of the editor.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Tables.ITableCellEditor.ValueChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.Tables.ITableCellEditor.Value"/> property is modified.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.TableCellEditor.SetColumn(Macro.Desktop.Tables.ITableColumn)">
            <summary>
            Called by the framework to associate this editor with the specified column.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableCellEditor.BeginEdit(System.Object)">
            <summary>
            Informs the editor that it is going to begin an edit on the specified item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Macro.Desktop.Tables.TableCellEditor.Value">
            <summary>
            Gets or sets the value (e.g. content) of the editor.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Tables.TableCellEditor.ValueChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.Tables.ITableCellEditor.Value"/> property is modified.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.ComboBoxCellEditor.#ctor(Macro.Desktop.Tables.ComboBoxCellEditor.GetChoicesDelegate,Macro.Desktop.Tables.ComboBoxCellEditor.FormatItemDelegate)">
            <summary>
            Constructor.
            </summary>
            <param name="getChoicesCallback"></param>
            <param name="formatItemCallback"></param>
        </member>
        <member name="P:Macro.Desktop.Tables.ComboBoxCellEditor.GetChoices">
            <summary>
            Gets the call back to get a list of choices.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.ComboBoxCellEditor.FormatItem">
            <summary>
            Gets the call back to format an item.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Tables.ComboBoxCellEditor.GetChoicesDelegate">
            <summary>
            Delegate to return a list of items to the user-interface.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Tables.ComboBoxCellEditor.FormatItemDelegate">
            <summary>
            Delegate to formats an item.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.IActionView">
            <summary>
            Defines the interface for a view onto an action.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IActionView.Context">
            <summary>
            Gets the action view's context; the property is set by the framework.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.GroupHintAttribute">
            <summary>
            Declares a 'group hint' for an action.
            </summary>
            <remarks>
            Group Hints are used to determine as appropriate a place 
            as possible to place an action within an action model.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Actions.GroupHintAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="actionID">The logical Id of the action.</param>
            <param name="groupHint">The action's group hint.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.GroupHintAttribute.Apply(Macro.Desktop.Actions.IActionBuildingContext)">
            <summary>
            Sets the <see cref="T:Macro.Desktop.Actions.IAction"/>'s <see cref="T:Macro.Desktop.Actions.GroupHint"/>, via the specified <see cref="T:Macro.Desktop.Actions.IActionBuildingContext"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.ActionPermissionAttribute">
            <summary>
            Associates authority tokens with an action.
            </summary>
            <remarks>
            This attribute sets the action permissibility via the <see cref="M:Macro.Desktop.Actions.Action.SetPermissibility(Macro.Common.Specifications.ISpecification)"/> method.
            If multiple authority tokens are supplied in an array to a single instance of the attribute, those tokens will be combined using AND.  If
            multiple instances of this attribute are specified, the tokens associated with each instance are combined
            using OR logic.  This allows for the possibility of constructing a permission specification based on a complex boolean
            combination of authority tokens.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionPermissionAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor - the specified authority token will be associated with the specified action ID.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionPermissionAttribute.#ctor(System.String,System.String[])">
            <summary>
            Constructor - all of the specified tokens will combined using AND and associated with the specified action ID.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionPermissionAttribute.Apply(Macro.Desktop.Actions.IActionBuildingContext)">
            <summary>
            Applies permissions represented by this attribute to an action instance, via the specified <see cref="T:Macro.Desktop.Actions.IActionBuildingContext"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.XKeysConverter">
            <summary>
            Provides a <see cref="T:System.ComponentModel.TypeConverter"/> to convert <see cref="T:Macro.Desktop.XKeys"/> values to and from localized and invariant <see cref="T:System.String"/> representations.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeysConverter.KeySeparator">
            <summary>
            The character used to separate individual keys.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeysConverter._keyStringParser">
            <remarks>
            <![CDATA[The pattern is effectively @"^\s*(.+?)(?:\s*\+\s*(.+?)(?:\s*\+\s*(.+?)(?:\s*\+\s*(.+?))?)?)?\s*$" for a KeySeparator of '+']]>
            </remarks>
        </member>
        <member name="M:Macro.Desktop.XKeysConverter.#cctor">
            <summary>
            Type initializer for <see cref="T:Macro.Desktop.XKeysConverter"/>.
            </summary>
            <remarks>
            The cache for the key names in the invariant culture is generated during the type initialization process.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.XKeysConverter.#ctor">
            <summary>
            Constructs a new instance of an <see cref="T:Macro.Desktop.XKeysConverter"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.XKeysConverter.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Constructs a new instance of an <see cref="T:Macro.Desktop.XKeysConverter"/> for a specific culture.
            </summary>
            <param name="culture">The culture for which to cache localized key names. If this value is NULL, the <see cref="T:System.Globalization.CultureInfo"/> is obtained using the current thread's <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/> property.</param>
            <remarks>
            The <paramref name="culture"/> parameter is used to cache a set of localized key names, allowing for improved performance when
            converting in the context of the specified culture or the invariant culture.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.XKeysConverter.InitializeMaps(System.Globalization.CultureInfo,System.Collections.Generic.IDictionary{Macro.Desktop.XKeys,System.String},System.Collections.Generic.IDictionary{System.String,Macro.Desktop.XKeys})">
            <summary>
            Initializes the localization maps for the specified culture.
            </summary>
        </member>
        <member name="M:Macro.Desktop.XKeysConverter.Format(Macro.Desktop.XKeys)">
            <summary>
            Formats a <see cref="T:Macro.Desktop.XKeys"/> value as a string using the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture">current thread's UI CultureInfo</see>.
            </summary>
            <param name="value">The <see cref="T:Macro.Desktop.XKeys"/> value to be formatted.</param>
            <returns>The string representation of the given <paramref name="value"/>.</returns>
        </member>
        <member name="M:Macro.Desktop.XKeysConverter.Format(Macro.Desktop.XKeys,System.Globalization.CultureInfo)">
            <summary>
            Formats a <see cref="T:Macro.Desktop.XKeys"/> value as a string using the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="value">The <see cref="T:Macro.Desktop.XKeys"/> value to be formatted.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> for which the value should be formatted.</param>
            <returns>The string representation of the given <paramref name="value"/>.</returns>
        </member>
        <member name="M:Macro.Desktop.XKeysConverter.FormatInvariant(Macro.Desktop.XKeys)">
            <summary>
            Formats a <see cref="T:Macro.Desktop.XKeys"/> value as a string using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="value">The <see cref="T:Macro.Desktop.XKeys"/> value to be formatted.</param>
            <returns>The string representation of the given <paramref name="value"/>.</returns>
        </member>
        <member name="M:Macro.Desktop.XKeysConverter.Parse(System.String)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.XKeys"/> value using the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture">current thread's UI CultureInfo</see>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <returns>The <see cref="T:Macro.Desktop.XKeys"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.FormatException">Thrown if <paramref name="s"/> is not a valid <see cref="T:Macro.Desktop.XKeys"/> string representation.</exception>
        </member>
        <member name="M:Macro.Desktop.XKeysConverter.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.XKeys"/> value using the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> for which the string should be parsed.</param>
            <returns>The <see cref="T:Macro.Desktop.XKeys"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.FormatException">Thrown if <paramref name="s"/> is not a valid <see cref="T:Macro.Desktop.XKeys"/> string representation.</exception>
        </member>
        <member name="M:Macro.Desktop.XKeysConverter.ParseInvariant(System.String)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.XKeys"/> value using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <returns>The <see cref="T:Macro.Desktop.XKeys"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.FormatException">Thrown if <paramref name="s"/> is not a valid <see cref="T:Macro.Desktop.XKeys"/> string representation.</exception>
        </member>
        <member name="M:Macro.Desktop.XKeysConverter.TryParse(System.String,Macro.Desktop.XKeys@)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.XKeys"/> value using the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture">current thread's UI CultureInfo</see>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <param name="result">The <see cref="T:Macro.Desktop.XKeys"/> value parsed from <paramref name="s"/> if the string was successfully parsed; <see cref="F:Macro.Desktop.XKeys.None"/> otherwise.</param>
            <returns>True if the string was successfully parsed; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.XKeysConverter.TryParse(System.String,System.Globalization.CultureInfo,Macro.Desktop.XKeys@)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.XKeys"/> value using the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> for which the string should be parsed.</param>
            <param name="result">The <see cref="T:Macro.Desktop.XKeys"/> value parsed from <paramref name="s"/> if the string was successfully parsed; <see cref="F:Macro.Desktop.XKeys.None"/> otherwise.</param>
            <returns>True if the string was successfully parsed; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.XKeysConverter.TryParseInvariant(System.String,Macro.Desktop.XKeys@)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.XKeys"/> value using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <param name="result">The <see cref="T:Macro.Desktop.XKeys"/> value parsed from <paramref name="s"/> if the string was successfully parsed; <see cref="F:Macro.Desktop.XKeys.None"/> otherwise.</param>
            <returns>True if the string was successfully parsed; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.XKeysConverter.GetKeyNamesMap(System.Globalization.CultureInfo)">
            <summary>
            Gets the correct localization map for the specified culture.
            </summary>
        </member>
        <member name="M:Macro.Desktop.XKeysConverter.GetKeyValuesMap(System.Globalization.CultureInfo)">
            <summary>
            Gets the correct localization map for the specified culture.
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysConverter.Default">
            <summary>
            Gets the default instance of <see cref="T:Macro.Desktop.XKeysConverter"/>.
            </summary>
            <remarks>
            This is equivalent to calling <see cref="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)"/> for the <see cref="T:Macro.Desktop.XKeys"/> <see cref="T:System.Type"/>.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.XKeys">
            <summary>
            Enumeration of all the (potentially) available keys on a keyboard.
            </summary>
            <remarks>
            <see cref="T:Macro.Desktop.XKeys"/> values are to be interpreted as a single key code in a bitwise combination
            with any number of modifiers (<see cref="F:Macro.Desktop.XKeys.Control"/>, <see cref="F:Macro.Desktop.XKeys.Alt"/> and <see cref="F:Macro.Desktop.XKeys.Shift"/>).
            The key code can be selected by using the <see cref="F:Macro.Desktop.XKeys.KeyCode"/> mask, and the modifiers can
            likewise be selected by using the <see cref="F:Macro.Desktop.XKeys.Modifiers"/> mask.
            </remarks>
        </member>
        <member name="F:Macro.Desktop.XKeys.A">
            <summary>
            The A key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Add">
            <summary>
            The add key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Alt">
            <summary>
            The ALT modifier.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Apps">
            <summary>
            The application key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Attn">
            <summary>
            The ATTN key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.B">
            <summary>
            The B key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Backspace">
            <summary>
            The BACKSPACE key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.BrowserBack">
            <summary>
            The browser back key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.BrowserFavorites">
            <summary>
            The browser favorites key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.BrowserForward">
            <summary>
            The browser forward key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.BrowserHome">
            <summary>
            The browser home key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.BrowserRefresh">
            <summary>
            The browser refresh key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.BrowserSearch">
            <summary>
            The browser search key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.BrowserStop">
            <summary>
            The browser stop key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.C">
            <summary>
            The C key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Cancel">
            <summary>
            The CANCEL key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.CapsLock">
            <summary>
            The CAPS LOCK key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Clear">
            <summary>
            The CLEAR key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Control">
            <summary>
            The CTRL modifier.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.ControlKey">
            <summary>
            The CTRL key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Crsel">
            <summary>
            The CRSEL key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.D">
            <summary>
            The D key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Digit0">
            <summary>
            The 0 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Digit1">
            <summary>
            The 1 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Digit2">
            <summary>
            The 2 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Digit3">
            <summary>
            The 3 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Digit4">
            <summary>
            The 4 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Digit5">
            <summary>
            The 5 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Digit6">
            <summary>
            The 6 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Digit7">
            <summary>
            The 7 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Digit8">
            <summary>
            The 8 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Digit9">
            <summary>
            The 9 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Decimal">
            <summary>
            The decimal key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Delete">
            <summary>
            The DELETE key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Divide">
            <summary>
            The divide key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Down">
            <summary>
            The DOWN ARROW key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.E">
            <summary>
            The E key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.End">
            <summary>
            The END key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Enter">
            <summary>
            The ENTER key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.EraseEof">
            <summary>
            The ERASE EOF key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Escape">
            <summary>
            The ESCAPE key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Execute">
            <summary>
            The EXECUTE key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Exsel">
            <summary>
            The EXSEL key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F">
            <summary>
            The F key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F1">
            <summary>
            The F1 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F2">
            <summary>
            The F2 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F3">
            <summary>
            The F3 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F4">
            <summary>
            The F4 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F5">
            <summary>
            The F5 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F6">
            <summary>
            The F6 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F7">
            <summary>
            The F7 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F8">
            <summary>
            The F8 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F9">
            <summary>
            The F9 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F10">
            <summary>
            The F10 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F11">
            <summary>
            The F11 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F12">
            <summary>
            The F12 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F13">
            <summary>
            The F13 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F14">
            <summary>
            The F14 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F15">
            <summary>
            The F15 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F16">
            <summary>
            The F16 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F17">
            <summary>
            The F17 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F18">
            <summary>
            The F18 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F19">
            <summary>
            The F19 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F20">
            <summary>
            The F20 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F21">
            <summary>
            The F21 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F22">
            <summary>
            The F22 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F23">
            <summary>
            The F23 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.F24">
            <summary>
            The F24 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.G">
            <summary>
            The G key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.H">
            <summary>
            The H key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Help">
            <summary>
            The HELP key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Home">
            <summary>
            The HOME key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.I">
            <summary>
            The I key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.ImeAccept">
            <summary>
            The IME accept key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.ImeConvert">
            <summary>
            The IME convert key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.ImeFinalMode">
            <summary>
            The IME final mode key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.ImeMode1">
            <summary>
            The IME mode 1 key (Kana or Hangul mode)
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.ImeMode3">
            <summary>
            The IME mode 3 key (Junja mode).
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.ImeMode5">
            <summary>
            The IME mode 5 key (Kanji or Hanja mode).
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.ImeModeChange">
            <summary>
            The IME mode change key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.ImeNonConvert">
            <summary>
            The IME non convert key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Insert">
            <summary>
            The INSERT key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.J">
            <summary>
            The J key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.K">
            <summary>
            The K key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.KeyCode">
            <summary>
            The key code bit mask.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.L">
            <summary>
            The L key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.LaunchApplication1">
            <summary>
            The launch application 1 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.LaunchApplication2">
            <summary>
            The launch application 2 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.LaunchMail">
            <summary>
            The launch mail application key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.LeftMouseButton">
            <summary>
            The left mouse button (mouse button 1).
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.LeftControlKey">
            <summary>
            The left CTRL key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Left">
            <summary>
            The LEFT ARROW key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.LineFeed">
            <summary>
            The LINE FEED key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.LeftShiftKey">
            <summary>
            The left SHIFT key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.LeftAltKey">
            <summary>
            The left ALT key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.LeftWinKey">
            <summary>
            The left Windows key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.M">
            <summary>
            The M key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.MiddleMouseButton">
            <summary>
            The middle mouse button (mouse button 3).
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.MediaNextTrack">
            <summary>
            The media player next track key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.MediaPlayPause">
            <summary>
            The media player play/pause key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.MediaPreviousTrack">
            <summary>
            The media player previous track key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.MediaStop">
            <summary>
            The media player stop key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.AltKey">
            <summary>
            The ALT key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Modifiers">
            <summary>
            The modifiers bit mask.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Multiply">
            <summary>
            The multiply key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.N">
            <summary>
            The N key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.None">
            <summary>
            Represents no key (the empty value).
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.NumLock">
            <summary>
            The NUM LOCK key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.NumPad0">
            <summary>
            The 0 key on the number pad.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.NumPad1">
            <summary>
            The 1 key on the number pad.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.NumPad2">
            <summary>
            The 2 key on the number pad.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.NumPad3">
            <summary>
            The 3 key on the number pad.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.NumPad4">
            <summary>
            The 4 key on the number pad.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.NumPad5">
            <summary>
            The 5 key on the number pad.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.NumPad6">
            <summary>
            The 6 key on the number pad.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.NumPad7">
            <summary>
            The 7 key on the number pad.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.NumPad8">
            <summary>
            The 8 key on the number pad.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.NumPad9">
            <summary>
            The 9 key on the number pad.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.O">
            <summary>
            The O key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Oem8">
            <summary>
            The OEM 8 key (keycode 0xDF).
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.OemBackslash">
            <summary>
            The OEM backslash key on a typical U.S. keyboard layout (OEM 102 key).
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.OemClear">
            <summary>
            The OEM clear key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.OemCloseBrackets">
            <summary>
            The OEM close brackets key on a typical U.S. keyboard layout (OEM 6 key).
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.OemComma">
            <summary>
            The OEM comma key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.OemMinus">
            <summary>
            The OEM minus key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.OemOpenBrackets">
            <summary>
            The OEM open brackets key on a typical U.S. keyboard layout (OEM 4 key).
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.OemPeriod">
            <summary>
            The OEM period key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.OemPipe">
            <summary>
            The OEM pipe key on a typical U.S. keyboard layout (OEM 5 key).
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.OemPlus">
            <summary>
            The OEM plus key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.OemQuestion">
            <summary>
            The OEM question mark key on a typical U.S. keyboard layout (OEM 2 key).
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.OemQuotes">
            <summary>
            The OEM quotes key on a typical U.S. keyboard layout (OEM 7 key).
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.OemSemicolon">
            <summary>
            The OEM semicolon key on a typical U.S. keyboard layout (OEM 1 key).
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.OemTilde">
            <summary>
            The OEM tilde key on a typical U.S. keyboard layout (OEM 3 key).
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.P">
            <summary>
            The P key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Pa1">
            <summary>
            The PA1 key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.PageDown">
            <summary>
            The PAGE DOWN key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.PageUp">
            <summary>
            The PAGE UP key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Pause">
            <summary>
            The PAUSE key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Play">
            <summary>
            The PLAY key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Print">
            <summary>
            The PRINT key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.PrintScreen">
            <summary>
            The PRINT SCREEN key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.ProcessKey">
            <summary>
            The PROCESS KEY key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Q">
            <summary>
            The Q key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.R">
            <summary>
            The R key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.RightMouseButton">
            <summary>
            The right mouse button (mouse button 2).
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.RightControlKey">
            <summary>
            The right CTRL key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Right">
            <summary>
            The RIGHT ARROW key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.RightAltKey">
            <summary>
            The right ALT key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.RightShiftKey">
            <summary>
            The right SHIFT key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.RightWinKey">
            <summary>
            The right Windows key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.S">
            <summary>
            The S key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.ScrollLock">
            <summary>
            The SCROLL LOCK key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Select">
            <summary>
            The SELECT key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.SelectMedia">
            <summary>
            The select media key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Separator">
            <summary>
            The separator key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Shift">
            <summary>
            The SHIFT modifier.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.ShiftKey">
            <summary>
            The SHIFT key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Space">
            <summary>
            The SPACEBAR key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Subtract">
            <summary>
            The subtract key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.T">
            <summary>
            The T key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Tab">
            <summary>
            The TAB key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.U">
            <summary>
            The U key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Up">
            <summary>
            The UP ARROW key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.V">
            <summary>
            The V key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.VolumeDown">
            <summary>
            The volume down key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.VolumeMute">
            <summary>
            The volume mute key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.VolumeUp">
            <summary>
            The volume up key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.W">
            <summary>
            The W key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.X">
            <summary>
            The X key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.XMouseButton1">
            <summary>
            The first X mouse button (mouse button 4).
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.XMouseButton2">
            <summary>
            The second X mouse button (mouse button 5).
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Y">
            <summary>
            The Y key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Z">
            <summary>
            The Z key.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XKeys.Zoom">
            <summary>
            The ZOOM key.
            </summary>
        </member>
        <member name="T:Macro.Desktop.WorkspaceCollection">
            <summary>
            Represents the collection of <see cref="T:Macro.Desktop.Workspace"/> objects for a given desktop window.
            </summary>
        </member>
        <member name="M:Macro.Desktop.WorkspaceCollection.#ctor(Macro.Desktop.DesktopWindow)">
            <summary>
            Constructor
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Macro.Desktop.WorkspaceCollection.AddNew(Macro.Desktop.IApplicationComponent,System.String)">
            <summary>
            Opens a new workspace.
            </summary>
            <param name="component"></param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.WorkspaceCollection.AddNew(Macro.Desktop.IApplicationComponent,System.String,System.String)">
            <summary>
            Opens a new workspace.
            </summary>
            <param name="component"></param>
            <param name="title"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.WorkspaceCollection.AddNew(Macro.Desktop.WorkspaceCreationArgs)">
            <summary>
            Opens a new workspace.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.WorkspaceCollection.OnItemActivationChangedInternal(Macro.Common.Utilities.ItemEventArgs{Macro.Desktop.Workspace})">
            <summary>
            Called when a <see cref="T:Macro.Desktop.Workspace"/> item's <see cref="E:Macro.Desktop.DesktopObject.InternalActiveChanged"/> event
            has fired.
            </summary>
        </member>
        <member name="M:Macro.Desktop.WorkspaceCollection.OnItemClosed(Macro.Desktop.ClosedItemEventArgs{Macro.Desktop.Workspace})">
            <summary>
            Called when a <see cref="T:Macro.Desktop.Workspace"/> item's <see cref="E:Macro.Desktop.DesktopObject.Closed"/> event
            has fired.
            </summary>
        </member>
        <member name="P:Macro.Desktop.WorkspaceCollection.ActiveWorkspace">
            <summary>
            Gets the currently active workspace, or null if there are no workspaces in the collection.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Tools.IToolSet">
            <summary>
            Defines the external interface to a tool set, which manages a set of tools.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tools.IToolSet.Find``1">
            <summary>
            Finds the tool of the specified type.
            </summary>
            <typeparam name="TTool"></typeparam>
            <returns>The instance of the tool of the specified type, or null if no such exists.</returns>
        </member>
        <member name="P:Macro.Desktop.Tools.IToolSet.Tools">
            <summary>
            Gets the tools contained in this tool set.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tools.IToolSet.Actions">
            <summary>
            Returns the union of all actions defined by all tools in this tool set.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.ValidateGreaterThanAttribute">
            <summary>
            Validates that a property value is greater than a reference value.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.ValidateCompareAttribute">
            <summary>
            Abstract base class for comparison validations.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateCompareAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="referenceProperty">The name of another property to compare against.</param>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateCompareAttribute.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="referenceValue">A value to compare against.</param>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateCompareAttribute.#ctor(System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="referenceValue">A value to compare against.</param>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateCompareAttribute.#ctor(System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="referenceValue">A value to compare against.</param>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateCompareAttribute.CreateRule(System.Reflection.PropertyInfo,Macro.Desktop.Validation.ValidationAttribute.PropertyGetter,System.String)">
            <summary>
            Factory method to create an <see cref="T:Macro.Desktop.Validation.IValidationRule"/> based on this attribute.
            </summary>
            <param name="property">The property on which the attribute is applied.</param>
            <param name="getter">A delegate that, when invoked, returns the current value of the property.</param>
            <param name="customMessage">A custom message to be displayed, or null if none was supplied.</param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateCompareAttribute.GetCompareSign">
            <summary>
            Gets the sign of the comparison.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Validation.ValidateCompareAttribute.Inclusive">
            <summary>
            Gets or sets whether or not the comparison should be inclusive.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateGreaterThanAttribute.#ctor(System.String)">
            <summary>
            Constructor that accepts the name of a reference property.
            </summary>
            <param name="referenceProperty">The name of a property on the component that provides a reference value.</param>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateGreaterThanAttribute.#ctor(System.Int32)">
            <summary>
            Constructor that accepts a constant reference value.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateGreaterThanAttribute.#ctor(System.Single)">
            <summary>
            Constructor that accepts a constant reference value.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateGreaterThanAttribute.#ctor(System.Double)">
            <summary>
            Constructor that accepts a constant reference value.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateGreaterThanAttribute.GetCompareSign">
            <summary>
            Returns 1.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IconSet">
            <summary>
            Represents a set of icon resources.
            </summary>
            <remarks>
            <para>
            The icon resources should be provided in several sizes so that different displays can be accomodated without
            having to scale the images:
            </para>
            <list type="table">
            <listheader><size><see cref="T:Macro.Desktop.IconSize"/></size><res>Resolution</res></listheader>
            <item><size><see cref="F:Macro.Desktop.IconSize.Small"/></size><res>24 x 24</res></item>
            <item><size><see cref="F:Macro.Desktop.IconSize.Medium"/></size><res>48 x 48</res></item>
            <item><size><see cref="F:Macro.Desktop.IconSize.Large"/></size><res>64 x 64</res></item>
            </list>
            </remarks>
        </member>
        <member name="M:Macro.Desktop.IconSet.#ctor(Macro.Desktop.IconScheme,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.Desktop.IconSet"/>.
            </summary>
            <remarks>
            The use of icon schemes has been deprecated in favour of extensible application GUI themes.
            </remarks>
            <param name="scheme">The scheme of this icon set.</param>
            <param name="smallIcon">The resource name of the icon to be used at small resolutions (around 24 x 24).</param>
            <param name="mediumIcon">The resource name of the icon to be used at medium resolutions (around 48 x 48).</param>
            <param name="largeIcon">The resource name of the icon to be used at large resolutions (around 64 x 64).</param>
        </member>
        <member name="M:Macro.Desktop.IconSet.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.Desktop.IconSet"/>.
            </summary>
            <param name="smallIcon">The resource name of the icon to be used at small resolutions (around 24 x 24).</param>
            <param name="mediumIcon">The resource name of the icon to be used at medium resolutions (around 48 x 48).</param>
            <param name="largeIcon">The resource name of the icon to be used at large resolutions (around 64 x 64).</param>
        </member>
        <member name="M:Macro.Desktop.IconSet.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.Desktop.IconSet"/>.
            </summary>
            <param name="icon">The resource name of the icon to be used at all resolutions.</param>
        </member>
        <member name="M:Macro.Desktop.IconSet.CreateIcon(Macro.Desktop.IconSize,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Creates an icon using the specified icon resource and resource resolver.
            </summary>
            <remarks>
            The base implementation resolves the specified image resource using the provided
            <paramref name="resourceResolver"/> and deserializes the resource stream into a <see cref="T:System.Drawing.Bitmap"/>.
            </remarks>
            <param name="iconSize">The size of the desired icon.</param>
            <param name="resourceResolver">The resource resolver with which to resolve the requested icon resource.</param>
            <returns>An <see cref="T:System.Drawing.Image"/> constructed from the requested resource.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="resourceResolver"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="resourceResolver"/> was unable to resolve the requested icon resource.</exception>
        </member>
        <member name="M:Macro.Desktop.IconSet.GetIconKey(Macro.Desktop.IconSize,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Gets a string identifier that uniquely identifies the resolved icon, suitable for dictionary keying purposes.
            </summary>
            <remarks>
            The base implementation resolves the specified image resource using the provided
            <paramref name="resourceResolver"/> and returns the resource's fully qualified resource name.
            </remarks>
            <param name="iconSize">The size of the desired icon.</param>
            <param name="resourceResolver">The resource resolver with which to resolve the requested icon resource.</param>
            <returns>A string identifier that uniquely identifies the resolved icon.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="resourceResolver"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="resourceResolver"/> was unable to resolve the requested icon resource.</exception>
        </member>
        <member name="P:Macro.Desktop.IconSet.Scheme">
            <summary>
            Gets the scheme of this icon set.
            </summary>
            <remarks>
            The use of icon schemes has been deprecated in favour of extensible application GUI themes.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.IconSet.Item(Macro.Desktop.IconSize)">
            <summary>
            Gets the name of the resource for the specified <see cref="T:Macro.Desktop.IconSize"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IconSet.SmallIcon">
            <summary>
            Gets the resource name of the icon to be used at small resolutions (around 24 x 24).
            </summary>
        </member>
        <member name="P:Macro.Desktop.IconSet.MediumIcon">
            <summary>
            Gets the resource name of the icon to be used at medium resolutions (around 48 x 48).
            </summary>
        </member>
        <member name="P:Macro.Desktop.IconSet.LargeIcon">
            <summary>
            Gets the resource name of the icon to be used at large resolutions (around 64 x 64).
            </summary>
        </member>
        <member name="T:Macro.Desktop.Tables.DateTableColumn`1">
            <summary>
            Subclass of the <see cref="T:Macro.Desktop.Tables.TableColumn`2"/> class for a nullable DateTime column type.
            The value is formatted as Date only.
            </summary>
            <typeparam name="TItem">The type of item on which the table is based.</typeparam>
        </member>
        <member name="T:Macro.Desktop.Tables.DateTimeTableColumn`1">
            <summary>
            Subclass of the <see cref="T:Macro.Desktop.Tables.TableColumn`2"/> class for a nullable DateTime column type.
            The value is formatted as DateTime.
            </summary>
            <typeparam name="TItem">The type of item on which the table is based.</typeparam>
        </member>
        <member name="M:Macro.Desktop.Tables.DateTimeTableColumn`1.#ctor(System.String,Macro.Desktop.Tables.TableColumn{`0,System.Nullable{System.DateTime}}.GetColumnValueDelegate{`0,System.Nullable{System.DateTime}})">
            <summary>
            Constructs a read-only single-cellrow DateTime table column.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.DateTimeTableColumn`1.#ctor(System.String,Macro.Desktop.Tables.TableColumn{`0,System.Nullable{System.DateTime}}.GetColumnValueDelegate{`0,System.Nullable{System.DateTime}},System.Single)">
            <summary>
            Constructs a read-only single-cellrow DateTime table column with specific width factor.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
            <param name="widthFactor">A weighting factor that is applied to the width of the column.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.DateTimeTableColumn`1.#ctor(System.String,System.String,Macro.Desktop.Tables.TableColumn{`0,System.Nullable{System.DateTime}}.GetColumnValueDelegate{`0,System.Nullable{System.DateTime}})">
            <summary>
            Constructs a read-only single-cellrow DateTime table column.
            </summary>
            <param name="columnName">The identifying name of the column.</param>
            <param name="columnDisplayName">The display name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.DateTimeTableColumn`1.#ctor(System.String,System.String,Macro.Desktop.Tables.TableColumn{`0,System.Nullable{System.DateTime}}.GetColumnValueDelegate{`0,System.Nullable{System.DateTime}},System.Single)">
            <summary>
            Constructs a read-only single-cellrow DateTime table column with specific width factor.
            </summary>
            <param name="columnName">The identifying name of the column.</param>
            <param name="columnDisplayName">The display name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
            <param name="widthFactor">A weighting factor that is applied to the width of the column.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.DateTableColumn`1.#ctor(System.String,Macro.Desktop.Tables.TableColumn{`0,System.Nullable{System.DateTime}}.GetColumnValueDelegate{`0,System.Nullable{System.DateTime}})">
            <summary>
            Constructs a read-only single-cellrow DateTime table column.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.DateTableColumn`1.#ctor(System.String,Macro.Desktop.Tables.TableColumn{`0,System.Nullable{System.DateTime}}.GetColumnValueDelegate{`0,System.Nullable{System.DateTime}},System.Single)">
            <summary>
            Constructs a read-only single-cellrow DateTime table column with specific width factor.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
            <param name="widthFactor">A weighting factor that is applied to the width of the column.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.DateTableColumn`1.#ctor(System.String,System.String,Macro.Desktop.Tables.TableColumn{`0,System.Nullable{System.DateTime}}.GetColumnValueDelegate{`0,System.Nullable{System.DateTime}})">
            <summary>
            Constructs a read-only single-cellrow DateTime table column.
            </summary>
            <param name="columnName">The identifying name of the column.</param>
            <param name="columnDisplayName">The display name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.DateTableColumn`1.#ctor(System.String,System.String,Macro.Desktop.Tables.TableColumn{`0,System.Nullable{System.DateTime}}.GetColumnValueDelegate{`0,System.Nullable{System.DateTime}},System.Single)">
            <summary>
            Constructs a read-only single-cellrow DateTime table column with specific width factor.
            </summary>
            <param name="columnName">The identifying name of the column.</param>
            <param name="columnDisplayName">The display name of the column.</param>
            <param name="valueGetter">A delegate that accepts an item and pulls the column value from the item.</param>
            <param name="widthFactor">A weighting factor that is applied to the width of the column.</param>
        </member>
        <member name="T:Macro.Desktop.IShelfHost">
            <summary>
            Extends <see cref="T:Macro.Desktop.IApplicationComponentHost"/> with functionality specific to shelves.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IGuiToolkit">
            <summary>
            Defines the interface for an extension of <see cref="T:Macro.Desktop.GuiToolkitExtensionPoint"/>.
            <remarks>
            One extension must exist or the desktop application will not run.
            The purpose of the extension is to bootstrap a GUI subsystem such as Windows Forms or GTK.
            </remarks>
            </summary>
        </member>
        <member name="M:Macro.Desktop.IGuiToolkit.Run">
            <summary>
            Initializes the GUI toolkit and starts the internal message loop,
            blocking until <see cref="M:Macro.Desktop.IGuiToolkit.Terminate"/> is called.
            </summary>
            <remarks>
            This method must block until <see cref="M:Macro.Desktop.IGuiToolkit.Terminate"/> is called.  This method must also ensure
            that the <see cref="E:Macro.Desktop.IGuiToolkit.Started"/> event is raised from within the message loop of the GUI system.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.IGuiToolkit.Terminate">
            <summary>
            Terminates the GUI toolkit, shutting down the internal message loop and releasing the
            blocked <see cref="M:Macro.Desktop.IGuiToolkit.Run"/> method.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IGuiToolkit.ToolkitID">
            <summary>
            Gets the ID of the toolkit.
            </summary>
        </member>
        <member name="E:Macro.Desktop.IGuiToolkit.Started">
            <summary>
            Occurs when the toolkit has successfully started (e.g. its message loop is active).
            </summary>
        </member>
        <member name="T:Macro.Desktop.IWorkspaceDialogBoxView">
            <summary>
            Defines the interface to a view for a <see cref="T:Macro.Desktop.WorkspaceDialogBox"/> object.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.GroupHint">
            <summary>
            The GroupHint is used to determine a reasonably appropriate point in the 
            action model to put an action that does not yet exist in the stored model.
            </summary>
            <remarks>
            <para>
            The action (call it Left-Hand Action) whose position in the store is to be 
            determined is compared with each action in the store (Right-Hand Action).
            The comparison of the Left-Hand Action to the Right-Hand Action is given
            a score.  The score is based on the GroupHint and the algorithm works 
            as follows:
            </para>
            <para>
            	LHS										RHS										Score
            	-----------------------------------------------------------------------------------------
            1.	Tools.Image.Manipulation.Zoom			""										1
            2.	Tools.Image.Manipulation.Zoom			Tools.Image.Manipulation.Pan			4
            3.	Tools.Image.Manipulation.Zoom			DisplaySets								0
            4.  ""										""										1
            5.  ""										DisplaySets								0
            6.	Tools.Image.Manipulation.Pan			Tools.Image.Manipulation.Zoom			-4
            </para>
            <para>
            A brief explanation of the logic:
            <list type="bullet">
            <item>
            For backward compatibility, actions with a non-empty GroupHint, when compared to an 
            existing action in the store whose GroupHint="", the score is 1 because it is considered
            a better match than 2 actions whose GroupHints are non-empty and are completely different.
            </item>
            <item>
            Actions with GroupHints that have similar components (separated by '.') are given a score
            equal to the number of (consecutive) matching components + 1.  The +1 accounts for the fact 
            that any number of equal components is a better score than the first example, whose score is 1.
            When all components in LHS are a match, but RHS has more components, the score is negative (less).
            When all components in RHS are a match, meaning LHS has at least the same number of components,
            the score is positive (greater).  Otherwise, the sign of the score is determined by examining the
            first non-matching component (same position in LHS and RHS) encountered and performing a string
            comparison of the two.  If the component in LHS is "less" than RHS, the return value is negative (less).
            </item>
             <item>
            Actions with completely different components are given an automatic score of zero (0).
            Two actions with GroupHints = "" are considered equal, so a score of 1 is given.
            </item>
            <item>
            In the case where an existing action with an empty GroupHint is being matched to a non-empty
            GroupHint, the LHS cannot be considered at all similar to RHS and the score is automatically zero (0).
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Actions.GroupHint.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.GroupHint.MatchScore(Macro.Desktop.Actions.GroupHint)">
            <summary>
            Performs matching based on the algorithm described in <see cref="T:Macro.Desktop.Actions.GroupHint"/>'s class summary.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.GroupHint.Hint">
            <summary>
            Gets the hint path.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.GroupHint.Components">
            <summary>
            Gets an array containing the components of the hint path.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Shelf">
            <summary>
            Represents a shelf within a desktop window.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IShelf">
            <summary>
            Defines the public interface to a <see cref="T:Macro.Desktop.Shelf"/>.
            </summary>
            <remarks>
            This interface exists mainly for backward compatibility.  New application
            code should use the <see cref="T:Macro.Desktop.Shelf"/> class.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.IShelf.Show">
            <summary>
            Makes the shelf visible.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IShelf.Hide">
            <summary>
            Hides the shelf from view.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IShelf.DesktopWindow">
            <summary>
            Gets the desktop window that owns this shelf.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IShelf.Component">
            <summary>
            Gets the hosted component.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IShelf.DisplayHint">
            <summary>
            Gets the current display hint.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Shelf.#ctor(Macro.Desktop.ShelfCreationArgs,Macro.Desktop.DesktopWindow)">
            <summary>
            Constructor.
            </summary>
            <param name="args">Object used to specify how the <see cref="T:Macro.Desktop.Shelf"/> should be created.</param>
            <param name="desktopWindow">The owner window of the <see cref="T:Macro.Desktop.Shelf"/>.</param>
        </member>
        <member name="M:Macro.Desktop.Shelf.Show">
            <summary>
            Makes the shelf visible.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Shelf.Hide">
            <summary>
            Hides the shelf from view.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Shelf.Initialize">
            <summary>
            Starts the hosted component.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Shelf.CanClose">
            <summary>
            Checks if the hosted component can exit.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Shelf.PrepareClose(Macro.Desktop.CloseReason)">
            <summary>
            Gives the hosted component a chance to prepare for a forced exit.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Shelf.Dispose(System.Boolean)">
            <summary>
            Disposes of this object, stopping the hosted component.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Shelf.CreateView">
            <summary>
            Creates a view for this shelf.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macro.Desktop.Shelf.Component">
            <summary>
            Gets the hosted component.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Shelf.DesktopWindow">
            <summary>
            Gets the desktop window that owns this shelf.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Shelf.DisplayHint">
            <summary>
            Gets the current display hint.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Shelf.Macro#Desktop#IShelf#DesktopWindow">
            <summary>
            Gets the owner <see cref="T:Macro.Desktop.IDesktopWindow"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Shelf.ShelfView">
            <summary>
            Gets the view for this object as a <see cref="T:Macro.Desktop.IShelfView"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.ValidateLengthAttribute">
            <summary>
            Validates that the length of a string property is within a specified range.
            </summary>
            <remarks>
            This attribute offers a simpler alternative to the <see cref="T:Macro.Desktop.Validation.ValidateRegexAttribute"/> when
            all you want to do is validate the length of the string.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateLengthAttribute.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateLengthAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateLengthAttribute.CreateRule(System.Reflection.PropertyInfo,Macro.Desktop.Validation.ValidationAttribute.PropertyGetter,System.String)">
            <summary>
            Factory method to create an <see cref="T:Macro.Desktop.Validation.IValidationRule"/> based on this attribute.
            </summary>
            <param name="property">The property on which the attribute is applied.</param>
            <param name="getter">A delegate that, when invoked, returns the current value of the property.</param>
            <param name="customMessage">A custom message to be displayed, or null if none was supplied.</param>
            <returns></returns>
        </member>
        <member name="T:Macro.Desktop.Actions.TooltipAttribute">
            <summary>
            Declares a tooltip message to associate with an action.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.TooltipAttribute.#ctor(System.String,System.String)">
            <summary>
            Attribute constructor.
            </summary>
            <param name="actionID">The logical action identifier to which this attribute applies.</param>
            <param name="tooltip">The tooltip message to associate with the action.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.TooltipAttribute.Apply(Macro.Desktop.Actions.IActionBuildingContext)">
            <summary>
            Sets the <see cref="P:Macro.Desktop.Actions.IAction.Tooltip"/> value for and <see cref="T:Macro.Desktop.Actions.IAction"/> instance,
            via the specified <see cref="T:Macro.Desktop.Actions.IActionBuildingContext"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.TooltipAttribute.TooltipText">
            <summary>
            The tooltip message.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.CheckedStateObserverAttribute">
            <summary>
            Declares an observer binding for the checked state of an action.
            </summary>
            <remarks>
            This attribute causes the checked state of the action specified by the action ID to be
            bound to the state of the specified property on the class to which this attribute applies.
            The property name must refer to a public boolean property on the target class that has get access.
            The change event name must refer to a public event on the class that will fire whenever the state of the property
            changes.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Actions.CheckedStateObserverAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Attribute constructor.
            </summary>
            <param name="actionID">The logical action identifier to which this attribute applies.</param>
            <param name="propertyName">The name of the property to bind to.</param>
            <param name="changeEventName">The name of the property change notification event to bind to.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.CheckedStateObserverAttribute.Apply(Macro.Desktop.Actions.IActionBuildingContext)">
            <summary>
            Binds the <see cref="P:Macro.Desktop.Actions.IClickAction.Checked"/> property and <see cref="E:Macro.Desktop.Actions.IClickAction.CheckedChanged"/> event 
            to the corresponding items on the target object, via the specified <see cref="T:Macro.Desktop.Actions.IActionBuildingContext"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IDialogBoxView">
            <summary>
            Defines the interface to a view for a <see cref="T:Macro.Desktop.DialogBox"/> object.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IDialogBoxView.RunModal">
            <summary>
            Displays the dialog and blocks until the dialog is closed by the user.
            </summary>
            <returns>A result representing the action taken by the user.</returns>
        </member>
        <member name="T:Macro.Desktop.Tables.ITableColumnCollection">
            <summary>
            Defines the interface to the collection of columns in an <see cref="T:Macro.Desktop.Tables.ITable"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IScreenInfoProvider">
            <summary>
            An interface for providers of screen information.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IScreenInfoProvider.GetScreens">
            <summary>
            Gets all the <see cref="T:Macro.Desktop.Screen"/>s in the desktop.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IScreenInfoProvider.VirtualScreen">
            <summary>
            Gets the virtual screen of the entire desktop (all display devices).
            </summary>
        </member>
        <member name="T:Macro.Desktop.ScreenInfoProviderExtensionPoint">
            <summary>
            An extension point for <see cref="T:Macro.Desktop.IScreenInfoProvider"/>s.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Screen">
            <summary>
            Abstract class representing a single screen in the desktop.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Screen.Equals(Macro.Desktop.Screen)">
            <summary>
            Gets whether or not this <see cref="T:Macro.Desktop.Screen"/> object is equivalent to another.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Screen.VirtualScreen">
            <summary>
            Gets the desktop's virtual screen.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Screen.AllScreens">
            <summary>
            Gets an array of all the <see cref="T:Macro.Desktop.Screen"/>s in the desktop.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Screen.BitsPerPixel">
            <summary>
            Gets the number of bits per pixel of the device.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Screen.Bounds">
            <summary>
            Gets the bounds of the screen inside the <see cref="P:Macro.Desktop.Screen.VirtualScreen"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Screen.DeviceName">
            <summary>
            Gets the name of the device.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Screen.IsPrimary">
            <summary>
            Gets whether or not this is the primary screen.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Screen.WorkingArea">
            <summary>
            Gets the area of the <see cref="T:Macro.Desktop.Screen"/> in which an <see cref="T:Macro.Desktop.IDesktopWindow"/> can be maximized.
            </summary>
        </member>
        <member name="T:Macro.Desktop.GalleryComponentViewExtensionPoint">
            <summary>
            Extension point for views of the <see cref="T:Macro.Desktop.GalleryComponent"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IWorkspaceDialogBoxHost">
            <summary>
            Extends <see cref="T:Macro.Desktop.IApplicationComponentHost"/> with functionality specific to workspace dialogs.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ChildComponentHost">
            <summary>
            A host for components that are children of other components.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ChildComponentHost.#ctor(Macro.Desktop.IApplicationComponentHost,Macro.Desktop.IApplicationComponent)">
            <summary>
            Constructor.
            </summary>
            <param name="parentHost">The object that hosts the <paramref name="childComponent"/>'s parent component.</param>
            <param name="childComponent">The child application component being hosted.</param>
        </member>
        <member name="P:Macro.Desktop.ChildComponentHost.DesktopWindow">
            <summary>
            Gets the <see cref="P:Macro.Desktop.ChildComponentHost.DesktopWindow"/> that owns the parent component.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ChildComponentHost.Title">
            <summary>
            Gets the title of the parent host.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Checkable`1">
            <summary>
            Wrapper class for items that are "checkable".
            </summary>
            <typeparam name="TItem">The type of the checkable item.</typeparam>
        </member>
        <member name="M:Macro.Desktop.Checkable`1.#ctor(`0,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="item">The checkable item.</param>
            <param name="isChecked">The initial check state of the item.</param>
        </member>
        <member name="M:Macro.Desktop.Checkable`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            The initial check state is false by default.
            </remarks>
            <param name="item">The checkable item.</param>
        </member>
        <member name="P:Macro.Desktop.Checkable`1.Item">
            <summary>
            Gets or sets the checkable item.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Checkable`1.IsChecked">
            <summary>
            Gets or sets the check state of the item.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.IConfigurationPageProvider">
            <summary>
            Rather than making each <see cref="T:Macro.Desktop.Configuration.IConfigurationPage"/> a separate
            extension of <see cref="T:Macro.Desktop.Configuration.ConfigurationPageProviderExtensionPoint"/>, we
            use this interface so that related pages can be grouped together.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.IConfigurationPageProvider.GetPages">
            <summary>
            Gets all the <see cref="T:Macro.Desktop.Configuration.IConfigurationPage"/>s for this provider.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.AbstractAction">
            <summary>
            A view-less implementation of <see cref="T:Macro.Desktop.Actions.IAction"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.AbstractAction.Create(Macro.Desktop.Actions.IAction)">
            <summary>
            Creates an <see cref="T:Macro.Desktop.Actions.AbstractAction"/> from a concrete <see cref="T:Macro.Desktop.Actions.IAction"/>.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="P:Macro.Desktop.Actions.AbstractAction.Label">
            <summary>
            <see cref="P:Macro.Desktop.Actions.AbstractAction.Label"/> is currently not persisted in the action model.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.AbstractAction.Tooltip">
            <summary>
            <see cref="P:Macro.Desktop.Actions.AbstractAction.Tooltip"/> is currently not persisted in the action model.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.AbstractAction.IconSet">
            <summary>
            <see cref="P:Macro.Desktop.Actions.AbstractAction.IconSet"/> is currently not persisted in the action model.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.AbstractAction.Permissible">
            <summary>
            This value is always determined at runtime based on the user's access permissions.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.AbstractAction.ResourceResolver">
            <summary>
            This value is always based on the assembly defining the action.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.AbstractAction.Macro#Desktop#Actions#IAction#Persistent">
            <summary>
            This value is always true, otherwise there's point in configuring it's position/properties in the persisted action model.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.AbstractAction.Macro#Desktop#Actions#IAction#Enabled">
            <summary>
            This value is always dynamically tool-controlled and may not be overriden by the persisted action model.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Actions.AbstractAction.Macro#Desktop#Actions#IAction#EnabledChanged">
            <summary>
            This event never fires becauses <see cref="!:Enabled"/> is not persistable.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.AbstractAction.Macro#Desktop#Actions#IAction#Visible">
            <summary>
            This value is always dynamically tool-controlled and may not be overriden by the persisted action model.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Actions.AbstractAction.Macro#Desktop#Actions#IAction#VisibleChanged">
            <summary>
            This event never fires becauses <see cref="!:Visible"/> is not persistable.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.AbstractAction.AbstractClickAction">
            <summary>
            A view-less implementation of <see cref="T:Macro.Desktop.Actions.IClickAction"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.AbstractAction.AbstractClickAction.Macro#Desktop#Actions#IClickAction#Click">
            <summary>
            This method invokes behaviour that is performed by the tool and may not be overriden by the persisted action model.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.AbstractAction.AbstractClickAction.Macro#Desktop#Actions#IClickAction#Checked">
            <summary>
            This value is always dynamically tool-controlled and may not be overriden by the persisted action model.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Actions.AbstractAction.AbstractClickAction.Macro#Desktop#Actions#IClickAction#CheckedChanged">
            <summary>
            This event never fires becauses <see cref="!:Checked"/> is not persistable.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.AbstractAction.AbstractClickAction.Macro#Desktop#Actions#IClickAction#IsCheckAction">
            <summary>
            This value describes behaviour that is prescribed by the tool and may not be overriden by the persisted action model.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.AbstractAction.AbstractClickAction.Macro#Desktop#Actions#IClickAction#CheckParents">
            <summary>
            This value describes behaviour that is prescribed by the tool and may not be overriden by the persisted action model.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ApplicationThemeManager">
            <summary>
            Manages the <see cref="T:Macro.Desktop.ApplicationTheme"/>s available in the application based on the enabled <see cref="T:Macro.Desktop.IApplicationThemeResourceProvider"/> extensions in the plugins.
            </summary>
            <remarks>
            <para>
            In order to provide for individual plugins providing all or part of a theme, the <see cref="T:Macro.Desktop.ApplicationTheme"/>
            class is not designed to be directly extensible. Instead, plugins should implement <see cref="T:Macro.Desktop.IApplicationThemeResourceProvider"/>s
            for the desired theme ID via the <see cref="T:Macro.Desktop.ApplicationThemeResourceProviderExtensionPoint"/>.
            The <see cref="T:Macro.Desktop.ApplicationThemeManager"/> will automatically combine all <see cref="T:Macro.Desktop.IApplicationThemeResourceProvider"/> extensions together
            by matching ID to produce appropriate <see cref="T:Macro.Desktop.ApplicationTheme"/> instances.
            </para>
            <para>
            In the event that multiple <see cref="T:Macro.Desktop.IApplicationThemeResourceProvider"/>s try to provide for the same requested theme resource,
            extension ordering will determine the result of the request operation.
            </para>
            <para>
            All explicitly defined application themes must have a non-empty theme ID. The empty theme ID maps to the <see cref="P:Macro.Desktop.ApplicationThemeManager.DefaultTheme"/>, which
            provides a pass through to the original resources defined in the respective plugin assemblies, as well as the basic blue colour scheme.
            </para>
            </remarks>
            <seealso cref="T:Macro.Desktop.ApplicationTheme"/>
            <seealso cref="T:Macro.Desktop.ApplicationThemeResourceProviderExtensionPoint"/>
            <seealso cref="T:Macro.Desktop.IApplicationThemeResourceProvider"/>
        </member>
        <member name="M:Macro.Desktop.ApplicationThemeManager.IsThemeDefined(System.String)">
            <summary>
            Checks whether or not an <see cref="T:Macro.Desktop.ApplicationTheme"/> with the given ID is available in the installation.
            </summary>
            <param name="id">The ID of the <see cref="T:Macro.Desktop.ApplicationTheme"/> to be checked.</param>
            <returns>True if an <see cref="T:Macro.Desktop.ApplicationTheme"/> with the given ID is available; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationThemeManager.GetTheme(System.String)">
            <summary>
            Gets the <see cref="T:Macro.Desktop.ApplicationTheme"/> with the given ID.
            </summary>
            <param name="id">The ID of the <see cref="T:Macro.Desktop.ApplicationTheme"/> to be retrieved.</param>
            <returns>The <see cref="T:Macro.Desktop.ApplicationTheme"/> with the given ID, or NULL if an <see cref="T:Macro.Desktop.ApplicationTheme"/> with the given ID is not available.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationThemeManager.HasResource(System.String)">
            <summary>
            Checks whether or not the <see cref="P:Macro.Desktop.ApplicationThemeManager.CurrentTheme"/> provides a themed replacement for the specified resource name.
            </summary>
            <param name="resourceFullName">The fully-qualified name of the resource being requested.</param>
            <returns>True if the <see cref="P:Macro.Desktop.ApplicationThemeManager.CurrentTheme"/> provides a themed replacement; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationThemeManager.HasResource(System.String,System.Reflection.Assembly)">
            <summary>
            Checks whether or not the <see cref="P:Macro.Desktop.ApplicationThemeManager.CurrentTheme"/> provides a themed replacement for the specified resource name.
            </summary>
            <param name="resourceFullName">The fully-qualified name of the resource being requested.</param>
            <param name="originalAssemblyHint">The original assembly in which the resource was defined, if known. May be NULL if unknown.</param>
            <returns>True if the <see cref="P:Macro.Desktop.ApplicationThemeManager.CurrentTheme"/> provides a themed replacement; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationThemeManager.OpenResource(System.String)">
            <summary>
            Opens the themed replacement for the specified resource name provided by the <see cref="P:Macro.Desktop.ApplicationThemeManager.CurrentTheme"/> as a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="resourceFullName">The fully-qualified name of the resource being requested.</param>
            <returns>A new <see cref="T:System.IO.Stream"/> for the resource if the <see cref="P:Macro.Desktop.ApplicationThemeManager.CurrentTheme"/> provides a themed replacement; NULL otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationThemeManager.OpenResource(System.String,System.Reflection.Assembly)">
            <summary>
            Opens the themed replacement for the specified resource name provided by the <see cref="P:Macro.Desktop.ApplicationThemeManager.CurrentTheme"/> as a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="resourceFullName">The fully-qualified name of the resource being requested.</param>
            <param name="originalAssemblyHint">The original assembly in which the resource was defined, if known. May be NULL if unknown.</param>
            <returns>A new <see cref="T:System.IO.Stream"/> for the resource if the <see cref="P:Macro.Desktop.ApplicationThemeManager.CurrentTheme"/> provides a themed replacement; NULL otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationThemeManager.OpenImage(System.String)">
            <summary>
            Opens the themed replacement for the specified image resource provided by the <see cref="P:Macro.Desktop.ApplicationThemeManager.CurrentTheme"/> as an <see cref="T:System.Drawing.Image"/>.
            </summary>
            <param name="resourceFullName">The fully-qualified name of the image resource being requested.</param>
            <returns>A new <see cref="T:System.Drawing.Image"/> for the resource if the <see cref="P:Macro.Desktop.ApplicationThemeManager.CurrentTheme"/> provides a themed replacement; NULL otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationThemeManager.OpenImage(System.String,System.Reflection.Assembly)">
            <summary>
            Opens the themed replacement for the specified image resource provided by the <see cref="P:Macro.Desktop.ApplicationThemeManager.CurrentTheme"/> as an <see cref="T:System.Drawing.Image"/>.
            </summary>
            <param name="resourceFullName">The fully-qualified name of the image resource being requested.</param>
            <param name="originalAssemblyHint">The original assembly in which the image resource was defined, if known. May be NULL if unknown.</param>
            <returns>A new <see cref="T:System.Drawing.Image"/> for the resource if the <see cref="P:Macro.Desktop.ApplicationThemeManager.CurrentTheme"/> provides a themed replacement; NULL otherwise.</returns>
        </member>
        <member name="P:Macro.Desktop.ApplicationThemeManager.CurrentTheme">
            <summary>
            Gets or sets the current <see cref="T:Macro.Desktop.ApplicationTheme"/> in use by the desktop application framework.
            </summary>
            <remarks>
            This property is a synonym for <see cref="P:Macro.Desktop.Application.CurrentUITheme"/>.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.ApplicationThemeManager.CurrentThemeId">
            <summary>
            Gets or sets the current <see cref="T:Macro.Desktop.ApplicationTheme"/> ID for the desktop application framework.
            </summary>
            <remarks>
            When reading this property, the value returned will be the ID of the current <see cref="T:Macro.Desktop.ApplicationTheme"/> in use by the desktop application framework.
            When writing to this property, the current <see cref="T:Macro.Desktop.ApplicationTheme"/> will be set to the defined theme with the matching ID, or the default theme if there are no matching themes.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.ApplicationThemeManager.DefaultTheme">
            <summary>
            Gets an <see cref="T:Macro.Desktop.ApplicationTheme"/> representing the default application style.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationThemeManager.Themes">
            <summary>
            Gets a collection of <see cref="T:Macro.Desktop.ApplicationTheme"/>s available in the installation.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ApplicationTheme">
            <summary>
            Provides GUI element style information so as to provide a consistent look and feel for the application.
            The information includes alternative resource graphics and a matching colour scheme.
            </summary>
            <remarks>
            Individual instances of <see cref="T:Macro.Desktop.ApplicationTheme"/> are managed by the <see cref="T:Macro.Desktop.ApplicationThemeManager"/>.
            </remarks>
            <seealso cref="T:Macro.Desktop.ApplicationThemeManager"/>
        </member>
        <member name="M:Macro.Desktop.ApplicationTheme.#ctor(System.String,System.Collections.Generic.IEnumerable{Macro.Desktop.IApplicationThemeResourceProvider})">
            <summary>
            Initializes a new <see cref="T:Macro.Desktop.ApplicationTheme"/>.
            </summary>
            <param name="id">The ID of the <see cref="T:Macro.Desktop.ApplicationTheme"/> to be initialized.</param>
            <param name="providers">A collection of <see cref="T:Macro.Desktop.IApplicationThemeResourceProvider"/> implementations that, combined, provide the style information.</param>
        </member>
        <member name="M:Macro.Desktop.ApplicationTheme.GetIcon">
            <summary>
            Gets the icon for the <see cref="T:Macro.Desktop.ApplicationTheme"/>.
            </summary>
            <returns>A new <see cref="T:System.IO.Stream"/> for the icon.</returns>
            <seealso cref="P:Macro.Desktop.ApplicationTheme.Icon"/>
        </member>
        <member name="M:Macro.Desktop.ApplicationTheme.HasResource(System.String,System.Reflection.Assembly)">
            <summary>
            Checks whether or not the <see cref="T:Macro.Desktop.ApplicationTheme"/> provides a themed replacement for the specified resource name.
            </summary>
            <param name="resourceFullName">The fully-qualified name of the resource being requested.</param>
            <param name="originalAssemblyHint">The original assembly in which the resource was defined, if known. May be NULL if unknown.</param>
            <returns>True if the <see cref="T:Macro.Desktop.ApplicationTheme"/> provides a themed replacement; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationTheme.OpenResource(System.String,System.Reflection.Assembly)">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> to the themed replacement for the specified resource name provided by the <see cref="T:Macro.Desktop.ApplicationTheme"/>.
            </summary>
            <param name="resourceFullName">The fully-qualified name of the resource being requested.</param>
            <param name="originalAssemblyHint">The original assembly in which the resource was defined, if known. May be NULL if unknown.</param>
            <returns>A new <see cref="T:System.IO.Stream"/> for the resource if the <see cref="T:Macro.Desktop.ApplicationTheme"/> provides a themed replacement; NULL otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationTheme.IsThemeDefined(System.String)">
            <summary>
            Checks whether or not an <see cref="T:Macro.Desktop.ApplicationTheme"/> with the given ID is available in the installation.
            </summary>
            <param name="id">The ID of the <see cref="T:Macro.Desktop.ApplicationTheme"/> to be checked.</param>
            <returns>True if an <see cref="T:Macro.Desktop.ApplicationTheme"/> with the given ID is available; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationTheme.GetTheme(System.String)">
            <summary>
            Gets the <see cref="T:Macro.Desktop.ApplicationTheme"/> with the given ID.
            </summary>
            <param name="id">The ID of the <see cref="T:Macro.Desktop.ApplicationTheme"/> to be retrieved.</param>
            <returns>The <see cref="T:Macro.Desktop.ApplicationTheme"/> with the given ID, or NULL if an <see cref="T:Macro.Desktop.ApplicationTheme"/> with the given ID is not available.</returns>
        </member>
        <member name="M:Macro.Desktop.ApplicationTheme.CreateTheme(System.String,Macro.Desktop.IApplicationThemeResourceProvider,Macro.Desktop.IApplicationThemeResourceProvider[])">
            <summary>
            Creates a new user-defined <see cref="T:Macro.Desktop.ApplicationTheme"/>.
            </summary>
            <param name="id">The ID of the <see cref="T:Macro.Desktop.ApplicationTheme"/> to be created.</param>
            <param name="provider">An <see cref="T:Macro.Desktop.IApplicationThemeResourceProvider"/> implementation that provides the style information.</param>
            <param name="additionalProviders">Additional <see cref="T:Macro.Desktop.IApplicationThemeResourceProvider"/> implementations.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="provider"/> is NULL.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="id"/> is NULL or empty.</exception>
        </member>
        <member name="M:Macro.Desktop.ApplicationTheme.CreateTheme(System.String,System.Collections.Generic.IEnumerable{Macro.Desktop.IApplicationThemeResourceProvider})">
            <summary>
            Creates a new user-defined <see cref="T:Macro.Desktop.ApplicationTheme"/>.
            </summary>
            <param name="id">The ID of the <see cref="T:Macro.Desktop.ApplicationTheme"/> to be created.</param>
            <param name="providers">A collection of <see cref="T:Macro.Desktop.IApplicationThemeResourceProvider"/> implementations that provide the style information.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="providers"/> is NULL.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="id"/> is NULL or empty, or <paramref name="providers"/> does not contain at least one provider.</exception>
        </member>
        <member name="F:Macro.Desktop.ApplicationTheme.DefaultApplicationTheme">
            <summary>
            Gets an <see cref="T:Macro.Desktop.ApplicationTheme"/> representing the default application style.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationTheme.Id">
            <summary>
            Gets a string that identifies the <see cref="T:Macro.Desktop.ApplicationTheme"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationTheme.Name">
            <summary>
            Gets the localized name of the <see cref="T:Macro.Desktop.ApplicationTheme"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationTheme.Description">
            <summary>
            Gets a localized description of the <see cref="T:Macro.Desktop.ApplicationTheme"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationTheme.Icon">
            <summary>
            Gets the resource name of an icon for the <see cref="T:Macro.Desktop.ApplicationTheme"/>.
            </summary>
            <seealso cref="M:Macro.Desktop.ApplicationTheme.GetIcon"/>
        </member>
        <member name="P:Macro.Desktop.ApplicationTheme.Colors">
            <summary>
            Gets the color scheme associated with the <see cref="T:Macro.Desktop.ApplicationTheme"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationTheme.CurrentTheme">
            <summary>
            Gets or sets the current <see cref="T:Macro.Desktop.ApplicationTheme"/> in use by the desktop application framework.
            </summary>
            <remarks>
            This property is a synonym for <see cref="P:Macro.Desktop.Application.CurrentUITheme"/>.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.ApplicationTheme.CurrentThemeId">
            <summary>
            Gets or sets the current <see cref="T:Macro.Desktop.ApplicationTheme"/> ID for the desktop application framework.
            </summary>
            <remarks>
            When reading this property, the value returned will be the ID of the current <see cref="T:Macro.Desktop.ApplicationTheme"/> in use by the desktop application framework.
            When writing to this property, the current <see cref="T:Macro.Desktop.ApplicationTheme"/> will be set to the defined theme with the matching ID, or the default theme if there are no matching themes.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.ApplicationTheme.Themes">
            <summary>
            Gets a collection of <see cref="T:Macro.Desktop.ApplicationTheme"/>s available in the installation.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ApplicationTheme.DefaultApplicationThemeResourceProvider">
            <summary>
            A default theme resource provider, which is really just a placeholder that provides no alternative resources and only the basic stock "Macro Blue" colour scheme
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.KeyboardAction">
            <summary>
            Models an action that is invoked via the keyboard.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.KeyboardAction.#ctor(System.String,Macro.Desktop.Actions.ActionPath,Macro.Desktop.Actions.ClickActionFlags,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="actionID">The fully qualified action ID.</param>
            <param name="path">The action path.</param>
            <param name="flags">Flags that control the style of the action.</param>
            <param name="resourceResolver">A resource resolver that will be used to resolve text and image resources.</param>
        </member>
        <member name="T:Macro.Desktop.Tools.ToolSet">
            <summary>
            Default implementation of <see cref="T:Macro.Desktop.Tools.IToolSet"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tools.ToolSet.#ctor(System.Collections.IEnumerable,Macro.Desktop.Tools.IToolContext)">
            <summary>
            This contructs a tool set containing the specified tools.  The <see cref="T:Macro.Desktop.Tools.IToolContext"/>
            is set on each tool and each tool's Initialize method is called.
            </summary>
            <param name="context">The tool context to pass to each tool.</param>
            <param name="tools">A set of tools to group in this ToolSet and be initialized and 
            set with the same tool context.</param>
        </member>
        <member name="M:Macro.Desktop.Tools.ToolSet.#ctor(Macro.Common.IExtensionPoint,Macro.Desktop.Tools.IToolContext)">
            <summary>
            Constructs a toolset based on the specified extension point and context.
            </summary>
            <remarks>
            The toolset will attempt to instantiate and initialize all 
            extensions of the specified tool extension point.
            </remarks>
            <param name="toolExtensionPoint">The tool extension point that provides the tools.</param>
            <param name="context">The tool context to pass to each tool.</param>
        </member>
        <member name="M:Macro.Desktop.Tools.ToolSet.#ctor(Macro.Common.IExtensionPoint,Macro.Desktop.Tools.IToolContext,Macro.Common.ExtensionFilter)">
            <summary>
            Constructs a toolset based on the specified extension point and context.
            </summary>
            <remarks>
            The toolset will attempt to instantiate and initialize all 
            extensions of the specified tool extension point that pass the 
            specified filter.
            </remarks>
            <param name="toolExtensionPoint">The tool extension point that provides the tools.</param>
            <param name="context">The tool context to pass to each tool.</param>
            <param name="filter">Only tools that match the specified extension filter are loaded into the 
            tool set.  If null, all tools extending the extension point are loaded.</param>
        </member>
        <member name="M:Macro.Desktop.Tools.ToolSet.Dispose(System.Boolean)">
            <summary>
            Disposes of all the <see cref="T:Macro.Desktop.Tools.ITool"/>s in the tool set.
            </summary>
            <param name="disposing">True if this object is being disposed, false if it is being finalized.</param>
        </member>
        <member name="M:Macro.Desktop.Tools.ToolSet.Find``1">
            <summary>
            Finds the tool of the specified type.
            </summary>
            <typeparam name="TTool"></typeparam>
            <returns>The instance of the tool of the specified type, or null if no such exists.</returns>
        </member>
        <member name="M:Macro.Desktop.Tools.ToolSet.Dispose">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tools.ToolSet.Tools">
            <summary>
            Gets the tools contained in this tool set.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tools.ToolSet.Actions">
            <summary>
            Returns the union of all actions defined by all tools in this tool set.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.AllComponentsValidationStrategy">
            <summary>
            Implements a validation strategy that considers all contained nodes, regardless of whether the user
            has visited them or not.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.AllComponentsValidationStrategy.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.AllComponentsValidationStrategy.HasValidationErrors(Macro.Desktop.IApplicationComponentContainer)">
            <summary>
            Determines whether the specified container has validation errors, according to this strategy.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.AllComponentsValidationStrategy.ShowValidation(Macro.Desktop.IApplicationComponentContainer,System.Boolean)">
            <summary>
            Displays validation errors for the specified container to the user, according to the logic
            encapsulated in this strategy.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.ClickHandlerDelegate">
            <summary>
            Used by <see cref="T:Macro.Desktop.Actions.ClickAction"/> objects to establish a handler for a click.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Tables.TableSortParams">
            <summary>
            Sort parameters that can be applied to a table.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.TableSortParams.#ctor(Macro.Desktop.Tables.ITableColumn,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="column">The column to sort by.</param>
            <param name="ascending">True if the items should be sorted in ascending orders.</param>
        </member>
        <member name="M:Macro.Desktop.Tables.TableSortParams.GetComparer">
            <summary>
            Gets a comparer representing this sort.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macro.Desktop.Tables.TableSortParams.Column">
            <summary>
            Gets or sets the column to sort by.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.TableSortParams.Ascending">
            <summary>
            Gets or sets whether the items should be sorted in ascending or descending order.
            </summary>
        </member>
        <member name="T:Macro.Desktop.CloseReason">
            <summary>
            Defines possible reasons why a <see cref="T:Macro.Desktop.DesktopObject"/> might close.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CloseReason.UserInterface">
            <summary>
            The close request was initiated by the user via the user-interface.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CloseReason.Program">
            <summary>
            The close request was initiated by the application.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CloseReason.ApplicationQuit">
            <summary>
            The close request is occuring because the application has been asked to terminate.
            </summary>
            <remarks>
            The <see cref="M:Macro.Desktop.Application.Quit"/> API may have been invoked, or the request
            may have come from the operating system.
            </remarks>
        </member>
        <member name="F:Macro.Desktop.CloseReason.ParentClosing">
            <summary>
            The object is being closed because it's parent window is closing.
            </summary>
            <remarks>
            Applicable to <see cref="T:Macro.Desktop.Workspace"/> and <see cref="T:Macro.Desktop.Shelf"/> objects.
            This value is combined with one of <see cref="F:Macro.Desktop.CloseReason.UserInterface"/>, 
            <see cref="F:Macro.Desktop.CloseReason.Program"/> or <see cref="F:Macro.Desktop.CloseReason.ApplicationQuit"/>, indicating why the parent is closing.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.ClosingEventArgs">
            <summary>
            Provides data for Closing events, where the request may need to be cancelled.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ClosingEventArgs.#ctor(Macro.Desktop.CloseReason,Macro.Desktop.UserInteraction)">
            <summary>
            Constructor.
            </summary>
            <param name="reason">The reason the <see cref="T:Macro.Desktop.DesktopObject"/> is closing.</param>
            <param name="interaction">The user interaction policy for the closing object.</param>
        </member>
        <member name="M:Macro.Desktop.ClosingEventArgs.#ctor(Macro.Desktop.CloseReason,Macro.Desktop.UserInteraction,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="reason">The reason the <see cref="T:Macro.Desktop.DesktopObject"/> is closing.</param>
            <param name="interaction">The user interaction policy for the closing object.</param>
            <param name="cancel">A boolean value indicating whether the close operation should be cancelled.</param>
        </member>
        <member name="P:Macro.Desktop.ClosingEventArgs.Reason">
            <summary>
            Gets the reason the object is closing.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ClosingEventArgs.Interaction">
            <summary>
            Gets the user-interaction policy for this closing operation, which handlers must abide by.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ClosingEventArgs.Cancel">
            <summary>
            Gets and set whether to cancel the current closing request.  Set to true to prevent the <see cref="T:Macro.Desktop.DesktopObject"/> from closing.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ClosingItemEventArgs`1">
            <summary>
            Provides data for Closing events, where the request may need to be cancelled.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ClosingItemEventArgs`1.#ctor(`0,Macro.Desktop.CloseReason,Macro.Desktop.UserInteraction,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="reason">The reason the <paramref name="item"/> is closing.</param>
            <param name="item">The item that is being closed.</param>
            <param name="interaction">The user interaction policy for the closing object.</param>
            <param name="cancel">A boolean value indicating whether the close operation should be cancelled.</param>
        </member>
        <member name="P:Macro.Desktop.ClosingItemEventArgs`1.Reason">
            <summary>
            Gets the reason the item is closing.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ClosingItemEventArgs`1.Interaction">
            <summary>
            Gets the user interaction policy for this closing operation, which handlers must abide by.
            </summary>
        </member>
        <member name="T:Macro.Desktop.TabGroup">
            <summary>
            A <see cref="T:Macro.Desktop.TabGroup"/> to be hosted within a <see cref="T:Macro.Desktop.TabGroupComponentContainer"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.TabGroup.#ctor(Macro.Desktop.TabComponentContainer,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="tabContainer">The owning container.</param>
            <param name="initialWeight">Initial weight of the tab group, relative to other tab groups.</param>
        </member>
        <member name="P:Macro.Desktop.TabGroup.Component">
            <summary>
            Gets the owner <see cref="T:Macro.Desktop.TabComponentContainer"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.TabGroup.Weight">
            <summary>
            Gets the weight assigned to this group, relative to the other groups.
            </summary>
        </member>
        <member name="P:Macro.Desktop.TabGroup.ComponentHost">
            <summary>
            Gets or sets the component host for this pane.
            </summary>
            <remarks>
            For internal framework use only.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.IApplicationView">
            <summary>
            Defines the interface to a view for the <see cref="T:Macro.Desktop.Application"/> object.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IApplicationView.CreateDesktopWindowView(Macro.Desktop.DesktopWindow)">
            <summary>
            Creates a view for the specified desktop window.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IApplicationView.ShowMessageBox(System.String,Macro.Common.MessageBoxActions)">
            <summary>
            Displays a message box.
            </summary>
            <param name="message">The message to display in the mesage box.</param>
            <param name="buttons">The buttons to display in the message box.</param>
            <returns>The result of the user dismissing the message box.</returns>
        </member>
        <member name="T:Macro.Desktop.ModifierFlags">
            <summary>
            Enumeration of the modifier keys on a keyboard.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ModifierFlags.None">
            <summary>
            Represents no modifiers (the empty value).
            </summary>
        </member>
        <member name="F:Macro.Desktop.ModifierFlags.Control">
            <summary>
            The CTRL modifier.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ModifierFlags.Alt">
            <summary>
            The ALT modifier.
            </summary>
        </member>
        <member name="F:Macro.Desktop.ModifierFlags.Shift">
            <summary>
            The SHIFT modifier.
            </summary>
        </member>
        <member name="T:Macro.Desktop.DragDropOption">
            <summary>
            Enumeration for drag and drop actions.
            </summary>
        </member>
        <member name="F:Macro.Desktop.DragDropOption.None">
            <summary>
            Indicates that no drag and drop interaction is allowed, or that no action has been taken.
            </summary>
        </member>
        <member name="F:Macro.Desktop.DragDropOption.Move">
            <summary>
            Indicates that a drag and drop move interaction is allowed, or that a move action was taken.
            </summary>
        </member>
        <member name="F:Macro.Desktop.DragDropOption.Copy">
            <summary>
            Indicates that a drag and drop copy interaction is allowed, or that a copy action was taken.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.ConfigurationPageProviderExtensionPoint">
            <summary>
            An extension point for <see cref="T:Macro.Desktop.Configuration.IConfigurationPageProvider"/>s.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.ConfigurationDialog.Show(Macro.Desktop.IDesktopWindow)">
            <summary>
            Shows all <see cref="T:Macro.Desktop.Configuration.IConfigurationPage"/>s returned by extensions of <see cref="T:Macro.Desktop.Configuration.ConfigurationPageProviderExtensionPoint"/>
            in a dialog, with a navigable tree to select the pages.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.ConfigurationDialog.Show(Macro.Desktop.IDesktopWindow,System.String)">
            <summary>
            Shows all <see cref="T:Macro.Desktop.Configuration.IConfigurationPage"/>s returned by extensions of <see cref="T:Macro.Desktop.Configuration.ConfigurationPageProviderExtensionPoint"/>
            in a dialog, with a navigable tree to select the pages.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.ActionModel.UnavailableActionIconSet">
            <summary>
            Represents a set of icon resources that specify the same logical icon in different sizes with an overlay to indicate that the action is unavailable.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.ActionModel.UnavailableActionIconSet.#ctor(Macro.Desktop.IconSet)">
            <summary>
            Constructor.
            </summary>
            <param name="baseIconSet">A template <see cref="T:Macro.Desktop.IconSet"/> from which to copy resource names.</param>
        </member>
        <member name="M:Macro.Desktop.Configuration.ActionModel.UnavailableActionIconSet.GetOverlayIcon(Macro.Desktop.IconSize)">
            <summary>
            Gets the appropriate icon overlay resource name to indicate an unavailable action.
            </summary>
            <param name="iconSize">The desired version of the icon overlay.</param>
            <returns>The requested icon overlay as an <see cref="T:System.Drawing.Image"/>.</returns>
        </member>
        <member name="M:Macro.Desktop.Configuration.ActionModel.UnavailableActionIconSet.CreateIcon(Macro.Desktop.IconSize,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Creates an icon using the specified icon resource and resource resolver.
            </summary>
            <param name="iconSize">The size of the desired icon.</param>
            <param name="resourceResolver">The resource resolver with which to resolve the requested icon resource.</param>
            <returns>An <see cref="T:System.Drawing.Image"/> constructed from the requested resource.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="resourceResolver"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="resourceResolver"/> was unable to resolve the requested icon resource.</exception>
        </member>
        <member name="M:Macro.Desktop.Configuration.ActionModel.UnavailableActionIconSet.GetIconKey(Macro.Desktop.IconSize,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Gets a string identifier that uniquely identifies the resolved icon, suitable for dictionary keying purposes.
            </summary>
            <param name="iconSize">The size of the desired icon.</param>
            <param name="resourceResolver">The resource resolver with which to resolve the requested icon resource.</param>
            <returns>A string identifier that uniquely identifies the resolved icon.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="resourceResolver"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="resourceResolver"/> was unable to resolve the requested icon resource.</exception>
        </member>
        <member name="M:Macro.Desktop.AlertViewerTool.Show">
            <summary>
            Show the alert viewer shelf.
            </summary>
        </member>
        <member name="T:Macro.Desktop.AlertViewerComponentViewExtensionPoint">
            <summary>
            Extension point for views onto <see cref="T:Macro.Desktop.AlertViewerComponent"/>
            </summary>
        </member>
        <member name="T:Macro.Desktop.AlertViewerComponent">
            <summary>
            A test component not intended for production use.
            </summary>
        </member>
        <member name="T:Macro.Desktop.AlertNotificationArgs">
            <summary>
            Holds parameters that control the creation of an alert notification.
            </summary>
        </member>
        <member name="M:Macro.Desktop.AlertNotificationArgs.#ctor(Macro.Desktop.AlertLevel,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="level"></param>
            <param name="message"></param>
        </member>
        <member name="P:Macro.Desktop.AlertNotificationArgs.Level">
            <summary>
            Gets or sets the alert level.
            </summary>
        </member>
        <member name="P:Macro.Desktop.AlertNotificationArgs.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:Macro.Desktop.AlertNotificationArgs.LinkText">
            <summary>
            Gets or sets the link text, if the alert has a contextual link.
            </summary>
        </member>
        <member name="P:Macro.Desktop.AlertNotificationArgs.LinkAction">
            <summary>
            Gets or sets the link action, if the alert has a contextual link.
            </summary>
        </member>
        <member name="P:Macro.Desktop.AlertNotificationArgs.DismissOnLinkClicked">
            <summary>
            Gets or sets a value that determines whether the alert notification is dismissed upon clicking the link.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.DropDownButtonAction">
            <summary>
            Models a toolbar item that has both a drop-down and a button, where each can behave independently.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.ButtonAction">
            <summary>
            Models a toolbar button action.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ButtonAction.#ctor(System.String,Macro.Desktop.Actions.ActionPath,Macro.Desktop.Actions.ClickActionFlags,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="actionID">The fully qualified action ID.</param>
            <param name="path">The action path.</param>
            <param name="flags">Flags that control the style of the action.</param>
            <param name="resourceResolver">A resource resolver that will be used to resolve text and image resources.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.DropDownButtonAction.#ctor(System.String,Macro.Desktop.Actions.ActionPath,Macro.Desktop.Actions.ClickActionFlags,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="actionId">The fully qualified action ID.</param>
            <param name="path">The action path.</param>
            <param name="flags">Flags that control the style of the action.</param>
            <param name="resolver">A resource resolver that will be used to resolve text and image resources.</param>
        </member>
        <member name="P:Macro.Desktop.Actions.DropDownButtonAction.DropDownMenuModel">
            <summary>
            Gets the menu model for the dropdown.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.ITextBoxAction">
            <summary>
            Models a toolbar item that displays a text box into which the user can type.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Actions.ITextBoxAction.TextValueChanged">
            <summary>
            Occurs when the value of <see cref="P:Macro.Desktop.Actions.ITextBoxAction.TextValue"/> changes.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.ITextBoxAction.TextValue">
            <summary>
            Gets or sets the value of the text displayed in the text box.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Actions.ITextBoxAction.CueTextChanged">
            <summary>
            Occurs when the value of <see cref="P:Macro.Desktop.Actions.ITextBoxAction.CueText"/> changes.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.ITextBoxAction.CueText">
            <summary>
            Gets or sets the cue text displayed in the text box when it does not have focus.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.ActionAttributeProcessor">
            <summary>
            Provides methods for processing the set of action attributes declared on a given target
            object, which is typically a tool.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionAttributeProcessor.Process(System.Object)">
            <summary>
            Processes the set of action attributes declared on a given target object to generate the
            corresponding set of <see cref="T:Macro.Desktop.Actions.IAction"/> objects.
            </summary>
            <param name="actionTarget">The target object on which the attributes are declared, typically a tool.</param>
            <returns>The resulting set of actions, where each action is bound to the target object.</returns>
        </member>
        <member name="T:Macro.Desktop.WorkspaceDialogBoxCollection">
            <summary>
            Represents the collection of <see cref="T:Macro.Desktop.WorkspaceDialogBox"/> objects for a given workspace.
            </summary>
        </member>
        <member name="M:Macro.Desktop.WorkspaceDialogBoxCollection.#ctor(Macro.Desktop.Workspace)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.WorkspaceDialogBoxCollection.AddNew(Macro.Desktop.DialogBoxCreationArgs)">
            <summary>
            Creates a new dialog box with the specified arguments.
            </summary>
        </member>
        <member name="M:Macro.Desktop.WorkspaceDialogBoxCollection.CreateDialogBox(Macro.Desktop.DialogBoxCreationArgs)">
            <summary>
            Creates a new <see cref="T:Macro.Desktop.WorkspaceDialogBox"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IApplicationComponentView">
            <summary>
            Defines the interface to an application component view as seen by the application component host.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IApplicationComponentView.SetComponent(Macro.Desktop.IApplicationComponent)">
            <summary>
            Called by the host to assign this view to a component.
            </summary>
            <param name="component">The component that this view should serve.</param>
        </member>
        <member name="T:Macro.Desktop.ApplicationComponentMetaToolExtensionPoint">
            <summary>
            Defines an extension point for tools that operate on application components.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ApplicationComponentExitDelegate">
            <summary>
            Provides a callback when an application component exits.
            </summary>
            <param name="component">The component that exited.</param>
        </member>
        <member name="T:Macro.Desktop.Validation.ValidateRegexAttribute">
            <summary>
            Validates a string property against a regular expression.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateRegexAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="pattern">The regular expression pattern to test.</param>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateRegexAttribute.CreateRule(System.Reflection.PropertyInfo,Macro.Desktop.Validation.ValidationAttribute.PropertyGetter,System.String)">
            <summary>
            Factory method to create an <see cref="T:Macro.Desktop.Validation.IValidationRule"/> based on this attribute.
            </summary>
            <param name="property">The property on which the attribute is applied.</param>
            <param name="getter">A delegate that, when invoked, returns the current value of the property.</param>
            <param name="customMessage">A custom message to be displayed, or null if none was supplied.</param>
            <returns></returns>
        </member>
        <member name="P:Macro.Desktop.Validation.ValidateRegexAttribute.AllowNull">
            <summary>
            Gets or sets a value indicating whether or not to allow a null/empty string.
            </summary>
            <remarks>
            If this property is set to true, a null/empty string is allowed even when the regex pattern would
            otherwise fail.  In this case, the regex is not even tested if the property value is null.
            This allows for non-required fields to be validated only if a value was in fact supplied.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.Validation.ValidateRegexAttribute.SuccessOnMatch">
            <summary>
            Gets or sets a value indicating whether a successful match indicates a successful result.
            </summary>
            <remarks>
            For example, you may want to test that a string does not contain any 'a' or 'b' characters.  In order
            to do this, you must specify <see cref="P:Macro.Desktop.Validation.ValidateRegexAttribute.SuccessOnMatch"/> = false and a pattern of "[ab]+".  This pattern
            will result in a successful match, and there is no easy way to do a !(not) in regular expressions.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.Actions.ClickActionFlags">
            <summary>
            Set of flags that customize the behaviour of click actions.
            </summary>
        </member>
        <member name="F:Macro.Desktop.Actions.ClickActionFlags.None">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:Macro.Desktop.Actions.ClickActionFlags.CheckAction">
            <summary>
            Specifies that the action is a "check" action (e.g. that it has toggle behaviour).
            </summary>
        </member>
        <member name="F:Macro.Desktop.Actions.ClickActionFlags.CheckParents">
            <summary>
            Specifies that parents of the action should be checked when the action is checked.
            </summary>
        </member>
        <member name="T:Macro.Desktop.TabPage">
            <summary>
            Represents a single page in a <see cref="T:Macro.Desktop.TabComponentContainer"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ContainerPage">
            <summary>
            Helper class for <see cref="T:Macro.Desktop.PagedComponentContainer`1"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ContainerPage.#ctor(Macro.Desktop.IApplicationComponent)">
            <summary>
            Constructor.
            </summary>
            <param name="component">The <see cref="T:Macro.Desktop.IApplicationComponent"/> to host 
            in a page within the <see cref="T:Macro.Desktop.PagedComponentContainer`1"/>.</param>
        </member>
        <member name="P:Macro.Desktop.ContainerPage.Component">
            <summary>
            Gets the component associated with the page.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ContainerPage.LazyStart">
            <summary>
            Gets or sets a value indicating whether the component will be started lazily.
            </summary>
            <remarks>
            This property is true by default, meaning the component will not be started
            until the containing page is accessed.  Changing this to false will cause
            the component to start when the container is started.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.TabPage.#ctor(System.String,Macro.Desktop.IApplicationComponent)">
            <summary>
            Constructor.
            </summary>
            <param name="name">The name of the page.</param>
            <param name="component">The <see cref="T:Macro.Desktop.IApplicationComponent"/> to be hosted in this page.</param>
        </member>
        <member name="M:Macro.Desktop.TabPage.#ctor(Macro.Desktop.Path,Macro.Desktop.IApplicationComponent)">
            <summary>
            Creates a tab page for the specified component, using the last segment of the supplied path as the name.
            </summary>
            <param name="path"></param>
            <param name="component"></param>
        </member>
        <member name="M:Macro.Desktop.TabPage.ToString">
            <summary>
            Gets the <see cref="P:Macro.Desktop.TabPage.Name"/> property.
            </summary>
        </member>
        <member name="P:Macro.Desktop.TabPage.Name">
            <summary>
            Gets the name of the page.
            </summary>
        </member>
        <member name="T:Macro.Desktop.PrincipalPermissionSpecification">
            <summary>
            An implementation of <see cref="T:Macro.Common.Specifications.ISpecification"/> that tests if the current thread principal is in a given role.
            </summary>
        </member>
        <member name="M:Macro.Desktop.PrincipalPermissionSpecification.#ctor(System.String)">
            <summary>
            Constructs an instance of this class for the specified role.
            </summary>
        </member>
        <member name="M:Macro.Desktop.PrincipalPermissionSpecification.Test(System.Object)">
            <summary>
            Tests the <see cref="P:System.Threading.Thread.CurrentPrincipal"/> for the permission represented by this object.
            </summary>
            <remarks>
            If the application is running in non-authenticated (stand-alone) mode, the test will always
            succeed.  If the application is running in authenticated (enterprise) mode, the test succeeds only
            if the thread current principal is in the role assigned to this instance.
            </remarks>
            <param name="obj">This parameter is ignored.</param>
        </member>
        <member name="T:Macro.Desktop.DesktopWindowCollection">
            <summary>
            Represents the collection of <see cref="T:Macro.Desktop.DesktopWindow"/> objects in the application.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopWindowCollection.#ctor(Macro.Desktop.Application)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopWindowCollection.AddNew">
            <summary>
            Opens a new unnamed desktop window.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopWindowCollection.AddNew(System.String)">
            <summary>
            Opens a new desktop window with the specified name.
            </summary>
            <remarks>
            <see cref="T:Macro.Desktop.DesktopWindow"/> names must be unique within a collection or an exception will be thrown.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.DesktopWindowCollection.AddNew(Macro.Desktop.DesktopWindowCreationArgs)">
            <summary>
            Opens a new desktop window with the specified creation arguments.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopWindowCollection.OnItemActivationChangedInternal(Macro.Common.Utilities.ItemEventArgs{Macro.Desktop.DesktopWindow})">
            <summary>
            Called when a <see cref="T:Macro.Desktop.DesktopWindow"/> item's <see cref="E:Macro.Desktop.DesktopObject.InternalActiveChanged"/> event
            has fired.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopWindowCollection.OnItemClosed(Macro.Desktop.ClosedItemEventArgs{Macro.Desktop.DesktopWindow})">
            <summary>
            Called when a <see cref="T:Macro.Desktop.DesktopWindow"/> item's <see cref="E:Macro.Desktop.DesktopObject.Closed"/> event
            has fired.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopWindowCollection.CreateWindow(Macro.Desktop.DesktopWindowCreationArgs)">
            <summary>
            Creates a new <see cref="T:Macro.Desktop.DesktopWindow"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DesktopWindowCollection.ActiveWindow">
            <summary>
            Gets the currently active window.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.Standard.StandardOptionsConfigurationPageProvider">
            <summary>
            Provides common <see cref="T:Macro.Desktop.Configuration.IConfigurationPage"/>s for settings defined in the framework.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.Standard.StandardOptionsConfigurationPageProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.Standard.StandardOptionsConfigurationPageProvider.GetPages">
            <summary>
            Gets all the <see cref="T:Macro.Desktop.Configuration.IConfigurationPage"/>s for this provider.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.Tools.OptionsTool">
            <summary>
            A tool that, when executed, will show a configuration dialog.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.Tools.OptionsTool.Show">
            <summary>
            Called by the framework when the user clicks the "Options" menu item.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.ActionModelNodeList">
            <summary>
            Used by <see cref="T:Macro.Desktop.Actions.ActionModelNode"/> to hold the list of child nodes.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionModelNodeList.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.ActionModelNodeList.Item(System.String)">
            <summary>
            Returns the child node whose <see cref="P:Macro.Desktop.Actions.ActionModelNode.PathSegment"/> 
            <see cref="P:Macro.Desktop.PathSegment.LocalizedText"/> property
            is equal to the specified value.
            </summary>
            <param name="name">The name of the node to retrieve.</param>
            <returns>The corresponding child node, or null if no such node exists.</returns>
        </member>
        <member name="T:Macro.Desktop.Actions.ActionBuildingContext">
            <summary>
            Default implementation of <see cref="T:Macro.Desktop.Actions.IActionBuildingContext"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.XKeysNames">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Add">
            <summary>
              查找类似 Add 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Alt">
            <summary>
              查找类似 Alt 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.AltKey">
            <summary>
              查找类似 AltKey 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Apps">
            <summary>
              查找类似 Apps 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Attn">
            <summary>
              查找类似 Attn 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Backspace">
            <summary>
              查找类似 Backspace 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.BrowserBack">
            <summary>
              查找类似 BrowserBack 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.BrowserFavorites">
            <summary>
              查找类似 BrowserFavorites 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.BrowserForward">
            <summary>
              查找类似 BrowserForward 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.BrowserHome">
            <summary>
              查找类似 BrowserHome 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.BrowserRefresh">
            <summary>
              查找类似 BrowserRefresh 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.BrowserSearch">
            <summary>
              查找类似 BrowserSearch 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.BrowserStop">
            <summary>
              查找类似 BrowserStop 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Cancel">
            <summary>
              查找类似 Cancel 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.CapsLock">
            <summary>
              查找类似 Caps Lock 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Clear">
            <summary>
              查找类似 Clear 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Control">
            <summary>
              查找类似 Ctrl 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.ControlKey">
            <summary>
              查找类似 CtrlKey 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Crsel">
            <summary>
              查找类似 Crsel 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Decimal">
            <summary>
              查找类似 Decimal 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Delete">
            <summary>
              查找类似 Del 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Digit0">
            <summary>
              查找类似 0 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Digit1">
            <summary>
              查找类似 1 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Digit2">
            <summary>
              查找类似 2 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Digit3">
            <summary>
              查找类似 3 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Digit4">
            <summary>
              查找类似 4 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Digit5">
            <summary>
              查找类似 5 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Digit6">
            <summary>
              查找类似 6 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Digit7">
            <summary>
              查找类似 7 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Digit8">
            <summary>
              查找类似 8 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Digit9">
            <summary>
              查找类似 9 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Divide">
            <summary>
              查找类似 Divide 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Down">
            <summary>
              查找类似 Down 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.End">
            <summary>
              查找类似 End 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Enter">
            <summary>
              查找类似 Enter 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.EraseEof">
            <summary>
              查找类似 EraseEof 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Escape">
            <summary>
              查找类似 Esc 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Execute">
            <summary>
              查找类似 Execute 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Exsel">
            <summary>
              查找类似 Exsel 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F1">
            <summary>
              查找类似 F1 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F10">
            <summary>
              查找类似 F10 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F11">
            <summary>
              查找类似 F11 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F12">
            <summary>
              查找类似 F12 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F13">
            <summary>
              查找类似 F13 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F14">
            <summary>
              查找类似 F14 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F15">
            <summary>
              查找类似 F15 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F16">
            <summary>
              查找类似 F16 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F17">
            <summary>
              查找类似 F17 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F18">
            <summary>
              查找类似 F18 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F19">
            <summary>
              查找类似 F19 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F2">
            <summary>
              查找类似 F2 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F20">
            <summary>
              查找类似 F20 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F21">
            <summary>
              查找类似 F21 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F22">
            <summary>
              查找类似 F22 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F23">
            <summary>
              查找类似 F23 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F24">
            <summary>
              查找类似 F24 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F3">
            <summary>
              查找类似 F3 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F4">
            <summary>
              查找类似 F4 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F5">
            <summary>
              查找类似 F5 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F6">
            <summary>
              查找类似 F6 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F7">
            <summary>
              查找类似 F7 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F8">
            <summary>
              查找类似 F8 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.F9">
            <summary>
              查找类似 F9 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Help">
            <summary>
              查找类似 Help 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Home">
            <summary>
              查找类似 Home 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.ImeAccept">
            <summary>
              查找类似 IMEAccept 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.ImeConvert">
            <summary>
              查找类似 IMEConvert 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.ImeFinalMode">
            <summary>
              查找类似 IMEFinal 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.ImeMode1">
            <summary>
              查找类似 Kana/Hangul 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.ImeMode3">
            <summary>
              查找类似 Junja 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.ImeMode5">
            <summary>
              查找类似 Kanji/Hanja 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.ImeModeChange">
            <summary>
              查找类似 IMEModeChange 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.ImeNonConvert">
            <summary>
              查找类似 IMENonConvert 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Insert">
            <summary>
              查找类似 Ins 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.LaunchApplication1">
            <summary>
              查找类似 App1 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.LaunchApplication2">
            <summary>
              查找类似 App2 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.LaunchMail">
            <summary>
              查找类似 Mail 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Left">
            <summary>
              查找类似 Left 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.LeftAltKey">
            <summary>
              查找类似 LAlt 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.LeftControlKey">
            <summary>
              查找类似 LCtrl 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.LeftMouseButton">
            <summary>
              查找类似 Left Mouse Button 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.LeftShiftKey">
            <summary>
              查找类似 LShift 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.LeftWinKey">
            <summary>
              查找类似 LWin 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.LineFeed">
            <summary>
              查找类似 Line Feed 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.MediaNextTrack">
            <summary>
              查找类似 Next Media 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.MediaPlayPause">
            <summary>
              查找类似 Play/Pause Media 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.MediaPreviousTrack">
            <summary>
              查找类似 Previous Media 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.MediaStop">
            <summary>
              查找类似 Stop Media 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.MiddleMouseButton">
            <summary>
              查找类似 Middle Mouse Button 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Multiply">
            <summary>
              查找类似 Multiply 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.NumLock">
            <summary>
              查找类似 Num Lock 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.NumPad0">
            <summary>
              查找类似 NumPad0 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.NumPad1">
            <summary>
              查找类似 NumPad1 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.NumPad2">
            <summary>
              查找类似 NumPad2 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.NumPad3">
            <summary>
              查找类似 NumPad3 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.NumPad4">
            <summary>
              查找类似 NumPad4 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.NumPad5">
            <summary>
              查找类似 NumPad5 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.NumPad6">
            <summary>
              查找类似 NumPad6 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.NumPad7">
            <summary>
              查找类似 NumPad7 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.NumPad8">
            <summary>
              查找类似 NumPad8 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.NumPad9">
            <summary>
              查找类似 NumPad9 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Oem8">
            <summary>
              查找类似 OEM8 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.OemBackslash">
            <summary>
              查找类似 \ 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.OemClear">
            <summary>
              查找类似 OEMClear 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.OemCloseBrackets">
            <summary>
              查找类似 ] 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.OemComma">
            <summary>
              查找类似 , 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.OemMinus">
            <summary>
              查找类似 - 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.OemOpenBrackets">
            <summary>
              查找类似 [ 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.OemPeriod">
            <summary>
              查找类似 . 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.OemPipe">
            <summary>
              查找类似 | 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.OemPlus">
            <summary>
              查找类似 + 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.OemQuestion">
            <summary>
              查找类似 ? 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.OemQuotes">
            <summary>
              查找类似 &apos; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.OemSemicolon">
            <summary>
              查找类似 ; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.OemTilde">
            <summary>
              查找类似 ~ 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Pa1">
            <summary>
              查找类似 PA1 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.PageDown">
            <summary>
              查找类似 PgDn 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.PageUp">
            <summary>
              查找类似 PgUp 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Pause">
            <summary>
              查找类似 Pause 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Play">
            <summary>
              查找类似 Play 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Print">
            <summary>
              查找类似 Print 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.PrintScreen">
            <summary>
              查找类似 Print Screen 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.ProcessKey">
            <summary>
              查找类似 Process Key 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Right">
            <summary>
              查找类似 Right 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.RightAltKey">
            <summary>
              查找类似 RAlt 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.RightControlKey">
            <summary>
              查找类似 RCtrl 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.RightMouseButton">
            <summary>
              查找类似 Right Mouse Button 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.RightShiftKey">
            <summary>
              查找类似 RShift 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.RightWinKey">
            <summary>
              查找类似 RWin 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.ScrollLock">
            <summary>
              查找类似 Scroll Lock 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Select">
            <summary>
              查找类似 Select 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.SelectMedia">
            <summary>
              查找类似 Select Media 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Separator">
            <summary>
              查找类似 Separator 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Shift">
            <summary>
              查找类似 Shift 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.ShiftKey">
            <summary>
              查找类似 ShiftKey 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Space">
            <summary>
              查找类似 Space 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Subtract">
            <summary>
              查找类似 Subtract 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Tab">
            <summary>
              查找类似 Tab 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Up">
            <summary>
              查找类似 Up 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.VolumeDown">
            <summary>
              查找类似 Volume Down 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.VolumeMute">
            <summary>
              查找类似 Volume Mute 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.VolumeUp">
            <summary>
              查找类似 Volume Up 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.XMouseButton1">
            <summary>
              查找类似 Mouse Button 4 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.XMouseButton2">
            <summary>
              查找类似 Mouse Button 5 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Desktop.XKeysNames.Zoom">
            <summary>
              查找类似 Zoom 的本地化字符串。
            </summary>
        </member>
        <member name="T:Macro.Desktop.IMemorable">
            <summary>
            Allows object state to be captured and restored.
            </summary>
            <remarks>
            <para>
            <see cref="T:Macro.Desktop.IMemorable"/> can be implemented by classes that require support
            for the <i>Memento</i> design pattern--<see cref="T:Macro.Desktop.IMemorable"/> acts as the
            <i>Originator</i>.  Typically, the <see cref="T:Macro.Desktop.IMemorable"/>
            interface is used in conjunction with <see cref="T:Macro.Desktop.MemorableUndoableCommand"/> 
            to provide undo/redo support.
            </para>
            <para>
            It is common in the framework to use a 'begin state' and 'end state' memento
            that comprise an <see cref="T:Macro.Desktop.MemorableUndoableCommand"/>.  It is also common to check
            the equality of the two mementos in order to decide whether or not an
            <see cref="T:Macro.Desktop.MemorableUndoableCommand"/> should be added to a <see cref="T:Macro.Desktop.CommandHistory"/>
            object.  Therefore, it is good practice to override and implement the
            <see cref="M:System.Object.Equals(System.Object)"/> method on memento classes.
            </para>
            </remarks>
            <seealso cref="T:Macro.Desktop.MemorableUndoableCommand"/>
            <seealso cref="T:Macro.Desktop.CommandHistory"/>
        </member>
        <member name="M:Macro.Desktop.IMemorable.CreateMemento">
            <summary>
            Captures the state of an object.
            </summary>
            <remarks>
            The implementation of <see cref="M:Macro.Desktop.IMemorable.CreateMemento"/> should return an
            object containing enough state information so that
            when <see cref="M:Macro.Desktop.IMemorable.SetMemento(System.Object)"/> is called, the object can be restored
            to the original state.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.IMemorable.SetMemento(System.Object)">
            <summary>
            Restores the state of an object.
            </summary>
            <param name="memento">The object that was
            originally created with <see cref="M:Macro.Desktop.IMemorable.CreateMemento"/>.</param>
            <remarks>
            The implementation of <see cref="M:Macro.Desktop.IMemorable.SetMemento(System.Object)"/> should return the 
            object to the original state captured by <see cref="M:Macro.Desktop.IMemorable.CreateMemento"/>.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.Validation.ValidationRuleSet">
            <summary>
            Default implemenation of <see cref="T:Macro.Desktop.Validation.IValidationRuleSet"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.IValidationRuleSet">
            <summary>
            Defines the interface to a set of <see cref="T:Macro.Desktop.Validation.IValidationRule"/> objects.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.IValidationRuleSet.Add(Macro.Desktop.Validation.IValidationRule)">
            <summary>
            Adds a rule to the set.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.IValidationRuleSet.Remove(Macro.Desktop.Validation.IValidationRule)">
            <summary>
            Removes a rule from the set.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.IValidationRuleSet.GetResults(Macro.Desktop.IApplicationComponent)">
            <summary>
            Evaluates every rule in the set against the specified component.
            </summary>
            <param name="component">Component to validate.</param>
        </member>
        <member name="M:Macro.Desktop.Validation.IValidationRuleSet.GetResults(Macro.Desktop.IApplicationComponent,System.String)">
            <summary>
            Evaluates all rules in the set that apply to the specified property against the specified component.
            </summary>
            <param name="component">Component to validate.</param>
            <param name="propertyName">Property to validate.</param>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationRuleSet.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationRuleSet.#ctor(System.Collections.Generic.IList{Macro.Desktop.Validation.IValidationRule})">
            <summary>
            Constructor
            </summary>
            <param name="rules"></param>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationRuleSet.GetErrorsString(Macro.Desktop.IApplicationComponent)">
            <summary>
            Gets the concatenation of all error strings, based on the results of all
            <see cref="T:Macro.Desktop.Validation.IValidationRule"/>s in the set.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationRuleSet.Add(Macro.Desktop.Validation.IValidationRule)">
            <summary>
            Adds a rule to the set.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationRuleSet.AddRange(System.Collections.Generic.IEnumerable{Macro.Desktop.Validation.IValidationRule})">
            <summary>
            Adds rules to the set.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationRuleSet.Remove(Macro.Desktop.Validation.IValidationRule)">
            <summary>
            Removes a rule from the set.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationRuleSet.GetResults(Macro.Desktop.IApplicationComponent)">
            <summary>
            Evaluates every rule in the set against the specified component.
            </summary>
            <param name="component">Component to validate.</param>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationRuleSet.GetResults(Macro.Desktop.IApplicationComponent,System.String)">
            <summary>
            Evaluates all rules in the set that apply to the specified property against the specified component.
            </summary>
            <param name="component">Component to validate.</param>
            <param name="propertyName">Property to validate.</param>
        </member>
        <member name="T:Macro.Desktop.IDesktopWindowView">
            <summary>
            Defines the interface to a view for a <see cref="T:Macro.Desktop.DesktopWindow"/> object.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IDesktopWindowView.CreateWorkspaceView(Macro.Desktop.Workspace)">
            <summary>
            Creates a view for the specified workspace.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IDesktopWindowView.CreateShelfView(Macro.Desktop.Shelf)">
            <summary>
            Creates a view for the specified shelf.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IDesktopWindowView.CreateDialogBoxView(Macro.Desktop.DialogBox)">
            <summary>
            Creates a view for the specified dialog box.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IDesktopWindowView.SetMenuModel(Macro.Desktop.Actions.ActionModelNode)">
            <summary>
            Sets the current menu model.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IDesktopWindowView.SetToolbarModel(Macro.Desktop.Actions.ActionModelNode)">
            <summary>
            Sets the current toolbar model.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IDesktopWindowView.ShowMessageBox(System.String,System.String,Macro.Common.MessageBoxActions)">
            <summary>
            Shows a message box in front of this window.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="title">The title of the message box.</param>
            <param name="buttons">The buttons to display on the message box.</param>
            <returns>The result of the user dismissing the message box.</returns>
        </member>
        <member name="M:Macro.Desktop.IDesktopWindowView.SetAlertContext(Macro.Desktop.IDesktopAlertContext)">
            <summary>
            Sets the alert context.
            </summary>
            <param name="alertContext"></param>
        </member>
        <member name="M:Macro.Desktop.IDesktopWindowView.ShowAlert(Macro.Desktop.AlertNotificationArgs)">
            <summary>
            Shows an alert notification in front of this window.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IDesktopWindowView.ShowSaveFileDialogBox(Macro.Desktop.FileDialogCreationArgs)">
            <summary>
            Shows a 'Save file' dialog in front of this window.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.IDesktopWindowView.ShowOpenFileDialogBox(Macro.Desktop.FileDialogCreationArgs)">
            <summary>
            Shows an 'Open file' dialog in front of this window.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.IDesktopWindowView.ShowSelectFolderDialogBox(Macro.Desktop.SelectFolderDialogCreationArgs)">
            <summary>
            Shows a 'Select folder' dialog in front of this window.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.Desktop.StackTabComponentContainerViewExtensionPoint">
            <summary>
            Extension point for views onto <see cref="T:Macro.Desktop.StackTabComponentContainer"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.StackStyle">
            <summary>
            An enumeration describing the style of a <see cref="T:Macro.Desktop.StackTabComponentContainer"/>.
            </summary>
        </member>
        <member name="F:Macro.Desktop.StackStyle.ShowOneOnly">
            <summary>
            Only one stack can be open at the same time.  
            </summary>
            <remarks>
            Each stack can be open/closed by clicking on the title bar itself, which act as a button.
            </remarks>
        </member>
        <member name="F:Macro.Desktop.StackStyle.ShowMultiple">
            <summary>
            Multiple stack can be open at the same time.  
            </summary>
            <remarks>
            Each stack can be open/closed by clicking on the Down/Up arrow on the title bar.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.StackTabComponentContainer">
            <summary>
            The <see cref="T:Macro.Desktop.StackTabComponentContainer"/> hosts <see cref="T:Macro.Desktop.IApplicationComponent"/>s in a
            'stacked' UI representation.
            </summary>
        </member>
        <member name="M:Macro.Desktop.StackTabComponentContainer.#ctor(Macro.Desktop.StackStyle,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.Desktop.StackTabComponentContainer.StackStyle">
            <summary>
            Gets the <see cref="P:Macro.Desktop.StackTabComponentContainer.StackStyle"/> of the container.
            </summary>
        </member>
        <member name="P:Macro.Desktop.StackTabComponentContainer.OpenAllTabsInitially">
            <summary>
            Gets the settings for opening all tabs initially.  This is applicable to StackStyle.ShowMultiple only
            </summary>
        </member>
        <member name="T:Macro.Desktop.QuittingEventArgs">
            <summary>
            Provides data about the <see cref="E:Macro.Desktop.Application.Quitting"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.QuittingEventArgs.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Macro.Desktop.PageChangedEventArgs`1">
            <summary>
            Event args for paged changed event.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:Macro.Desktop.PageChangedEventArgs`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="items"></param>
        </member>
        <member name="P:Macro.Desktop.PageChangedEventArgs`1.Items">
            <summary>
            Gets the new set of items for the current page.
            </summary>
        </member>
        <member name="T:Macro.Desktop.FileExtensionFilter">
            <summary>
            Describes a file dialog extension filter.
            </summary>
        </member>
        <member name="M:Macro.Desktop.FileExtensionFilter.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="filter"></param>
            <param name="description"></param>
        </member>
        <member name="P:Macro.Desktop.FileExtensionFilter.Filter">
            <summary>
            Gets or sets the value of the filter, which must be a wildcard expression (e.g. *.txt).
            </summary>
        </member>
        <member name="P:Macro.Desktop.FileExtensionFilter.Description">
            <summary>
            Gets or sets the value displayed for the filter, e.g. Text files (*.txt).
            </summary>
        </member>
        <member name="T:Macro.Desktop.FileDialogCreationArgs">
            <summary>
            Holds parameters that initialize the display of a common file dialog.
            </summary>
        </member>
        <member name="M:Macro.Desktop.FileDialogCreationArgs.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Macro.Desktop.FileExtensionFilter})">
            <summary>
            Constructor.
            </summary>
            <param name="directory"></param>
            <param name="filename"></param>
            <param name="fileExtension"></param>
            <param name="filters"></param>
        </member>
        <member name="M:Macro.Desktop.FileDialogCreationArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Macro.Desktop.FileDialogCreationArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Macro.Desktop.FileDialogCreationArgs.FileExtension">
            <summary>
            Gets or sets the default extension to append to the filename, if not specified by user.
            </summary>
        </member>
        <member name="P:Macro.Desktop.FileDialogCreationArgs.FileName">
            <summary>
            Gets or sets the initial value of the file name.
            </summary>
        </member>
        <member name="P:Macro.Desktop.FileDialogCreationArgs.Directory">
            <summary>
            Gets or sets the initial directory.
            </summary>
        </member>
        <member name="P:Macro.Desktop.FileDialogCreationArgs.Title">
            <summary>
            Gets or sets the title of the file dialog.
            </summary>
        </member>
        <member name="P:Macro.Desktop.FileDialogCreationArgs.MultiSelect">
            <summary>
            For an Open File dialog, gets or sets a value indicating whether the dialog allows multiple files to be selected.
            </summary>
            <remarks>
            This property is ignored for a Save File dialog.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.FileDialogCreationArgs.Filters">
            <summary>
            Gets the list of file extension filters.
            </summary>
        </member>
        <member name="P:Macro.Desktop.FileDialogCreationArgs.PreventSaveToInstallPath">
            <summary>
            Gets or sets a value indicating whether to prevent saving files to the install directory or any of its child directories.
            </summary>
        </member>
        <member name="T:Macro.Desktop.CloseHelperTool">
            <summary>
            Provides "Close Assistant" services, which inform the user of workspaces that require attention prior
            to a desktop window close or application quit.
            </summary>
        </member>
        <member name="M:Macro.Desktop.CloseHelperTool.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.CloseHelperTool.Initialize">
            <summary>
             Called by the framework to allow the tool to initialize itself.
            </summary>
             <remarks>
             This method will be called after <see cref="M:Macro.Desktop.Tools.ITool.SetContext(Macro.Desktop.Tools.IToolContext)"/> has been called, which guarantees that 
             the tool will have access to its context when this method is called.
             </remarks>
        </member>
        <member name="T:Macro.Desktop.Async">
            <summary>
            Provides a simple mechanism for application components to execute code asynchronously.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Async.Invoke(Macro.Desktop.IApplicationComponent,Macro.Desktop.AsyncTask.Action,Macro.Desktop.AsyncTask.Action,System.Action{System.Exception})">
            <summary>
            Invokes an arbitrary block of code asynchronously, executing a continuation upon completion or error handler upon failure.
            </summary>
            <remarks>
            The invocation is tied to the lifetime of the specified application component.  That is, if the component is stopped, any
            asynchronous invocations pending completion will be discarded.
            </remarks>
            <param name="component"></param>
            <param name="asyncCode"></param>
            <param name="continuationCode"></param>
            <param name="errorHandler"></param>
        </member>
        <member name="M:Macro.Desktop.Async.Invoke(Macro.Desktop.IApplicationComponent,Macro.Desktop.AsyncTask.Action,Macro.Desktop.AsyncTask.Action)">
            <summary>
            Invokes an arbitrary block of code asynchronously, executing a continuation upon completion.
            </summary>
            <remarks>
            The invocation is tied to the lifetime of the specified application component.  That is, if the component is stopped, any
            asynchronous invocations pending completion will be discarded.
            </remarks>
            <param name="component"></param>
            <param name="asyncCode"></param>
            <param name="continuationCode"></param>
        </member>
        <member name="M:Macro.Desktop.Async.Request``2(Macro.Desktop.IApplicationComponent,System.Converter{``0,``1},System.Action{``1},System.Action{System.Exception})">
            <summary>
            Makes an asynchronous request, executing a continuation upon completion or error handler upon failure.
            </summary>
            <remarks>
            The request is tied to the lifetime of the specified application component.  That is, if the component is stopped, any
            asynchronous requests pending completion will be discarded.
            </remarks>
            <typeparam name="TServiceContract"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <param name="component"></param>
            <param name="asyncCode"></param>
            <param name="continuationCode"></param>
            <param name="errorHandler"></param>
        </member>
        <member name="M:Macro.Desktop.Async.Request``2(Macro.Desktop.IApplicationComponent,System.Converter{``0,``1},System.Action{``1})">
            <summary>
            Makes an asynchronous request, executing a continuation upon completion.
            </summary>
            <remarks>
            The request is tied to the lifetime of the specified application component.  That is, if the component is stopped, any
            asynchronous requests pending completion will be discarded.
            </remarks>
            <typeparam name="TServiceContract"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <param name="component"></param>
            <param name="asyncCode"></param>
            <param name="continuationCode"></param>
        </member>
        <member name="M:Macro.Desktop.Async.CancelPending(Macro.Desktop.IApplicationComponent)">
            <summary>
            Cancels any pending invocations or requests made by the specified application component.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Macro.Desktop.Actions.LanguagePickerAction.#ctor(System.String,System.String,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="actionId">The logical action ID.</param>
            <param name="actionPath">The action path.</param>
            <param name="resourceResolver">A resource resolver that will be used to resolve icons associated with this action.</param>
        </member>
        <member name="T:Macro.Desktop.Actions.IActionViewContext">
            <summary>
            Interface for an <see cref="T:Macro.Desktop.Actions.IActionView"/>'s context.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IActionViewContext.Action">
            <summary>
            Gets the associated <see cref="T:Macro.Desktop.Actions.IAction"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IActionViewContext.IconSize">
            <summary>
            Gets or sets the <see cref="P:Macro.Desktop.Actions.IActionViewContext.IconSize"/> to be shown by the <see cref="T:Macro.Desktop.Actions.IActionView"/>.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Actions.IActionViewContext.IconSizeChanged">
            <summary>
            Fires when the <see cref="P:Macro.Desktop.Actions.IActionViewContext.IconSize"/> has changed.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.ActionViewContext">
            <summary>
            Simple implementation of an <see cref="T:Macro.Desktop.Actions.IActionViewContext"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionViewContext.#ctor(Macro.Desktop.Actions.IAction)">
            <summary>
            Constructor.
            </summary>
            <param name="action">The associated <see cref="T:Macro.Desktop.Actions.IAction"/>.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionViewContext.#ctor(Macro.Desktop.Actions.IAction,Macro.Desktop.IconSize)">
            <summary>
            Constructor.
            </summary>
            <param name="action">The associated <see cref="T:Macro.Desktop.Actions.IAction"/>.</param>
            <param name="iconSize">The initial icon size.</param>
        </member>
        <member name="P:Macro.Desktop.Actions.ActionViewContext.Action">
            <summary>
            Gets the associated <see cref="T:Macro.Desktop.Actions.IAction"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.ActionViewContext.IconSize">
            <summary>
            Gets or sets the <see cref="P:Macro.Desktop.Actions.IActionViewContext.IconSize"/> to be shown by the <see cref="T:Macro.Desktop.Actions.IActionView"/>.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Actions.ActionViewContext.IconSizeChanged">
            <summary>
            Fires when the <see cref="P:Macro.Desktop.Actions.IActionViewContext.IconSize"/> has changed.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.XmlValidationCompiler">
            <summary>
            Compiles validation rules that are encoded as XML specifications.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.XmlValidationCompiler.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.XmlValidationCompiler.#ctor(System.String)">
            <summary>
            Constructor that allows specifying the expression language to use when evaluating the XML specification.
            </summary>
            <param name="defaultExpressionLanguage"></param>
        </member>
        <member name="M:Macro.Desktop.Validation.XmlValidationCompiler.CompileRules(System.IO.TextReader)">
            <summary>
            Compiles all rules contained in the specified XML rules document.
            </summary>
            <param name="rulesDocument"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Validation.XmlValidationCompiler.CompileRules(System.Xml.XmlDocument)">
            <summary>
            Compiles all rules contained in the specified XML rules document.
            </summary>
            <param name="rulesDocument"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Validation.XmlValidationCompiler.CompileRule(System.Xml.XmlElement)">
            <summary>
            Compiles the rule described by the specified XML element, which must be a "validation-rule" element.
            </summary>
            <param name="ruleNode"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.Desktop.ISelection">
            <summary>
            Represents a single or multiple selection.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ISelection.Union(Macro.Desktop.ISelection)">
            <summary>
            Computes the union of this selection with another and returns it.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ISelection.Intersect(Macro.Desktop.ISelection)">
            <summary>
            Computes the intersection of this selection with another and returns it.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ISelection.Subtract(Macro.Desktop.ISelection)">
            <summary>
            Returns an <see cref="T:Macro.Desktop.ISelection"/> that contains every item contained
            in this one that doesn't exist in <param name="other"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ISelection.Contains(System.Object)">
            <summary>
            Determines whether this selection contains the input object.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ISelection.Items">
            <summary>
            Returns the set of items that are currently selected.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ISelection.Item">
            <summary>
            Convenience method to obtain the currently selected item in a single-select scenario.
            </summary>
            <remarks>
            If no rows are selected, the method returns null.  If more than one row is selected,
            it is undefined which item will be returned.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.AssociateViewAttribute">
            <summary>
            Associates a view extension point with a "model" class.
            </summary>
            <remarks>
            The model class may be any class that participates in a model-view 
            relationship and defines an associated view extension point.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.AssociateViewAttribute.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="viewExtensionPointType">The view extension point class.</param>
        </member>
        <member name="P:Macro.Desktop.AssociateViewAttribute.ViewExtensionPointType">
            <summary>
            Gets the view extension point class.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.ValidateLessThanAttribute">
            <summary>
            Validates that a property value is less than reference value.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateLessThanAttribute.#ctor(System.String)">
            <summary>
            Constructor that accepts the name of a reference property.
            </summary>
            <param name="referenceProperty">The name of a property on the component that provides a reference value.</param>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateLessThanAttribute.#ctor(System.Int32)">
            <summary>
            Constructor that accepts a constant reference value.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateLessThanAttribute.#ctor(System.Single)">
            <summary>
            Constructor that accepts a constant reference value.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateLessThanAttribute.#ctor(System.Double)">
            <summary>
            Constructor that accepts a constant reference value.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidateLessThanAttribute.GetCompareSign">
            <summary>
            Returns -1.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ProgressDialogComponentViewExtensionPoint">
            <summary>
            Extension point for views onto <see cref="T:Macro.Desktop.ProgressDialogComponent"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ProgressDialogComponent">
            <summary>
            A default implementation of a progress dialog as an <see cref="T:Macro.Desktop.ApplicationComponent"/>.
            </summary>
            <remarks>
            The progress dialog blocks the UI thread while the actual processing takes place
            on a worker thread (a <see cref="T:Macro.Common.Utilities.BackgroundTask"/>).  You must therefore be very careful
            to ensure that all shared resources are thread-safe.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.ProgressDialogComponent.#ctor(Macro.Common.Utilities.BackgroundTask,System.Boolean,Macro.Desktop.ProgressBarStyle,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="task">The task that will run in the background, reporting its progress to the foreground UI thread.</param>
            <param name="autoClose">Whether or not the progress dialog should close automatically upon task completion.</param>
            <param name="progressBarStyle">The style of the progress bar.</param>
            <param name="startProgressMessage"></param>
        </member>
        <member name="M:Macro.Desktop.ProgressDialogComponent.Start">
            <summary>
            Starts the <see cref="T:Macro.Common.Utilities.BackgroundTask"/> and shows the progress dialog.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ProgressDialogComponent.Stop">
            <summary>
            Does nothing unless the task has completed; closes the progress dialog.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ProgressDialogComponent.CanExit">
            <summary>
            Override implementation of <see cref="M:Macro.Desktop.IApplicationComponent.CanExit"/>.
            </summary>
            <remarks>
            This is called when the user clicks on the 'X' button to close the dialog.
            </remarks>
            <returns>True only if the task has finished running.</returns>
        </member>
        <member name="M:Macro.Desktop.ProgressDialogComponent.PrepareExit">
            <summary>
            Called by the framework in the case where the host has initiated the exit, rather than the component,
            to give the component a chance to prepare prior to being stopped.
            </summary>
            <returns>
            False if the task is still running, otherwise true.
            </returns>
        </member>
        <member name="M:Macro.Desktop.ProgressDialogComponent.Cancel">
            <summary>
            Called from the view to indicate that the task should be cancelled.
            </summary>
        </member>
        <member name="E:Macro.Desktop.ProgressDialogComponent.ProgressUpdateEvent">
            <summary>
            Raised when a progress update has occurred.
            </summary>
        </member>
        <member name="E:Macro.Desktop.ProgressDialogComponent.ProgressTerminateEvent">
            <summary>
            Raised when the task has finished, for any reason.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ProgressDialogComponent.TaskException">
            <summary>
            Gets the error that has occurred while running the task.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ProgressDialogComponent.ShowCancel">
            <summary>
            Gets whether or not a 'Cancel' button should be shown.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ProgressDialogComponent.ProgressBarMaximum">
            <summary>
            Returns 100.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ProgressDialogComponent.ProgressBar">
            <summary>
            Geths the current position of the progress bar.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ProgressDialogComponent.ProgressBarStyle">
            <summary>
            Gets the style of the progress bar.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ProgressDialogComponent.MarqueeSpeed">
            <summary>
            Gets a number indicating the speed of the progress bar when in Marquee mode.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ProgressDialogComponent.ProgressMessage">
            <summary>
            Gets the current progress message.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ProgressDialogComponent.ButtonText">
            <summary>
            "Close" if the task has completed, "Cancel" if it is still running.
            </summary>
        </member>
        <member name="T:Macro.Desktop.SimpleComponentContainerViewExtensionPoint">
            <summary>
            Defines an extension point for views onto the <see cref="T:Macro.Desktop.SimpleComponentContainer"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.SimpleComponentContainer">
            <summary>
            A simple container class for hosting <see cref="T:Macro.Desktop.IApplicationComponent"/>s
            that provides Ok and Cancel buttons.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SimpleComponentContainer.#ctor(Macro.Desktop.IApplicationComponent)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SimpleComponentContainer.Start">
            <summary>
            Starts this component and the <see cref="P:Macro.Desktop.SimpleComponentContainer.ComponentHost"/>.
            </summary>
             <remarks>
            Override this method to implement custom initialization logic.  Overrides must be sure to call the base implementation.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.SimpleComponentContainer.Stop">
            <summary>
            Stops this component and the <see cref="P:Macro.Desktop.SimpleComponentContainer.ComponentHost"/>.
            </summary>
            <remarks>
            Override this method to implement custom termination logic.  Overrides must be sure to call the base implementation.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.SimpleComponentContainer.ShowValidation(System.Boolean)">
            <summary>
            Sets the <see cref="P:Macro.Desktop.ApplicationComponent.ValidationVisible"/> property and raises the 
            <see cref="E:Macro.Desktop.ApplicationComponent.ValidationVisibleChanged"/> event.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SimpleComponentContainer.EnsureStarted(Macro.Desktop.IApplicationComponent)">
            <summary>
            Does nothing, since the hosted component is started by default.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SimpleComponentContainer.EnsureVisible(Macro.Desktop.IApplicationComponent)">
            <summary>
            Does nothing, since the hosted component is visible by default.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SimpleComponentContainer.OK">
            <summary>
            Called by the view to indicate the user dismissed the dialog with "Ok"; the <see cref="P:Macro.Desktop.ApplicationComponent.ExitCode"/>
            is set to <see cref="F:Macro.Desktop.ApplicationComponentExitCode.Accepted"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SimpleComponentContainer.Cancel">
            <summary>
            Called by the view to indicate the user dismissed the dialog with "Cancel"; the <see cref="P:Macro.Desktop.ApplicationComponent.ExitCode"/>
            is set to <see cref="F:Macro.Desktop.ApplicationComponentExitCode.None"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.SimpleComponentContainer.ComponentHost">
            <summary>
            The host object for the contained <see cref="T:Macro.Desktop.IApplicationComponent"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.SimpleComponentContainer.HasValidationErrors">
            <summary>
            Gets a value indicating whether there are any data validation errors.
            </summary>
        </member>
        <member name="P:Macro.Desktop.SimpleComponentContainer.ContainedComponents">
            <summary>
            Gets an enumeration of the contained components.
            </summary>
        </member>
        <member name="P:Macro.Desktop.SimpleComponentContainer.VisibleComponents">
            <summary>
            Gets an enumeration of the components that are currently visible.
            </summary>
        </member>
        <member name="P:Macro.Desktop.SimpleComponentContainer.HostImpl.CommandHistory">
            <summary>
            Contained components will use the comand history provided by the host that 
            owns the container.
            </summary>
        </member>
        <member name="P:Macro.Desktop.SimpleComponentContainer.HostImpl.Title">
            <summary>
            Gets or sets the title displayed in the user-interface.
            </summary>
        </member>
        <member name="T:Macro.Desktop.CursorToken">
            <summary>
            A helper class for storing information about cursors that are to be
            shown in the view.
            </summary>
        </member>
        <member name="M:Macro.Desktop.CursorToken.#ctor(Macro.Desktop.CursorToken.SystemCursors)">
            <summary>
            Constructor.
            </summary>
            <param name="systemCursor">The system cursor to show in the view.</param>
        </member>
        <member name="M:Macro.Desktop.CursorToken.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            The resource is resolved using the calling assembly (from <see cref="M:System.Reflection.Assembly.GetCallingAssembly"/>).
            </remarks>
            <param name="resourceName">The resource name of the cursor.</param>
        </member>
        <member name="M:Macro.Desktop.CursorToken.#ctor(System.String,System.Reflection.Assembly)">
            <summary>
            Constructor.
            </summary>
            <param name="resourceName">The resource name of the cursor.</param>
            <param name="resourceAssembly">The assembly where the cursor resource resides.</param>
        </member>
        <member name="P:Macro.Desktop.CursorToken.ResourceName">
            <summary>
            Gets the string resource name of the cursor.
            </summary>
        </member>
        <member name="P:Macro.Desktop.CursorToken.Resolver">
            <summary>
            Gets t<see cref="T:Macro.Common.Utilities.IResourceResolver"/> for the cursor resource.
            </summary>
        </member>
        <member name="P:Macro.Desktop.CursorToken.IsSystemCursor">
            <summary>
            Gets whether or not the cursor is one of the <see cref="T:Macro.Desktop.CursorToken.SystemCursors"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.CursorToken.SystemCursors">
            <summary>
            Common cursors normally provided by the system.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.Arrow">
            <summary>
            An arrow cursor.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.Cross">
            <summary>
            A crosshair cursor.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.Hand">
            <summary>
            A 'hand' cursor.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.Help">
            <summary>
            A Help (?) cursor.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.HSplit">
            <summary>
            A horizontal splitter (resize) cursor.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.IBeam">
            <summary>
            An I-Beam (or text editing) cursor.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.No">
            <summary>
            A cursor indicating that an operation cannot occur.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.NoMove2D">
            <summary>
            A cursor indicating that a move (drag/drop) operation cannot occur.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.NoMoveHoriz">
            <summary>
            A cursor indicating that a horizontal move operation cannot occur.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.NoMoveVert">
            <summary>
            A cursor indicating that a vertical move operation cannot occur.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.PanEast">
            <summary>
            A cursor with a right-hand arrow.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.PanNE">
            <summary>
            A 'move' cursor with North (up) and East (left) arrows.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.PanNorth">
            <summary>
            A 'move' cursor with an up arrow.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.PanNW">
            <summary>
            A 'move' cursor with North (up) and West (left) arrows.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.PanSE">
            <summary>
            A 'move' cursor with South (down) and East (right) arrows.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.PanSouth">
            <summary>
            A 'move' cursor with a South (down) arrow.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.PanSW">
            <summary>
            A 'move' cursor with South (down) and West (left) arrows.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.PanWest">
            <summary>
            A 'move' cursor with a West (left) arrow.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.SizeAll">
            <summary>
            A 'move' cursor with arrows in all directions.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.SizeNESW">
            <summary>
            A 'move' cursor with North-east and South-west arrows.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.SizeNS">
            <summary>
            A 'move' cursor with North-south arrows.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.SizeNWSE">
            <summary>
            A 'move' cursor with North-west and South-east arrows.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.SizeWE">
            <summary>
            A 'move' cursor with West-east arrows.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.UpArrow">
            <summary>
            A cursor with an 'up' arrow.
            </summary>
        </member>
        <member name="F:Macro.Desktop.CursorToken.SystemCursors.VSplit">
            <summary>
            A vertical splitter (resize) cursor.
            </summary>
        </member>
        <member name="T:Macro.Desktop.DesktopObjectState">
            <summary>
            Defines the possible states for a <see cref="T:Macro.Desktop.DesktopObject"/>.
            </summary>
        </member>
        <member name="F:Macro.Desktop.DesktopObjectState.New">
            <summary>
            The object has been created, but not opened.
            </summary>
        </member>
        <member name="F:Macro.Desktop.DesktopObjectState.Opening">
            <summary>
            The object is in the process of opening.
            </summary>
        </member>
        <member name="F:Macro.Desktop.DesktopObjectState.Open">
            <summary>
            The object is open.
            </summary>
        </member>
        <member name="F:Macro.Desktop.DesktopObjectState.Closing">
            <summary>
            The object is in the process of closing, but may return to the <see cref="F:Macro.Desktop.DesktopObjectState.Open"/> state if the operation is cancelled.
            </summary>
        </member>
        <member name="F:Macro.Desktop.DesktopObjectState.Closed">
            <summary>
            The object has closed and is disposed.
            </summary>
        </member>
        <member name="T:Macro.Desktop.DefaultSuggestionProvider`1">
            <summary>
            A default implementation of <see cref="T:Macro.Desktop.ISuggestionProvider"/>, dynamically providing suggested
            text based on user input.
            </summary>
            <typeparam name="TItem">The type of object for which suggestions should be made.</typeparam>
        </member>
        <member name="T:Macro.Desktop.SuggestionProviderBase`1">
            <summary>
            Abstract base class for implementations of <see cref="T:Macro.Desktop.ISuggestionProvider"/> that provides most of the boilerplate
            functionality.
            </summary>
            <remarks>
            <para>
            This class implements a two-phase algorithm for providing a list of suggestions in response to a query string.  In the first phase,
            the query string is used to obtain a "shortlist" of suggestions.  Once the shortlist has been obtained, the second phase is entered,
            where subsequent refinements of the query string are used to refine the shortlist.  Clearing the query
            string, or modifying it such that it is no longer a refinement of the query that generated the initial shortlist, causes
            a transition back to the first phase, where the query is used to obtain a new shortlist.
            </para>
            <para>
            It is the responsibility of the subclass to obtain the shortlist by implementing the <see cref="M:Macro.Desktop.SuggestionProviderBase`1.GetShortList(System.String)"/> method.  This method
            is always invoked on a background thread, in order to avoid locking up the user-interface.  Therefore, the subclass need not worry
            about the duration of execution of this method (within reason).  The method may return null in the event that the specified query string
            is too broad to return a shortlist.  In this case, the method will be called repeatedly, with each change to the query string, until
            it returns a non-null value.
            </para>
            <para>
            The subclass may choose to implement the refinement logic as well, by overriding <see cref="M:Macro.Desktop.SuggestionProviderBase`1.RefineShortList(System.Collections.Generic.IList{`0},System.String)"/>.  However,
            this is typically not necessary as several standard refinement strategies are provided.  These are <see cref="F:Macro.Desktop.SuggestionProviderBase`1.RefinementStrategies.StartsWith"/>,
            which refines the list to include only those items that start with the query string, and
            <see cref="F:Macro.Desktop.SuggestionProviderBase`1.RefinementStrategies.MatchAllTerms"/>, which refines the list to include only those items that contain all terms specified
            in the query string, regardless of the order of those terms.  This is the default strategy used, in not explicitly specified.
            </para>
            </remarks>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:Macro.Desktop.SuggestionProviderBase`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SuggestionProviderBase`1.#ctor(Macro.Desktop.SuggestionProviderBase{`0}.IRefinementStrategy)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SuggestionProviderBase`1.Macro#Desktop#ISuggestionProvider#SetQuery(System.String)">
            <summary>
            Called by the user-inteface to inform this object of changes in the user query text.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SuggestionProviderBase`1.GetShortList(System.String)">
            <summary>
            Called to obtain the initial source list for the specified query.  May return null if no items are available.
            </summary>
            <remarks>
            <para>
            This method is called to obtain an initial list of items for a given query.  The method should return 
            null if no items are available for the specified query (or if the query is too "broad" to return any suggestions).
            This method is called repeatedly each time the user updates the query, until a non-null result is returned.
            Once this method returns a non-null result, it is not called again as long as subsequent queries are increasingly
            "specific", as defined by the implementation of <see cref="M:Macro.Desktop.SuggestionProviderBase`1.IsQueryRefinement(System.String,System.String)"/>.  The method <see cref="M:Macro.Desktop.SuggestionProviderBase`1.RefineShortList(System.Collections.Generic.IList{`0},System.String)"/> is called instead.
            However, as soon as a query is encountered that is less specific than the query that generated the shortlist
            (e.g. the user presses backspace enough times), this method will be called again to generate a new source list.
            </para>
            <para>
            In order to keep the UI responsive, this method is invoked on a background thread, meaning that the implementation
            is free to make remote calls or perform other time consuming tasks to generate the list, without fear of locking up the UI.
            </para>
            </remarks>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.SuggestionProviderBase`1.FormatItem(`0)">
            <summary>
            Called to format the specified item for display in the suggestion list.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.SuggestionProviderBase`1.RefineShortList(System.Collections.Generic.IList{`0},System.String)">
            <summary>
            Called to successively refine a shortlist of items.
            </summary>
            <param name="shortList"></param>
            <param name="query"></param>
            <returns></returns>
            <remarks>
            This method is called to refine the short-list obtained by the initial call(s) to <see cref="M:Macro.Desktop.SuggestionProviderBase`1.GetShortList(System.String)"/>.
            The default implementation invokes the refinement strategy that was specified in the constructor.
            Override this method to implement custom refinement logic.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.SuggestionProviderBase`1.IsQueryRefinement(System.String,System.String)">
            <summary>
            Called to determine if the specified query is a refinement of the previous query,
            that is, whether the existing shortlist can be refined or should be discarded.
            </summary>
            <param name="query"></param>
            <param name="previousQuery"></param>
            <returns></returns>
            <remarks>
            The default implementation of this method returns true if query starts with previousQuery.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.SuggestionProviderBase`1.Update(System.String)">
            <summary>
            Updates the state machine.
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:Macro.Desktop.SuggestionProviderBase`1.ChangeState(Macro.Desktop.SuggestionProviderBase{`0}.State)">
            <summary>
            Called by the <see cref="T:Macro.Desktop.SuggestionProviderBase`1.State"/> classes to change the state of this object.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Macro.Desktop.SuggestionProviderBase`1.PostSuggestions(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Posts the specified list of suggested items to the consumer of this provider.
            </summary>
            <param name="suggestions"></param>
        </member>
        <member name="P:Macro.Desktop.SuggestionProviderBase`1.AutoSort">
            <summary>
             Gets a value indicating whether this instance will automatically sort contents according display format.
            </summary>
        </member>
        <member name="E:Macro.Desktop.SuggestionProviderBase`1.Macro#Desktop#ISuggestionProvider#SuggestionsProvided">
            <summary>
            Notifies the user-interfaces that an updated list of suggestions is available.
            </summary>
        </member>
        <member name="T:Macro.Desktop.SuggestionProviderBase`1.IRefinementStrategy">
            <summary>
            Defines an interface to an object that is responsible for refining a shortlist according to a query string.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SuggestionProviderBase`1.IRefinementStrategy.Refine(System.Collections.Generic.IList{`0},System.String,System.Converter{`0,System.String})">
            <summary>
            Refines the specified shortlist to obtain an even shorter list, based on the specified query.
            </summary>
            <param name="shortList"></param>
            <param name="query"></param>
            <param name="formatter"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.Desktop.SuggestionProviderBase`1.RefinementStrategies">
            <summary>
            Defines a set of predefined refinement strategies.
            </summary>
        </member>
        <member name="F:Macro.Desktop.SuggestionProviderBase`1.RefinementStrategies.StartsWith">
            <summary>
            A refinement strategy that will return only items that start with the query string.
            </summary>
        </member>
        <member name="F:Macro.Desktop.SuggestionProviderBase`1.RefinementStrategies.MatchAllTerms">
            <summary>
            A refinement strategy that will return items containing all of the terms in the query string,
            regardless of the order in which the terms occur.
            </summary>
        </member>
        <member name="T:Macro.Desktop.SuggestionProviderBase`1.State">
            <summary>
            Base class for states
            </summary>
        </member>
        <member name="M:Macro.Desktop.SuggestionProviderBase`1.State.Begin">
            <summary>
            Called when a state is first instantiated, to "begin" that state.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SuggestionProviderBase`1.State.Update(System.String)">
            <summary>
            Called when the user updates the query string.
            </summary>
            <param name="query"></param>
        </member>
        <member name="T:Macro.Desktop.SuggestionProviderBase`1.CleanState">
            <summary>
            Defines the state when the shortlist is not known.
            </summary>
        </member>
        <member name="T:Macro.Desktop.SuggestionProviderBase`1.ShortlistRequestState">
            <summary>
            Defines the state where a request for a shortlist is in progress.
            </summary>
        </member>
        <member name="T:Macro.Desktop.SuggestionProviderBase`1.ShortlistKnownState">
            <summary>
            Defines the state where the shortlist is known.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DefaultSuggestionProvider`1.#ctor(System.Collections.Generic.IList{`0},System.Converter{`0,System.String})">
            <summary>
            Constructor that accepts the full list of possible items.
            </summary>
            <param name="sourceList">The sorted source list of objects.</param>
            <param name="formatHandler">A delegate that returns a formatted text string for the input object.</param>
        </member>
        <member name="M:Macro.Desktop.DefaultSuggestionProvider`1.#ctor(System.Collections.Generic.IList{`0},System.Converter{`0,System.String},Macro.Desktop.SuggestionProviderBase{`0}.IRefinementStrategy)">
            <summary>
            Constructor that accepts the full list of possible items.
            </summary>
            <param name="sourceList">The sorted source list of objects.</param>
            <param name="formatHandler">A delegate that returns a formatted text string for the input object.</param>
            <param name="refinementStrategy">An object that specifies how the shortlist is refined in response to user input.</param>
        </member>
        <member name="M:Macro.Desktop.DefaultSuggestionProvider`1.#ctor(System.Converter{System.String,System.Collections.Generic.IList{`0}},System.Converter{`0,System.String})">
            <summary>
            Constructor that accepts a delegate for providing a shortlist on demand.
            </summary>
            <param name="shortlistProvider">A delegate that obtains the shortlist for a specified query, or null to indicate that it should be called again.</param>
            <param name="formatHandler">A delegate that returns a formatted text string for the input object.</param>
        </member>
        <member name="M:Macro.Desktop.DefaultSuggestionProvider`1.#ctor(System.Converter{System.String,System.Collections.Generic.IList{`0}},System.Converter{`0,System.String},Macro.Desktop.SuggestionProviderBase{`0}.IRefinementStrategy)">
            <summary>
            Constructor that accepts a delegate for providing a shortlist on demand.
            </summary>
            <param name="shortlistProvider">A delegate that obtains the shortlist for a specified query, or null to indicate that it should be called again.</param>
            <param name="formatHandler">A delegate that returns a formatted text string for the input object.</param>
            <param name="refinementStrategy">An object that specifies how the shortlist is refined in response to user input.</param>
        </member>
        <member name="M:Macro.Desktop.DefaultSuggestionProvider`1.GetShortList(System.String)">
            <summary>
            Called to obtain the initial source list for the specified query.  May return null if no items are available.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DefaultSuggestionProvider`1.FormatItem(`0)">
            <summary>
            Called to format the specified item for display in the suggestion list.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.AuthorityTokens.Desktop">
            <summary>
            Tokens that allow access to administrative functionality.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Alert">
            <summary>
            Represents a record of an alert.
            </summary>
        </member>
        <member name="T:Macro.Desktop.AlertLog">
            <summary>
            Maintains a log of alerts that have occured during process execution.
            </summary>
        </member>
        <member name="M:Macro.Desktop.AlertLog.Log(Macro.Desktop.AlertNotificationArgs)">
            <summary>
            Logs a new alert.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Macro.Desktop.AlertLog.AcknowledgeAll">
            <summary>
            Marks any unacknowledged alerts as being acknowledged.
            </summary>
        </member>
        <member name="P:Macro.Desktop.AlertLog.Instance">
            <summary>
            Gets the singleton instance of the alert log.
            </summary>
        </member>
        <member name="E:Macro.Desktop.AlertLog.AlertLogged">
            <summary>
            Occurs when a new alert is logged.
            </summary>
        </member>
        <member name="P:Macro.Desktop.AlertLog.Entries">
            <summary>
            Returns the alert log entries in chronological order.
            </summary>
        </member>
        <member name="T:Macro.Desktop.WorkspaceDialogBox">
            <summary>
            Represents a workspace-modal dialog box.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IWorkspaceDialogBox">
            <summary>
            Defines the public interface to a workspace dialog box.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IWorkspaceDialogBox.Workspace">
            <summary>
            Gets the workspace that owns this dialog box.
            </summary>
        </member>
        <member name="P:Macro.Desktop.IWorkspaceDialogBox.Component">
            <summary>
            Gets the hosted component.
            </summary>
        </member>
        <member name="M:Macro.Desktop.WorkspaceDialogBox.#ctor(Macro.Desktop.DialogBoxCreationArgs,Macro.Desktop.Workspace)">
            <summary>
            Constructor.
            </summary>
            <param name="args"></param>
            <param name="workspace"></param>
        </member>
        <member name="M:Macro.Desktop.WorkspaceDialogBox.CanClose">
            <summary>
            Asks the object whether it is in a closable state without user intervention.
            </summary>
            <returns>True if the object can be closed, otherwise false.</returns>
        </member>
        <member name="M:Macro.Desktop.WorkspaceDialogBox.PrepareClose(Macro.Desktop.CloseReason)">
            <summary>
            Gives the hosted component a chance to prepare for a forced exit.
            </summary>
        </member>
        <member name="M:Macro.Desktop.WorkspaceDialogBox.Initialize">
            <summary>
            Starts the hosted component.
            </summary>
        </member>
        <member name="M:Macro.Desktop.WorkspaceDialogBox.Dispose(System.Boolean)">
            <summary>
            Stops the hosted component.
            </summary>
        </member>
        <member name="M:Macro.Desktop.WorkspaceDialogBox.CreateView">
            <summary>
            Creates a view for this dialog box.
            </summary>
        </member>
        <member name="P:Macro.Desktop.WorkspaceDialogBox.Component">
            <summary>
            Gets the hosted component.
            </summary>
        </member>
        <member name="P:Macro.Desktop.WorkspaceDialogBox.Workspace">
            <summary>
            Gets the workspace that owns this dialog box.
            </summary>
        </member>
        <member name="P:Macro.Desktop.WorkspaceDialogBox.SizeHint">
            <summary>
            Gets the size hint.
            </summary>
        </member>
        <member name="P:Macro.Desktop.WorkspaceDialogBox.Size">
            <summary>
            Gets the explicit size of the dialog, if specified.
            </summary>
        </member>
        <member name="P:Macro.Desktop.WorkspaceDialogBox.WorkspaceDialogBoxView">
            <summary>
            Gets the view for this object as an <see cref="T:Macro.Desktop.IWorkspaceDialogBoxView"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.WorkspaceDialogBox.Macro#Desktop#IWorkspaceDialogBox#Workspace">
            <summary>
            Gets the workspace that owns this dialog box.
            </summary>
        </member>
        <member name="T:Macro.Desktop.WorkspaceCreationArgs">
            <summary>
            Holds parameters that control the creation of a <see cref="T:Macro.Desktop.Workspace"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.WorkspaceCreationArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Macro.Desktop.WorkspaceCreationArgs.#ctor(Macro.Desktop.IApplicationComponent,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="component"></param>
            <param name="title"></param>
            <param name="name"></param>
        </member>
        <member name="P:Macro.Desktop.WorkspaceCreationArgs.Component">
            <summary>
            Gets or sets the hosted component.
            </summary>
        </member>
        <member name="P:Macro.Desktop.WorkspaceCreationArgs.UserClosable">
            <summary>
            Gets or sets a value indicating whether this workspace can be closed directly by the user.
            </summary>
        </member>
        <member name="T:Macro.Desktop.MemorableUndoableCommand">
            <summary>
            A command that facilitates undo/redo using the <b>Memento</b> design pattern.
            </summary>
            <remarks>
            <para>
            It is common for the framework to check the equality of the 
            <see cref="P:Macro.Desktop.MemorableUndoableCommand.BeginState"/> and <see cref="P:Macro.Desktop.MemorableUndoableCommand.EndState"/> mementos in order to decide whether or not an
            <see cref="T:Macro.Desktop.MemorableUndoableCommand"/> should be added to a <see cref="T:Macro.Desktop.CommandHistory"/>
            object.  Therefore, it is good practice to override and implement the
            <see cref="M:System.Object.Equals(System.Object)"/> method on memento classes.
            </para>
            </remarks>
            <seealso cref="T:Macro.Desktop.CommandHistory"/>
            <seealso cref="T:Macro.Desktop.IMemorable"/>
        </member>
        <member name="M:Macro.Desktop.MemorableUndoableCommand.#ctor(Macro.Desktop.IMemorable)">
            <summary>
            Constructor.
            </summary>
            <param name="originator">The originator is the object responsible for creating
            memento objects and restoring state from them.</param>
        </member>
        <member name="M:Macro.Desktop.MemorableUndoableCommand.Execute">
            <summary>
            Performs a 'redo' by calling <see cref="M:Macro.Desktop.IMemorable.SetMemento(System.Object)"/> on the 
            <see cref="P:Macro.Desktop.MemorableUndoableCommand.Originator"/> with the <see cref="P:Macro.Desktop.MemorableUndoableCommand.EndState"/> as a parameter.
            </summary>
        </member>
        <member name="M:Macro.Desktop.MemorableUndoableCommand.Unexecute">
            <summary>
            Performs an 'undo' by calling <see cref="M:Macro.Desktop.IMemorable.SetMemento(System.Object)"/> on the 
            <see cref="P:Macro.Desktop.MemorableUndoableCommand.Originator"/> with the <see cref="P:Macro.Desktop.MemorableUndoableCommand.BeginState"/> as a parameter.
            </summary>
        </member>
        <member name="P:Macro.Desktop.MemorableUndoableCommand.Originator">
            <summary>
            Gets the originator.
            </summary>
            <remarks>
            The originator is the object responsible for creating
            mementos and restoring state from them.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.MemorableUndoableCommand.BeginState">
            <summary>
            Gets the begin state, which is the state of the <see cref="P:Macro.Desktop.MemorableUndoableCommand.Originator"/> before
            the operation resulting in this <see cref="T:Macro.Desktop.MemorableUndoableCommand"/> was performed.
            </summary>
        </member>
        <member name="P:Macro.Desktop.MemorableUndoableCommand.EndState">
            <summary>
            Gets the end state, which is the state of the <see cref="P:Macro.Desktop.MemorableUndoableCommand.Originator"/> after
            the operation resulting in this <see cref="T:Macro.Desktop.MemorableUndoableCommand"/> was performed.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.ValidationResult">
            <summary>
            Represents the result of an <see cref="T:Macro.Desktop.Validation.IValidationRule"/> evaluation.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationResult.Combine(System.Collections.Generic.IEnumerable{Macro.Desktop.Validation.ValidationResult})">
            <summary>
            Combines a collection of validation results into a single result.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationResult.#ctor(System.Boolean,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="success">Indicates whether the validation succeeded.</param>
            <param name="message">When validation fails, a message indicating why the validation failed.</param>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationResult.#ctor(System.Boolean,System.String[])">
            <summary>
            Constructor.
            </summary>
            <param name="success">Indicates whether the validation succeeded.</param>
            <param name="messages">When validation fails, a set of messages indicating why the validation failed.</param>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationResult.GetMessageString(System.String)">
            <summary>
            Concatenates the elements of the <see cref="P:Macro.Desktop.Validation.ValidationResult.Messages"/> property into a single message using the specified separator.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Validation.ValidationResult.Success">
            <summary>
            True if the validation was successful.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Validation.ValidationResult.Messages">
            <summary>
            Messages that describe why validation was not successful.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.ValidationRuleSourceExtensionPoint">
            <summary>
            Defines an extension point to allow external sources of validation rule sets.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.ValidationCache">
            <summary>
            Caches attribute and XML-based validation rules for application components.
            </summary>
            <remarks>
            All operations on this class are safe for use by multiple threads.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationCache.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationCache.GetRules(System.Type)">
            <summary>
            Retrieves rules from cache, or builds rules if not cached.
            </summary>
            <param name="applicationComponentClass"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Validation.ValidationCache.Invalidate(System.Type)">
            <summary>
            Invalidates the rules cache for the specified application component class, causing the rules
            to be re-compiled the next time <see cref="M:Macro.Desktop.Validation.ValidationCache.GetRules(System.Type)"/> is called.
            </summary>
            <param name="applicationComponentClass"></param>
        </member>
        <member name="P:Macro.Desktop.Validation.ValidationCache.Instance">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.ClickHandlerAttribute">
            <summary>
            Declares a click handler binding for a click action.
            </summary>
            <remarks>
            This attribute binds the click handler of the action specified by the action ID to
            the specified method on the target class.  The method name must
            refer to a void method on the target class that takes no parameters.  
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Actions.ClickHandlerAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="actionID">The logical action ID.</param>
            <param name="handlerMethod">The name of the click handler method.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.ClickHandlerAttribute.Apply(Macro.Desktop.Actions.IActionBuildingContext)">
            <summary>
            Applies this attribute to an <see cref="T:Macro.Desktop.Actions.IAction"/> instance, via the specified <see cref="T:Macro.Desktop.Actions.IActionBuildingContext"/>,
            by binding the appropriate handler method on the target object to the action.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.ClickHandlerAttribute.HandlerMethodName">
            <summary>
            Gets the name of the click handler method.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Tables.TableColumnCollection`1">
            <summary>
            Implementation of <see cref="T:Macro.Desktop.Tables.ITableColumnCollection"/> for use with the <see cref="T:Macro.Desktop.Tables.Table`1"/> class.
            </summary>
            <typeparam name="TItem">The type of item that the table holds.</typeparam>
        </member>
        <member name="T:Macro.Desktop.Tables.ITableItemCollection">
            <summary>
            Defines the interface to the collection of items in a <see cref="T:Macro.Desktop.Tables.ITable"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.ITableItemCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Tables.ITableItemCollection.Item(System.Int32)">
            <summary>
            Gets the item in the collection at the specified index.
            </summary>
            <param name="index">The index of the item to get.</param>
            <returns>The item in the collection at the specified index.</returns>
        </member>
        <member name="T:Macro.Desktop.Selection">
            <summary>
            Default implementation of <see cref="T:Macro.Desktop.ISelection"/>.  
            </summary>
        </member>
        <member name="F:Macro.Desktop.Selection.Empty">
            <summary>
            Represents an empty <see cref="T:Macro.Desktop.ISelection"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Selection.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Selection.#ctor(System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="item">The single item that is selected.</param>
        </member>
        <member name="M:Macro.Desktop.Selection.#ctor(System.Collections.IEnumerable)">
            <summary>
            Constructor for multi-selection.
            </summary>
            <param name="items">The selected items.</param>
        </member>
        <member name="M:Macro.Desktop.Selection.Union(Macro.Desktop.ISelection)">
            <summary>
            Computes the union of this selection with another and returns it.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Selection.Intersect(Macro.Desktop.ISelection)">
            <summary>
            Computes the intersection of this selection with another and returns it.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Selection.Subtract(Macro.Desktop.ISelection)">
            <summary>
            Returns an <see cref="T:Macro.Desktop.ISelection"/> that contains every item contained
            in this one that doesn't exist in <param name="other"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Selection.Contains(System.Object)">
            <summary>
            Determines whether this selection contains the input object.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Selection.Equals(Macro.Desktop.ISelection)">
            <summary>
            Gets whether or not this <see cref="T:Macro.Desktop.ISelection"/> is considered equivalent to <paramref name="other"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Selection.Equals(System.Object)">
            <summary>
            Gets whether or not this object is considered equal to another.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Selection.GetHashCode">
            <summary>
            Gets a hash code for this object.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Selection.Items">
            <summary>
            Returns the set of items that are currently selected.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Selection.Item">
            <summary>
            Returns the first item in the list of selected items, or null if nothing is selected.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Selection`1">
            <summary>
            Generic implementation of <see cref="T:Macro.Desktop.ISelection"/>.
            </summary>
            <typeparam name="T">The type of items in the selection.</typeparam>
        </member>
        <member name="F:Macro.Desktop.Selection`1.Empty">
            <summary>
            Represents an empty <see cref="T:Macro.Desktop.Selection`1"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Selection`1.#ctor">
            <summary>
            Initializes an empty selection.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Selection`1.#ctor(`0)">
            <summary>
            Initializes a selection that consists of a single item, or an empty selection if <typeparamref name="T"/> is a reference type and <paramref name="item"/> is null.
            </summary>
            <param name="item">The item in the selection, or null to specify an empty selection if <typeparamref name="T"/> is a reference type.</param>
        </member>
        <member name="M:Macro.Desktop.Selection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a selection from the specified enumeration.
            </summary>
            <param name="items">The items in the selection, or null to specify an empty selection.</param>
        </member>
        <member name="M:Macro.Desktop.Selection`1.Union(Macro.Desktop.ISelection)">
            <summary>
            Returns the union of this selection with another selection.
            </summary>
            <param name="other">The other selection with whom this selection is to be unioned.</param>
        </member>
        <member name="M:Macro.Desktop.Selection`1.Intersect(Macro.Desktop.ISelection)">
            <summary>
            Returns the intersection of this selection with another selection.
            </summary>
            <param name="other">The other selection with whom this selection is to be intersected.</param>
        </member>
        <member name="M:Macro.Desktop.Selection`1.Subtract(Macro.Desktop.ISelection)">
            <summary>
            Returns the subtraction of another selection from this selection.
            </summary>
            <param name="other">The other selection which is to be subtracted from this selection.</param>
        </member>
        <member name="M:Macro.Desktop.Selection`1.Contains(`0)">
            <summary>
            Determines whether or not the specified item is in this selection.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Selection`1.Equals(Macro.Desktop.ISelection)">
            <summary>
            Gets whether or not this <see cref="T:Macro.Desktop.ISelection"/> is considered equivalent to <paramref name="other"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Selection`1.Equals(System.Object)">
            <summary>
            Gets whether or not this object is considered equal to another.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Selection`1.GetHashCode">
            <summary>
            Gets a hash code for this object.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Selection`1.Items">
            <summary>
            Returns the set of selected items.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Selection`1.Count">
            <summary>
            Gets the number of items in the selection.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Selection`1.Item">
            <summary>
            Returns the first item in the selection, or null if nothing is selected.
            </summary>
        </member>
        <member name="T:Macro.Desktop.BlockingOperationDelegate">
            <summary>
            A delegate to be executed in the view.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IBlockingOperationView">
            <summary>
            An interface for executing long-running operations in the
            view while showing a wait cursor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IBlockingOperationView.Run(Macro.Desktop.BlockingOperationDelegate)">
            <summary>
            Executes the specified operation in the view, showing a wait cursor.
            </summary>
        </member>
        <member name="T:Macro.Desktop.TabbedGroupsComponentContainerViewExtensionPoint">
            <summary>
            Defines an extension point for views onto the <see cref="T:Macro.Desktop.TabGroupComponentContainer"/>
            </summary>
        </member>
        <member name="T:Macro.Desktop.LayoutDirection">
            <summary>
            An enumeration describing the available layout directions of the <see cref="T:Macro.Desktop.TabGroupComponentContainer"/>.
            </summary>
        </member>
        <member name="F:Macro.Desktop.LayoutDirection.Horizontal">
            <summary>
            The layout should be horizontal.
            </summary>
        </member>
        <member name="F:Macro.Desktop.LayoutDirection.Vertical">
            <summary>
            The layout should be vertical.
            </summary>
        </member>
        <member name="T:Macro.Desktop.TabGroupComponentContainer">
            <summary>
            An application component that serves as a container for other components, hosted in <see cref="T:Macro.Desktop.TabGroup"/>s.
            </summary>
        </member>
        <member name="M:Macro.Desktop.TabGroupComponentContainer.#ctor(Macro.Desktop.LayoutDirection)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.TabGroupComponentContainer.AddTabGroup(Macro.Desktop.TabGroup)">
            <summary>
            Adds a <see cref="T:Macro.Desktop.TabGroup"/> to the container.
            </summary>
        </member>
        <member name="M:Macro.Desktop.TabGroupComponentContainer.GetTabGroup(Macro.Desktop.TabPage)">
            <summary>
            Gets the <see cref="T:Macro.Desktop.TabGroup"/> that owns a particular <see cref="T:Macro.Desktop.TabPage"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.TabGroupComponentContainer.Start">
            <summary>
            Starts this component and all the contained <see cref="T:Macro.Desktop.TabGroup"/>s.
            </summary>
        </member>
        <member name="M:Macro.Desktop.TabGroupComponentContainer.Stop">
            <summary>
            Stops this component and all the contained <see cref="T:Macro.Desktop.TabGroup"/>s.
            </summary>
        </member>
        <member name="M:Macro.Desktop.TabGroupComponentContainer.EnsureVisible(Macro.Desktop.IApplicationComponent)">
            <summary>
            Does nothing, since all contained <see cref="T:Macro.Desktop.IApplicationComponent"/>s are already visible.
            </summary>
        </member>
        <member name="M:Macro.Desktop.TabGroupComponentContainer.EnsureStarted(Macro.Desktop.IApplicationComponent)">
            <summary>
            Does nothing, since all contained <see cref="T:Macro.Desktop.IApplicationComponent"/>s have already been started.
            </summary>
        </member>
        <member name="P:Macro.Desktop.TabGroupComponentContainer.TabGroups">
            <summary>
            Gets a list of the <see cref="T:Macro.Desktop.TabGroup"/>s in the container.
            </summary>
        </member>
        <member name="P:Macro.Desktop.TabGroupComponentContainer.LayoutDirection">
            <summary>
            Gets the <see cref="P:Macro.Desktop.TabGroupComponentContainer.LayoutDirection"/> of the container.
            </summary>
        </member>
        <member name="P:Macro.Desktop.TabGroupComponentContainer.ExportedActions">
            <summary>
            Unless overridden, returns the union of all actions in the contained <see cref="T:Macro.Desktop.TabGroup"/>s.
            </summary>
        </member>
        <member name="P:Macro.Desktop.TabGroupComponentContainer.ContainedComponents">
            <summary>
            Enumerates all the <see cref="T:Macro.Desktop.IApplicationComponent"/>s hosted in the contained <see cref="T:Macro.Desktop.TabGroup"/>s.
            </summary>
        </member>
        <member name="P:Macro.Desktop.TabGroupComponentContainer.VisibleComponents">
            <summary>
            Enumerates all the <see cref="T:Macro.Desktop.IApplicationComponent"/>s hosted 
            in the contained <see cref="T:Macro.Desktop.TabGroup"/>s that are currently visible.
            </summary>
        </member>
        <member name="T:Macro.Desktop.TabGroupComponentContainer.TabGroupHost">
            <summary>
            A host for <see cref="T:Macro.Desktop.TabGroup"/>s.
            </summary>
        </member>
        <member name="T:Macro.Desktop.UserInteraction">
            <summary>
            User-interaction policies.
            </summary>
        </member>
        <member name="F:Macro.Desktop.UserInteraction.Allowed">
            <summary>
            Interaction with the user is allowed.
            </summary>
        </member>
        <member name="F:Macro.Desktop.UserInteraction.NotAllowed">
            <summary>
            Interaction with the user is not allowed.
            </summary>
        </member>
        <member name="T:Macro.Desktop.GalleryItemEventHandler">
            <summary>
            Represents the method that handles an event involving a single <see cref="T:Macro.Desktop.IGalleryItem"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Macro.Desktop.GalleryItemEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Macro.Desktop.GalleryItemEventArgs">
            <summary>
            Provides data for an event involving a single <see cref="T:Macro.Desktop.IGalleryItem"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.GalleryItemEventArgs.#ctor(Macro.Desktop.IGalleryItem)">
            <summary>
            Constructs a new <see cref="T:Macro.Desktop.GalleryItemEventArgs"/>.
            </summary>
            <param name="item">The <see cref="T:Macro.Desktop.IGalleryItem"/>.</param>
        </member>
        <member name="P:Macro.Desktop.GalleryItemEventArgs.Item">
            <summary>
            Gets the <see cref="T:Macro.Desktop.IGalleryItem"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.FeatureAuthorizationSpecification">
            <summary>
            An implementation of <see cref="T:Macro.Common.Specifications.ISpecification"/> that tests if the identified feature is authorized by application licensing.
            </summary>
        </member>
        <member name="M:Macro.Desktop.FeatureAuthorizationSpecification.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="featureToken">The feature identification token to be checked.</param>
        </member>
        <member name="M:Macro.Desktop.Configuration.ConfigurationApplicationComponentContainer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.ConfigurationApplicationComponentContainer.Save">
            <summary>
            Save any settings modified in the hosted component.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.SettingsManagementLaunchTool">
            <summary>
            Launches the <see cref="T:Macro.Desktop.Configuration.SettingsManagementComponent"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.SettingsManagementLaunchTool.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.SettingsManagementLaunchTool.Activate">
            <summary>
            Launches the <see cref="T:Macro.Desktop.Configuration.SettingsManagementComponent"/> or activates it if it's already open.
            </summary>
            <remarks>
            This method first looks for a valid extension of <see cref="T:Macro.Common.Configuration.SettingsStoreExtensionPoint"/> and
            with which to initialize the <see cref="T:Macro.Desktop.Configuration.SettingsManagementComponent"/>.  If one is not found,
            an instance of <see cref="T:Macro.Desktop.Configuration.LocalSettingsStore"/> is instantiated and passed to the
            <see cref="T:Macro.Desktop.Configuration.SettingsManagementComponent"/>.  The <see cref="T:Macro.Desktop.Configuration.LocalSettingsStore"/> allows
            the local application settings to be modified, where by default they cannot be.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.Configuration.SettingsPropertyExtensions">
            <summary>
            This class contains some helper methods to do silly conversions that are an artifact
            of the mismatch between the types of programming patterns available in .NET 1.0 vs .NET 4.0.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.SettingsManagementComponent">
            <summary>
            The <see cref="T:Macro.Desktop.Configuration.SettingsManagementComponent"/> allows editing of
            the application and default user profile settings through a generic UI.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.SettingsManagementComponent.#ctor(Macro.Common.Configuration.ISettingsStore)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.SettingsManagementComponent.Start">
            <summary>
            Called by the host to initialize the application component.
            </summary>
             <remarks>
            Override this method to implement custom initialization logic.  Overrides must be sure to call the base implementation.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Configuration.SettingsManagementComponent.CanExit">
            <summary>
            Determines whether the component can exit without any user interaction.
            </summary>
            <returns>True if no properties are dirty, otherwise false.</returns>
        </member>
        <member name="M:Macro.Desktop.Configuration.SettingsManagementComponent.PrepareExit">
            <summary>
            Saves the changes and returns true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Configuration.SettingsManagementComponent.SettingsPropertyDoubleClicked">
            <summary>
            Executed when the <see cref="P:Macro.Desktop.Configuration.SettingsManagementComponent.SelectedSettingsProperty"/> has been double-clicked in the view.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.SettingsManagementComponent.SettingsGroupsActionModel">
            <summary>
            Gets the action model for the settings groups.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.SettingsManagementComponent.SettingsGroupTable">
            <summary>
            Gets the currently selected settings group table.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.SettingsManagementComponent.SelectedSettingsGroup">
            <summary>
            Gets the currently selected settings group (aka settings class or <see cref="T:Macro.Common.Configuration.SettingsGroupDescriptor"/>)
            as an <see cref="T:Macro.Desktop.ISelection"/>.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Configuration.SettingsManagementComponent.SelectedSettingsGroupChanged">
            <summary>
            Raised when <see cref="P:Macro.Desktop.Configuration.SettingsManagementComponent.SelectedSettingsGroup"/> has changed.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.SettingsManagementComponent.SettingsPropertiesTable">
            <summary>
            Gets a table of settings properties (<see cref="T:Macro.Desktop.Configuration.SettingsManagementComponent.Property"/>) for the
            currently selected settings group.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.SettingsManagementComponent.SettingsPropertiesActionModel">
            <summary>
            Gets the action model for the settings properties.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.SettingsManagementComponent.SelectedSettingsProperty">
            <summary>
            Gets or sets the currently selected <see cref="T:Macro.Desktop.Configuration.SettingsManagementComponent.Property"/> as an <see cref="T:Macro.Desktop.ISelection"/>.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Configuration.SettingsManagementComponent.SelectedSettingsPropertyChanged">
            <summary>
            Raised when <see cref="P:Macro.Desktop.Configuration.SettingsManagementComponent.SelectedSettingsProperty"/> has changed.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.SettingsManagementComponent.LocallyInstalledGroup">
            <summary>
            Represents a settings group that is part of the locally installed set of plugins.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.SettingsManagementComponent.Group">
            <summary>
            Base class for entries in the settings group table.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.SettingsManagementComponent.SettingsStoreGroup">
            <summary>
            Represents a settings group that was retrieved from a settings store and 
            may not exist in the locally installed plugins.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.SettingsManagementComponent.Property">
            <summary>
            Defines a settings property for presentation in properties table.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.SettingsManagementComponent.Property.#ctor(Macro.Common.Configuration.SettingsPropertyDescriptor,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="descriptor">The descriptor for the property.</param>
            <param name="value">The current value of the property.</param>
        </member>
        <member name="M:Macro.Desktop.Configuration.SettingsManagementComponent.Property.ResetValue">
            <summary>
            Resets the value to the default value.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.SettingsManagementComponent.Property.MarkClean">
            <summary>
            Marks this property as being clean again.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.SettingsManagementComponent.Property.Name">
            <summary>
            Gets the name of the settings property.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.SettingsManagementComponent.Property.TypeName">
            <summary>
            Gets the type name of the settings property.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.SettingsManagementComponent.Property.Description">
            <summary>
            Gets a description of the settings property.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.SettingsManagementComponent.Property.Scope">
            <summary>
            Gets an enum describing the scope of the settings property.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.SettingsManagementComponent.Property.DefaultValue">
            <summary>
            Gets the default value of the settings property.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.SettingsManagementComponent.Property.Value">
            <summary>
            Gets/sets the current value of the settings property.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Configuration.SettingsManagementComponent.Property.ValueChanged">
            <summary>
            Raised when <see cref="P:Macro.Desktop.Configuration.SettingsManagementComponent.Property.Value"/> has changed.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.SettingsManagementComponent.Property.UsingDefaultValue">
            <summary>
            Gets whether or not the default value matches the current value.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.SettingsManagementComponent.Property.Dirty">
            <summary>
            Gets whether or not the property setting value has been modified.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.DropDownButtonActionAttribute">
            <summary>
            Attribute class used to define <see cref="T:Macro.Desktop.Actions.DropDownButtonAction"/>s.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.DropDownButtonActionAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Attribute constructor.
            </summary>
            <param name="actionID">The logical action identifier to associate with this action.</param>
            <param name="pathHint">The suggested location of this action in the toolbar model.</param>
            <param name="clickHandler">Name of the method that will be invoked when the button is clicked.</param>
            <param name="menuModelPropertyName">The name of the property in the target class (i.e. the
            class to which this attribute is applied) that returns the menu model as an <see cref="T:Macro.Desktop.Actions.ActionModelNode"/>.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.DropDownButtonActionAttribute.Apply(Macro.Desktop.Actions.IActionBuildingContext)">
            <summary>
            Constructs/initializes an <see cref="T:Macro.Desktop.Actions.DropDownButtonAction"/> via the given <see cref="T:Macro.Desktop.Actions.IActionBuildingContext"/>.
            </summary>
            <remarks>For internal framework use only.</remarks>
        </member>
        <member name="M:Macro.Desktop.Actions.DropDownButtonActionAttribute.CreateAction(System.String,Macro.Desktop.Actions.ActionPath,Macro.Desktop.Actions.ClickActionFlags,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Factory method to instantiate the action.
            </summary>
            <param name="actionID">The logical action identifier to associate with this action.</param>
            <param name="path">The path to the action in the toolbar model.</param>
            <param name="flags">Flags specifying how the button should respond to being clicked.</param>
            <param name="resolver">The action resource resolver used to resolve the action path and icons.</param>
            <returns>A <see cref="T:Macro.Desktop.Actions.ClickAction"/>.</returns>
        </member>
        <member name="T:Macro.Desktop.Actions.DropDownActionAttribute">
            <summary>
            Attribute class used to define <see cref="T:Macro.Desktop.Actions.DropDownAction"/>s.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.DropDownActionAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="actionID">The action ID.</param>
            <param name="path">A path indicating which toolbar the dropdown button should appear on.</param>
            <param name="menuModelPropertyName">The name of the property in the target class (i.e. the
            class to which this attribute is applied) that returns the menu model as an <see cref="T:Macro.Desktop.Actions.ActionModelNode"/>.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.DropDownActionAttribute.Apply(Macro.Desktop.Actions.IActionBuildingContext)">
            <summary>
            Constructs/initializes a <see cref="T:Macro.Desktop.Actions.DropDownAction"/> via the given <see cref="T:Macro.Desktop.Actions.IActionBuildingContext"/>.
            </summary>
            <remarks>For internal framework use only.</remarks>
        </member>
        <member name="M:Macro.Desktop.Actions.DropDownActionAttribute.GetPropertyAndGetter(System.Object,System.String,System.Type,System.Reflection.PropertyInfo@,System.Reflection.MethodInfo@)">
            <summary>
            Validates the property exists and has a public get method before returning them as out parameters.
            </summary>
            <exception cref="T:Macro.Desktop.Actions.ActionBuilderException">Thrown if the property doesn't exist or does not have a public get method.</exception>
        </member>
        <member name="P:Macro.Desktop.Actions.DropDownActionAttribute.InitiallyAvailable">
            <summary>
            Gets or sets a value indicating whether or not the action should be available by default when not overriden by the action model.
            </summary>
        </member>
        <member name="T:Macro.Desktop.XMouseButtonCombo">
            <summary>
            Represents a combination of pressed mouse buttons and keyboard modifiers.
            </summary>
        </member>
        <member name="F:Macro.Desktop.XMouseButtonCombo.None">
            <summary>
            Represents the empty combination (no mouse buttons pressed).
            </summary>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonCombo.#ctor(Macro.Desktop.XMouseButtons)">
            <summary>
            Initializes an <see cref="T:Macro.Desktop.XMouseButtonCombo"/> with the specified pressed mouse buttons.
            </summary>
            <param name="mouseButtons">The pressed mouse buttons.</param>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonCombo.#ctor(Macro.Desktop.XMouseButtons,Macro.Desktop.ModifierFlags)">
            <summary>
            Initializes an <see cref="T:Macro.Desktop.XMouseButtonCombo"/> with the specified pressed mouse buttons.
            </summary>
            <param name="mouseButtons">The pressed mouse buttons.</param>
            <param name="modifiers">The pressed keyboard modifiers.</param>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonCombo.GetHashCode">
            <summary>
            Computes a hash code for this mouse button combination.
            </summary>
            <returns>A 32-bit signed integer hash code of the values in this mouse button combination.</returns>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonCombo.CompareTo(Macro.Desktop.XMouseButtonCombo)">
            <summary>
            Compares this and another mouse button combination and returns an indication of their relative values.
            </summary>
            <param name="other">Another object with which to compare.</param>
            <returns>A positive integer if this combination is relatively greater than the other, a negative integer if the reverse is true, or zero if the two are equal.</returns>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonCombo.Equals(System.Object)">
            <summary>
            Tests whether or not this mouse button combination and a specified object are equal.
            </summary>
            <param name="obj">Another object with which to compare.</param>
            <returns>True if <paramref name="obj"/> is a <see cref="T:Macro.Desktop.XMouseButtonCombo"/> and the represented mouse button combinations are equal; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonCombo.Equals(Macro.Desktop.XMouseButtonCombo)">
            <summary>
            Tests whether or not this and another mouse button combination are equal.
            </summary>
            <param name="other">Another <see cref="T:Macro.Desktop.XMouseButtonCombo"/> with which to compare.</param>
            <returns>True if the represented mouse button combinations are equal; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonCombo.ToInvariantString">
            <summary>
            Formats the mouse button combination as a string using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <returns>The string representation of the mouse button combination.</returns>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonCombo.ToString">
            <summary>
            Formats the mouse button combination as a string using the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture">current thread's UI CultureInfo</see>.
            </summary>
            <returns>The string representation of the mouse button combination.</returns>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonCombo.ToString(System.Globalization.CultureInfo)">
            <summary>
            Formats the mouse button combination as a string using the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> for which the value should be formatted.</param>
            <returns>The string representation of the mouse button combination.</returns>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonCombo.ParseInvariant(System.String)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.XMouseButtonCombo"/> value using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <returns>The <see cref="T:Macro.Desktop.XMouseButtonCombo"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.FormatException">Thrown if <paramref name="s"/> is not a valid <see cref="T:Macro.Desktop.XMouseButtonCombo"/> string representation.</exception>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonCombo.Parse(System.String)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.XMouseButtonCombo"/> value using the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture">current thread's UI CultureInfo</see>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <returns>The <see cref="T:Macro.Desktop.XMouseButtonCombo"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.FormatException">Thrown if <paramref name="s"/> is not a valid <see cref="T:Macro.Desktop.XMouseButtonCombo"/> string representation.</exception>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonCombo.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.XMouseButtonCombo"/> value using the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> for which the string should be parsed.</param>
            <returns>The <see cref="T:Macro.Desktop.XMouseButtonCombo"/> value parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.FormatException">Thrown if <paramref name="s"/> is not a valid <see cref="T:Macro.Desktop.XMouseButtonCombo"/> string representation.</exception>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonCombo.TryParseInvariant(System.String,Macro.Desktop.XMouseButtonCombo@)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.XMouseButtonCombo"/> value using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <param name="result">The <see cref="T:Macro.Desktop.XMouseButtonCombo"/> value parsed from <paramref name="s"/>.</param>
            <returns>True if the string was successfully parsed; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonCombo.TryParse(System.String,Macro.Desktop.XMouseButtonCombo@)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.XMouseButtonCombo"/> value using the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture">current thread's UI CultureInfo</see>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <param name="result">The <see cref="T:Macro.Desktop.XMouseButtonCombo"/> value parsed from <paramref name="s"/>.</param>
            <returns>True if the string was successfully parsed; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonCombo.TryParse(System.String,System.Globalization.CultureInfo,Macro.Desktop.XMouseButtonCombo@)">
            <summary>
            Parses a string as an <see cref="T:Macro.Desktop.XMouseButtonCombo"/> value using the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> for which the string should be parsed.</param>
            <param name="result">The <see cref="T:Macro.Desktop.XMouseButtonCombo"/> value parsed from <paramref name="s"/>.</param>
            <returns>True if the string was successfully parsed; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonCombo.op_Equality(Macro.Desktop.XMouseButtonCombo,Macro.Desktop.XMouseButtonCombo)">
            <summary>
            Tests whether or not two mouse button combinations are equal.
            </summary>
            <param name="x">One mouse button combination.</param>
            <param name="y">The other mouse button combination.</param>
            <returns>True if the two mouse button combinations are equal; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonCombo.op_Inequality(Macro.Desktop.XMouseButtonCombo,Macro.Desktop.XMouseButtonCombo)">
            <summary>
            Tests whether or not two mouse button combinations are not equal.
            </summary>
            <param name="x">One mouse button combination.</param>
            <param name="y">The other mouse button combination.</param>
            <returns>True if the two mouse button combinations are not equal; False otherwise.</returns>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonCombo.op_Implicit(Macro.Desktop.XMouseButtons)~Macro.Desktop.XMouseButtonCombo">
            <summary>
            Implicitly casts an <see cref="T:Macro.Desktop.XMouseButtons"/> flags combination as the equivalent <see cref="T:Macro.Desktop.XMouseButtonCombo"/>.
            </summary>
            <param name="value">An <see cref="T:Macro.Desktop.XMouseButtons"/> flags value.</param>
            <returns>The equivalent <see cref="T:Macro.Desktop.XMouseButtonCombo"/> value.</returns>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonCombo.op_Explicit(Macro.Desktop.XKeys)~Macro.Desktop.XMouseButtonCombo">
            <summary>
            Explicitly casts an <see cref="T:Macro.Desktop.XKeys"/> value as the equivalent <see cref="T:Macro.Desktop.XMouseButtonCombo"/>.
            </summary>
            <param name="value">An <see cref="T:Macro.Desktop.XKeys"/> value.</param>
            <returns>The equivalent <see cref="T:Macro.Desktop.XMouseButtonCombo"/> value.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if <paramref name="value"/> does not represent a mouse button combination.</exception>
        </member>
        <member name="M:Macro.Desktop.XMouseButtonCombo.op_Explicit(Macro.Desktop.XMouseButtonCombo)~Macro.Desktop.XKeys">
            <summary>
            Explicitly casts an <see cref="T:Macro.Desktop.XMouseButtonCombo"/> value as the equivalent <see cref="T:Macro.Desktop.XKeys"/>.
            </summary>
            <param name="value">An <see cref="T:Macro.Desktop.XMouseButtonCombo"/> value.</param>
            <returns>The equivalent <see cref="T:Macro.Desktop.XKeys"/> value.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if <paramref name="value"/> has more than one pressed mouse button and thus cannot be represented as a single <see cref="T:Macro.Desktop.XKeys"/> value.</exception>
        </member>
        <member name="P:Macro.Desktop.XMouseButtonCombo.MouseButtons">
            <summary>
            Gets or sets the pressed mouse buttons.
            </summary>
        </member>
        <member name="P:Macro.Desktop.XMouseButtonCombo.Modifiers">
            <summary>
            Gets or sets the pressed keyboard modifiers.
            </summary>
        </member>
        <member name="P:Macro.Desktop.XMouseButtonCombo.IsEmpty">
            <summary>
            Gets a value indicating whether or not this mouse button combination is empty.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IWorkspaceView">
            <summary>
            Defines the interface to a view for a <see cref="T:Macro.Desktop.Workspace"/> object.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IWorkspaceView.CreateDialogBoxView(Macro.Desktop.WorkspaceDialogBox)">
            <summary>
            Creates a view for the specified dialog box.
            </summary>
        </member>
        <member name="T:Macro.Desktop.NavigatorPage">
            <summary>
            Represents a single page in a <see cref="T:Macro.Desktop.NavigatorComponentContainer"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.NavigatorPage.#ctor(System.String,Macro.Desktop.IApplicationComponent)">
            <summary>
            Constructor.
            </summary>
            <param name="path">The path to this page in the navigation tree.</param>
            <param name="component">The application component to be displayed by this page</param>
        </member>
        <member name="M:Macro.Desktop.NavigatorPage.#ctor(Macro.Desktop.Path,Macro.Desktop.IApplicationComponent)">
            <summary>
            Constructor.
            </summary>
            <param name="path">The path to this page in the navigation tree.</param>
            <param name="component">The application component to be displayed by this page</param>
        </member>
        <member name="M:Macro.Desktop.NavigatorPage.ToString">
            <summary>
            Returns <see cref="M:Macro.Desktop.Path.ToString"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.NavigatorPage.Path">
            <summary>
            Gets the path to this page.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Tables.ITableCellEditorView">
            <summary>
            Defines an interface to a view onto a <see cref="T:Macro.Desktop.Tables.ITableCellEditor"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Tables.ITableCellEditorView.SetEditor(Macro.Desktop.Tables.ITableCellEditor)">
            <summary>
            Sets the editor with which this view is associated.
            </summary>
            <param name="editor"></param>
        </member>
        <member name="T:Macro.Desktop.ApplicationSettingsRegistry">
            <summary>
            A Singleton class that provides a way for <see cref="T:System.Configuration.ApplicationSettingsBase"/>-derived objects
            to be updated when a setting value was modified externally.
            </summary>
            <remarks>
            This class provides a way to update existing instances of settings objects derived from
            <see cref="T:System.Configuration.ApplicationSettingsBase"/>.  The individual instances must register themselves
            with this class in order to receive updates.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.ApplicationSettingsRegistry.RegisterInstance(System.Configuration.ApplicationSettingsBase)">
            <summary>
            Registers an instance of a settings class.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ApplicationSettingsRegistry.UnregisterInstance(System.Configuration.ApplicationSettingsBase)">
            <summary>
            Unregisters an instance of a settings class.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ApplicationSettingsRegistry.Reload(Macro.Common.Configuration.SettingsGroupDescriptor)">
            <summary>
            Calls <see cref="M:System.Configuration.ApplicationSettingsBase.Reload"/> on all registered 
            settings instances that match the specified group.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ApplicationSettingsRegistry.Instance">
            <summary>
            Gets the single instance of this class.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.TextBoxAction">
            <summary>
            Models a toolbar item that displays a text box into which the user can type.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.TextBoxAction.#ctor(System.String,Macro.Desktop.Actions.ActionPath,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="actionID"></param>
            <param name="path"></param>
            <param name="resourceResolver"></param>
        </member>
        <member name="E:Macro.Desktop.Actions.TextBoxAction.TextValueChanged">
            <summary>
            Occurs when the value of <see cref="P:Macro.Desktop.Actions.ITextBoxAction.TextValue"/> changes.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.TextBoxAction.TextValue">
            <summary>
            Gets or sets the value of the text displayed in the text box.
            </summary>
        </member>
        <member name="E:Macro.Desktop.Actions.TextBoxAction.CueTextChanged">
            <summary>
            Occurs when the value of <see cref="P:Macro.Desktop.Actions.ITextBoxAction.CueText"/> changes.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.TextBoxAction.CueText">
            <summary>
            Gets or sets the cue text displayed in the text box when it does not have focus.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.ObservablePropertyCoupler`1">
            <summary>
            Couples two instances of <see cref="T:Macro.Desktop.Actions.IObservablePropertyBinding`1"/> such that a change to the primary property
            will be propagated to the secondary property.  
            </summary>
            <remarks>
            A bi-directional mode is also possible, where changes to the secondary
            property are also propagated back to the primary property.  In this case, infinite mutual
            recursion is prevented by only propagating the change if the values are actually different.
            To remove the coupling, call <see cref="M:Macro.Common.Utilities.ObservablePropertyCoupler`1.Dispose"/> on this object.
            </remarks>
            <typeparam name="T">The type of the bound property.</typeparam>
        </member>
        <member name="M:Macro.Common.Utilities.ObservablePropertyCoupler`1.Couple(Macro.Desktop.Actions.IObservablePropertyBinding{`0},Macro.Desktop.Actions.IObservablePropertyBinding{`0})">
            <summary>
            Establishes the coupling between the specified primary and secondary properties.
            </summary>
            <remarks>
            The value of the secondary property will be initialized to the value of the primary property, 
            and will continue to be synchronized for the duration of the lifetime of this object.  
            To remove the coupling at any point in the future, retain the returned object, and 
            call Dispose() on it to remove the coupling.
            </remarks>
            <param name="primary">The primary property, which serves as the subject.</param>
            <param name="secondary">The secondary property, which observes the subject and tracks its value.</param>
            <returns>A property coupler object, which can optionally be retained for eventual disposal.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.ObservablePropertyCoupler`1.Couple(Macro.Desktop.Actions.IObservablePropertyBinding{`0},Macro.Desktop.Actions.IObservablePropertyBinding{`0},System.Boolean)">
            <summary>
            Establishes the coupling between the specified primary and secondary properties.
            </summary>
            <remarks>
            The value of the secondary property will be initialized to the value of the primary property, 
            and will continue to be synchronized for the duration of the lifetime of this object.  The coupling is 
            optionally bi-directional, in which case changes made to the secondary property are also propagated 
            back to the primary property.  To remove the coupling at any point in the future, retain the returned 
            object, and call Dispose() on it to remove the coupling.
            </remarks>
            <param name="primary">The primary property, which serves as the subject.</param>
            <param name="secondary">The secondary property, which observes the subject and tracks its value.</param>
            <param name="bidirectional">If true, the primary property will also track the value of the secondary property.</param>
            <returns>A property coupler object, which can optionally be retained for eventual disposal.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.ObservablePropertyCoupler`1.#ctor(Macro.Desktop.Actions.IObservablePropertyBinding{`0},Macro.Desktop.Actions.IObservablePropertyBinding{`0},System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="primary">The primary property, which serves as the subject.</param>
            <param name="secondary">The secondary property, which observes the subject and tracks its value.</param>
            <param name="bidirectional">If true, the primary property will also track the value of the secondary property.</param>
        </member>
        <member name="M:Macro.Common.Utilities.ObservablePropertyCoupler`1.Dispose">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.IconSetAttribute">
            <summary>
            Declares a set of icon resources to associate with an action.  
            </summary>
            <remarks>
            <para>
            The icon resources should be provided in several sizes so that different displays can be accomodated without
            having to scale the images:
            </para>
            <list type="table">
            <listheader><size><see cref="T:Macro.Desktop.IconSize"/></size><res>Resolution</res></listheader>
            <item><size><see cref="F:Macro.Desktop.IconSize.Small"/></size><res>24 x 24</res></item>
            <item><size><see cref="F:Macro.Desktop.IconSize.Medium"/></size><res>48 x 48</res></item>
            <item><size><see cref="F:Macro.Desktop.IconSize.Large"/></size><res>64 x 64</res></item>
            </list>
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Actions.IconSetAttribute.#ctor(System.String,Macro.Desktop.IconScheme,System.String,System.String,System.String)">
            <summary>
            Attribute constructor.
            </summary>
            <remarks>
            The use of icon schemes has been deprecated in favour of extensible application GUI themes.
            </remarks>
            <param name="actionId">The logical action identifier to which this attribute applies.</param>
            <param name="scheme">The scheme of this icon set.</param>
            <param name="smallIcon">The resource name of the icon to be used at small resolutions (around 24 x 24).</param>
            <param name="mediumIcon">The resource name of the icon to be used at medium resolutions (around 48 x 48).</param>
            <param name="largeIcon">The resource name of the icon to be used at large resolutions (around 64 x 64).</param>
        </member>
        <member name="M:Macro.Desktop.Actions.IconSetAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Attribute constructor.
            </summary>
            <param name="actionId">The logical action identifier to which this attribute applies.</param>
            <param name="smallIcon">The resource name of the icon to be used at small resolutions (around 24 x 24).</param>
            <param name="mediumIcon">The resource name of the icon to be used at medium resolutions (around 48 x 48).</param>
            <param name="largeIcon">The resource name of the icon to be used at large resolutions (around 64 x 64).</param>
        </member>
        <member name="M:Macro.Desktop.Actions.IconSetAttribute.#ctor(System.String,System.String)">
            <summary>
            Attribute constructor.
            </summary>
            <param name="actionId">The logical action identifier to which this attribute applies.</param>
            <param name="icon">The resource name of the icon to be used at all resolutions.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.IconSetAttribute.Apply(Macro.Desktop.Actions.IActionBuildingContext)">
            <summary>
            Sets the icon set for an <see cref="T:Macro.Desktop.Actions.IAction"/>, via the specified <see cref="T:Macro.Desktop.Actions.IActionBuildingContext"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Actions.IconSetAttribute.IconSet">
            <summary>
            The <see cref="P:Macro.Desktop.Actions.IconSetAttribute.IconSet"/> defined by this attribute.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IconScheme">
            <summary>
            Defines possible icon schemes.
            </summary>
            <remarks>
            The use of icon schemes has been deprecated in favour of extensible application GUI themes.
            </remarks>
        </member>
        <member name="F:Macro.Desktop.IconScheme.Colour">
            <summary>
            Colour icons.
            </summary>
        </member>
        <member name="F:Macro.Desktop.IconScheme.Monochrome">
            <summary>
            Monochrome icons.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Tables.TableColumnChangeType">
            <summary>
            Enumerates the types of column changes.
            </summary>
        </member>
        <member name="F:Macro.Desktop.Tables.TableColumnChangeType.ColumnAdded">
            <summary>
            A column was added to the table.
            </summary>
        </member>
        <member name="F:Macro.Desktop.Tables.TableColumnChangeType.ColumnChanged">
            <summary>
            An existing column was changed.
            </summary>
        </member>
        <member name="F:Macro.Desktop.Tables.TableColumnChangeType.ColumnRemoved">
            <summary>
            An existing column was removed.
            </summary>
        </member>
        <member name="T:Macro.Desktop.TabComponentContainerViewExtensionPoint">
            <summary>
            Defines an extension point for views onto the <see cref="T:Macro.Desktop.TabComponentContainer"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.TabComponentContainer">
            <summary>
            Hosts multiple <see cref="T:Macro.Desktop.IApplicationComponent"/>s in a tabbed view.
            </summary>
        </member>
        <member name="M:Macro.Desktop.TabComponentContainer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Macro.Desktop.AbortOperationDelegate">
            <summary>
             Provides an <see cref="T:Macro.Desktop.IExceptionPolicy"/> with a callback to abort the Exception-causing operation.
            </summary>
            <remarks>
             Each individual <see cref="T:Macro.Desktop.IExceptionPolicy"/> will determine if this is appropriate to be called.
             </remarks>
        </member>
        <member name="T:Macro.Desktop.ExceptionHandler">
            <summary>
            Contains static methods used to report exceptions to the user.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ExceptionHandler.ReportUnhandled(System.Exception)">
            <summary>
            Reports an exception that was not handled in code to the user.
            </summary>
            <remarks>
            An exception dialog will be shown to the user, but will only show the stack trace based
            on the value of <see cref="P:Macro.Desktop.ExceptionHandlerSettings.ShowStackTraceInDialog"/>.  The application
            will be shut down automatically by this method.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.ExceptionHandler.Report(System.Exception,Macro.Desktop.IDesktopWindow)">
            <summary>
            Reports the specified exception to the user, using the <see cref="P:System.Exception.Message"/> property value as the
            message.
            </summary>
            <remarks>
            The exception is also automatically logged.
            </remarks>
            <param name="e">Exception to report.</param>
            <param name="desktopWindow">Desktop window that parents the exception dialog.</param>
        </member>
        <member name="M:Macro.Desktop.ExceptionHandler.Report(System.Exception,System.String,Macro.Desktop.IDesktopWindow)">
            <summary>
            Reports the specified exception to the user, displaying the specified user message first.
            </summary>
            <remarks>
            The exception is also automatically logged.
            </remarks>
            <param name="e">Exception to report.</param>
            <param name="userMessage">User-friendly message to display, instead of the message contained in the exception.</param>
            <param name="desktopWindow">Desktop window that parents the exception dialog.</param>
        </member>
        <member name="M:Macro.Desktop.ExceptionHandler.Report(System.Exception,System.String,Macro.Desktop.IDesktopWindow,Macro.Desktop.AbortOperationDelegate)">
            <summary>
            Reports the specified exception to the user, displaying the specified user message first.
            </summary>
            <remarks>
            The exception is also automatically logged.
            </remarks>
            <param name="e">Exception to report.</param>
            <param name="contextualMessage">User-friendly (contextual) message to display, instead of the message contained in the exception.</param>
            <param name="desktopWindow">Desktop window that parents the exception dialog.</param>
            <param name="abortDelegate">A callback delegate for aborting the exception-causing operation.  Decision as to whether or
            not the callback is called is up to the individual <see cref="T:Macro.Desktop.IExceptionPolicy"/>.</param>
        </member>
        <member name="T:Macro.Desktop.IconSize">
            <summary>
            Enumeration for different standard icon sizes.
            </summary>
        </member>
        <member name="F:Macro.Desktop.IconSize.Small">
            <summary>
            Small icon.
            </summary>
        </member>
        <member name="F:Macro.Desktop.IconSize.Medium">
            <summary>
            Medium icon.
            </summary>
        </member>
        <member name="F:Macro.Desktop.IconSize.Large">
            <summary>
            Large icon.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IconSizeConverter">
            <summary>
            Provides a <see cref="T:System.ComponentModel.TypeConverter"/> to convert <see cref="T:Macro.Desktop.IconSize"/> values to and from localized and invariant <see cref="T:System.String"/> representations.
            </summary>
        </member>
        <member name="M:Macro.Desktop.IconSizeConverter.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Macro.Desktop.IconSizeConverter"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.DragDropPosition">
            <summary>
            Enumeration of values indicating whether an object was drag-dropped before or after the target.
            </summary>
        </member>
        <member name="F:Macro.Desktop.DragDropPosition.Default">
            <summary>
            Indicates that the object was dragged to the drop target (neither before nor after).
            </summary>
        </member>
        <member name="F:Macro.Desktop.DragDropPosition.Before">
            <summary>
            Indicates that the object was dragged to a point immediately before the drop target.
            </summary>
        </member>
        <member name="F:Macro.Desktop.DragDropPosition.After">
            <summary>
            Indicates that the object was dragged to a point immediately after the drop target.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ClosedEventArgs">
            <summary>
            Provides data for Closed events.
            </summary>
        </member>
        <member name="M:Macro.Desktop.ClosedEventArgs.#ctor(Macro.Desktop.CloseReason)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ClosedEventArgs.Reason">
            <summary>
            Gets the reason that the object was closed.
            </summary>
        </member>
        <member name="T:Macro.Desktop.ClosedItemEventArgs`1">
            <summary>
            Provides data for ItemClosed events.
            </summary>
            <typeparam name="TItem">Type of the item that was closed.</typeparam>
        </member>
        <member name="M:Macro.Desktop.ClosedItemEventArgs`1.#ctor(`0,Macro.Desktop.CloseReason)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.Desktop.ClosedItemEventArgs`1.Reason">
            <summary>
            Gets the reason that the item was closed.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.SettingsManagementComponentViewExtensionPoint">
            <summary>
            Extension point for views onto <see cref="T:Macro.Desktop.Configuration.SettingsManagementComponent"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.ActionBuilderException">
            <summary>
            Exception that indicates a problem with the way action attributes are applied to a tool.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Actions.ActionBuilderException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Validation.XmlValidationManager">
            <summary>
            Manages an XML document containing custom validation rules.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.XmlValidationManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Macro.Desktop.Validation.XmlValidationManager.GetRules(System.Type)">
            <summary>
            Gets the custom rules for the specified application component class, as a set of XML elements where each element represents a rule.
            </summary>
            <param name="componentClass"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Validation.XmlValidationManager.SetRules(System.Type,System.Xml.XmlElement)">
            <summary>
            Sets the custom rules for the specified application component class.  The rules are child elements of the specified parent node.
            </summary>
            <param name="componentClass"></param>
            <param name="parentNode"></param>
        </member>
        <member name="M:Macro.Desktop.Validation.XmlValidationManager.Save">
            <summary>
            Saves all changes made to the document via <see cref="M:Macro.Desktop.Validation.XmlValidationManager.SetRules(System.Type,System.Xml.XmlElement)"/>.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Validation.XmlValidationManager.Instance">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Validation.XmlValidationManager.IsSupported">
            <summary>
            Gets a value indicating whether custom validation rules are supported.
            </summary>
        </member>
        <member name="T:Macro.Desktop.CommandHistory">
            <summary>
            Class that facilitates undo/redo by storing incremental changes
            in the form of <see cref="T:Macro.Desktop.UndoableCommand"/>s.
            </summary>
            <seealso cref="T:Macro.Desktop.UndoableCommand"/>
            <seealso cref="T:Macro.Desktop.IMemorable"/>
        </member>
        <member name="M:Macro.Desktop.CommandHistory.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="maxSize">The maximum number of <see cref="T:Macro.Desktop.UndoableCommand"/>s to keep in memory.</param>
        </member>
        <member name="M:Macro.Desktop.CommandHistory.AddCommand(Macro.Desktop.UndoableCommand)">
            <summary>
            Adds a command to the command history.
            </summary>
            <remarks>
            When a command is added, all commands after the <see cref="P:Macro.Desktop.CommandHistory.CurrentCommandIndex"/> will be removed
            in order to keep the state of the application consistent.  The added command will then become
            the last command (<see cref="P:Macro.Desktop.CommandHistory.LastCommandIndex"/>).
            </remarks>
        </member>
        <member name="M:Macro.Desktop.CommandHistory.Redo">
            <summary>
            Calls <see cref="M:Macro.Desktop.Command.Execute"/> in order to 'redo' the current command.
            </summary>
            <remarks>
            The <see cref="P:Macro.Desktop.CommandHistory.CurrentCommandIndex"/> will be incremented unless the <see cref="P:Macro.Desktop.CommandHistory.CurrentCommandIndex"/> is 
            the same as the <see cref="P:Macro.Desktop.CommandHistory.LastCommandIndex"/>, in which case only <see cref="M:Macro.Desktop.CommandHistory.Undo"/> operations can occur.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.CommandHistory.Undo">
            <summary>
            Calls <see cref="M:Macro.Desktop.UndoableCommand.Unexecute"/> in order to 'undo' the current command.
            </summary>
            <remarks>
            Decrements the <see cref="P:Macro.Desktop.CommandHistory.CurrentCommandIndex"/>, unless it is already -1.  A <see cref="P:Macro.Desktop.CommandHistory.CurrentCommandIndex"/> of -1
            indicates that the entire command history has been undone and only <see cref="M:Macro.Desktop.CommandHistory.Redo"/> operations can occur.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.CommandHistory.Clear">
            <summary>
            Clears the command history.
            </summary>
        </member>
        <member name="P:Macro.Desktop.CommandHistory.NumCommands">
            <summary>
            Gets the current number of <see cref="T:Macro.Desktop.UndoableCommand"/>s stored.
            </summary>
        </member>
        <member name="P:Macro.Desktop.CommandHistory.MaxSize">
            <summary>
            Gets the maximum number of <see cref="T:Macro.Desktop.UndoableCommand"/>s that can be stored in memory by this object.
            </summary>
        </member>
        <member name="P:Macro.Desktop.CommandHistory.CurrentCommandIndex">
            <summary>
            Gets the index of the current command in the command history.
            </summary>
        </member>
        <member name="P:Macro.Desktop.CommandHistory.LastCommandIndex">
            <summary>
            Gets the index of the last command in the command history.
            </summary>
        </member>
        <member name="E:Macro.Desktop.CommandHistory.CurrentCommandChanging">
            <summary>
            Indicates that the <see cref="P:Macro.Desktop.CommandHistory.CurrentCommandIndex"/> is about to change
            because of a call to <see cref="M:Macro.Desktop.CommandHistory.Undo"/>, <see cref="M:Macro.Desktop.CommandHistory.Redo"/> or <see cref="M:Macro.Desktop.CommandHistory.AddCommand(Macro.Desktop.UndoableCommand)"/>.
            </summary>
        </member>
        <member name="E:Macro.Desktop.CommandHistory.CurrentCommandChanged">
            <summary>
            Indicates that the <see cref="P:Macro.Desktop.CommandHistory.CurrentCommandIndex"/> has changed
            because of a call to <see cref="M:Macro.Desktop.CommandHistory.Undo"/>, <see cref="M:Macro.Desktop.CommandHistory.Redo"/> or <see cref="M:Macro.Desktop.CommandHistory.AddCommand(Macro.Desktop.UndoableCommand)"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.TestComponentViewExtensionPoint">
            <summary>
            Extension point for views onto <see cref="T:Macro.Desktop.TestComponent"/>
            </summary>
        </member>
        <member name="T:Macro.Desktop.TestComponent">
            <summary>
            A test component not intended for production use.
            </summary>
        </member>
        <member name="M:Macro.Desktop.TestComponent.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Macro.Desktop.BlockingOperationViewExtensionPoint">
            <summary>
            Extension point for views onto <see cref="T:Macro.Desktop.BlockingOperation"/>.
            </summary>
        </member>
        <member name="T:Macro.Desktop.BlockingOperation">
            <summary>
            The BlockingOperation class is a static class that allows application level code to
            use a wait cursor without having to explicitly reference a particular Gui Toolkit's API.
            </summary>
        </member>
        <member name="M:Macro.Desktop.BlockingOperation.Run(Macro.Desktop.BlockingOperationDelegate)">
            <summary>
            Executes the provided operation in the view, showing a wait cursor for the duration of the call.
            </summary>
            <param name="operation">The operation to execute in the view layer.</param>
        </member>
        <member name="T:Macro.Desktop.StackTabPage">
            <summary>
            Represents a single page in a <see cref="T:Macro.Desktop.StackTabComponentContainer"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.StackTabPage.#ctor(System.String,Macro.Desktop.IApplicationComponent,System.String,Macro.Desktop.IconSet,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="name">The name of the page.</param>
            <param name="component">The <see cref="T:Macro.Desktop.IApplicationComponent"/> to be hosted in this page.</param>
            <param name="title">The text to display on the title bar.</param>
            <param name="iconSet">The icon to display on the title bar.</param>
            <param name="fallbackResolver">Resource resolver to fall back on in case the default failed to find resources.</param>
        </member>
        <member name="P:Macro.Desktop.StackTabPage.Title">
            <summary>
            The text to display on the title bar.
            </summary>
        </member>
        <member name="P:Macro.Desktop.StackTabPage.IconSet">
            <summary>
            Gets or sets the <see cref="T:Macro.Desktop.IconSet"/> that should be displayed for the folder.
            </summary>
        </member>
        <member name="P:Macro.Desktop.StackTabPage.ResourceResolver">
            <summary>
            Gets or sets the resource resolver that is used to resolve the Icon.
            </summary>
        </member>
        <member name="E:Macro.Desktop.StackTabPage.TitleChanged">
            <summary>
            Occurs when <see cref="P:Macro.Desktop.StackTabPage.Title"/> has changed.
            </summary>
        </member>
        <member name="E:Macro.Desktop.StackTabPage.IconSetChanged">
            <summary>
            Occurs when <see cref="P:Macro.Desktop.StackTabPage.IconSet"/> has changed.
            </summary>
        </member>
        <member name="F:Macro.Desktop.SessionStatus.LocalOnly">
            <summary>
            Operating as a standalone installation, without an enterprise server.
            </summary>
        </member>
        <member name="F:Macro.Desktop.SessionStatus.Unknown">
            <summary>
            Not yet determined.
            </summary>
        </member>
        <member name="F:Macro.Desktop.SessionStatus.Online">
            <summary>
            Online
            </summary>
        </member>
        <member name="F:Macro.Desktop.SessionStatus.Expired">
            <summary>
            Online, but session has expired, and user must re-authenticate.
            </summary>
        </member>
        <member name="F:Macro.Desktop.SessionStatus.Offline">
            <summary>
            Offline
            </summary>
        </member>
        <member name="T:Macro.Desktop.ISessionManager">
            <summary>
            Defines the interface to extensions of <see cref="T:Macro.Desktop.SessionManagerExtensionPoint"/>.
            </summary>
            <remarks>
            <para>
            A session manager extension is optional.  If present, the application will load the session manager and
            call its <see cref="M:Macro.Desktop.ISessionManager.InitiateSession"/> and <see cref="M:Macro.Desktop.ISessionManager.TerminateSession"/> at the beginning and end
            of the applications execution, respectively.
            </para>
            <para>
            The purpose of the session manager is to provide a hook through which custom session management can occur.
            A typical session manager implemenation may show a login dialog at start-up in order to gather user credentials,
            and may perform other custom initialization.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Desktop.ISessionManager.InitiateSession">
            <summary>
            Called by the framework at start-up to initiate a session.
            </summary>
            <remarks>
            This method is called after the GUI system and application view have been initialized,
            so the implementation may interact with the user if necessary, and may
            make use of the <see cref="T:Macro.Desktop.Application"/> object.  However, no desktop windows exist yet.
            Any exception thrown from this method will effectively prevent the establishment of a session, causing
            execution to terminate with an error.  A return value of false may be used
            to silently refuse initiation of a session.  In this case, no error is reported, but the application
            terminates immediately.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.ISessionManager.InvalidateSession">
            <summary>
            Called to mark the existing session as invalid, which will typically require the user to
            re-authenticate in order to continue using the application.
            </summary>
            <returns></returns>
            <remarks>
            Note that calling this method does not itself renew the session, but merely marks the session
            as invalid.  Hence, the session not necessarily have been renewed yet when this method returns.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.ISessionManager.TerminateSession">
            <summary>
            Called by the framework at shutdown to terminate an existing session.
            </summary>
            <remarks>
            This method is called prior to terminating the GUI subsytem and application view, so the
            implementation may interact with the user if necessary.
            </remarks>
        </member>
        <member name="P:Macro.Desktop.ISessionManager.SessionStatus">
            <summary>
            Gets the current status of the session.
            </summary>
        </member>
        <member name="E:Macro.Desktop.ISessionManager.SessionStatusChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.ISessionManager.SessionStatus"/> property changes.
            </summary>
        </member>
        <member name="T:Macro.Desktop.SessionManager">
            <summary>
            Session manager base class.
            </summary>
        </member>
        <member name="F:Macro.Desktop.SessionManager.Current">
            <summary>
            Gets the current session manager.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SessionManager.Create">
            <summary>
            Instantiates the session manager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.SessionManager.Macro#Desktop#ISessionManager#InitiateSession">
            <summary>
            Called by the framework at start-up to initiate a session.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SessionManager.Macro#Desktop#ISessionManager#InvalidateSession">
            <summary>
            Called to request that the existing session be renewed, which typically involves asking the user to re-enter
            their credentials.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SessionManager.Macro#Desktop#ISessionManager#TerminateSession">
            <summary>
            Called by the framework at shutdown to terminate an existing session.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SessionManager.InitiateSession">
            <summary>
            Called to initiate the session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.SessionManager.InvalidateSession">
            <summary>
            Called to invalidate the existing session.
            </summary>
            <returns></returns>
            <remarks>
            The default implementation sets the session status to <see cref="F:Macro.Desktop.SessionStatus.Expired"/>.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.SessionManager.TerminateSession">
            <summary>
            Called to terminate the session.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SessionManager.OnStatusChanged(Macro.Desktop.SessionStatus,Macro.Desktop.SessionStatus)">
            <summary>
            Called when the session status changes.
            </summary>
            <param name="oldStatus"></param>
            <param name="newStatus"></param>
        </member>
        <member name="P:Macro.Desktop.SessionManager.Macro#Desktop#ISessionManager#SessionStatus">
            <summary>
            Gets the current status of the session.
            </summary>
        </member>
        <member name="E:Macro.Desktop.SessionManager.Macro#Desktop#ISessionManager#SessionStatusChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.ISessionManager.SessionStatus"/> property changes.
            </summary>
        </member>
        <member name="P:Macro.Desktop.SessionManager.SessionStatus">
            <summary>
            Gets or sets the session status.
            </summary>
        </member>
        <member name="E:Macro.Desktop.SessionManager.SessionStatusChanged">
            <summary>
            Occurs when the <see cref="P:Macro.Desktop.SessionManager.SessionStatus"/> property changes.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IDragDropObject">
            <summary>
            Interface for objects representing a generic, multi-format object wrapper.
            </summary>
            <remarks>
            This interface is used in situations where interactions between components
            require the runtime selection of a data format suitable for both components
            involved, such as a drag and drop or clipboard copy paste to unknown components.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.IDragDropObject.GetFormats">
            <summary>
            Gets a string array of format descriptors available in this wrapper.
            </summary>
            <returns>A string array of format descriptors.</returns>
        </member>
        <member name="M:Macro.Desktop.IDragDropObject.GetData(System.Type)">
            <summary>
            Gets the data encapsulated in this wrapper in the specified format.
            </summary>
            <param name="type">The type of the data to extract.</param>
            <returns>An object of type <paramref name="type"/>, or null if the data is not available in the specified format.</returns>
        </member>
        <member name="M:Macro.Desktop.IDragDropObject.GetData(System.String)">
            <summary>
            Gets the data encapsulated in this wrapper in the specified format.
            </summary>
            <param name="format">The format descriptor of the data to extract.</param>
            <returns>An object matching the specified <paramref name="format"/>, or null if the data is not available in the specified format.</returns>
        </member>
        <member name="M:Macro.Desktop.IDragDropObject.GetData``1">
            <summary>
            Gets the data encapsulated in this wrapper in the specified format.
            </summary>
            <typeparam name="T">The type of the data to extract.</typeparam>
            <returns>An object of type <typeparamref name="T"/>, or null if the data is not available in the specified format.</returns>
        </member>
        <member name="M:Macro.Desktop.IDragDropObject.HasData(System.Type)">
            <summary>
            Checks if the data encapsulated in this wrapper is available in the specified format.
            </summary>
            <param name="type">The type of the data to check for.</param>
            <returns>True if an object of type <paramref name="type"/> is available; False if the data is not available in the specified format.</returns>
        </member>
        <member name="M:Macro.Desktop.IDragDropObject.HasData(System.String)">
            <summary>
            Checks if the data encapsulated in this wrapper is available in the specified format.
            </summary>
            <param name="format">The format descriptor of the data to check for.</param>
            <returns>True if an object matching the specified <paramref name="format"/> is available; False if the data is not available in the specified format.</returns>
        </member>
        <member name="M:Macro.Desktop.IDragDropObject.HasData``1">
            <summary>
            Checks if the data encapsulated in this wrapper is available in the specified format.
            </summary>
            <typeparam name="T">The type of the data to check for.</typeparam>
            <returns>True if an object of type <typeparamref name="T"/> is available; False if the data is not available in the specified format.</returns>
        </member>
        <member name="M:Macro.Desktop.IDragDropObject.SetData(System.Object)">
            <summary>
            Sets the data in the wrapper using the object's type as the format.
            </summary>
            <param name="data">The data object to encapsulate.</param>
        </member>
        <member name="M:Macro.Desktop.IDragDropObject.SetData(System.String,System.Object)">
            <summary>
            Sets the data in the wrapper using the specified format descriptor.
            </summary>
            <param name="format">The format descriptor to encapsulate the data as.</param>
            <param name="data">The data object to encapsulate.</param>
        </member>
        <member name="M:Macro.Desktop.IDragDropObject.SetData(System.Type,System.Object)">
            <summary>
            Sets the data in the wrapper using the specified type as the format.
            </summary>
            <param name="type">The type to encapsulate the data as.</param>
            <param name="data">The data object to encapsulate.</param>
        </member>
        <member name="T:Macro.Desktop.SelectFolderDialogCreationArgs">
            <summary>
            Holds parameters that initialize the display of a folder browser dialog.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SelectFolderDialogCreationArgs.#ctor">
            <summary>
            Constructs an object holding parameters for the display of a folder browser dialog.
            </summary>
        </member>
        <member name="M:Macro.Desktop.SelectFolderDialogCreationArgs.#ctor(System.String)">
            <summary>
            Constructs an object holding parameters for the display of a folder browser dialog.
            </summary>
            <param name="path"></param>
        </member>
        <member name="P:Macro.Desktop.SelectFolderDialogCreationArgs.Path">
            <summary>
            Gets or sets the path that the folder browser dialog will show initially.
            </summary>
        </member>
        <member name="P:Macro.Desktop.SelectFolderDialogCreationArgs.Prompt">
            <summary>
            Gets or sets the prompt to the user shown on the dialog.
            </summary>
        </member>
        <member name="P:Macro.Desktop.SelectFolderDialogCreationArgs.AllowCreateNewFolder">
            <summary>
            Gets or sets a value indicating if the creation of a new folder should be allowed by the dialog.
            </summary>
        </member>
        <member name="T:Macro.Desktop.IDesktopProductLicenseInfoInterpreter">
            <summary>
            Represents the interface of a class that can interpret the license information
            </summary>
            <remarks>
            For internal framework use only.
            </remarks>
        </member>
        <member name="T:Macro.Desktop.ProductStateInfo">
            <summary>
            Helper class to retrieve information related to the current state of the product (usually determined on the license)
            </summary>
        </member>
        <member name="T:Macro.Desktop.DesktopWindowCreationArgs">
            <summary>
            Holds parameters that control the creation of a <see cref="T:Macro.Desktop.DesktopWindow"/>.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopWindowCreationArgs.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopWindowCreationArgs.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DesktopWindowCreationArgs.ToolbarSite">
            <summary>
            Gets or sets the toolbar site that this window will use.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DesktopWindowCreationArgs.MenuSite">
            <summary>
            Gets or sets the menu site that this window will use.
            </summary>
        </member>
        <member name="T:Macro.Desktop.DesktopMonitorComponentViewExtensionPoint">
            <summary>
            Extension point for views onto <see cref="T:Macro.Desktop.DesktopMonitorComponent"/>
            </summary>
        </member>
        <member name="T:Macro.Desktop.DesktopMonitorComponent">
            <summary>
            A test component not intended for production use.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DesktopMonitorComponent.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Macro.Desktop.DefaultCodeEditorComponentViewExtensionPoint">
            <summary>
            Extension point for views onto <see cref="T:Macro.Desktop.DefaultCodeEditorComponent"/>
            </summary>
        </member>
        <member name="T:Macro.Desktop.DefaultCodeEditorComponent">
            <summary>
            A default code editor class component class.  This is a no frills editor and is typically
            used only when a better code editor does not exist in the installed plugin base.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DefaultCodeEditorComponent.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Macro.Desktop.DefaultCodeEditorComponent.Start">
            <summary>
            Starts the component.
            </summary>
        </member>
        <member name="M:Macro.Desktop.DefaultCodeEditorComponent.Stop">
            <summary>
            Stops the component.
            </summary>
        </member>
        <member name="E:Macro.Desktop.DefaultCodeEditorComponent.InsertTextRequested">
            <summary>
            Notifies the view that it should insert the specified text at the current location.
            </summary>
        </member>
        <member name="P:Macro.Desktop.DefaultCodeEditorComponent.Text">
            <summary>
            Gets or sets the text that is displayed in the editor.
            </summary>
        </member>
        <member name="T:Macro.Desktop.DefaultCodeEditorComponent.InsertTextEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Macro.Desktop.DefaultCodeEditorComponent.InsertTextEventArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:Macro.Desktop.DefaultCodeEditorComponent.InsertTextEventArgs.Text">
            <summary>
            Text to insert.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.LocalSettingsStore">
            <summary>
            The LocalSettingsStore, although it implements <see cref="T:Macro.Common.Configuration.ISettingsStore"/> does not serve 
            as a proper settings store for the <see cref="T:Macro.Common.Configuration.StandardSettingsProvider"/> (notice that it is not
            an extension of <see cref="T:Macro.Common.Configuration.SettingsStoreExtensionPoint"/>.  Instead, this class is instantiated
            directly by the <see cref="T:Macro.Desktop.Configuration.SettingsManagementComponent"/> when there are no such extensions available,
            and the application is using the <see cref="T:System.Configuration.LocalFileSettingsProvider"/> (or app/user .config) to 
            store settings locally.  This 'settings store' is used solely to edit the default profile
            throught the settings management UI.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.LocalSettingsStore.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Desktop.Configuration.LocalSettingsStore.GetSettingsValues(Macro.Common.Configuration.SettingsGroupDescriptor,System.String,System.String)">
            <summary>
            Loads the settings values (both application and user scoped) for a given settings class.  Only the shared profile
            is supported (application settings + default user settings).
            </summary>
            <param name="group">the settings class for which to retrieve the defaults</param>
            <param name="user">must be null or ""</param>
            <param name="instanceKey">must be null or ""</param>
            <returns>returns only those values that are different from the property defaults</returns>
            <exception cref="T:System.NotSupportedException">will be thrown if the user or instance key is specified</exception>
        </member>
        <member name="M:Macro.Desktop.Configuration.LocalSettingsStore.PutSettingsValues(Macro.Common.Configuration.SettingsGroupDescriptor,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Stores the settings values (both application and user scoped) for a given settings class.  Only the shared profile
            is supported (application settings + default user settings).
            </summary>
            <param name="group">the settings class for which to store the values</param>
            <param name="user">must be null or ""</param>
            <param name="instanceKey">must be null or ""</param>
            <param name="dirtyValues">contains the values to be stored</param>
            <exception cref="T:System.NotSupportedException">will be thrown if the user or instance key is specified</exception>
        </member>
        <member name="M:Macro.Desktop.Configuration.LocalSettingsStore.RemoveUserSettings(Macro.Common.Configuration.SettingsGroupDescriptor,System.String,System.String)">
            <summary>
            Unsupported.  An exception will always be thrown.
            </summary>
            <param name="group"></param>
            <param name="user"></param>
            <param name="instanceKey"></param>
            <exception cref="T:System.NotSupportedException">always thrown</exception>
        </member>
        <member name="M:Macro.Desktop.Configuration.LocalSettingsStore.ListSettingsGroups">
            <summary>
            Returns settings groups installed on local machine
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Configuration.LocalSettingsStore.ListSettingsProperties(Macro.Common.Configuration.SettingsGroupDescriptor)">
            <summary>
            Returns settings properties for specified group, assuming plugin containing group resides on local machine
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Desktop.Configuration.LocalSettingsStore.ImportSettingsGroup(Macro.Common.Configuration.SettingsGroupDescriptor,System.Collections.Generic.List{Macro.Common.Configuration.SettingsPropertyDescriptor})">
            <summary>
            Local store does not support import.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.LocalSettingsStore.IsOnline">
            <summary>
            Local store does not support import.
            </summary>
        </member>
        <member name="P:Macro.Desktop.Configuration.LocalSettingsStore.SupportsImport">
            <summary>
            Local store does not support import.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Configuration.IConfigurationProvider">
            <summary>
            An interface that provides direct access to the configuration settings
            without having to instantiate a configuration component.
            </summary>
        </member>
        <member name="T:Macro.Desktop.Actions.IconSetObserverAttribute">
            <summary>
            Declares an observer binding for the <see cref="T:Macro.Desktop.IconSet"/> value of an action.
            </summary>
            <remarks>
            This attribute causes the <see cref="T:Macro.Desktop.IconSet"/> value of the action specified by the action ID to be
            bound to the state of the specified property on the class to which this attribute applies.
            The property name must refer to a public <see cref="T:Macro.Desktop.IconSet"/> property on the target class that has get access.
            The change event name must refer to a public event on the class that will fire whenever the value of the property
            changes.
            </remarks>
        </member>
        <member name="M:Macro.Desktop.Actions.IconSetObserverAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Attribute constructor.
            </summary>
            <param name="actionId">The logical action identifier to which this attribute applies.</param>
            <param name="propertyName">The name of the property to bind to.</param>
            <param name="changeEventName">The name of the property change notification event to bind to.</param>
        </member>
        <member name="M:Macro.Desktop.Actions.IconSetObserverAttribute.Apply(Macro.Desktop.Actions.IActionBuildingContext)">
            <summary>
            Binds the <see cref="P:Macro.Desktop.Actions.IAction.IconSet"/> property and <see cref="E:Macro.Desktop.Actions.IAction.IconSetChanged"/> event 
            to the corresponding items on the target object, via the specified <see cref="T:Macro.Desktop.Actions.IActionBuildingContext"/>.
            </summary>
        </member>
    </members>
</doc>
