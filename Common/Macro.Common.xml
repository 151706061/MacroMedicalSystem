<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Macro.Common</name>
    </assembly>
    <members>
        <member name="T:Macro.Common.ExtensionPoint`1">
            <summary>
            Abstract base class for all extension points.
            </summary>
            <typeparam name="TInterface">The interface that extensions are expected to implement.</typeparam>
            <remarks>
            <para>
            To define an extension point, create a dedicated subclass of this class, specifying the interface
            that extensions are expected to implement.  The name of the subclass should be chosen
            with care, as the name effectively acts as a unique identifier which all extensions
            will reference.  Once chosen, the name should not be changed, as doing so will break all
            existing extensions to this extension point.  There is no need to add any methods to the subclass,
            and it is recommended that the class be left empty, such that it serves as a dedicated
            factory for creating extensions of this extension point.
            </para>
            <para>The subclass must also be marked with the <see cref="T:Macro.Common.ExtensionPointAttribute"/> in order
            for the framework to discover it at runtime.
            </para>
            </remarks>
        </member>
        <member name="T:Macro.Common.ExtensionPoint">
            <summary>
            Abstract base class for extension points.
            </summary>
        </member>
        <member name="T:Macro.Common.IExtensionPoint">
            <summary>
            Extension point interface.
            </summary>
            <remarks>
            <para>
            This interface provides a means for a client of an extension point to reference
            the extension point and call methods on it without knowing the type of the extension point class.
            </para>
            <para>
            Extension point classes should never implement this interface directly.
            Instead, subclass <see cref="T:Macro.Common.ExtensionPoint"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.IExtensionPoint.ListExtensions">
            <summary>
            Lists the available extensions.
            </summary>
            <returns>An array of <see cref="T:Macro.Common.ExtensionInfo"/> objects describing the available extensions.</returns>
            <remarks>
            Available extensions are those that are both enabled and licensed for use.
            </remarks>
        </member>
        <member name="M:Macro.Common.IExtensionPoint.ListExtensions(Macro.Common.ExtensionFilter)">
            <summary>
            Lists the available extensions, that also match the specified <see cref="T:Macro.Common.ExtensionFilter"/>.
            </summary>
            <returns>An array of <see cref="T:Macro.Common.ExtensionInfo"/> objects describing the available extensions.</returns>
            <remarks>
            Available extensions are those that are both enabled and licensed for use.
            </remarks>
        </member>
        <member name="M:Macro.Common.IExtensionPoint.ListExtensions(System.Predicate{Macro.Common.ExtensionInfo})">
            <summary>
            Lists the available extensions that match the specified filter.
            </summary>
            <remarks>
            Available extensions are those that are both enabled and licensed for use.
            </remarks>
        </member>
        <member name="M:Macro.Common.IExtensionPoint.CreateExtension">
            <summary>
            Instantiates one extension.
            </summary>
            <returns>A reference to the extension.</returns>
            <exception cref="T:System.NotSupportedException">Failed to instantiate an extension.</exception>
            <remarks>
            If more than one extension exists, then the type of the extension that is
            returned is non-deterministic.  If no extensions exist that can be successfully
            instantiated, an exception is thrown. Note that only extensions that are enabled
            and licensed are considered.
            </remarks>
        </member>
        <member name="M:Macro.Common.IExtensionPoint.CreateExtension(Macro.Common.ExtensionFilter)">
            <summary>
            Instantiates an extension that also matches the specified <see cref="T:Macro.Common.ExtensionFilter"/>.
            </summary>
            <returns>A reference to the extension.</returns>
            <exception cref="T:System.NotSupportedException">Failed to instantiate an extension.</exception>
            <remarks>
            If more than one extension exists, then the type of the extension that is
            returned is non-deterministic.  If no extensions exist that can be successfully
            instantiated, an exception is thrown. Note that only extensions that are enabled
            and licensed are considered.
            </remarks>
        </member>
        <member name="M:Macro.Common.IExtensionPoint.CreateExtension(System.Predicate{Macro.Common.ExtensionInfo})">
            <summary>
            Instantiates an extension that matches the specified filter.
            </summary>
            <returns>A reference to the extension.</returns>
            <exception cref="T:System.NotSupportedException">Failed to instantiate an extension.</exception>
            <remarks>
            If more than one extension exists, then the type of the extension that is
            returned is non-deterministic.  If no extensions exist that can be successfully
            instantiated, an exception is thrown. Note that only extensions that are enabled
            and licensed are considered.
            </remarks>
        </member>
        <member name="M:Macro.Common.IExtensionPoint.CreateExtensions">
            <summary>
            Instantiates each available extension.
            </summary>
            <remarks>
            Attempts to instantiate each available extension.  If an extension fails to instantiate
            for any reason, the failure is logged and it is ignored. Note that only extensions that are enabled
            and licensed are considered.
            </remarks>
            <returns>An array of references to the created extensions.  If no extensions were created
            the array will be empty.</returns>
        </member>
        <member name="M:Macro.Common.IExtensionPoint.CreateExtensions(Macro.Common.ExtensionFilter)">
            <summary>
            Instantiates each available extension that also matches the specified <see cref="T:Macro.Common.ExtensionFilter"/>.
            </summary>
            <remarks>
            Attempts to instantiate each matching extension.  If an extension fails to instantiate
            for any reason, the failure is logged and it is ignored. Note that only extensions that are enabled
            and licensed are considered.
            </remarks>
            <returns>An array of references to the created extensions.  If no extensions were created
            the array will be empty.</returns>
        </member>
        <member name="M:Macro.Common.IExtensionPoint.CreateExtensions(System.Predicate{Macro.Common.ExtensionInfo})">
            <summary>
            Instantiates each available extension that matches the specified filter.
            </summary>
            <remarks>
            Attempts to instantiate each matching extension.  If an extension fails to instantiate
            for any reason, the failure is logged and it is ignored. Note that only extensions that are enabled
            and licensed are considered.
            </remarks>
            <returns>An array of references to the created extensions.  If no extensions were created
            the array will be empty.</returns>
        </member>
        <member name="M:Macro.Common.ExtensionPoint.SetExtensionFactory(Macro.Common.IExtensionFactory)">
            <summary>
            Sets the <see cref="T:Macro.Common.IExtensionFactory"/> that is used to create extensions.
            </summary>
        </member>
        <member name="M:Macro.Common.ExtensionPoint.ListExtensions">
            <summary>
            Lists the available extensions.
            </summary>
            <returns>An array of <see cref="T:Macro.Common.ExtensionInfo"/> objects describing the available extensions.</returns>
            <remarks>
            Available extensions are those that are both enabled and licensed for use.
            </remarks>
        </member>
        <member name="M:Macro.Common.ExtensionPoint.ListExtensions(Macro.Common.ExtensionFilter)">
            <summary>
            Lists the available extensions, that also match the specified <see cref="T:Macro.Common.ExtensionFilter"/>.
            </summary>
            <returns>An array of <see cref="T:Macro.Common.ExtensionInfo"/> objects describing the available extensions.</returns>
            <remarks>
            Available extensions are those that are both enabled and licensed for use.
            </remarks>
        </member>
        <member name="M:Macro.Common.ExtensionPoint.ListExtensions(System.Predicate{Macro.Common.ExtensionInfo})">
            <summary>
            Lists the available extensions that match the specified filter.
            </summary>
            <remarks>
            Available extensions are those that are both enabled and licensed for use.
            </remarks>
        </member>
        <member name="M:Macro.Common.ExtensionPoint.CreateExtension">
            <summary>
            Instantiates one extension.
            </summary>
            <returns>A reference to the extension.</returns>
            <exception cref="T:System.NotSupportedException">Failed to instantiate an extension.</exception>
            <remarks>
            If more than one extension exists, then the type of the extension that is
            returned is non-deterministic.  If no extensions exist that can be successfully
            instantiated, an exception is thrown. Note that only extensions that are enabled
            and licensed are considered.
            </remarks>
        </member>
        <member name="M:Macro.Common.ExtensionPoint.CreateExtension(Macro.Common.ExtensionFilter)">
            <summary>
            Instantiates an extension that also matches the specified <see cref="T:Macro.Common.ExtensionFilter"/>.
            </summary>
            <returns>A reference to the extension.</returns>
            <exception cref="T:System.NotSupportedException">Failed to instantiate an extension.</exception>
            <remarks>
            If more than one extension exists, then the type of the extension that is
            returned is non-deterministic.  If no extensions exist that can be successfully
            instantiated, an exception is thrown. Note that only extensions that are enabled
            and licensed are considered.
            </remarks>
        </member>
        <member name="M:Macro.Common.ExtensionPoint.CreateExtension(System.Predicate{Macro.Common.ExtensionInfo})">
            <summary>
            Instantiates an extension that matches the specified filter.
            </summary>
            <returns>A reference to the extension.</returns>
            <exception cref="T:System.NotSupportedException">Failed to instantiate an extension.</exception>
            <remarks>
            If more than one extension exists, then the type of the extension that is
            returned is non-deterministic.  If no extensions exist that can be successfully
            instantiated, an exception is thrown. Note that only extensions that are enabled
            and licensed are considered.
            </remarks>
        </member>
        <member name="M:Macro.Common.ExtensionPoint.CreateExtensions">
            <summary>
            Instantiates each available extension.
            </summary>
            <remarks>
            Attempts to instantiate each available extension.  If an extension fails to instantiate
            for any reason, the failure is logged and it is ignored. Note that only extensions that are enabled
            and licensed are considered.
            </remarks>
            <returns>An array of references to the created extensions.  If no extensions were created
            the array will be empty.</returns>
        </member>
        <member name="M:Macro.Common.ExtensionPoint.CreateExtensions(Macro.Common.ExtensionFilter)">
            <summary>
            Instantiates each available extension that also matches the specified <see cref="T:Macro.Common.ExtensionFilter"/>.
            </summary>
            <remarks>
            Attempts to instantiate each matching extension.  If an extension fails to instantiate
            for any reason, the failure is logged and it is ignored. Note that only extensions that are enabled
            and licensed are considered.
            </remarks>
            <returns>An array of references to the created extensions.  If no extensions were created
            the array will be empty.</returns>
        </member>
        <member name="M:Macro.Common.ExtensionPoint.CreateExtensions(System.Predicate{Macro.Common.ExtensionInfo})">
            <summary>
            Instantiates each available extension that matches the specified filter.
            </summary>
            <remarks>
            Attempts to instantiate each matching extension.  If an extension fails to instantiate
            for any reason, the failure is logged and it is ignored. Note that only extensions that are enabled
            and licensed are considered.
            </remarks>
            <returns>An array of references to the created extensions.  If no extensions were created
            the array will be empty.</returns>
        </member>
        <member name="M:Macro.Common.ExtensionPoint.CreateExtensionsHelper(Macro.Common.ExtensionFilter,System.Boolean)">
            <summary>
            Protected method that actually performs the extension creation
            from an internal <see cref="T:Macro.Common.IExtensionFactory"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.ExtensionPoint.ListExtensionsHelper(Macro.Common.ExtensionFilter)">
            <summary>
            Protected method that actually retrieves the <see cref="T:Macro.Common.ExtensionInfo"/>
            objects from an internal <see cref="T:Macro.Common.IExtensionFactory"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.ExtensionPoint.AtLeastOne(System.Object[],System.Type)">
            <summary>
            Checks to see if there is at least one object in <paramref name="objs"/> and returns 
            the first one, otherwise an exception is thrown.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown if <paramref name="objs"/> is empty.</exception>
        </member>
        <member name="P:Macro.Common.ExtensionPoint.InterfaceType">
            <summary>
            Gets the interface on which the extension is defined.
            </summary>
        </member>
        <member name="T:Macro.Common.ExtensionFilter">
            <summary>
            An abstract base class for extension filters.  
            </summary>
            <remarks>
            Extension filters are used to filter the extension points returned by 
            one of the <b>CreateExtensions</b> methods.  Subclasses of this
            class implement specific types of filters.
            </remarks>
        </member>
        <member name="M:Macro.Common.ExtensionFilter.Test(Macro.Common.ExtensionInfo)">
            <summary>
            Tests the specified extension against the criteria of this filter.
            </summary>
            <param name="extension">The extension to test.</param>
            <returns>True if the extension meets the criteria, false otherwise.</returns>
        </member>
        <member name="P:Macro.Common.ExtensionPoint`1.InterfaceType">
            <summary>
            Gets the interface that the extension point is defined on.
            </summary>
        </member>
        <member name="T:Macro.Common.IUserCredentialsProvider">
            <summary>
            Defines an interface that supplies user credentials.
            </summary>
        </member>
        <member name="P:Macro.Common.IUserCredentialsProvider.UserName">
            <summary>
            Gets the user-name.
            </summary>
        </member>
        <member name="P:Macro.Common.IUserCredentialsProvider.SessionTokenId">
            <summary>
            Gets the session token ID.
            </summary>
        </member>
        <member name="T:Macro.Common.IApplicationRoot">
            <summary>
            Defines an application entry point.
            </summary>
            <seealso cref="T:Macro.Common.ApplicationRootExtensionPoint"/>
        </member>
        <member name="M:Macro.Common.IApplicationRoot.RunApplication(System.String[])">
            <summary>
            Called by the platform to run the application.
            </summary>
            <remarks>
            It is expected that this method may block for the duration of the application's execution, if
            for instance, a GUI event message pump is started.
            </remarks>
        </member>
        <member name="T:Macro.Common.Utilities.CommandLine">
            <summary>
            Parses command line arguments.  May be used directly, or may be subclassed and used in conjunction with
            <see cref="T:Macro.Common.Utilities.CommandLineParameterAttribute"/> to have strongly-typed resolution.
            </summary>
            <remarks>
            <para>
            Parses an array of command line arguments. Each argument is treated as either a named parameter,
            a positional parameter, or a switch, depending on its format.  Arguments may be quoted to allow spaces -
            the .NET runtime removes the quotes prior to providing the arguments to application code.
            </para>
            <para>
            A named parameter has the form 
                /param:value
                -param:value
                /param=value
                -param=value 
            
            There must not be a space between the : or = and the value.  Named parameters are stored in the
            <see cref="P:Macro.Common.Utilities.CommandLine.Named"/> property.
            </para>
            <para>
            A switch has the form
                /switch[+-]
                -switch[+-]
            
            The trailing + or - is optional, and if omitted, the boolean state of the switch is simply toggled.
            Switch states are stored in the <see cref="P:Macro.Common.Utilities.CommandLine.Switches"/> property.
            </para>
            <para>
            A parameter that does not match either the named or switch form is interpreted as a positional parameter.
            Positional parameters are stored in the <see cref="P:Macro.Common.Utilities.CommandLine.Positional"/> property, in the order in which they occur.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CommandLine.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CommandLine.#ctor(System.String[])">
            <summary>
            Constructs an instance of this class, parsing the specified argument list.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Macro.Common.Utilities.CommandLine.Parse(System.String[])">
            <summary>
            Parses the specified argument list, using the results to populate the contents of this instance.
            </summary>
            <param name="args"></param>
            <exception cref="T:Macro.Common.Utilities.CommandLineException">
            Thrown if any error occurs attempting to parse the arguments, or if required arguments 
            are missing.
            </exception>
        </member>
        <member name="M:Macro.Common.Utilities.CommandLine.PrintUsage(System.IO.TextWriter)">
            <summary>
            Generates a usage message, based on meta-data supplied by <see cref="T:Macro.Common.Utilities.CommandLineParameterAttribute"/>s declared
            on members of the subclass.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Macro.Common.Utilities.CommandLine.SetMemberValue``1(Macro.Common.Utilities.CommandLineParameterAttribute,Macro.Common.Utilities.IObjectMemberContext,System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Sets the value of a member property/field from the specified source dictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="context"></param>
            <param name="source"></param>
        </member>
        <member name="P:Macro.Common.Utilities.CommandLine.Named">
            <summary>
            Gets the set of named arguments.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.CommandLine.Positional">
            <summary>
            Gets the set of positional arguments.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.CommandLine.Switches">
            <summary>
            Gets the set of switches.
            </summary>
        </member>
        <member name="T:Macro.Common.Caching.CacheProviderExtensionPoint">
            <summary>
            Defines an extension point for implementations of <see cref="T:Macro.Common.Caching.ICacheProvider"/>.
            </summary>
        </member>
        <member name="T:Macro.Common.Caching.Cache">
            <summary>
            Static class providing access to the global singleton appliction cache.
            </summary>
        </member>
        <member name="F:Macro.Common.Caching.Cache._providers">
            <summary>
            Maintains the singleton instance of each class of provider.
            </summary>
        </member>
        <member name="M:Macro.Common.Caching.Cache.IsSupported">
            <summary>
            Gets a value indicating if the cache is supported in this environment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Caching.Cache.CreateClient(System.String)">
            <summary>
            Creates a cache client for the specified logical cacheID.
            </summary>
            <remarks>
            This method is safe for concurrent use by multiple threads.
            </remarks>
        </member>
        <member name="M:Macro.Common.Caching.Cache.GetProvider(System.Predicate{Macro.Common.ExtensionInfo})">
            <summary>
            Thread-safe method to obtain singleton instance of <see cref="T:Macro.Common.Caching.ICacheProvider"/>
            matching specified filter.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.Common.Utilities.StringUtilities">
            <summary>
            A static string helper class.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.StringUtilities.Combine``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Combines the input <paramref name="values"/> into a string, separated by <paramref name="separator"/>,
            using the given <paramref name="formatSpecifier"/> to format each entry in the string.
            </summary>
            <remarks>
            <typeparam name="T">Must implement <see cref="T:System.IFormattable"/>.</typeparam>
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.StringUtilities.Combine``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.IFormatProvider)">
            <summary>
            Combines the input <paramref name="values"/> into a string, separated by <paramref name="separator"/>,
            using the given <paramref name="formatSpecifier"/> to format each entry in the string.
            </summary>
            <remarks>
            <typeparam name="T">Must implement <see cref="T:System.IFormattable"/>.</typeparam>
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.StringUtilities.Combine``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Combines the input <paramref name="values"/> into a string separated by the <paramref name="separator"/>.
            </summary>
            <remarks>
            Empty values are skipped.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.StringUtilities.Combine``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Boolean)">
            <summary>
            Combines the input <paramref name="values"/> into a string separated by the <paramref name="separator"/>;
            empty values are skipped when <paramref name="skipEmptyValues"/> is true.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.StringUtilities.Combine``1(System.Collections.Generic.IEnumerable{``0},System.String,Macro.Common.Utilities.StringUtilities.FormatDelegate{``0})">
            <summary>
            Combines the input <paramref name="values"/> into a string separated by the <paramref name="separator"/> 
            and formatted using <paramref name="formatDelegate"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.StringUtilities.Combine``1(System.Collections.Generic.IEnumerable{``0},System.String,Macro.Common.Utilities.StringUtilities.FormatDelegate{``0},System.Boolean)">
            <summary>
            Combines the input <paramref name="values"/> into a string separated by <paramref name="separator"/> 
            and formatted using <paramref name="formatDelegate"/>; empty values are skipped when <paramref name="skipEmptyValues"/> is true.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.StringUtilities.SplitQuoted(System.String,System.String)">
            <summary>
            Splits any string into sub-strings using the specified <paramref name="delimiters"/>, 
            ignoring delimiters inside double quotes.
            </summary>
            <remarks>
            This is different from the <b>String.Split</b> methods 
            as we ignore delimiters inside double quotes.
            </remarks>
            <param name="text">The string to split.</param>
            <param name="delimiters">The characters to split on.</param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Utilities.StringUtilities.NullIfEmpty(System.String)">
            <summary>
            Converts an empty string to a null string, otherwise returns the argument unchanged.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.StringUtilities.EmptyIfNull(System.String)">
            <summary>
            Converts a null argument to an empty string, otherwise returns the argument unchanged.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.StringUtilities.FormatDelegate`1">
            <summary>
            A delegate used by <see cref="T:Macro.Common.Utilities.StringUtilities"/> to format output strings.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.PerformanceReport">
            <summary>
            Used to report performance statistics via the <see cref="T:Macro.Common.Utilities.PerformanceReportBroker"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.PerformanceReport.#ctor(System.String,System.String,System.TimeSpan)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Macro.Common.Utilities.PerformanceReport.Category">
            <summary>
            The Category.
            </summary>
        </member>
        <member name="F:Macro.Common.Utilities.PerformanceReport.Identifier">
            <summary>
            The Identifier.
            </summary>
        </member>
        <member name="F:Macro.Common.Utilities.PerformanceReport.TotalTime">
            <summary>
            The total time taken to perform the operation.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.PerformanceReportBroker">
            <summary>
            A generic way to publish events.
            </summary>
            <remarks>
            NOTE: Should be used for debugging purposes only.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.PerformanceReportBroker.PublishReport(System.String,System.String,System.Double)">
            <summary>
            Publishes a <see cref="T:Macro.Common.Utilities.PerformanceReport"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.PerformanceReportBroker.PublishReport(System.String,System.String,System.TimeSpan)">
            <summary>
            Publishes a <see cref="T:Macro.Common.Utilities.PerformanceReport"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.PerformanceReportBroker.PublishReport(Macro.Common.Utilities.PerformanceReport)">
            <summary>
            Publishes a <see cref="T:Macro.Common.Utilities.PerformanceReport"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.PerformanceReportBroker.PublishReport(System.Object,Macro.Common.Utilities.PerformanceReport)">
            <summary>
            Publishes a <see cref="T:Macro.Common.Utilities.PerformanceReport"/>.
            </summary>
        </member>
        <member name="E:Macro.Common.Utilities.PerformanceReportBroker.Report">
            <summary>
            The event that is fired as reports are published.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.PerformanceReportBroker.ReportDelegate">
            <summary>
            The <see cref="E:Macro.Common.Utilities.PerformanceReportBroker.Report"/> event delegate.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.DateTimeUtils">
            <summary>
            Provides convenient utilities for working with <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.DateTimeUtils.ParseISO(System.String)">
            <summary>
            Parses an ISO 8601 formatted date string, without milliseconds or timezone.
            </summary>
            <param name="isoDateString"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Utilities.DateTimeUtils.FormatISO(System.DateTime)">
            <summary>
            Formats the specified <see cref="T:System.DateTime"/> as ISO 8601, without milliseconds or timezone.
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.Common.LogLevel">
            <summary>
            Defines the logging level for calls to one of the <b>Platform.Log</b> methods.
            </summary>
        </member>
        <member name="F:Macro.Common.LogLevel.Debug">
            <summary>
            Debug log level.
            </summary>
        </member>
        <member name="F:Macro.Common.LogLevel.Info">
            <summary>
            Info log level.
            </summary>
        </member>
        <member name="F:Macro.Common.LogLevel.Warn">
            <summary>
            Warning log level.
            </summary>
        </member>
        <member name="F:Macro.Common.LogLevel.Error">
            <summary>
            Error log level.
            </summary>
        </member>
        <member name="F:Macro.Common.LogLevel.Fatal">
            <summary>
            Fatal log level.
            </summary>
        </member>
        <member name="T:Macro.Common.MessageBoxExtensionPoint">
            <summary>
            An extension point for <see cref="T:Macro.Common.IMessageBox"/>es.
            </summary>
        </member>
        <member name="T:Macro.Common.ApplicationRootExtensionPoint">
            <summary>
            Defines the Application Root extension point.
            </summary>
            <remarks>
            When one of the <b>Platform.StartApp</b> methods are called,
            the platform creates an application root extension and executes it by calling
            <see cref="M:Macro.Common.IApplicationRoot.RunApplication(System.String[])"/>.
            </remarks>
        </member>
        <member name="T:Macro.Common.TimeProviderExtensionPoint">
            <summary>
            An extension point for <see cref="T:Macro.Common.ITimeProvider"/>s.
            </summary>
            <remarks>
            Used internally by the framework to create a <see cref="T:Macro.Common.ITimeProvider"/> for
            use by the application (see <see cref="P:Macro.Common.Platform.Time"/>).
            </remarks>
        </member>
        <member name="T:Macro.Common.ServiceProviderExtensionPoint">
            <summary>
            Defines an extension point for service providers.
            </summary>
            <remarks>
            <para>
            A service provider is a class that knows how to provide a specific set of services to the 
            application.  A given service should be provided exclusively by one provider 
            (i.e. no two providers should provide the same service).  The application obtains
            services through the <see cref="M:Macro.Common.Platform.GetService(System.Type)"/> method.
            </para>
            <para>
            A service provider may be accessed by multiple threads.  For reasons of thread-safety, a service provider
            should return a new instance of the service class for each call to <see cref="M:System.IServiceProvider.GetService(System.Type)"/>,
            so that each thread receives its own copy of the service.
            If the provider returns the same object (singleton), then the service object itself must be thread-safe.
            </para>
            </remarks>
        </member>
        <member name="T:Macro.Common.Platform">
            <summary>
            A collection of useful utility functions.
            </summary>
        </member>
        <member name="M:Macro.Common.Platform.StartApp(Macro.Common.ExtensionFilter,System.String[])">
            <summary>
            Starts the application.
            </summary>
            <param name="applicationRootFilter">An extension filter that selects the application root extension to execute.</param>
            <param name="args">The set of arguments passed from the command line.</param>
            <remarks>
            A Macro based application is started by calling this convenience method from
            a bootstrap executable of some kind.  Calling this method results in the loading
            of all plugins and creation of an <see cref="T:Macro.Common.IApplicationRoot"/> extension.  
            This method is not thread-safe as it should only ever be invoked once per execution, by a single thread.
            </remarks>
        </member>
        <member name="M:Macro.Common.Platform.StartApp">
            <summary>
            Starts the application.
            </summary>
            <remarks>
            A Macro based application is started by calling this convenience method from
            a bootstrap executable of some kind.  Calling this method results in the loading
            of all plugins and creation of an <see cref="T:Macro.Common.IApplicationRoot"/> extension.  
            This method is not thread-safe as it should only ever be invoked once per execution, by a single thread.
            </remarks>
        </member>
        <member name="M:Macro.Common.Platform.StartApp(System.String,System.String[])">
            <summary>
            Starts the application matching the specified fully or partially qualified class name.
            </summary>
            <param name="appRootClassName">The name of an application root class, which need not be fully qualified.</param>
            <param name="args"></param>
        </member>
        <member name="M:Macro.Common.Platform.GetService``1">
            <summary>
            Obtains an instance of the specified service for use by the application.
            </summary>
            <remarks>
            This method is thread-safe.
            </remarks>
            <typeparam name="TService">The type of service to obtain.</typeparam>
            <returns>An instance of the specified service.</returns>
            <exception cref="T:Macro.Common.UnknownServiceException">The requested service cannot be provided.</exception>
        </member>
        <member name="M:Macro.Common.Platform.GetService``1(Macro.Common.Platform.WithServiceDelegate{``0})">
            <summary>
            Obtains an instance of the specified service for use by the application.  
            </summary>
            <remarks>
            <para>
            Instead of returning the service directly, this overload passes the service to the specified delegate for use.
            When the delegate returns, this method automatically takes care of determing whether the service implements <see cref="T:System.IDisposable"/>
            and calling <see cref="M:System.IDisposable.Dispose"/> if it does.  The delegate must not cache the returned service
            because it may be disposed as soon as the delegate returns.  For the single-use scenario, this overload is preferred
            to the other overloads because it automatically manages the lifecycle of the service object.
            </para>
            <para>
            This method is thread-safe.
            </para>
            </remarks>
            <typeparam name="TService">The service to obtain.</typeparam>
            <param name="proc">A delegate that will receive the service for one-time use.</param>
        </member>
        <member name="M:Macro.Common.Platform.GetService(System.Type)">
            <summary>
            Obtains an instance of the specified service for use by the application.
            </summary>
            <remarks>
            This method is thread-safe.
            </remarks>
            <param name="service">The type of service to obtain.</param>
            <returns>An instance of the specified service.</returns>
            <exception cref="T:Macro.Common.UnknownServiceException">The requested service cannot be provided.</exception>
        </member>
        <member name="M:Macro.Common.Platform.GetDuplexService``2(``1)">
            <summary>
            Obtains an instance of the specified duplex service for use by the application.
            </summary>
            <remarks>
            This method is thread-safe.
            </remarks>
            <typeparam name="TService">The type of service to obtain.</typeparam>
            <typeparam name="TCallback">The type of the callback contract.</typeparam>
            <param name="callback">An object that implements the callback contract.</param>
            <returns>An instance of the specified service.</returns>
            <exception cref="T:Macro.Common.UnknownServiceException">The requested service cannot be provided.</exception>
        </member>
        <member name="M:Macro.Common.Platform.GetDuplexService(System.Type,System.Object)">
            <summary>
            Obtains an instance of the specified duplex service for use by the application.
            </summary>
            <remarks>
            This method is thread-safe.
            </remarks>
            <param name="service">The type of service to obtain.</param>
            <param name="callback">An object implementing the callback service contract.</param>
            <returns>An instance of the specified service.</returns>
            <exception cref="T:Macro.Common.UnknownServiceException">The requested service cannot be provided.</exception>
        </member>
        <member name="M:Macro.Common.Platform.IsLogLevelEnabled(Macro.Common.LogLevel)">
            <summary>
            Determines if the specified <see cref="T:Macro.Common.LogLevel"/> is enabled.
            </summary>
            <param name="category">The logging level to check.</param>
            <returns>true if the <see cref="T:Macro.Common.LogLevel"/> is enabled, or else false.</returns>
        </member>
        <member name="M:Macro.Common.Platform.IsLogLevelEnabled(System.String,Macro.Common.LogLevel)">
            <summary>
            Determines if the specified <see cref="T:Macro.Common.LogLevel"/> is enabled for the named log.
            </summary>
            <param name="logName">The name of the log.</param>
            <param name="category">The logging level to check.</param>
            <returns>true if the <see cref="T:Macro.Common.LogLevel"/> is enabled, or else false.</returns>
        </member>
        <member name="M:Macro.Common.Platform.Log(Macro.Common.LogLevel,System.Object)">
            <summary>
            Logs the specified message at the specified <see cref="T:Macro.Common.LogLevel"/>.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <param name="category">The logging level.</param>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:Macro.Common.Platform.Log(Macro.Common.LogLevel,System.String,System.Object[])">
            <summary>
            Logs the specified message at the specified <see cref="T:Macro.Common.LogLevel"/>.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <param name="category">The log level.</param>
            <param name="message">Format message, as used with <see cref="T:System.Text.StringBuilder"/>.</param>
            <param name="args">Optional arguments used with <paramref name="message"/>.</param>
        </member>
        <member name="M:Macro.Common.Platform.Log(Macro.Common.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception at the specified <see cref="T:Macro.Common.LogLevel"/>.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <param name="ex">The exception to log.</param>
            <param name="category">The log level.</param>
            <param name="message">Format message, as used with <see cref="T:System.Text.StringBuilder"/>.</param>
            <param name="args">Optional arguments used with <paramref name="message"/>.</param>
        </member>
        <member name="M:Macro.Common.Platform.Log(System.String,Macro.Common.LogLevel,System.String,System.Object[])">
            <summary>
            Logs the specified message at the specified <see cref="T:Macro.Common.LogLevel"/>, to the log with the specified name.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <param name="logName"> </param>
            <param name="category">The log level.</param>
            <param name="message">Format message, as used with <see cref="T:System.Text.StringBuilder"/>.</param>
            <param name="args">Optional arguments used with <paramref name="message"/>.</param>
        </member>
        <member name="M:Macro.Common.Platform.Log(System.String,Macro.Common.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception at the specified <see cref="T:Macro.Common.LogLevel"/>, to the log with the specified name.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <param name="ex">The exception to log.</param>
            <param name="logName">A named log.</param>
            <param name="category">The log level.</param>
            <param name="message">Format message, as used with <see cref="T:System.Text.StringBuilder"/>.</param>
            <param name="args">Optional arguments used with <paramref name="message"/>.</param>
        </member>
        <member name="M:Macro.Common.Platform.ShowMessageBox(System.String)">
            <summary>
            Displays a message box with the specified message.
            </summary>
            <remarks>
            This method is thread-safe, however displaying message boxes from a thread other than a UI
            thread is not a recommended practice.
            </remarks>
        </member>
        <member name="M:Macro.Common.Platform.ShowMessageBox(System.String,Macro.Common.MessageBoxActions)">
            <summary>
            Displays a message box with the specified message and buttons, and returns a value indicating the action
            taken by the user.
            </summary>
            <remarks>
            This method is thread-safe, however displaying message boxes from a thread other than a UI
            thread is not a recommended practice.
            </remarks>
        </member>
        <member name="M:Macro.Common.Platform.CheckForEmptyString(System.String,System.String)">
            <summary>
            Checks if a string is empty.
            </summary>
            <param name="variable">The string to check.</param>
            <param name="variableName">The variable name of the string to checked.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="variable"/> or or <paramref name="variableName"/>
            is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="variable"/> is zero length.</exception>
        </member>
        <member name="M:Macro.Common.Platform.CheckForNullReference(System.Object,System.String)">
            <summary>
            Checks if an object reference is null.
            </summary>
            <param name="variable">The object reference to check.</param>
            <param name="variableName">The variable name of the object reference to check.</param>
            <remarks>Use for checking if an input argument is <b>null</b>.  To check if a member variable
            is <b>null</b> (i.e., to see if an object is in a valid state), use <b>CheckMemberIsSet</b> instead.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="variable"/> or <paramref name="variableName"/>
            is <b>null</b>.</exception>
        </member>
        <member name="M:Macro.Common.Platform.CheckExpectedType(System.Object,System.Type)">
            <summary>
            Checks if an object is of the expected type.
            </summary>
            <param name="variable">The object to check.</param>
            <param name="type">The variable name of the object to check.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="variable"/> or <paramref name="type"/>
            is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> is not the expected type.</exception>
        </member>
        <member name="M:Macro.Common.Platform.CheckForInvalidCast(System.Object,System.String,System.String)">
             <summary>
             Checks if a cast is valid.
             </summary>
             <param name="castOutput">The object resulting from the cast.</param>
             <param name="castInputName">The variable name of the object that was cast.</param>
             <param name="castTypeName">The name of the type the object was cast to.</param>
             <remarks>
             <para>To use this method, casts have to be done using the <b>as</b> operator.  The
             method depends on failed casts resulting in <b>null</b>.</para>
             <para>This method has been deprecated since it does not actually perform any
             cast checking itself and entirely relies on correct usage (which is not apparent
             through the Visual Studio Intellisence feature) to function as an exception message
             formatter. The recommended practice is to use the <see cref="M:Macro.Common.Platform.CheckExpectedType(System.Object,System.Type)"/>
             if the cast output need not be consumed, or use the direct cast operator instead.</para>
             </remarks>
             <example>
             <code>
             [C#]
             layer = new GraphicLayer();
             GraphicLayer graphicLayer = layer as GraphicLayer;
             // No exception thrown
             Platform.CheckForInvalidCast(graphicLayer, "layer", "GraphicLayer");
            
             ImageLayer image = layer as ImageLayer;
             // InvalidCastException thrown
             Platform.CheckForInvalidCast(image, "layer", "ImageLayer");
             </code>
             </example>
             <exception cref="T:System.ArgumentNullException"><paramref name="castOutput"/>,
             <paramref name="castInputName"/>, <paramref name="castTypeName"/> is <b>null</b>.</exception>
             <exception cref="T:System.InvalidCastException">Cast is invalid.</exception>
        </member>
        <member name="M:Macro.Common.Platform.CheckPositive(System.Int32,System.String)">
            <summary>
            Checks if a value is positive.
            </summary>
            <param name="n">The value to check.</param>
            <param name="variableName">The variable name of the value to check.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="variableName"/> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="n"/> &lt;= 0.</exception>
        </member>
        <member name="M:Macro.Common.Platform.CheckTrue(System.Boolean,System.String)">
            <summary>
            Checks if a value is true.
            </summary>
            <param name="testTrueCondition">The value to check.</param>
            <param name="conditionName">The name of the condition to check.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="conditionName"/> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="testTrueCondition"/> is  <b>false</b>.</exception>
        </member>
        <member name="M:Macro.Common.Platform.CheckFalse(System.Boolean,System.String)">
            <summary>
            Checks if a value is false.
            </summary>
            <param name="testFalseCondition">The value to check.</param>
            <param name="conditionName">The name of the condition to check.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="conditionName"/> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="testFalseCondition"/> is  <b>true</b>.</exception>
        </member>
        <member name="M:Macro.Common.Platform.CheckPositive(System.Single,System.String)">
            <summary>
            Checks if a value is positive.
            </summary>
            <param name="x">The value to check.</param>
            <param name="variableName">The variable name of the value to check.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="variableName"/> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> &lt;= 0.</exception>
        </member>
        <member name="M:Macro.Common.Platform.CheckPositive(System.Double,System.String)">
            <summary>
            Checks if a value is positive.
            </summary>
            <param name="x">The value to check.</param>
            <param name="variableName">The variable name of the value to check.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="variableName"/> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> &lt;= 0.</exception>
        </member>
        <member name="M:Macro.Common.Platform.CheckNonNegative(System.Int32,System.String)">
            <summary>
            Checks if a value is non-negative.
            </summary>
            <param name="n">The value to check.</param>
            <param name="variableName">The variable name of the value to check.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="variableName"/> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="n"/> &lt; 0.</exception>
        </member>
        <member name="M:Macro.Common.Platform.CheckArgumentRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Checks if a value is within a specified range.
            </summary>
            <param name="argumentValue">Value to be checked.</param>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
            <param name="variableName">Variable name of value to be checked.</param>
            <remarks>Checks if <paramref name="min"/> &lt;= <paramref name="argumentValue"/> &lt;= <paramref name="max"/></remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="variableName"/> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="argumentValue"/> is not within the
            specified range.</exception>
        </member>
        <member name="M:Macro.Common.Platform.CheckIndexRange(System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            Checks if an index is within a specified range.
            </summary>
            <param name="index">Index to be checked</param>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
            <param name="obj">Object being indexed.</param>
            <remarks>Checks if <paramref name="min"/> &lt;= <paramref name="index"/> &lt;= <paramref name="max"/>.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is <b>null</b>.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is not within the
            specified range.</exception>
        </member>
        <member name="M:Macro.Common.Platform.CheckMemberIsSet(System.Object,System.String)">
            <summary>
            Checks if a field or property is null.
            </summary>
            <param name="variable">Field or property to be checked.</param>
            <param name="variableName">Name of field or property to be checked.</param>
            <remarks>Use this method in your classes to verify that the object
            is not in an invalid state by checking that various fields and/or properties
            have been set, i.e., are not null.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="variableName"/> is <b>null</b>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="variable"/> is <b>null</b>.</exception>
        </member>
        <member name="M:Macro.Common.Platform.CheckMemberIsSet(System.Object,System.String,System.String)">
            <summary>
            Checks if a field or property is null.
            </summary>
            <param name="variable">Field or property to be checked.</param>
            <param name="variableName">Name of field or property to be checked.</param>
            <param name="detailedMessage">A more detailed and informative message describing
            why the object is in an invalid state.</param>
            <remarks>Use this method in your classes to verify that the object
            is not in an invalid state by checking that various fields and/or properties
            have been set, i.e., are not null.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="variableName"/> is <b>null</b>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="variable"/> is <b>null</b>.</exception>
        </member>
        <member name="P:Macro.Common.Platform.PluginManager">
            <summary>
            Gets the one and only <see cref="P:Macro.Common.Platform.PluginManager"/>.
            </summary>
        </member>
        <member name="P:Macro.Common.Platform.IsWin32Platform">
            <summary>
            Gets whether the application is executing on a Win32 operating system
            </summary>
            <remarks>
            This method is thread-safe.
            </remarks>
        </member>
        <member name="P:Macro.Common.Platform.IsUnixPlatform">
            <summary>
            Gets whether the application is executing on a Unix operating systems
            </summary>
            <remarks>
            This method is thread-safe.
            </remarks>
        </member>
        <member name="P:Macro.Common.Platform.PathSeparator">
            <summary>
            Gets the file-system path separator character for the current operating system
            </summary>
            <remarks>
            This method is thread-safe.
            </remarks>
        </member>
        <member name="P:Macro.Common.Platform.InstallDirectory">
            <summary>
            Gets the Macro installation directory.
            </summary>
            <remarks>
            This method is thread-safe.
            </remarks>
        </member>
        <member name="P:Macro.Common.Platform.PluginDirectory">
            <summary>
            Gets the fully qualified plugin directory.
            </summary>
            <remarks>
            This method is thread-safe.
            </remarks>
        </member>
        <member name="P:Macro.Common.Platform.CommonDirectory">
            <summary>
            Gets the fully qualified common directory.
            </summary>
            <remarks>
            This method is thread-safe.
            </remarks>
        </member>
        <member name="P:Macro.Common.Platform.LogDirectory">
            <summary>
            Gets the fully qualified log directory.
            </summary>
            <remarks>
            This method is thread-safe.
            </remarks>
        </member>
        <member name="P:Macro.Common.Platform.ManifestDirectory">
            <summary>
            Gets the fully qualified Manifest directory.
            </summary>
            <remarks>
            This method is thread-safe.
            </remarks>
        </member>
        <member name="P:Macro.Common.Platform.ApplicationDataDirectory">
            <summary>
            Gets the fully qualified application data directory.
            </summary>
            <remarks>
            This method is thread-safe.
            </remarks>
        </member>
        <member name="P:Macro.Common.Platform.Time">
            <summary>
            Gets the current time from an extension of <see cref="T:Macro.Common.TimeProviderExtensionPoint"/>, if one exists.
            </summary>
            <remarks>
            <para>
            The time returned may differ from the current time on the local machine, because the provider may choose
            to obtain the time from another source (i.e. a server).
            </para>
            <para>
            This method is thread-safe.
            </para>
            </remarks>
        </member>
        <member name="T:Macro.Common.Platform.WithServiceDelegate`1">
            <summary>
            For use with the <see cref="M:Macro.Common.Platform.GetService``1(Macro.Common.Platform.WithServiceDelegate{``0})"/> method.
            </summary>
        </member>
        <member name="T:Macro.Common.TypeExtensionFilter">
            <summary>
            Implements an extension filter that performs matching on types.
            </summary>
            <remarks>
            The filter will test true if the extension in question implements all of the
            types supplied as criteria to this filter.  Typically these types are interfaces, however, a
            single class may be supplied, in which case the extension must be a subclass of that class.
            </remarks>
        </member>
        <member name="M:Macro.Common.TypeExtensionFilter.#ctor(System.Type[])">
            <summary>
            Creates a filter that matches on multiple types.
            </summary>
            <param name="types">The types used as criteria to match.</param>
        </member>
        <member name="M:Macro.Common.TypeExtensionFilter.#ctor(System.Type)">
            <summary>
            Creates a filter that matches on a single type.
            </summary>
            <param name="type">The type used as criteria to match.</param>
        </member>
        <member name="M:Macro.Common.TypeExtensionFilter.Test(Macro.Common.ExtensionInfo)">
            <summary>
            Checks whether the specified extension implements/subclasses all of the criteria types.
            </summary>
            <param name="extension">The extension to test.</param>
            <returns>True if the test succeeds.</returns>
        </member>
        <member name="T:Macro.Common.Scripting.ActiveTemplate">
            <summary>
            Represents an instance of an active template.
            </summary>
            <remarks>
            <para>
            An active template is equivalent to a classic ASP page: that is,
            it is a template that contains snippets of script code that can call back into the context in which the script
            is being evaluated.  Currently only the Jscript language is supported.
            </para>
            <para>
            Initialize the template context via the constructor.  The template
            can then be evaluated within a given context by calling one of the <b>Evaluate</b> methods.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.Scripting.ActiveTemplate.FromEmbeddedResource(System.String,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Instantiates an active template from an embedded resource.
            </summary>
            <param name="resource"></param>
            <param name="resolver"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Scripting.ActiveTemplate.#ctor(System.IO.TextReader)">
            <summary>
            Constructs a template from the specified content.
            </summary>
        </member>
        <member name="M:Macro.Common.Scripting.ActiveTemplate.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},System.IO.TextWriter)">
            <summary>
            Overload that allows the output of the template evaluation to be written directly to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="context">A dictionary of objects to pass into the script.</param>
            <param name="output">A text writer to which the output should be written.</param>
        </member>
        <member name="M:Macro.Common.Scripting.ActiveTemplate.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Evaluates this template in the specified context.
            </summary>
            <remarks>
            The context parameter allows a set of named objects to be passed into 
            the scripting environment.  Within the scripting environment
            these objects can be referenced as globals.  For example,
            <code>
                Dictionary&lt;string, object&gt; scriptingContext = new Dictionary&lt;string, object&gt;();
                scriptingContext["Patient"] = patient;  // add a reference to an existing instance of a patient object
            
                Template template = new Template(...);
                template.Evaluate(scriptingContext);
            
                // now, in the template, the script would access the object as shown
                &lt;%= Patient.Name %&gt;
            </code>
            </remarks>
            <param name="context">A dictionary of objects to pass into the script.</param>
            <returns>The result of the template evaluation as a string.</returns>
        </member>
        <member name="M:Macro.Common.Scripting.ActiveTemplate.ComputeInversion(System.IO.TextReader)">
            <summary>
            Inverts the template content, returning a Jscript script that, when evaluated, will return
            the full result of the template.
            </summary>
        </member>
        <member name="T:Macro.Common.ExtensionInfo">
            <summary>
            Describes an extension.  
            </summary>
            <remarks>
            Instances of this class are immutable and safe for concurrent access by multiple threads.
            </remarks>
        </member>
        <member name="T:Macro.Common.IBrowsable">
            <summary>
            Used by framework to provide a consistent interface for browsable meta-data objects.
            </summary>
        </member>
        <member name="P:Macro.Common.IBrowsable.FormalName">
            <summary>
            Formal name of this object, typically the type name or assembly name.  Cannot be null.
            </summary>
        </member>
        <member name="P:Macro.Common.IBrowsable.Name">
            <summary>
            Friendly name of the object, if one exists, otherwise null.
            </summary>
        </member>
        <member name="P:Macro.Common.IBrowsable.Description">
            <summary>
            A friendly description of this object, if one exists, otherwise null.
            </summary>
        </member>
        <member name="P:Macro.Common.ExtensionInfo.ExtensionClass">
            <summary>
            Gets the type that implements the extension.
            </summary>
        </member>
        <member name="P:Macro.Common.ExtensionInfo.PointExtended">
            <summary>
            Gets the extension point type which this extension extends.
            </summary>
        </member>
        <member name="P:Macro.Common.ExtensionInfo.Enabled">
            <summary>
            Gets a value indicating whether or not this extension is enabled by application configuration.
            </summary>
        </member>
        <member name="P:Macro.Common.ExtensionInfo.Authorized">
            <summary>
            Gets a value indicating whether or not this extension is authorized by application licensing.
            </summary>
        </member>
        <member name="P:Macro.Common.ExtensionInfo.FeatureToken">
            <summary>
            Gets the feature identification token to be checked against application licensing.
            </summary>
        </member>
        <member name="P:Macro.Common.ExtensionInfo.Name">
            <summary>
            Gets a friendly name of this extension, if one exists, otherwise null.
            </summary>
        </member>
        <member name="P:Macro.Common.ExtensionInfo.Description">
            <summary>
            Gets a friendly description of this extension, if one exists, otherwise null.
            </summary>
        </member>
        <member name="P:Macro.Common.ExtensionInfo.FormalName">
            <summary>
            Gets the formal name of this extension, which is the fully qualified name of the extension class.
            </summary>
        </member>
        <member name="T:Macro.Common.Statistics.IStatistics">
            <summary>
            Defines the interface of a statistics object.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Macro.Common.Statistics.IStatistics.GetXmlAttributes(System.Xml.XmlDocument)">
            <summary>
            Gets the XML attribute representation of the statistics.
            </summary>
            <param name="doc"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Statistics.IStatistics.NewAverageStatistics">
            <summary>
            Gets a new statistics instance that can be used to generate and store the average of current statistics 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macro.Common.Statistics.IStatistics.Context">
            <summary>
            Sets or gets the context of the statistics
            </summary>
        </member>
        <member name="P:Macro.Common.Statistics.IStatistics.Name">
            <summary>
            Gets the name of the statistics
            </summary>
        </member>
        <member name="P:Macro.Common.Statistics.IStatistics.Unit">
            <summary>
            Gets the unit of the statistics value.
            </summary>
        </member>
        <member name="P:Macro.Common.Statistics.IStatistics.FormattedValue">
            <summary>
            Gets the formatted string representation of the value.
            </summary>
        </member>
        <member name="T:Macro.Common.Statistics.StatisticsSet">
            <summary>
            Statistics to hold one of more <see cref="T:Macro.Common.Statistics.IStatistics"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.StatisticsSet.AddField(Macro.Common.Statistics.IStatistics)">
            <summary>
            Adds a specified statistics into the set using its name as the key.
            </summary>
            <param name="stat"></param>
        </member>
        <member name="M:Macro.Common.Statistics.StatisticsSet.AddField(System.String,System.String)">
            <summary>
            Adds a specified statistics into the set using its name as the key.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Macro.Common.Statistics.StatisticsSet.AddSubStats(Macro.Common.Statistics.StatisticsSet)">
            <summary>
            Adds a sub-statistics.
            </summary>
            <param name="stat"></param>
        </member>
        <member name="M:Macro.Common.Statistics.StatisticsSet.CalculateAverage">
            <summary>
            Creats and calculates the averages for applicable fields in the sub-statistics
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.StatisticsSet.GetXmlElement(System.Xml.XmlDocument,System.Boolean)">
            <summary>
            Gets the XML representation of the statistics set.
            </summary>
            <param name="doc"></param>
            <param name="recursive"></param>
            <returns></returns>
        </member>
        <member name="P:Macro.Common.Statistics.StatisticsSet.Name">
            <summary>
            Gets or sets the name of the statistics set.
            </summary>
        </member>
        <member name="P:Macro.Common.Statistics.StatisticsSet.Fields">
            <summary>
            Gets the statistics fields in the set.
            </summary>
        </member>
        <member name="P:Macro.Common.Statistics.StatisticsSet.Item(System.Object)">
            <summary>
            Gets or sets the statistics field in the set based on a key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.Common.Statistics.AverageTimeSpanStatistics">
            <summary>
            Average time span statistics.
            </summary>
        </member>
        <member name="T:Macro.Common.Statistics.AverageStatistics`1">
            <summary>
            Base average statistics class.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Macro.Common.Statistics.Statistics`1">
            <summary>
            Generic base statistics class that implements <see cref="T:Macro.Common.Statistics.IStatistics"/>
            </summary>
            <typeparam name="T">The underlying data type of the statistics</typeparam>
            
            
        </member>
        <member name="M:Macro.Common.Statistics.Statistics`1.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="N:Macro.Common.Statistics"/> with specified name.
            </summary>
            <param name="name">Name of the <see cref="N:Macro.Common.Statistics"/> object to be created</param>
        </member>
        <member name="M:Macro.Common.Statistics.Statistics`1.#ctor(System.String,`0)">
            <summary>
            Creates an instance of <see cref="N:Macro.Common.Statistics"/> with specified name and value.
            </summary>
            <param name="name">Name of the <see cref="N:Macro.Common.Statistics"/> object to be created</param>
            <param name="value">value to be assigned to the newly crated <see cref="N:Macro.Common.Statistics"/> object</param>
        </member>
        <member name="M:Macro.Common.Statistics.Statistics`1.#ctor(Macro.Common.Statistics.Statistics{`0})">
            <summary>
            Creates an separate copy instance of <see cref="N:Macro.Common.Statistics"/> based on a specified <see cref="N:Macro.Common.Statistics"/> object.
            </summary>
            <param name="source">The original <see cref="N:Macro.Common.Statistics"/></param>
            <remarks>
            </remarks>
        </member>
        <member name="M:Macro.Common.Statistics.Statistics`1.op_Explicit(Macro.Common.Statistics.Statistics{`0})~`0">
            <summary>
            Casts the statistics to the underlying type.
            </summary>
            <param name="stat"></param>
            <returns></returns>
        </member>
        <member name="P:Macro.Common.Statistics.Statistics`1.Value">
            <summary>
            Gets or sets the value associated with the statistics
            </summary>
        </member>
        <member name="T:Macro.Common.Statistics.Statistics`1.ValueFormatterDelegate">
            <summary>
            Defines the delegate used for formatting the value of the statistics.
            <seealso cref="P:Macro.Common.Statistics.Statistics`1.FormattedValue"/>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.Common.Statistics.IAverageStatistics">
            <summary>
            Defines the interface of an average statistics
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.IAverageStatistics.AddSample``1(``0)">
            <summary>
            Adds a sample
            </summary>
            <typeparam name="TSample">Type of the statistics sample</typeparam>
            <param name="sample"></param>
        </member>
        <member name="M:Macro.Common.Statistics.AverageStatistics`1.#ctor">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.AverageStatistics`1"/>
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.AverageStatistics`1.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.AverageStatistics`1"/> with a specified name.
            </summary>
            <param name="name">Name of the <see cref="T:Macro.Common.Statistics.AverageStatistics`1"/> object to be created</param>
        </member>
        <member name="M:Macro.Common.Statistics.AverageStatistics`1.#ctor(Macro.Common.Statistics.Statistics{`0})">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.AverageStatistics`1"/> instance for a specified field.
            </summary>
            <param name="field">The statistics field for which the average statistics is to be created</param>
        </member>
        <member name="M:Macro.Common.Statistics.AverageStatistics`1.ComputeAverage">
            <summary>
            Computes the average for the samples in <see cref="P:Macro.Common.Statistics.AverageStatistics`1.Samples"/> list.
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.AverageStatistics`1.AddSample``1(``0)">
            <summary>
            Adds a sample to the <see cref="P:Macro.Common.Statistics.AverageStatistics`1.Samples"/> list.
            </summary>
            <typeparam name="TSample"></typeparam>
            <param name="sample"></param>
        </member>
        <member name="P:Macro.Common.Statistics.AverageStatistics`1.Value">
            <summary>
            Gets or set the value associated with the average statistics
            </summary>
        </member>
        <member name="P:Macro.Common.Statistics.AverageStatistics`1.FormattedValue">
            <summary>
            Gets the formatted string representation for the value of the average satistics.
            </summary>
        </member>
        <member name="P:Macro.Common.Statistics.AverageStatistics`1.Samples">
            <summary>
            Gets the list of samples whose average will be generated.
            </summary>
        </member>
        <member name="P:Macro.Common.Statistics.AverageStatistics`1.NewSamepleAdded">
            <summary>
            Gets or sets a value indicating whether a new sample has been added.
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.AverageTimeSpanStatistics.#ctor">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.AverageTimeSpanStatistics"/>
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.AverageTimeSpanStatistics.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.AverageTimeSpanStatistics"/> with specified name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Macro.Common.Statistics.AverageTimeSpanStatistics.#ctor(Macro.Common.Statistics.TimeSpanStatistics)">
            <summary>
            Creates a copy of the original <see cref="T:Macro.Common.Statistics.AverageTimeSpanStatistics"/> object.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Macro.Common.Statistics.AverageTimeSpanStatistics.AddSample``1(``0)">
            <summary>
            Adds a sample to the <see cref="P:Macro.Common.Statistics.AverageStatistics`1.Samples"/> list.
            </summary>
            <typeparam name="TSample">Type of the sample value to be inserted</typeparam>
            <param name="sample"></param>
        </member>
        <member name="M:Macro.Common.Statistics.AverageTimeSpanStatistics.ComputeAverage">
            <summary>
            Computes the average for the samples in <see cref="P:Macro.Common.Statistics.AverageStatistics`1.Samples"/> list.
            </summary>
        </member>
        <member name="T:Macro.Common.Authorization.DefineAuthorityGroupsExtensionPoint">
            <summary>
            Extension point for defining default authority groups to be imported at deployment time.
            </summary>
        </member>
        <member name="T:Macro.Common.Authorization.AuthorityGroupSetup">
            <summary>
            Helper class for setting up authority groups.
            </summary>
        </member>
        <member name="M:Macro.Common.Authorization.AuthorityGroupSetup.GetAuthorityTokens">
            <summary>
            Returns the set of authority tokens defined by all plugins.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Authorization.AuthorityGroupSetup.GetDefaultAuthorityGroups">
            <summary>
            Returns the set of default authority groups defined by all plugins.
            </summary>
            <remarks>
            The default authority groups are only be used at deployment time to initialize the authorization system.
            They do not reflect the actual set of authority groups that exist for a given deployment.
            </remarks>
            <returns></returns>
        </member>
        <member name="T:Macro.Common.Utilities.FileStreamOpener">
            <summary>
            Provides convenient blocking methods for file opening.
            </summary>
            <remarks>
            The FileStreamOpener class is an abstraction for file opening.  It has a built in mechanism to retry opening a file 
            if there is a sharing collision with the file.  This should make software opening files to be more resilliant if 
            files are attempted to be opened at the same time.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.FileStreamOpener.OpenForSoleUpdate(System.String,System.IO.FileMode)">
            <summary>
            Opens a file for update, using specified mode
            </summary>
            <param name="path">File path</param>
            <param name="mode">Opening mode</param>
            <returns>A <see cref="T:System.IO.FileStream"/> with sole write access.</returns>
            <remarks>
            <para>
            This methods will block indefinitely until the file is opened or exceptions are thrown because file cannot be open 
            using the specified mode. If it cannot be opened due to access permission (eg, it is being locked
            for update by another process), the method will try again.
            </para>
            <para>
            Once the file is opened, subsequent attempt to open the file for writing will fail until the returned stream is closed. However, other processes are 
            allowed to open the files for reading.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.FileStreamOpener.OpenForSoleUpdate(System.String,System.IO.FileMode,System.Int32)">
            <summary>
            Opens a file for update, using specified opening mode and timeout period.
            </summary>
            <param name="path">File path</param>
            <param name="mode">File opening mode</param>
            <param name="timeout">timeout (in ms)</param>
            <returns>The stream object for the specified file</returns>
            <exception cref="T:System.TimeoutException">Thrown when the file cannot be opened after the specified timeout</exception>
            <remarks>
            This methods will block until the specified file is opened or timeout has been reached.
            If the file cannot be open using the specified mode because it doesn't exist, exceptions may be be thrown 
            depending on the file opening mode. If it cannot be opened due to access permission (eg, it is being locked
            for update by another process), the method will try again.
            <para>
            Subsequent attempt to open the file for writing will fail until the returned stream is closed. However, other processes are 
            allowed to open the files for reading.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.FileStreamOpener.OpenForSoleUpdate(System.String,System.IO.FileMode,System.Int32,System.Threading.ManualResetEvent,System.Int32)">
            <summary>
            Opens a file for update, using specified opening mode and waits until timeout expires or a cancelling signal is set.
            </summary>
            <param name="path">File path</param>
            <param name="mode">File opening mode</param>
            <param name="timeout">timeout (in ms)</param>
            <param name="stopSignal">Cancelling signal</param>
            <param name="retryMinDelay">Minimum delay between retries</param>
            <returns>The stream object for the specified file</returns>
            <exception cref="T:System.TimeoutException">Thrown when the file cannot be opened after the specified timeout</exception>
            <remarks>
            <para>
            This methods will block until the specified file is opened or when timeout has been reached or the cancelling signal 
            is set. If the file cannot be open using the specified mode because it doesn't exist, exceptions may be be thrown 
            depending on the file opening mode. If it cannot be opened due to access permission (eg, it is being locked
            for update by another process), the method will try again.
            <para>
            The returned stream will have opened with <see cref="F:System.IO.FileAccess.Write"/> and <see cref="F:System.IO.FileShare.Read"/>  permissions.
            Subsequent attempt to open the file for writing will fail until the stream is closed. However, other processes are 
            allowed to open the files for reading.
            </para>
            If cancel signal is set and the file hasn't been opened, <b>null</b> will be returned.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.FileStreamOpener.OpenForRead(System.String,System.IO.FileMode)">
            <summary>
            Opens a file for reading, using specified opening mode.
            </summary>
            <param name="path"></param>
            <param name="mode"></param>
            <returns>a <see cref="T:System.IO.FileStream"/> with read permission.</returns>
            <remarks>
            <para>
            </para>This method will be blocked indefinitely until the file is opened using the specified mode or exceptions
            are thrown because it doesn't exist. If access permission exceptions occur, the method will try to open the file again.
            <para>
            The file will be opened using <see cref="F:System.IO.FileAccess.Read"/> and <see cref="F:System.IO.FileShare.ReadWrite"/> permissions.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.FileStreamOpener.OpenForRead(System.String,System.IO.FileMode,System.Int32)">
            <summary>
            Opens a file for reading, using specified opening mode and timeout period
            </summary>
            <param name="path"></param>
            <param name="mode"></param>
            <param name="timeout">timeout (in ms)</param>
            <returns></returns>
            <remarks>
            The file will be opened using <see cref="F:System.IO.FileAccess.Read"/> and <see cref="F:System.IO.FileShare.ReadWrite"/> permissions.
            Once the file has been opened, other processes still can open the files for reading.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.FileStreamOpener.OpenForRead(System.String,System.IO.FileMode,System.Int64,System.Threading.ManualResetEvent,System.Int32)">
            <summary>
            Opens a file for reading, using specified opening mode and waits until timeout expires or a cancelling signal is set.
            </summary>
            <param name="path">File path</param>
            <param name="mode">File opening mode</param>
            <param name="timeout">timeout (in ms)</param>
            <param name="stopSignal">Cancelling signal</param>
            <param name="retryMinDelay">Minimum delay between retries</param>
            <returns>The stream object for the specified file</returns>
            <exception cref="T:System.TimeoutException">Thrown when the file cannot be opened after the specified timeout</exception>
            <remarks>
            <para>
            This methods will block until the specified file is opened or when timeout has been reached or the cancelling signal 
            is set. If the file cannot be open using the specified mode because it doesn't exist, exceptions may be be thrown 
            depending on the file opening mode. If it cannot be opened due to access permission (eg, it is being locked
            for update by another process), the method will try again.
            </para>
            
            <para>
            If cancel signal is set and the file hasn't been opened, <b>null</b> will be returned.
            </para>
            
            <para>
            The returned stream will have opened with <see cref="F:System.IO.FileAccess.Read"/> and <see cref="F:System.IO.FileShare.ReadWrite"/> permissions.
            </para>
            
            </remarks>
        </member>
        <member name="T:Macro.Common.Utilities.DirectoryUtility">
            <summary>
            Static Class containing utilities for manipulating directories.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.DirectoryUtility.Count(System.String,System.String,System.Boolean,System.Predicate{System.String})">
            <summary>
            Returns the number of files in the specified directory that satisfies a given condition
            </summary>
            <param name="path"></param>
            <param name="searchParttern"></param>
            <param name="recursive"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Utilities.DirectoryUtility.Move(System.String,System.String)">
            <summary>
            Moves a study from one location to another.
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="M:Macro.Common.Utilities.DirectoryUtility.Copy(System.String,System.String)">
            <summary>
            Recursively Copy a directory without progress callback.
            </summary>
            <param name="sourceDirectory"></param>
            <param name="targetDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Utilities.DirectoryUtility.Copy(System.String,System.String,Macro.Common.Utilities.DirectoryUtility.CopyProcessCallback)">
            <summary>
            Recursively copy a directory
            </summary>
            <param name="sourceDirectory"></param>
            <param name="targetDirectory"></param>
            <param name="progressCallback"> </param>
        </member>
        <member name="M:Macro.Common.Utilities.DirectoryUtility.DeleteIfExists(System.String)">
            <summary>
            Delete a directory if it exists.  Do not delete the parent directory if its empty.
            </summary>
            <param name="dir"></param>
        </member>
        <member name="M:Macro.Common.Utilities.DirectoryUtility.DeleteIfEmpty(System.String)">
            <summary>
            Delete a directory if its empty.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Utilities.DirectoryUtility.DeleteIfEmpty(System.String,System.String)">
            <summary>
            Deletes a folder and its ascendants if they are empty. Stops when reaching the specified parent folder.
            </summary>
            <param name="path"></param>
            <param name="stopAtParentPath"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Utilities.DirectoryUtility.DeleteEmptySubDirectories(System.String,System.Boolean)">
            <summary>
            Delete any empty subdirectories
            </summary>
            <param name="path"></param>
            <param name="recursive"></param>
        </member>
        <member name="M:Macro.Common.Utilities.DirectoryUtility.DeleteIfExists(System.String,System.Boolean)">
            <summary>
            Delete a directory if it exists.
            </summary>
            <param name="dir"></param>
            <param name="deleteParentIfEmpty"></param>
        </member>
        <member name="M:Macro.Common.Utilities.DirectoryUtility.IsEmpty(System.String)">
            <summary>
            Is Directory empty?
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.Common.Utilities.DirectoryUtility.CopyProcessCallback">
            <summary>
            Callback delegate used by DirectoryUtility.Copy() to report the progress.
            </summary>
            <param name="path">The file that is being copied</param>
        </member>
        <member name="P:Macro.Common.Configuration.UpgradeSettings.CompletedUserUpgradeStepsXml">
            <summary>
            User upgrade steps (such as settings) that have already been completed; checked each time the application starts up.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.UpgradeSettings.UserUpgradeEnabled">
            <summary>
            Specifies whether or not the application should run the user upgrade on startup.
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.SettingsException">
            <summary>
            Represents an exception related to settings.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Macro.Common.Caching.ICacheClient">
            <summary>
            Defines an interface to an object that acts as a client of a cache.
            </summary>
        </member>
        <member name="M:Macro.Common.Caching.ICacheClient.Get(System.String,Macro.Common.Caching.CacheGetOptions)">
            <summary>
            Gets the object at the specified key from the cache, or null if the key does not exist.
            </summary>
            <param name="key"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Caching.ICacheClient.Put(System.String,System.Object,Macro.Common.Caching.CachePutOptions)">
            <summary>
            Puts the specified object into the cache at the specified key,
            using the specified options.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="M:Macro.Common.Caching.ICacheClient.Remove(System.String,Macro.Common.Caching.CacheRemoveOptions)">
            <summary>
            Removes the specified item from the cache, or does nothing if the item does not
            exist.
            </summary>
            <param name="key">The Key of the Item in the Cache to remove.</param>
            <param name="options"></param>
        </member>
        <member name="M:Macro.Common.Caching.ICacheClient.RegionExists(System.String)">
            <summary>
            Gets a value indicating whether the specified region exists.
            </summary>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Caching.ICacheClient.ClearRegion(System.String)">
            <summary>
            Clears the entire cache region.
            </summary>
        </member>
        <member name="M:Macro.Common.Caching.ICacheClient.ClearCache">
            <summary>
            Clears the entire logical cache (as identified by <see cref="P:Macro.Common.Caching.ICacheClient.CacheID"/>.
            </summary>
        </member>
        <member name="P:Macro.Common.Caching.ICacheClient.CacheID">
            <summary>
            Gets the ID of the logical cache that this client is connected to.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.AttributeUtils">
            <summary>
            Utilities class that provides a set of convenience methods for working with attributes.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.AttributeUtils.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean,System.Predicate{``0})">
            <summary>
            Searches a type/method/property/field for attributes of the specified type, matching the
            specified filter.
            </summary>
            <typeparam name="TAttribute">The type of attribute (may also be a base class).</typeparam>
            <param name="member">The type/method/property/field to find attributes on.</param>
            <param name="inherit">True to include inherited attributes in the search.</param>
            <param name="filter">A filter that restricts the results of the search.</param>
            <returns>A list of matching attributes.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.AttributeUtils.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Searches a type/method/property/field for attributes of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of attribute (may also be a base class).</typeparam>
            <param name="member">The type/method/property/field to find attributes on.</param>
            <param name="inherit">True to include inherited attributes in the search.</param>
            <returns>A list of matching attributes.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.AttributeUtils.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Searches a type/method/property/field for attributes of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of attribute (may also be a base class).</typeparam>
            <param name="member">The type/method/property/field to find attributes on.</param>
            <returns>A list of matching attributes.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.AttributeUtils.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean,System.Predicate{``0})">
            <summary>
            Searches a type/method/property/field for attributes of the specified type, returning the first match.
            </summary>
            <typeparam name="TAttribute">The type of attribute (may also be a base class).</typeparam>
            <param name="member">The type/method/property/field to find attributes on.</param>
            <param name="inherit">True to include inherited attributes in the search.</param>
            <param name="filter">A filter that restricts the results of the search.</param>
            <returns>The first matching attribute instance, or null if no matches are found.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.AttributeUtils.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Searches a type/method/property/field for attributes of the specified type, returning the first match.
            </summary>
            <typeparam name="TAttribute">The type of attribute (may also be a base class).</typeparam>
            <param name="member">The type/method/property/field to find attributes on.</param>
            <param name="inherit">True to include inherited attributes in the search.</param>
            <returns>The first matching attribute instance, or null if no matches are found.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.AttributeUtils.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Searches a type/method/property/field for attributes of the specified type, returning the first match.
            </summary>
            <typeparam name="TAttribute">The type of attribute (may also be a base class).</typeparam>
            <param name="member">The type/method/property/field to find attributes on.</param>
            <returns>The first matching attribute instance, or null if no matches are found.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.AttributeUtils.HasAttribute``1(System.Reflection.MemberInfo,System.Boolean,System.Predicate{``0})">
            <summary>
            Tests a type/method/property/field for the presence of an attribute of the specified type, and matching
            the specified filter.
            </summary>
            <typeparam name="TAttribute">The type of attribute (may also be a base class).</typeparam>
            <param name="member">The type/method/property/field to find attributes on.</param>
            <param name="inherit">True to include inherited attributes in the search.</param>
            <param name="filter">A filter that restricts the results of the search.</param>
            <returns>True if a match is found, otherwise false.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.AttributeUtils.HasAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Tests a type/method/property/field for the presence of an attribute of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of attribute (may also be a base class).</typeparam>
            <param name="member">The type/method/property/field to find attributes on.</param>
            <param name="inherit">True to include inherited attributes in the search.</param>
            <returns>True if a match is found, otherwise false.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.AttributeUtils.HasAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Tests a type/method/property/field for the presence of an attribute of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of attribute (may also be a base class).</typeparam>
            <param name="member">The type/method/property/field to find attributes on.</param>
            <returns>True if a match is found, otherwise false.</returns>
        </member>
        <member name="T:Macro.Common.Utilities.TypeSafeComparerWrapper`1">
            <summary>
            Utility class used to wrap an untyped <see cref="T:System.Collections.IComparer"/> as a type-safe one.
            </summary>
            <typeparam name="T">The type of the items to be compared.</typeparam>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeComparerWrapper`1.#ctor(System.Collections.IComparer)">
            <summary>
            Constructor.
            </summary>
            <param name="inner">The untyped <see cref="T:System.Collections.IComparer"/> to wrap.</param>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeComparerWrapper`1.Compare(`0,`0)">
            <summary>
            Compares the objects <paramref name="x"/> and <paramref name="y"/> and returns
            a value indicating the relationship between them.
            </summary>
            <remarks>
            A value of 0 indicates equality, &gt; 0 indicates that x &gt; y, &lt; 0 indicates that x &lt; y.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeComparerWrapper`1.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compares the objects <paramref name="x"/> and <paramref name="y"/> and returns
            a value indicating the relationship between them.
            </summary>
            <remarks>
            A value of 0 indicates equality, &gt; 0 indicates that x &gt; y, &lt; 0 indicates that x &lt; y.
            </remarks>
        </member>
        <member name="T:Macro.Common.Utilities.DictionaryEventArgs`2">
            <summary>
            Event used to notify observers of a change in a dictionary.
            </summary>
            <remarks>
            This class is used internally by the <see cref="T:Macro.Common.Utilities.ObservableDictionary`2"/>, but can be used
            for any dictionary-related event.
            </remarks>
            <typeparam name="TKey">The type of key in the dictionary.</typeparam>
            <typeparam name="TItem">The type of item in the dictionary.</typeparam>
        </member>
        <member name="M:Macro.Common.Utilities.DictionaryEventArgs`2.#ctor(`0,`1)">
            <summary>
            Constructor.
            </summary>
            <param name="key">The key for the <paramref name="item"/> that has changed.</param>
            <param name="item">The item that has changed.</param>
        </member>
        <member name="P:Macro.Common.Utilities.DictionaryEventArgs`2.Key">
            <summary>
            Gets the key for the <see cref="P:Macro.Common.Utilities.DictionaryEventArgs`2.Item"/> that has changed.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.DictionaryEventArgs`2.Item">
            <summary>
            Gets the item that has changed.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.LargeMemoryStream">
            <summary>
            An implementation of <see cref="T:System.IO.Stream"/> whose backing store is memory but is optimized to store large streams
            of data in separate, smaller buffers, giving a total capacity of nearly 2^47 bytes.
            </summary>
            <remarks>
            This implementation is similar to <see cref="T:System.IO.MemoryStream"/> in that it stores all data in memory.
            However, <see cref="T:System.IO.MemoryStream"/> stores data in a single byte buffer, and is thus subject to the 2^31-1 maximum
            array length of the CLR, as well as potential <see cref="T:System.OutOfMemoryException"/>s when allocating many large
            streams due to the fragmentation of the large object heap.
            <para>
            <see cref="T:Macro.Common.Utilities.LargeMemoryStream"/> is optimized for larger streams of data by storing the data in a series of smaller
            buffers limited to 64KB in size, thus increasing the apparent stream length limit by nearly a factor of 2^16. The
            smaller buffers are allocated on the small object heap, where fragmentation is less of a concern due to the ability
            of the garbage collector to perform memory compaction. Furthermore, the first few buffers are of smaller size, trading
            off some maximum stream length capacity in order to reduce the overhead for small data streams 
            e.g. a stream of 256 bytes will take up only 1KB instead of a full 64KB)
            </para>
            </remarks>
        </member>
        <member name="F:Macro.Common.Utilities.LargeMemoryStream.MaxLength">
            <summary>
            The maximum length of a <see cref="T:Macro.Common.Utilities.LargeMemoryStream"/> instance is 2^47-2^18 = 140,737,488,093,184 bytes.
            </summary>
            <remarks>
            The first 4 blocks have a total capacity of 2^16 bytes. Subsequent blocks have a capacity of 2^16 bytes each. The total number of blocks is limited to 2^31-1.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.LargeMemoryStream.ComputeBlockPosition(System.Int64,System.Int32@,System.Int32@)">
            <summary>
            Computes the index and offset within the block for the given stream position.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.LargeMemoryStream.GetBlockSize(System.Int32)">
            <summary>
            Gets the size in bytes of the specified block.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.CodeClock">
             <summary>
             A simple stopwatch class that can be used to profile code.  
             </summary>
             <remarks>
             <para>
             To ensure portability, use this class instead of the <see cref="T:System.Diagnostics.Stopwatch"/> 
             class which has not yet been implemented in Mono.
             </para>
             <para>
             On Windows, this class will internally use the Win32 high resolution performance counter.
             On other platforms, a default portable clock is used.
             </para>
             </remarks>
             <example>
             <code>
             CodeClock clock = new CodeClock();
             clock.Start();
            
             // Code to be timed
            
             clock.Stop();
             Trace.Write(clock.ToString());
             </code>
             </example>
        </member>
        <member name="M:Macro.Common.Utilities.CodeClock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Macro.Common.Utilities.CodeClock"/> class.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CodeClock.Start">
            <summary>
            Starts the clock.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CodeClock.Stop">
            <summary>
            Stops the clock.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CodeClock.Clear">
            <summary>
            Clears (resets) the clock.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CodeClock.ToString">
            <summary>
            Gets the number of seconds elapsed between start and stop as a formatted string.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.CodeClock.Seconds">
            <summary>
            Gets the number of seconds elapsed between start and stop.
            </summary>
        </member>
        <member name="T:Macro.Common.PluginException">
            <summary>
            Used by the framework to relay errors regarding plugins.
            </summary>
            <seealso cref="T:Macro.Common.PluginManager"/>
        </member>
        <member name="M:Macro.Common.PluginException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.PluginException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.PluginException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Macro.Common.ExtensionPointException">
            <summary>
            Used by the framework to relay errors regarding <see cref="T:Macro.Common.IExtensionPoint"/>s.
            </summary>
            <seealso cref="T:Macro.Common.PluginInfo"/>
        </member>
        <member name="M:Macro.Common.ExtensionPointException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.ExtensionPointException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Macro.Common.ExtensionException">
            <summary>
            Used by the framework to relay errors regarding extensions (created via <see cref="T:Macro.Common.IExtensionPoint"/>s).
            </summary>
        </member>
        <member name="M:Macro.Common.ExtensionException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.ExtensionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Macro.Common.Statistics.CollectionAverageStatistics`1">
            <summary>
            Base statistics class that automatically calculates averages 
            of the underlying <see cref="T:Macro.Common.Statistics.StatisticsSetCollection`1"/>.
            </summary>
            <typeparam name="T">The type of the statistics in the collection</typeparam>
            <remarks>
            The generated statistics contains fields with the average values of the corresponding fields in the collection.
            </remarks>
        </member>
        <member name="M:Macro.Common.Statistics.CollectionAverageStatistics`1.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.CollectionAverageStatistics`1"/> with a specified name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Macro.Common.Statistics.CollectionAverageStatistics`1.GetXmlElement(System.Xml.XmlDocument,System.Boolean)">
            <summary>
            Returns the XML element which contains the average attributes for the child collection.
            </summary>
            <param name="doc"></param>
            <param name="recursive"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.Common.Statistics.MessageRateFormatter">
            <summary>
            Message rate formatter class
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.MessageRateFormatter.Format(System.Double)">
            <summary>
            Formats a rate in msg/sec unit
            </summary>
            <param name="rate"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.Common.Statistics.ByteCountFormatter">
            <summary>
            Provide methods to format a number of bytes in different units
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.ByteCountFormatter.Format(System.UInt64)">
            <summary>
            Formats a byte number in different units
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.Common.Statistics.AverageCountStatistics">
            <summary>
            Average message count statistics.
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.AverageCountStatistics.#ctor">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.AverageCountStatistics"/>
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.AverageCountStatistics.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.AverageCountStatistics"/> with a specified name.
            </summary>
            <param name="name">Name of the <see cref="T:Macro.Common.Statistics.AverageCountStatistics"/> to be created</param>
        </member>
        <member name="M:Macro.Common.Statistics.AverageCountStatistics.#ctor(Macro.Common.Statistics.CountStatistics)">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.AverageCountStatistics"/> for a specified <see cref="T:Macro.Common.Statistics.CountStatistics"/> object
            </summary>
            <param name="source">The <see cref="T:Macro.Common.Statistics.CountStatistics"/> for which the <see cref="T:Macro.Common.Statistics.AverageCountStatistics"/> to be created is based on</param>
        </member>
        <member name="M:Macro.Common.Statistics.AverageCountStatistics.AddSample``1(``0)">
            <summary>
            Adds a sample to the <see cref="P:Macro.Common.Statistics.AverageStatistics`1.Samples"/> list.
            </summary>
            <typeparam name="TSample"></typeparam>
            <param name="sample"></param>
        </member>
        <member name="M:Macro.Common.Statistics.AverageCountStatistics.ComputeAverage">
            <summary>
            Computes the average for the samples in <see cref="P:Macro.Common.Statistics.AverageStatistics`1.Samples"/> list.
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.SettingsStoreExtensionPoint">
            <summary>
            An extension point for <see cref="T:Macro.Common.Configuration.ISettingsStore"/>s.
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.ISettingsStore">
            <summary>
            Defines the interface to a mechanism for the storage of application and user settings.
            </summary>
            <remarks>
            This interface is more specialized than <see cref="T:Macro.Common.Configuration.IConfigurationStore"/>, in that it is designed
            specifically to support derivatives of the <see cref="T:System.Configuration.SettingsProvider"/> class in order to support the .NET 
            settings framework.
            </remarks>
        </member>
        <member name="M:Macro.Common.Configuration.ISettingsStore.ListSettingsGroups">
            <summary>
            Lists all settings groups for which this store maintains settings values.
            </summary>
            <remarks>
            Generally this corresponds to the the list of all types derived from <see cref="T:System.Configuration.ApplicationSettingsBase"/> found
            in all installed plugins and related assemblies.
            </remarks>
        </member>
        <member name="M:Macro.Common.Configuration.ISettingsStore.GetPreviousSettingsGroup(Macro.Common.Configuration.SettingsGroupDescriptor)">
            <summary>
            Gets the settings group that immediately precedes the one provided.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.ISettingsStore.ListSettingsProperties(Macro.Common.Configuration.SettingsGroupDescriptor)">
            <summary>
            Lists the settings properties for the specified settings group.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.ISettingsStore.ImportSettingsGroup(Macro.Common.Configuration.SettingsGroupDescriptor,System.Collections.Generic.List{Macro.Common.Configuration.SettingsPropertyDescriptor})">
            <summary>
            Imports meta-data for the specified settings group and its properties.
            </summary>
            <param name="group"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Macro.Common.Configuration.ISettingsStore.GetSettingsValues(Macro.Common.Configuration.SettingsGroupDescriptor,System.String,System.String)">
            <summary>
            Obtains the settings values for the specified settings group, user and instance key.  If user is null,
            the shared settings are obtained.
            </summary>
            <remarks>
            The returned dictionary may contain values for all settings in the group, or it may
            contain only those values that differ from the default values defined by the settings group.
            </remarks>
        </member>
        <member name="M:Macro.Common.Configuration.ISettingsStore.PutSettingsValues(Macro.Common.Configuration.SettingsGroupDescriptor,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Store the settings values for the specified settings group, for the current user and
            specified instance key.  If user is null, the values are stored as shared settings.
            </summary>
            <remarks>
            The <paramref name="dirtyValues"/> dictionary should contain values for any settings that are dirty.
            </remarks>
        </member>
        <member name="M:Macro.Common.Configuration.ISettingsStore.RemoveUserSettings(Macro.Common.Configuration.SettingsGroupDescriptor,System.String,System.String)">
            <summary>
            Removes user settings from this group, effectively causing them to be reset to their shared default
            values.
            </summary>
            <remarks>
            Application-scoped settings are unaffected.
            </remarks>
        </member>
        <member name="P:Macro.Common.Configuration.ISettingsStore.IsOnline">
            <summary>
            Gets whether or not the settings store is online, and can be used.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.ISettingsStore.SupportsImport">
            <summary>
            Gets a value indicating whether this store supports importing of meta-data.
            </summary>
        </member>
        <member name="T:Macro.Common.Actions.XmlActionCompilerException">
            <summary>
            Exception thrown by <see cref="T:Macro.Common.Actions.XmlActionCompiler`2"/> or extensions 
            implementing <see cref="T:Macro.Common.Actions.XmlActionCompilerOperatorExtensionPoint`2"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Actions.XmlActionCompilerException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Descriptive message associated with the exception.</param>
        </member>
        <member name="M:Macro.Common.Actions.XmlActionCompilerException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Descriptive message associated with the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Macro.Common.Serialization.DataContractBase">
            <summary>
            Base class for all objects that serve as WCF data contracts.
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.SystemConfigurationHelper">
            <summary>
            Helper class that allows settings values for <see cref="T:System.Configuration.ApplicationSettingsBase"/>-derived classes
            to be easily read/written to/from a <see cref="T:System.Configuration.Configuration"/> object.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.SystemConfigurationHelper.GetSettingsValues(System.Configuration.Configuration,System.Type,Macro.Common.Configuration.SettingScope)">
            <summary>
            Gets only those settings values that are different from the defaults for the given settings group.
            </summary>
            <param name="configuration">the configuration where the values will be taken from</param>
            <param name="settingsClass">the settings class for which to get the values</param>
            <param name="settingScope">the scope of the settings for which to get the values</param>
        </member>
        <member name="M:Macro.Common.Configuration.SystemConfigurationHelper.GetSettingsValues(System.Configuration.Configuration,System.Type)">
            <summary>
            Gets only those settings values that are different from the defaults for the given settings group.
            </summary>
            <param name="configuration">the configuration where the values will be taken from</param>
            <param name="settingsClass">the settings class for which to get the values</param>
        </member>
        <member name="M:Macro.Common.Configuration.SystemConfigurationHelper.PutSettingsValues(System.Configuration.Configuration,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Stores the settings values for a given settings class.
            </summary>
            <param name="configuration">the configuration where the values will be stored</param>
            <param name="settingsClass">the settings class for which to store the values</param>
            <param name="dirtyValues">contains the values to be stored</param>
        </member>
        <member name="T:Macro.Common.Configuration.ApplicationCriticalSettingsProvider">
            <summary>
            Provides local persistence for application-critical settings.
            </summary>
            <remarks>
            Usage of this <see cref="T:System.Configuration.SettingsProvider"/> allows for certain application settings to be
            designated application-critical and stored in a file separate from the standard application
            configuration file. Application-critical settings are designated by their presence in the
            critical settings file, and may not be modified through this provider (similar to how
            application scoped settings may not be modified through the <see cref="T:System.Configuration.LocalFileSettingsProvider"/>.
            If a setting is not explicitly defined in the critical settings file, then the setting
            is treated as a standard application setting and resolved through the application and user
            configuration files.
            </remarks>
        </member>
        <member name="M:Macro.Common.Configuration.ApplicationCriticalSettingsProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Macro.Common.Configuration.ApplicationCriticalSettingsProvider"/> class.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.ApplicationCriticalSettingsProvider.CriticalSettingsFilePath">
            <summary>
            Gets the path to the application-critical settings file for the current application.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.ApplicationSettingsHelper.IsLocallyStored(System.Type)">
            <summary>
            Gets a value indicating whether the specified settings class stores its settings locally or not.
            </summary>
            <param name="settingsClass"></param>
            <returns>True if the specified settings class stores its settings locally.</returns>
        </member>
        <member name="M:Macro.Common.Configuration.ApplicationSettingsExtensions.ConvertPropertyExpressionToMember``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Converts a lambda property de-referencing expression to a <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <remarks>
            Given a lambda expression of the form <code>a =&gt; a.B</code>, this method returns the <see cref="T:System.Reflection.MemberInfo"/>
            that represents the property B on the object a.  Only one level of de-referencing is supported.
            </remarks>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="lambda"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.Common.Caching.CacheProviderInitializationArgs">
            <summary>
            Encapsulates arguments to the <see cref="M:Macro.Common.Caching.ICacheProvider.Initialize(Macro.Common.Caching.CacheProviderInitializationArgs)"/> methods.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.TypeSafeEnumerableWrapper`1">
            <summary>
            Utility class used to wrap an untyped <see cref="T:System.Collections.IEnumerable"/> as a type-safe one.
            </summary>
            <typeparam name="T">The type of the items to be enumerated.</typeparam>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeEnumerableWrapper`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Constructor.
            </summary>
            <param name="inner">The untyped <see cref="T:System.Collections.IEnumerable"/> object to wrap.</param>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeEnumerableWrapper`1.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the wrapped object.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeEnumerableWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> for the wrapped object.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.SimpleSerializedAttribute">
            <summary>
            This attribute class is used to decorate properties of other classes for use with the <see cref="T:Macro.Common.Utilities.SimpleSerializer"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.SimpleSerializedAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.SimpleSerializerException">
            <summary>
            Thrown by <see cref="T:Macro.Common.Utilities.SimpleSerializer"/>'s public methods: <see cref="M:Macro.Common.Utilities.SimpleSerializer.Deserialize(System.Object)"/> and <see cref="M:Macro.Common.Utilities.SimpleSerializer.Serialize(System.Object,System.Collections.Generic.IDictionary{System.String,System.String})"/>.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.SimpleSerializer">
            <summary>
            The <see cref="T:Macro.Common.Utilities.SimpleSerializer"/> class can be used to serialize objects to and from a string dictionary (Property/Value pairs).
            </summary>
            <remarks>
            The resulting dictionary can be stored to a file or setting so that objects can be easily persisted and restored.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.SimpleSerializer.Serialize(System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Populates the <paramref name="destinationObject"/>'s properties that are decorated with a <see cref="T:Macro.Common.Utilities.SimpleSerializedAttribute"/> 
            attribute using the Property/Value pairs from the input dictionary (<paramref name="sourceValues"/>).
            </summary>
            <param name="destinationObject">The object whose properties are to be initialized using the input dictionary's Property/Value pairs.</param>
            <param name="sourceValues">The input dictionary of Property/Value pairs.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when either of the input values are null.</exception>
            <exception cref="T:Macro.Common.Utilities.SimpleSerializerException">Thrown when an error occurs during serialization.</exception>
        </member>
        <member name="M:Macro.Common.Utilities.SimpleSerializer.Serialize``1(System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Populates the <paramref name="destinationObject"/>'s properties that are decorated with an attribute of type <typeparamref name="T"/>
            using the Property/Value pairs from the input dictionary (<paramref name="sourceValues"/>).
            </summary>
            <typeparam name="T">Must be an attribute type.</typeparam>
            <param name="destinationObject">The object whose properties are to be initialized using the input dictionary's Property/Value pairs.</param>
            <param name="sourceValues">The input dictionary of Property/Value pairs.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when either of the input values are null.</exception>
            <exception cref="T:Macro.Common.Utilities.SimpleSerializerException">Thrown when an error occurs during serialization.</exception>
        </member>
        <member name="M:Macro.Common.Utilities.SimpleSerializer.Deserialize(System.Object)">
            <summary>
            Constructs and returns a dictionary of Property/Value pairs from the input <paramref name="sourceObject"/>.
            </summary>
            <remarks>
            Those properties decorated with the <see cref="T:Macro.Common.Utilities.SimpleSerializedAttribute"/> attribute will have their
            values extracted and inserted into the resulting dictionary.
            </remarks>
            <param name="sourceObject">The object whose properties are to be extracted.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the input value is null.</exception>
            <exception cref="T:Macro.Common.Utilities.SimpleSerializerException">Thrown when an error occurs during deserialization.</exception>
            <returns>A dictionary of Property/Value pairs.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.SimpleSerializer.Deserialize``1(System.Object)">
            <summary>
            Constructs and returns a dictionary of Property/Value pairs from the input <paramref name="sourceObject"/>.
            </summary>
            <remarks>
            Those properties decorated with an attribute of type <typeparamref name="T"/> will have their
            values extracted and inserted into the resulting dictionary.
            </remarks>
            <typeparam name="T">Must be an attribute type.</typeparam>
            <param name="sourceObject">The object whose properties are to be extracted.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the input value is null.</exception>
            <exception cref="T:Macro.Common.Utilities.SimpleSerializerException">Thrown when an error occurs during deserialization.</exception>
            <returns>A dictionary of Property/Value pairs.</returns>
        </member>
        <member name="T:Macro.Common.Utilities.IObjectMemberContext">
            <summary>
            Defines a callback interface used by the <see cref="T:Macro.Common.Utilities.ObjectWalker"/> class.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.IObjectMemberContext.Object">
            <summary>
            Gets the object instance being walked, or null if a type is being walked.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.IObjectMemberContext.Member">
            <summary>
            Gets the property or field that the walker is currently at.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.IObjectMemberContext.MemberType">
            <summary>
            Gets the type of the property or field that the walker is currently at.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.IObjectMemberContext.MemberValue">
            <summary>
            Gets or sets the value of the property or field that the walker is currently at,
            assuming an object instance is being walked.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.ObjectWalker">
            <summary>
            Utility class for walking the properties and/or fields of an object.
            </summary>
            <remarks>
            By default, the public properties and fields of the object will be included in the walk.
            Set the properties of the <see cref="T:Macro.Common.Utilities.ObjectWalker"/> instance to optionally include
            private fields and/or properties, or to optionally exclude public fields/properties. 
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.ObjectWalker.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObjectWalker.#ctor(System.Predicate{System.Reflection.MemberInfo})">
            <summary>
            Constructor
            </summary>
            <param name="memberFilter"></param>
        </member>
        <member name="M:Macro.Common.Utilities.ObjectWalker.Walk(System.Object)">
            <summary>
            Walks properties and/or fields of the specified object.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Macro.Common.Utilities.ObjectWalker.Walk(System.Type)">
            <summary>
            Walks properties and/or fields of the specified type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:Macro.Common.Utilities.ObjectWalker.IncludeNonPublicFields">
            <summary>
            Gets or sets a value indicating whether to include non-public fields in the walk.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.ObjectWalker.IncludePublicFields">
            <summary>
            Gets or sets a value indicating whether to include public fields in the walk.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.ObjectWalker.IncludeNonPublicProperties">
            <summary>
            Gets or sets a value indicating whether to include non-public properties in the walk.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.ObjectWalker.IncludePublicProperties">
            <summary>
            Gets or sets a value indicating whether to include public properties in the walk.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.CollectionSynchronizeHelper`2">
            <summary>
            Synchronizes the state of one collection based on the state of another collection.
            </summary>
            <remarks>
            <para>
            The term "synchronization" here has nothing to do with threads, but refers to updating the elements of
            one collection based on the elements contained in another collection.  The two collections need not 
            have the same element type.  
            </para>
            <para>
            Call the <see cref="M:Macro.Common.Utilities.CollectionSynchronizeHelper`2.Synchronize(System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{`1})"/> method to update the "destination" collection so that it matches
            the contents of the "source" collection.  The <see cref="M:Macro.Common.Utilities.CollectionSynchronizeHelper`2.CompareItems(`0,`1)"/> callback will be used to determine
            if an item in the source collection represents the same item in the destination collection.  For items
            that appear in the source but not the destination, the <see cref="M:Macro.Common.Utilities.CollectionSynchronizeHelper`2.AddItem(`1,System.Collections.Generic.ICollection{`0})"/> callback will be called.
            For items that appear in the destination collection but not the source collection, the <see cref="M:Macro.Common.Utilities.CollectionSynchronizeHelper`2.RemoveItem(`0,System.Collections.Generic.ICollection{`0})"/>
            callback will be called.  For items that appear in both collections, the <see cref="M:Macro.Common.Utilities.CollectionSynchronizeHelper`2.UpdateItem(`0,`1,System.Collections.Generic.ICollection{`0})"/> callback
            will be called in order to update the element in the destination collection based on the item in the source
            collection.
            </para>
            <para>
            There are two ways to use this class.  Either instantiate it directly, providing a set of delegates
            to implement the callbacks, or create a subclass and override the protected callback methods.
            </para>
            <para>
            
            </para>
            </remarks>
            <typeparam name="TDestItem"></typeparam>
            <typeparam name="TSourceItem"></typeparam>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionSynchronizeHelper`2.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Protected constructor for creating subclasses.
            </summary>
            <param name="allowUpdate">Indicates whether items in the destination collection can be updated.</param>
            <param name="allowRemove">Indicates whether items can be removed from the destination collection.</param>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionSynchronizeHelper`2.#ctor(Macro.Common.Utilities.CollectionSynchronizeHelper{`0,`1}.CompareItemsDelegate,Macro.Common.Utilities.CollectionSynchronizeHelper{`0,`1}.AddItemDelegate,Macro.Common.Utilities.CollectionSynchronizeHelper{`0,`1}.UpdateItemDelegate,Macro.Common.Utilities.CollectionSynchronizeHelper{`0,`1}.RemoveItemDelegate)">
            <summary>
            Public constructor for direct use of this class.
            </summary>
            <param name="compareItemsCallback">Delegate for comparing identity of items in the source and destination collections.</param>
            <param name="addItemCallback">Delegate for adding items to the destination collection.</param>
            <param name="updateItemCallback">Delegate for updating items in the destination collection, or null if items should not be updated.</param>
            <param name="removeCallback">Delegate for removing items from the destination collection, or null if items should not be removed.</param>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionSynchronizeHelper`2.Synchronize(System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{`1})">
            <summary>
            Synchronize the destination collection to match the source collection.
            </summary>
            <param name="dest"></param>
            <param name="source"></param>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionSynchronizeHelper`2.CompareItems(`0,`1)">
            <summary>
            Compare items in the source and destination collections to determine if they have the same identity.
            </summary>
            <param name="destItem"></param>
            <param name="sourceItem"></param>
            <returns>True if the item in the source collection represents the same item in the destination collection.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionSynchronizeHelper`2.AddItem(`1,System.Collections.Generic.ICollection{`0})">
            <summary>
            Called to add an item to the destination collection representing the specified source item.
            </summary>
            <param name="sourceItem"></param>
            <param name="dest"></param>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionSynchronizeHelper`2.UpdateItem(`0,`1,System.Collections.Generic.ICollection{`0})">
            <summary>
            Called to update the specified destination item with the specified source item.
            </summary>
            <param name="destItem">The item to be updated.</param>
            <param name="sourceItem">The item that is the source of the update.</param>
            <param name="dest">The destination collection, typically not used here.</param>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionSynchronizeHelper`2.RemoveItem(`0,System.Collections.Generic.ICollection{`0})">
            <summary>
            Called to remove the specified item from the destination collection.
            </summary>
            <param name="destItem">The item to remove.</param>
            <param name="dest">The destination collection.</param>
        </member>
        <member name="T:Macro.Common.Utilities.CollectionSynchronizeHelper`2.CompareItemsDelegate">
            <summary>
            Delegate to compare identities of items in source and destination collections.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.CollectionSynchronizeHelper`2.AddItemDelegate">
            <summary>
            Delegate to add an item to the destination collection based on a source item.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.CollectionSynchronizeHelper`2.UpdateItemDelegate">
            <summary>
            Delegate to update an item in the destination collection based on a source item.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.CollectionSynchronizeHelper`2.RemoveItemDelegate">
            <summary>
            Delegate to remove an item from the destination collection.
            </summary>
        </member>
        <member name="T:Macro.Common.Statistics.TimeSpanFormatter">
            <summary>
            <see cref="T:System.TimeSpan"/> formatter class.
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.TimeSpanFormatter.Format(System.TimeSpan,System.Boolean)">
            <summary>
            Formats a <see cref="T:System.TimeSpan"/> in appropriate units, with option to round up.
            </summary>
            <param name="duration">The duration to be formatted</param>
            <param name="roundUp">Indicates whether the duration should be rounded up (eg, '3 sec' instead of '3.232 sec')</param>
            <returns>A formatted string representation of the duration</returns>
        </member>
        <member name="M:Macro.Common.Statistics.TimeSpanFormatter.Format(System.TimeSpan)">
            <summary>
            Formats a <see cref="T:System.TimeSpan"/> in appropriate units.
            </summary>
            <param name="duration">The duration to be formatted</param>
            <returns>A formatted string representation of the duration</returns>
        </member>
        <member name="T:Macro.Common.DefaultExtensionFactory">
            <summary>
            The default implementation of <see cref="T:Macro.Common.IExtensionFactory"/> that creates extensions from
            the set of plugins discovered at runtime.
            </summary>
            <remarks>
            This class is safe for use by mutliple concurrent threads.
            </remarks>
        </member>
        <member name="T:Macro.Common.IExtensionFactory">
            <summary>
            Interface defining a factory for extensions of arbitrary <see cref="T:Macro.Common.ExtensionPoint"/>s.
            </summary>
            <remarks>
            Implementations of this interface are expected to be thread-safe.
            </remarks>
        </member>
        <member name="M:Macro.Common.IExtensionFactory.CreateExtensions(Macro.Common.ExtensionPoint,Macro.Common.ExtensionFilter,System.Boolean)">
            <summary>
            Creates instances of available extensions that extend the specified extension point and match the specified filter.
            </summary>
            <param name="extensionPoint">The extension point for which to create extensions.</param>
            <param name="filter">An <see cref="T:Macro.Common.ExtensionFilter"/> used to limit the result set to extensions with particular characteristics.</param>
            <param name="justOne">Indicates whether or not to return only the first matching extension that is found.</param>
            <returns>A set of extension instances.</returns>
            <remarks>
            Available extensions are those which are both enabled and licensed.
            If <paramref name="justOne"/> is true, the first matching extension that is successfully instantiated is returned,
            an no other extensions are instantiated.
            </remarks>
        </member>
        <member name="M:Macro.Common.IExtensionFactory.ListExtensions(Macro.Common.ExtensionPoint,Macro.Common.ExtensionFilter)">
            <summary>
            Lists all available extensions for the specified <paramref name="extensionPoint"/> that match the specified <paramref name="filter"/>.
            </summary>
            <param name="extensionPoint">The extension point for which to retrieve a list of extensions.</param>
            <param name="filter">An <see cref="T:Macro.Common.ExtensionFilter"/> used to limit the result set to extensions with particular characteristics.</param>
            <returns>A list of <see cref="T:Macro.Common.ExtensionInfo"/> objects describing available extensions.</returns>
            <remarks>
            Available extensions are those which are both enabled and licensed.
            </remarks>
        </member>
        <member name="M:Macro.Common.DefaultExtensionFactory.CreateExtensions(Macro.Common.ExtensionPoint,Macro.Common.ExtensionFilter,System.Boolean)">
            <summary>
            Creates instances of available extensions that extend the specified extension point and match the specified filter.
            </summary>
            <param name="extensionPoint">The extension point for which to create extensions.</param>
            <param name="filter">An <see cref="T:Macro.Common.ExtensionFilter"/> used to limit the result set to extensions with particular characteristics.</param>
            <param name="justOne">Indicates whether or not to return only the first matching extension that is found.</param>
            <returns>A set of extension instances.</returns>
            <remarks>
            Available extensions are those which are both enabled and licensed.
            If <paramref name="justOne"/> is true, the first matching extension that is successfully instantiated is returned,
            an no other extensions are instantiated.
            </remarks>
        </member>
        <member name="M:Macro.Common.DefaultExtensionFactory.ListExtensions(Macro.Common.ExtensionPoint,Macro.Common.ExtensionFilter)">
            <summary>
            Lists all available extensions for the specified <paramref name="extensionPoint"/> that match the specified <paramref name="filter"/>.
            </summary>
            <param name="extensionPoint">The extension point for which to retrieve a list of extensions.</param>
            <param name="filter">An <see cref="T:Macro.Common.ExtensionFilter"/> used to limit the result set to extensions with particular characteristics.</param>
            <returns>A list of <see cref="T:Macro.Common.ExtensionInfo"/> objects describing available extensions.</returns>
            <remarks>
            Available extensions are those which are both enabled and licensed.
            </remarks>
        </member>
        <member name="T:Macro.Common.UsageTracking.UsageTrackingServiceClient">
            <summary>
            Client service for <see cref="T:Macro.Common.UsageTracking.IUsageTracking"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.UsageTracking.UsageTrackingServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.UsageTracking.UsageTrackingServiceClient.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="endpointConfigurationName">Endpoint configuration name.</param>
        </member>
        <member name="M:Macro.Common.UsageTracking.UsageTrackingServiceClient.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            Constructor.
            </summary>
            <param name="binding">Binding for the service.</param>
            <param name="remoteAddress">Remote address.</param>
        </member>
        <member name="M:Macro.Common.UsageTracking.UsageTrackingServiceClient.#ctor(System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            Constructor.
            </summary>
            <param name="endpointConfigurationName">Binding configuration name.</param>
            <param name="remoteAddress">Remote address.</param>
        </member>
        <member name="M:Macro.Common.UsageTracking.UsageTrackingServiceClient.Register(Macro.Common.UsageTracking.RegisterRequest)">
            <summary>
            Register the application.
            </summary>
            <param name="request">The register request.</param>
        </member>
        <member name="T:Macro.Common.Shreds.Shred">
            <summary>
            Abstract base implementation of <see cref="T:Macro.Common.Shreds.IShred"/>.  Shred implementations should inherit
            from this class rather than implement <see cref="T:Macro.Common.Shreds.IShred"/> directly.
            </summary>
        </member>
        <member name="T:Macro.Common.Shreds.IShred">
            <summary>
            Defines the set of operations that are possible on a Shred
            </summary>
            <remarks>See also <see cref="T:Macro.Common.Shreds.ShredExtensionPoint"/></remarks>
        </member>
        <member name="M:Macro.Common.Shreds.IShred.Start">
            <summary>
            Shred should initialize all required resources and data structures and begin 
            exeuction of its mainline code
            </summary>
        </member>
        <member name="M:Macro.Common.Shreds.IShred.Stop">
            <summary>
            Shred should stop, and release all held resources.
            </summary>
        </member>
        <member name="M:Macro.Common.Shreds.IShred.GetDisplayName">
            <summary>
            Shred should return a human-readable, friendly name that will be used in
            display lists and other human-readable user-interfaces.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Shreds.IShred.GetDescription">
            <summary>
            Shred should return a lengthier description of what it was created for and 
            what it was created to do.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Shreds.Shred.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
        </member>
        <member name="M:Macro.Common.Shreds.Shred.Start">
            <summary>
            Called to start the shred.
            </summary>
            <remarks>
            This method should perform any initialization of the shred, and then return immediately.
            </remarks>
        </member>
        <member name="M:Macro.Common.Shreds.Shred.Stop">
            <summary>
            Called to stop the shred.
            </summary>
            <remarks>
            This method should perform any necessary clean-up, and then return immediately.
            </remarks>
        </member>
        <member name="M:Macro.Common.Shreds.Shred.GetDisplayName">
            <summary>
            Gets the display name of the shred.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Shreds.Shred.GetDescription">
            <summary>
            Gets a description of the shred.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Macro.Common.Configuration.ConfigurationDocumentQuery">
            <summary>
            Represents a configuration document query.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.ConfigurationDocumentQuery.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.ConfigurationDocumentQuery.DocumentName">
            <summary>
            Gets the criteria for the name of the document.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.ConfigurationDocumentQuery.Version">
            <summary>
            Gets the criteria for the version of the document.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.ConfigurationDocumentQuery.UserType">
            <summary>
            Gets the criteria for the owner of the document.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.ConfigurationDocumentQuery.InstanceKey">
            <summary>
            Gets the criteria for the instance key of the document.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.ConfigurationDocumentQuery.CreationTime">
            <summary>
            Gets the criteria for the document creation time.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.ConfigurationDocumentQuery.ModifiedTime">
            <summary>
            Gets the criteria for the document last modification time.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.ConfigurationDocumentQuery.FirstResult">
            <summary>
            Gets or sets the index of the first result to return.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.ConfigurationDocumentQuery.MaxResults">
            <summary>
            Gets or sets the maximum number of results to return.
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.ConfigurationDocumentQuery.StringOperator">
            <summary>
            Defines the set of supported string operators.
            </summary>
        </member>
        <member name="F:Macro.Common.Configuration.ConfigurationDocumentQuery.StringOperator.Exact">
            <summary>
            Exact match
            </summary>
        </member>
        <member name="F:Macro.Common.Configuration.ConfigurationDocumentQuery.StringOperator.StartsWith">
            <summary>
            Starts with
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.ConfigurationDocumentQuery.DateTimeOperator">
            <summary>
            Defines the set of supported date-time operations.
            </summary>
        </member>
        <member name="F:Macro.Common.Configuration.ConfigurationDocumentQuery.DateTimeOperator.Before">
            <summary>
            Before
            </summary>
        </member>
        <member name="F:Macro.Common.Configuration.ConfigurationDocumentQuery.DateTimeOperator.After">
            <summary>
            After
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.ConfigurationDocumentQuery.DocumentUserType">
            <summary>
            Defines the set of document user types.
            </summary>
        </member>
        <member name="F:Macro.Common.Configuration.ConfigurationDocumentQuery.DocumentUserType.User">
            <summary>
            Documents owned by the current user.
            </summary>
        </member>
        <member name="F:Macro.Common.Configuration.ConfigurationDocumentQuery.DocumentUserType.Shared">
            <summary>
            Shared documents.
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.ConfigurationDocumentQuery.Criteria`1">
            <summary>
            Abstract base class for criteria objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Macro.Common.Configuration.ConfigurationDocumentQuery.Criteria`1.Clear">
            <summary>
            Clears this criteria.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.ConfigurationDocumentQuery.Criteria`1.Value">
            <summary>
            Gets or sets the value of this criteria.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.ConfigurationDocumentQuery.Criteria`1.IsSet">
            <summary>
            Gets a value indicating whether this criteria has been set.
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.ConfigurationDocumentQuery.DocumentNameCriteria">
            <summary>
            Document name criteria class.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.ConfigurationDocumentQuery.DocumentNameCriteria.Operator">
            <summary>
            Gets or sets the matching operator.
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.ConfigurationDocumentQuery.VersionCriteria">
            <summary>
            Document version criteria class.
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.ConfigurationDocumentQuery.UserCriteria">
            <summary>
            User name criteria class.
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.ConfigurationDocumentQuery.InstanceKeyCriteria">
            <summary>
            Instance key criteria class.
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.ConfigurationDocumentQuery.DateTimeCriteria">
            <summary>
            Date time criteria class.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.ConfigurationDocumentQuery.DateTimeCriteria.Operator">
            <summary>
            Gets or sets the matching operator.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.StringDiff">
            <summary>
            Computes the difference between two strings.
            </summary>
            <remarks>
            <para>
            The speed and memory requirements are O(n2) for this algorithm, 
            so it should not be used on very long strings.
            
            Adapted from an algorithm presented here in Javascript:
            http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Dynamic/Edit/
            </para>
            <para>
            The <see cref="P:Macro.Common.Utilities.StringDiff.AlignedLeft"/> and  <see cref="P:Macro.Common.Utilities.StringDiff.AlignedRight"/> properties return versions
            of the left and right strings that are as closely aligned as possible on a character by
            character basis.  '-' characters are inserted into both strings at specific points so as to
            produce the closest possible alignment, such that <code>AlignedLeft.Length == AlignedRight.Length</code>. 
            The <see cref="P:Macro.Common.Utilities.StringDiff.DiffMask"/> property is a string of the same length that contains a '|' character
            where the aligned strings match and a space where they don't, e.g.
            <code>DiffMask[i] = (AlignedLeft[i] == AlignedRight[i]) ? '|' : ' '</code>
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.StringDiff.Compute(System.String,System.String,System.Boolean)">
            <summary>
            Computes the difference between two strings, <paramref name="left"/> 
            and <paramref name="right"/>, respectively.
            </summary>
            <param name="left">The left-hand string.</param>
            <param name="right">The right-hand string.</param>
            <param name="ignoreCase">Specifies whether or not to ignore character case.</param>
            <returns>A <see cref="T:Macro.Common.Utilities.StringDiff"/> object containing the results.</returns>
        </member>
        <member name="P:Macro.Common.Utilities.StringDiff.AlignedLeft">
            <summary>
            Returns the left string (input into <see cref="M:Macro.Common.Utilities.StringDiff.Compute(System.String,System.String,System.Boolean)"/>),
            but modified to be aligned with the right string.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.StringDiff.AlignedRight">
            <summary>
            Returns the right string (input into <see cref="M:Macro.Common.Utilities.StringDiff.Compute(System.String,System.String,System.Boolean)"/>),
            but modified to be aligned with the left string.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.StringDiff.DiffMask">
            <summary>
            Returns a diff mask, each character in which indicates whether or not
            there is a difference at that position between <see cref="P:Macro.Common.Utilities.StringDiff.AlignedLeft"/>
            and <see cref="P:Macro.Common.Utilities.StringDiff.AlignedRight"/> (space characters indicate no difference,
            '|' characters indicate a difference).
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.ListEventArgs`1">
            <summary>
            Event used to notify observers of a change in a collection.
            </summary>
            <remarks>
            This class is used internally by the <see cref="T:Macro.Common.Utilities.ObservableList`1"/>, but can be used
            for any collection-related event.
            </remarks>
            <typeparam name="TItem">The type of item in the collection.</typeparam>
        </member>
        <member name="M:Macro.Common.Utilities.ListEventArgs`1.#ctor(`0,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="item">The item that has changed.</param>
            <param name="index">The index of the item that has changed.</param>
        </member>
        <member name="P:Macro.Common.Utilities.ListEventArgs`1.Item">
            <summary>
            Gets the item that has somehow changed in the related collection.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.ListEventArgs`1.Index">
            <summary>
            Gets the index of the item that has somehow changed in the related collection.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.IBackgroundTaskContext">
            <summary>
            Allows the background thread to communicate with the <see cref="T:Macro.Common.Utilities.BackgroundTask"/> object.
            </summary>
            <remarks>
            The background thread should not directly access the <see cref="T:Macro.Common.Utilities.BackgroundTask"/> object.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.IBackgroundTaskContext.ReportProgress(Macro.Common.Utilities.BackgroundTaskProgress)">
            <summary>
            Allows the <see cref="T:Macro.Common.Utilities.BackgroundTaskMethod"/> to report progress to the foreground thread.
            </summary>
            <remarks>
            The progress object may be an instance of <see cref="T:Macro.Common.Utilities.BackgroundTaskProgress"/> or a derived class.</remarks>
        </member>
        <member name="M:Macro.Common.Utilities.IBackgroundTaskContext.Complete(System.Object[])">
            <summary>
            Allows the <see cref="T:Macro.Common.Utilities.BackgroundTaskMethod"/> to inform that it has completed successfully, and return the result objects
            to the foreground thread.
            </summary>
            <remarks>
            After calling this method, the <see cref="T:Macro.Common.Utilities.BackgroundTaskMethod"/> should simply exit.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.IBackgroundTaskContext.Cancel">
            <summary>
            Allows the <see cref="T:Macro.Common.Utilities.BackgroundTaskMethod"/> to inform that it has successfully cancelled,
            in response to querying the <see cref="P:Macro.Common.Utilities.IBackgroundTaskContext.CancelRequested"/> flag, and return the result object
            to the foreground thread.
            </summary>
            <remarks>
            After calling this method, the <see cref="T:Macro.Common.Utilities.BackgroundTaskMethod"/> should simply exit.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.IBackgroundTaskContext.Error(System.Exception)">
            <summary>
            Allows the <see cref="T:Macro.Common.Utilities.BackgroundTaskMethod"/> to inform that it cannot complete due to an exception,
            and return the exception to the foreground thread.
            </summary>
            <remarks>
            After calling this method, the <see cref="T:Macro.Common.Utilities.BackgroundTaskMethod"/> should simply exit.  
            It is technically ok for the background method to allow an exception to go unhandled, 
            an the unhandled exception will still be reported to the foreground thread as an error.  
            However, the VS debugger will break in this case, which may not be desirable.
            </remarks>
        </member>
        <member name="P:Macro.Common.Utilities.IBackgroundTaskContext.UserState">
            <summary>
            Provides access to the user state object.
            </summary>
            <remarks>
            The user state object is available to both threads, and therefore it should either be immutable or thread-safe.
            </remarks>
        </member>
        <member name="P:Macro.Common.Utilities.IBackgroundTaskContext.CancelRequested">
            <summary>
            Allows the background thread to ask whether cancellation has been requested.
            </summary>
            <remarks>
            If possible, the <see cref="T:Macro.Common.Utilities.BackgroundTaskMethod"/> should periodically poll this flag, 
            and if true, terminate as quickly as possible without completing its work.  
            It should call <see cref="M:Macro.Common.Utilities.IBackgroundTaskContext.Cancel"/> to confirm cancellation.
            </remarks>
        </member>
        <member name="T:Macro.Common.Utilities.BackgroundTaskMethod">
            <summary>
            Defines the signature for a method that is to be executed as a background task.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.BackgroundTaskProgress">
            <summary>
            Encapsulates information about the progress of the task.
            </summary>
            <remarks>
            This class may be subclassed in order to add additional information, or override the existing methods.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.BackgroundTaskProgress.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.BackgroundTaskProgress.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.Common.Utilities.BackgroundTaskProgress"/> with the specified parameters.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.BackgroundTaskProgress.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.Common.Utilities.BackgroundTaskProgress"/> with the specified parameters.
            </summary>
            <param name="index">A zero-based index.</param>
            <param name="total">Total number of increments.</param>
            <param name="message">A use friendly message.</param>
        </member>
        <member name="P:Macro.Common.Utilities.BackgroundTaskProgress.Percent">
            <summary>
            Gets the percent completion, as an integer between 0 and 100.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.BackgroundTaskProgress.Message">
            <summary>
            Gets a status message describing the current state of the task.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.BackgroundTaskProgressEventArgs">
            <summary>
            Conveys progress information about a <see cref="T:Macro.Common.Utilities.BackgroundTask"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.BackgroundTaskProgressEventArgs.#ctor(System.Object,Macro.Common.Utilities.BackgroundTaskProgress)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.BackgroundTaskProgressEventArgs.Progress">
            <summary>
            Gets the progress object passed from the background thread.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.BackgroundTaskProgressEventArgs.UserState">
            <summary>
            Gets the user state object associated with the task.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.BackgroundTaskTerminatedReason">
            <summary>
            Defines the possible reasons why a <see cref="T:Macro.Common.Utilities.BackgroundTask"/> has terminated.
            </summary>
        </member>
        <member name="F:Macro.Common.Utilities.BackgroundTaskTerminatedReason.Completed">
            <summary>
            The task completed.
            </summary>
        </member>
        <member name="F:Macro.Common.Utilities.BackgroundTaskTerminatedReason.Cancelled">
            <summary>
            The task was cancelled.
            </summary>
        </member>
        <member name="F:Macro.Common.Utilities.BackgroundTaskTerminatedReason.Exception">
            <summary>
            The task encountered an exception and could not complete.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.BackgroundTaskTerminatedEventArgs">
            <summary>
            Conveys information about the termination of a <see cref="T:Macro.Common.Utilities.BackgroundTask"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.BackgroundTaskTerminatedEventArgs.#ctor(System.Object,Macro.Common.Utilities.BackgroundTaskTerminatedReason,System.Object[],System.Exception)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.BackgroundTaskTerminatedEventArgs.Reason">
            <summary>
            Gets the reason for termination.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.BackgroundTaskTerminatedEventArgs.Result">
            <summary>
            Gets the result of the background task, assuming it returned exactly one result, otherwise null.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.BackgroundTaskTerminatedEventArgs.Results">
            <summary>
            Gets the results of the background task.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.BackgroundTaskTerminatedEventArgs.Exception">
            <summary>
            Gets the exception that occured, if <see cref="P:Macro.Common.Utilities.BackgroundTaskTerminatedEventArgs.Reason"/> is <see cref="F:Macro.Common.Utilities.BackgroundTaskTerminatedReason.Exception"/>.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.BackgroundTask">
            <summary>
            Encapsulates a background task, allowing the task to run asynchronously on a background thread
            and report progress and completion events to the foreground thread.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.BackgroundTask.CreateAndRun(Macro.Common.Utilities.BackgroundTaskMethod,System.Boolean,System.EventHandler{Macro.Common.Utilities.BackgroundTaskTerminatedEventArgs},System.EventHandler{Macro.Common.Utilities.BackgroundTaskProgressEventArgs},System.Object)">
            <summary>
            Creates and executes a new <see cref="T:Macro.Common.Utilities.BackgroundTask"/> based on the specified arguments.
            </summary>
            <param name="method">The method to run in the background.</param>
            <param name="supportsCancel">Indicates whether the task supports cancellation or not.</param>
            <param name="terminateHandler">Method that will be called when the task terminates.</param>
            <param name="progressHandler">Optional method to handle progress updates, may be null.</param>
            <param name="userState">Optional state to be passed to the background task, may be null.</param>
            <returns>A running <see cref="T:Macro.Common.Utilities.BackgroundTask"/> object.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.BackgroundTask.#ctor(Macro.Common.Utilities.BackgroundTaskMethod,System.Boolean,System.Object)">
            <summary>
            Constructs a new background task based on the specified method and optional state object.
            </summary>
            <remarks>
            The task is not executed until the <see cref="M:Macro.Common.Utilities.BackgroundTask.Run"/> method is called.
            </remarks>
            <param name="method">The method to run in the background.</param>
            <param name="supportsCancel">Indicates whether the task supports cancellation or not.</param>
            <param name="userState">Optional state to be passed to the background method.</param>
        </member>
        <member name="M:Macro.Common.Utilities.BackgroundTask.#ctor(Macro.Common.Utilities.BackgroundTaskMethod,System.Boolean)">
            <summary>
            Constructs a new background task based on the specified method.
            </summary>
            <remarks>
            The task is not executed until the <see cref="M:Macro.Common.Utilities.BackgroundTask.Run"/> method is called.
            </remarks>
            <param name="method">The method to run in the background.</param>
            <param name="supportsCancel">Indicates whether the task supports cancellation or not.</param>
        </member>
        <member name="M:Macro.Common.Utilities.BackgroundTask.Run">
            <summary>
            Runs the background task.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.BackgroundTask.RequestCancel">
            <summary>
            Requests that the background task be cancelled.
            </summary>
            <remarks>
            The task does not actually stop running until the <see cref="E:Macro.Common.Utilities.BackgroundTask.Terminated"/> event is fired.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.BackgroundTask.Dispose">
            <summary>
            Disposes of the task.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.BackgroundTask.IsRunning">
            <summary>
            True if the task is currently running.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.BackgroundTask.SupportsCancel">
            <summary>
            True if the task supports cancellation.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.BackgroundTask.CancelRequestPending">
            <summary>
            True if the <see cref="M:Macro.Common.Utilities.BackgroundTask.RequestCancel"/> method has been called, and the request is pending.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.BackgroundTask.LastBackgroundTaskProgress">
            <summary>
            Gets the last background task progress event args
            </summary>
        </member>
        <member name="E:Macro.Common.Utilities.BackgroundTask.ProgressUpdated">
            <summary>
            Notifies that the progress of the task has been updated.
            </summary>
        </member>
        <member name="E:Macro.Common.Utilities.BackgroundTask.Terminated">
            <summary>
            Notifies that the task has terminated.
            </summary>
            <remarks>
            Check the <see cref="T:Macro.Common.Utilities.BackgroundTaskTerminatedEventArgs"/> to determine the reason for termination, and obtain results.
            </remarks>
        </member>
        <member name="P:Macro.Common.Utilities.BackgroundTask.ThreadCulture">
            <summary>
            Gets or sets the culture for the background task. If NULL, the culture will not be modified.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.BackgroundTask.ThreadUICulture">
            <summary>
            Gets or sets the culture used by the Resource Manager to look up culture-specific resources for the background task. If NULL, the culture will not be modified.
            </summary>
        </member>
        <member name="T:Macro.Common.UnknownServiceException">
            <summary>
            Used internally by the framework to indicate an error when attempting to load/use a service.
            </summary>
        </member>
        <member name="T:Macro.Common.SR">
            <summary>
              强类型资源类，用于查找本地化字符串等。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ResourceManager">
            <summary>
              返回此类使用的缓存 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.Culture">
            <summary>
              为使用此强类型资源类的所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionApplicationRootMultipleMatches">
            <summary>
              查找类似 Unable to resolve application root class {0} - multiple matches. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionApplicationRootNoMatches">
            <summary>
              查找类似 Unable to resolve application root class {0} - no matches. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionArgumentNegative">
            <summary>
              查找类似 Value must be non-negative. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionArgumentNotPositive">
            <summary>
              查找类似 Value must be greater than zero. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionArgumentOutOfRange">
            <summary>
              查找类似 {3} = {0} is invalid. {3} must be &gt;= {1} and &lt;= {2}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionBackgroundTaskAlreadyRunning">
            <summary>
              查找类似 The background task is already running 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionCastExpressionArrayCollectionEnumerable">
            <summary>
              查找类似 Expression must evaluate to Array, ICollection, or IEnumerable type. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionCastExpressionBoolean">
            <summary>
              查找类似 Expression must evaluate to Boolean type. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionCastExpressionEnumerable">
            <summary>
              查找类似 Expression must evaluate to IEnumerable type. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionCastExpressionString">
            <summary>
              查找类似 Expression must evaluate to String type. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionConditionIsNotMet">
            <summary>
              查找类似 Condition is not met :{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionDuplicatePluginFound">
            <summary>
              查找类似 Duplicate plugin {0} found. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionEmptyString">
            <summary>
              查找类似 {0} cannot be empty. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionExpectedType">
            <summary>
              查找类似 Expected type {0}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionExtensionDoesNotImplementRequiredInterface">
            <summary>
              查找类似 Extension class {0} does not implement required interface {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionExtensionMustBeConcreteClass">
            <summary>
              查找类似 Extension class {0} must be a concrete class. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionExtensionPointMustSubclassExtensionPoint">
            <summary>
              查找类似 The extension point {0} is invalid because it is not a direct subclass of ExtensionPoint&lt;&gt; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionFailedToTransferFile">
            <summary>
              查找类似 Failed to transfer file from {0} to {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionFatalApplicationError">
            <summary>
              查找类似 We&apos;re sorry, but an error has occurred that Macro Workstation cannot recover from.  Please check the log and restart. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionFormatCannotConvertFromStringToType">
            <summary>
              查找类似 Unable to convert from String to {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionFormatCannotConvertFromTypeToString">
            <summary>
              查找类似 Unable to convert from {0} to String 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionFormatDeserializationFailedForType">
            <summary>
              查找类似 Deserialization failed for object type &apos;{0}&apos; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionFormatSerializationFailedForType">
            <summary>
              查找类似 Serialization failed for object type &apos;{0}&apos; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionIndexOutOfRange">
            <summary>
              查找类似 {3}[{0}] is invalid.  Index must be &gt;= {1} and &lt;= {2}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionInvalidCast">
            <summary>
              查找类似 {0} must be of type {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionInvalidSpecificationId">
            <summary>
              查找类似 {0} is not a valid specification id. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionJScriptEvaluation">
            <summary>
              查找类似 JScript evaluation error on: {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionMemberNotSet">
            <summary>
              查找类似 {0} has not been set.  Object state is invalid. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionMemberNotSetVerbose">
            <summary>
              查找类似 {0} has not been set.  {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionMoreThanOneModelPluginFound">
            <summary>
              查找类似 More than one model plugin found. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionNoExtensionsCreated">
            <summary>
              查找类似 No extensions found for extension point {0}, or the extensions could not be instantiated.  Please see the log for more information. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionNoPluginsFound">
            <summary>
              查找类似 No plugins could be found. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionNoPluginsLoaded">
            <summary>
              查找类似 No plugins have been loaded. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionNotAPlugin">
            <summary>
              查找类似 Assembly {0} is not a plugin. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionPathDoesNotExist">
            <summary>
              查找类似 {0} does not exist. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionPluginCouldNotBeFound">
            <summary>
              查找类似 Plugin {0} could not be found.  Unable to start plugin. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionPluginDirectoryNotFound">
            <summary>
              查找类似 Plugin directory could not be found. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionPluginWarning">
            <summary>
              查找类似 There was a problem loading one or more plugins. Please see the log for more information. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionResourceNotFound">
            <summary>
              查找类似 Resource {0}  not found. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionScriptEngineLanguage">
            <summary>
              查找类似 No script engine available for language {0}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionTemplateEvaluation">
            <summary>
              查找类似 Template evaluation generated an exception. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionThreadPoolAlreadyStarted">
            <summary>
              查找类似 The thread pool has already been started. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionThreadPoolMustBeStopped">
            <summary>
              查找类似 The thread pool must be stopped before setting the {0} parameter. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionThreadPoolNotStarted">
            <summary>
              查找类似 The thread pool has not been started.  Unable to enqueue the specified item. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionThrown">
            <summary>
              查找类似 Exception thrown 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ExceptionUnableToLoadPlugins">
            <summary>
              查找类似 Unable to load any plugins.  Please see the log for more information. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.FormatFileSizeBytes">
            <summary>
              查找类似 {0} Bytes 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.FormatFileSizeGB">
            <summary>
              查找类似 {0:f2} GB 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.FormatFileSizeKB">
            <summary>
              查找类似 {0:f2} KB 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.FormatFileSizeMB">
            <summary>
              查找类似 {0:f2} MB 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.FormatFileSizeTB">
            <summary>
              查找类似 {0:f2} TB 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.FormatLoadedPlugin">
            <summary>
              查找类似 Loaded plugin: {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.FormatProcessingPlugin">
            <summary>
              查找类似 Processing plugin: {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.FormatReleaseType">
            <summary>
              查找类似 ({0}) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.FormatSeconds">
            <summary>
              查找类似 {0} seconds 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.FormatTypeMustBeInterface">
            <summary>
              查找类似 &apos;{0}&apos; must be an interface. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.FormatTypeMustImplementInterface">
            <summary>
              查找类似 Type &apos;{0}&apos; must implement interface &apos;{1}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.FormatUnableToFindMatchingAction">
            <summary>
              查找类似 Unable to find matching action for &apos;{0}&apos; node in script.  Unable to perform action. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.LogConfigurationStoreNotFound">
            <summary>
              查找类似 Configuration store not found - defaulting to LocalFileSettingsProvider 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.LogFailedToProcessPluginAssembly">
            <summary>
              查找类似 Failed to process plugin assembly {0} with the following exception(s): 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.LogFoundUnmanagedDLL">
            <summary>
              查找类似 Found unmanaged DLL: {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.LogLicenseProviderNotFound">
            <summary>
              查找类似 License provider not found - defaulting to local license provider. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.LogLocalConfigurationStoreNotFound">
            <summary>
              查找类似 Local configuration store not found - defaulting to LocalFileSettingsProvider 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.LogPluginLoaded">
            <summary>
              查找类似 Loaded plugin: {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.LogTimeProviderNotFound">
            <summary>
              查找类似 Time provider not found - defaulting to local machine time. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.MessageCannotExtendIExtensionPoint">
            <summary>
              查找类似 An extension point cannot extend IExtensionPoint. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.MessageFindingPlugins">
            <summary>
              查找类似 Finding plugins... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.MessageSettingsScopeNotDefined">
            <summary>
              查找类似 Settings scope not defined. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ShredFailedToStart">
            <summary>
              查找类似 The {0} shred has failed to start.  Please check the log for more details. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ShredFailedToStop">
            <summary>
              查找类似 The {0} shred has failed to stop.  Please check the log for more details. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ShredStartedSuccessfully">
            <summary>
              查找类似 The {0} shred has started successfully. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ShredStarting">
            <summary>
              查找类似 Starting {0} Shred 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ShredStoppedSuccessfully">
            <summary>
              查找类似 The {0} shred has stopped successfully. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Macro.Common.SR.ShredStopping">
            <summary>
              查找类似 Stopping {0} Shred 的本地化字符串。
            </summary>
        </member>
        <member name="M:Macro.Common.Specifications.XmlSpecificationCompiler.Compile(System.Xml.XmlElement)">
            <summary>
            Compile a specification.  The XML Schema will not be checked.
            </summary>
            <param name="containingNode">The XML node to compile.</param>
            <returns>A compiled <see cref="T:Macro.Common.Specifications.ISpecification"/>.</returns>
        </member>
        <member name="M:Macro.Common.Specifications.XmlSpecificationCompiler.Compile(System.Xml.XmlElement,System.Boolean)">
            <summary>
            Compile a specification and check the schema if enabled.
            </summary>
            <param name="containingNode">The XML node to compile</param>
            <param name="checkSchema">Flag to determine if the schema will be checked.</param>
            <returns>A compiled <see cref="T:Macro.Common.Specifications.ISpecification"/>.</returns>
        </member>
        <member name="P:Macro.Common.Specifications.XmlSpecificationCompiler.Schema">
            <summary>
            A compiled XML schema used by the compiler to verify specifications.
            </summary>
        </member>
        <member name="T:Macro.Common.Specifications.IXmlSpecificationCompilerOperator">
            <summary>
            Interface for Specification Operators.
            </summary>
        </member>
        <member name="M:Macro.Common.Specifications.IXmlSpecificationCompilerOperator.Compile(System.Xml.XmlElement,Macro.Common.Specifications.IXmlSpecificationCompilerContext)">
            <summary>
            Compile the operator.
            </summary>
            <param name="xmlNode">The XML Node associated with the operator.</param>
            <param name="context">A context for the compiler.</param>
            <returns>A compiled <see cref="T:Macro.Common.Specifications.Specification"/>.</returns>
        </member>
        <member name="M:Macro.Common.Specifications.IXmlSpecificationCompilerOperator.GetSchema">
            <summary>
            Get an XmlSchema element that describes the schema for the operator element.
            </summary>
            <remarks>
            <para>
            It is assumed that a simple <see cref="T:System.Xml.Schema.XmlSchemaElement"/> is returned for the 
            operator.  The compiler combine the elements for each operator together into an
            <see cref="T:System.Xml.Schema.XmlSchema"/>.  If the specific element allows subelements, it should 
            be declared to allow any elements from the local namespace/Schema.
            </para>
            </remarks>
            <returns>The Schema element.</returns>
        </member>
        <member name="P:Macro.Common.Specifications.IXmlSpecificationCompilerOperator.OperatorTag">
            <summary>
            The XML Tag for the operator.
            </summary>
        </member>
        <member name="T:Macro.Common.Authorization.AuthorityTokenDefinition">
            <summary>
            Describes an authority token.
            </summary>
        </member>
        <member name="M:Macro.Common.Authorization.AuthorityTokenDefinition.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
            Constructor.
            </summary>
            <param name="token"></param>
            <param name="definingAssembly"></param>
            <param name="description"></param>
            <param name="formerIdentities"></param>
        </member>
        <member name="P:Macro.Common.Authorization.AuthorityTokenDefinition.Token">
            <summary>
            Gets the token string.
            </summary>
        </member>
        <member name="P:Macro.Common.Authorization.AuthorityTokenDefinition.DefiningAssembly">
            <summary>
            Gets the name of the assembly that defines the token.
            </summary>
        </member>
        <member name="P:Macro.Common.Authorization.AuthorityTokenDefinition.Description">
            <summary>
            Gets the token description.
            </summary>
        </member>
        <member name="P:Macro.Common.Authorization.AuthorityTokenDefinition.FormerIdentities">
            <summary>
            Gets the set of former identities for this token, for migration purposes.
            </summary>
        </member>
        <member name="T:Macro.Common.Audit.AuditSinkExtensionPoint">
            <summary>
            Defines an extension point for audit sinks.
            </summary>
        </member>
        <member name="T:Macro.Common.Audit.AuditLog">
            <summary>
            Represents an audit log.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:Macro.Common.Audit.AuditLog.#ctor(System.String,System.String)">
            <summary>
            Constructs an audit log with the specified category.
            </summary>
            <param name="application"></param>
            <param name="category"></param>
        </member>
        <member name="M:Macro.Common.Audit.AuditLog.#ctor(System.String,System.String,Macro.Common.Audit.IAuditSink[])">
            <summary>
            Constructs an audit log with the specified category and sinks.
            </summary>
            <param name="application"></param>
            <param name="category"></param>
            <param name="sinks"></param>
        </member>
        <member name="M:Macro.Common.Audit.AuditLog.WriteEntry(System.String,System.String)">
            <summary>
            Writes an entry to the audit log containing the specified information,
            on behalf of the current application user.
            </summary>
            <param name="operation"></param>
            <param name="details"></param>
        </member>
        <member name="M:Macro.Common.Audit.AuditLog.WriteEntry(System.String,System.String,System.String,System.String)">
            <summary>
            Writes an entry to the audit log containing the specified information,
            on behalf of the specified application user.
            </summary>
            <param name="operation"></param>
            <param name="details"></param>
            <param name="user"></param>
            <param name="userSessionId"></param>
        </member>
        <member name="M:Macro.Common.Audit.AuditLog.GetUserName">
            <summary>
            Gets the identity of the current thread or null if not established.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Audit.AuditLog.GetUserSessionId">
            <summary>
            Gets the session token ID of the current thread or null if not established.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Audit.AuditLog.CreateSink">
            <summary>
            Creates the a single audit sink via the <see cref="T:Macro.Common.Audit.AuditSinkExtensionPoint"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Macro.Common.Utilities.ObservableDictionary`2">
            <summary>
            A dictionary class, changes to which can be observed via events.
            </summary>
            <remarks>
            Internally, a simple <see cref="T:System.Collections.Generic.Dictionary`2"/> object is used.  
            For exception details on individual methods, see <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </remarks>
            <typeparam name="TKey">The type of the key in the dictionary.</typeparam>
            <typeparam name="TItem">The type of the items stored in the dictionary.</typeparam>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableDictionary`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Copy constructor that accepts a set of key-value pairs as input.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableDictionary`2.Add(`0,`1)">
            <summary>
            Adds a key-value pair to the dictionary.
            </summary>
            <param name="key">The key at which to add the <paramref name="value"/>.</param>
            <param name="value">The value to be added to the dictionary.</param>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableDictionary`2.ContainsKey(`0)">
            <summary>
            Gets whether or not the dictionary contains a particular key.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableDictionary`2.Remove(`0)">
            <summary>
            Removes an item from the dictionary stored using the specified <paramref name="key"/>.
            </summary>
            <returns>
            True if an object existed for the given <param name="key" /> and was removed.
            </returns>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get a value stored with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key at which to try and get the <paramref name="value"/>.</param>
            <param name="value">Returns the value stored at <paramref name="key"/>.</param>
            <returns>True if a value exists for the given key.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds a key-value pair to the dictionary.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableDictionary`2.Clear">
            <summary>
            Clears the dictionary.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Gets whether the input key-value pair exists in the dictionary.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the entire contents of the dictionary to an array of key-value pairs, starting at the specified index.
            </summary>
            <param name="array">The array to copy the contents of the dictionary to.</param>
            <param name="arrayIndex">The index in the <paramref name="array"/> at which to begin copying.</param>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes a particular key-value pair from the dictionary.
            </summary>
            <returns>True if an item was actually removed.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableDictionary`2.GetEnumerator">
            <summary>
            Gets an enumerator for the dictionary.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the dictionary.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableDictionary`2.OnItemAdded(Macro.Common.Utilities.DictionaryEventArgs{`0,`1})">
            <summary>
            Called internally when an item is added to the dictionary.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableDictionary`2.OnItemRemoved(Macro.Common.Utilities.DictionaryEventArgs{`0,`1})">
            <summary>
            Called internally when an item is removed from the dictionary.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableDictionary`2.OnItemChanging(Macro.Common.Utilities.DictionaryEventArgs{`0,`1})">
            <summary>
            Called internally when an item in the dictionary is changing.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableDictionary`2.OnItemChanged(Macro.Common.Utilities.DictionaryEventArgs{`0,`1})">
            <summary>
            Called internally when an item in the dictionary has changed.
            </summary>
        </member>
        <member name="E:Macro.Common.Utilities.ObservableDictionary`2.ItemAdded">
            <summary>
            Fired when an item is added to the dictionary.
            </summary>
        </member>
        <member name="E:Macro.Common.Utilities.ObservableDictionary`2.ItemRemoved">
            <summary>
            Fired when an item is removed from the dictionary.
            </summary>
        </member>
        <member name="E:Macro.Common.Utilities.ObservableDictionary`2.ItemChanging">
            <summary>
            Fired when an item in the dictionary is changing.
            </summary>
        </member>
        <member name="E:Macro.Common.Utilities.ObservableDictionary`2.ItemChanged">
            <summary>
            Fired when an item in the dictionary has changed.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.ObservableDictionary`2.Keys">
            <summary>
            Gets all of the keys in the dictionary.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.ObservableDictionary`2.Values">
            <summary>
            Gets all of the values in the dictionary.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.ObservableDictionary`2.Item(`0)">
            <summary>
            Indexer; gets the value given a <paramref name="key"/>.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.ObservableDictionary`2.Count">
            <summary>
            Gets the number of entries in the dictionary.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.ObservableDictionary`2.IsReadOnly">
            <summary>
            Gets whether or not the dictionary is read-only.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.ThreadPoolBase">
            <summary>
            A base class for thread pools that makes no assumptions about how each
            thread in the thread pool behaves.
            </summary>
            <remarks>
            It is unlikely you will ever need to derive from this class.  In most
            cases, either the <see cref="T:Macro.Common.Utilities.SimpleBlockingThreadPool"/> or the 
            <see cref="T:Macro.Common.Utilities.BlockingThreadPool`1"/> will be adequate to suit your needs.
            </remarks>
        </member>
        <member name="F:Macro.Common.Utilities.ThreadPoolBase.MinConcurrency">
            <summary>
            The minimum (and also the default) concurrency for the thread pool.
            </summary>
        </member>
        <member name="F:Macro.Common.Utilities.ThreadPoolBase.MaxConcurrency">
            <summary>
            The maximum concurrency for the thread pool.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ThreadPoolBase.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="concurrency">The number of concurrent threads to start.</param>
        </member>
        <member name="M:Macro.Common.Utilities.ThreadPoolBase.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            The default number of threads in the thread pool is 1.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.ThreadPoolBase.OnStart">
            <summary>
            Called before the thread pool is started.
            </summary>
            <remarks>
            Inheritors that override this method must first call the base method and 
            cannot return true if the base method returns false.
            </remarks>
            <returns>
            False if the thread pool is not in the <see cref="F:Macro.Common.Utilities.ThreadPoolBase.StartStopState.Stopped"/> 
            state, and thus cannot be started.
            </returns>
        </member>
        <member name="M:Macro.Common.Utilities.ThreadPoolBase.OnStarted">
            <summary>
            Called when the thread pool has started.
            </summary>
            <remarks>
            Inheritors that override this method must ensure that the base method gets called
            in order for the thread pool to function correctly.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.ThreadPoolBase.OnStop(System.Boolean)">
            <summary>
            Called before the thread pool is stopped.
            </summary>
            <remarks>
            Inheritors that override this method must first call the base method and 
            cannot return true if the base method returns false.
            </remarks>
            <returns>
            False if the thread pool is not in the <see cref="F:Macro.Common.Utilities.ThreadPoolBase.StartStopState.Started"/> 
            state, and thus cannot be stopped.
            </returns>
        </member>
        <member name="M:Macro.Common.Utilities.ThreadPoolBase.OnStopped">
            <summary>
            Called when the thread pool has stopped.
            </summary>
            <remarks>
            Inheritors that override this method must ensure that the base method gets called
            in order for the thread pool to function correctly.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.ThreadPoolBase.Start">
            <summary>
            Starts the thread pool.
            </summary>
            <remarks>
            Repeated calls to this method will do nothing, and no exceptions will be thrown.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.ThreadPoolBase.Stop">
            <summary>
            Stops the thread pool.
            </summary>
            <remarks>
            Repeated calls to this method will do nothing, and no exceptions will be thrown.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.ThreadPoolBase.Stop(System.Boolean)">
            <summary>
            Stops the thread pool, indicating whether or not the thread pool should process
            any remaining items first before stopping (via the parameter <param name="completeBeforeStop"/>).
            </summary>
            <remarks>
            Repeated calls to this method will do nothing, and no exceptions will be thrown.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.ThreadPoolBase.RunThread">
            <summary>
            The method that each thread in the thread pool will run on.
            </summary>
            <remarks>
            This method must be overridden by inheritors.  The method should not exit until the
            <see cref="T:Macro.Common.Utilities.ThreadPoolBase.StartStopState"/> has changed to <see cref="F:Macro.Common.Utilities.ThreadPoolBase.StartStopState.Stopping"/>.
            </remarks>
        </member>
        <member name="E:Macro.Common.Utilities.ThreadPoolBase.StartStopStateChangedEvent">
            <summary>
            Fired when the <see cref="P:Macro.Common.Utilities.ThreadPoolBase.State"/> has changed.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.ThreadPoolBase.Active">
            <summary>
            Gets whether or not the thread pool is currently running.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.ThreadPoolBase.Concurrency">
            <summary>
            Gets or sets the number of concurrently running threads in the thread pool.
            </summary>
            <remarks>
            This property can only be set when the thread pool is in the <see cref="F:Macro.Common.Utilities.ThreadPoolBase.StartStopState.Stopped"/> state.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the thread pool is not in the stopped state when
            the property is set.</exception>
        </member>
        <member name="P:Macro.Common.Utilities.ThreadPoolBase.ThreadPoolName">
            <summary>
            Gets or sets the name of the thread pool.
            </summary>
            <remarks>
            The name of the thread pool is used when naming the individual threads within the pool.
            </remarks>
        </member>
        <member name="P:Macro.Common.Utilities.ThreadPoolBase.ThreadPriority">
            <summary>
            Gets or sets the <see cref="P:Macro.Common.Utilities.ThreadPoolBase.ThreadPriority"/> of the threads in the thread pool.
            </summary>
            <remarks>
            This property can only be set when the thread pool is in the <see cref="F:Macro.Common.Utilities.ThreadPoolBase.StartStopState.Stopped"/> state.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the thread pool is not in the stopped state when
            the property is set.</exception>
        </member>
        <member name="P:Macro.Common.Utilities.ThreadPoolBase.CompleteBeforeStop">
            <summary>
            Indicates whether or not the thread pool should finish processing all items before stopping.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.ThreadPoolBase.State">
            <summary>
            Gets the current state (<see cref="T:Macro.Common.Utilities.ThreadPoolBase.StartStopState"/>) of the thread pool.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.ThreadPoolBase.StartStopState">
            <summary>
            An enum used to indicate the current running state of the thread pool.
            </summary>
        </member>
        <member name="F:Macro.Common.Utilities.ThreadPoolBase.StartStopState.Starting">
            <summary>
            The thread pool is starting up.
            </summary>
        </member>
        <member name="F:Macro.Common.Utilities.ThreadPoolBase.StartStopState.Started">
            <summary>
            The thread pool is running.
            </summary>
        </member>
        <member name="F:Macro.Common.Utilities.ThreadPoolBase.StartStopState.Stopping">
            <summary>
            The thread pool is stopping.
            </summary>
        </member>
        <member name="F:Macro.Common.Utilities.ThreadPoolBase.StartStopState.Stopped">
            <summary>
            The thread pool has stopped.
            </summary>
        </member>
        <member name="T:Macro.Common.PluginInfo">
            <summary>
            Describes a plugin, and provides properties for querying the extension points and extensions defined
            in the plugin.
            </summary>
            <remarks>
            Instances of this class are immutable and safe for concurrent access by multiple threads.
            </remarks>
        </member>
        <member name="M:Macro.Common.PluginInfo.DiscoverExtensionPointsAndExtensions(System.Reflection.Assembly,System.Collections.Generic.List{Macro.Common.ExtensionPointInfo},System.Collections.Generic.List{Macro.Common.ExtensionInfo})">
            <summary>
            Internal method used by the framework to discover extension points and extensions declared in a plugin.
            </summary>
            <param name="asm"></param>
            <param name="points"></param>
            <param name="extensions"></param>
        </member>
        <member name="M:Macro.Common.PluginInfo.#ctor(Macro.Common.AssemblyRef,System.String,System.String,System.String)">
            <summary>
            Internal constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.PluginInfo.#ctor(Macro.Common.AssemblyRef,System.String,System.String,System.String,System.Collections.Generic.List{Macro.Common.ExtensionPointInfo},System.Collections.Generic.List{Macro.Common.ExtensionInfo})">
            <summary>
            Internal constructor.
            </summary>
        </member>
        <member name="P:Macro.Common.PluginInfo.Extensions">
            <summary>
            Gets the set of extensions defined in this plugin, including disabled and unlicensed extensions.
            </summary>
        </member>
        <member name="P:Macro.Common.PluginInfo.ExtensionPoints">
            <summary>
            Gets the set of extension points defined in this plugin.
            </summary>
        </member>
        <member name="P:Macro.Common.PluginInfo.Assembly">
            <summary>
            Gets the assembly that implements this plugin.
            </summary>
        </member>
        <member name="P:Macro.Common.PluginInfo.Icon">
            <summary>
            Gets the name of an icon resource to associate with the plugin.
            </summary>
        </member>
        <member name="P:Macro.Common.PluginInfo.FormalName">
            <summary>
            Formal name of this object, typically the type name or assembly name.  Cannot be null.
            </summary>
        </member>
        <member name="P:Macro.Common.PluginInfo.Name">
            <summary>
            Friendly name of the object, if one exists, otherwise null.
            </summary>
        </member>
        <member name="P:Macro.Common.PluginInfo.Description">
            <summary>
            A friendly description of this object, if one exists, otherwise null.
            </summary>
        </member>
        <member name="T:Macro.Common.ExtensionPointInfo">
            <summary>
            Describes an extension point.  
            </summary>
            <remarks>
            Instances of this class are immutable and safe for concurrent access by multiple threads.
            </remarks>
        </member>
        <member name="M:Macro.Common.ExtensionPointInfo.#ctor(Macro.Common.TypeRef,Macro.Common.TypeRef,System.String,System.String)">
            <summary>
            Internal constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.ExtensionPointInfo.ListExtensions">
            <summary>
            Computes and returns a list of the installed extensions to this point,
            including disabled extensions.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macro.Common.ExtensionPointInfo.ExtensionPointClass">
            <summary>
            Gets the class that defines the extension point.
            </summary>
        </member>
        <member name="P:Macro.Common.ExtensionPointInfo.ExtensionInteface">
            <summary>
            Gets the interface that an extension must implement.
            </summary>
        </member>
        <member name="P:Macro.Common.ExtensionPointInfo.Name">
            <summary>
            Friendly name of the extension point, if one exists, otherwise null.
            </summary>
        </member>
        <member name="P:Macro.Common.ExtensionPointInfo.Description">
            <summary>
            A friendly description of the extension point, if one exists, otherwise null.
            </summary>
        </member>
        <member name="P:Macro.Common.ExtensionPointInfo.FormalName">
            <summary>
            Formal name of the extension, which is the fully qualified name of the extension point class.
            </summary>
        </member>
        <member name="T:Macro.Common.Statistics.StatisticsLoggerExtensionPoint">
            <summary>
            Defines an extension point for statistics logging. Used by <see cref="T:Macro.Common.Statistics.StatisticsLogger"/>
            to create instances of statistics logging listener.
            </summary>
        </member>
        <member name="T:Macro.Common.Statistics.MessageCountStatistics">
            <summary>
            Statistics to store the number of messages.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Macro.Common.Statistics.MessageCountStatistics.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.MessageCountStatistics"/> with unit "msg"
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Macro.Common.Statistics.MessageCountStatistics.#ctor(System.String,System.UInt64)">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.MessageCountStatistics"/> with specified name and value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Macro.Common.Statistics.MessageCountStatistics.#ctor(Macro.Common.Statistics.MessageCountStatistics)">
            <summary>
            Creates a copy of the original <see cref="T:Macro.Common.Statistics.MessageCountStatistics"/>
            </summary>
            <param name="copy"></param>
        </member>
        <member name="T:Macro.Common.Utilities.EnvironmentUtilities">
            <summary>
            Generic environment utilities.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.EnvironmentUtilities.MachineIdentifier">
            <summary>
            Gets a unique identifier for the machine.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.EnvironmentUtilities.ManagementObjectSearcherResults">
            <summary>
            Utility class for proper disposal of results from WMI queries.
            </summary>
        </member>
        <member name="P:Macro.Common.ProductSettings.Component">
            <summary>
            The product name.
            </summary>
        </member>
        <member name="P:Macro.Common.ProductSettings.Version">
            <summary>
            The version of the product, which can be different from that of the assemblies.
            </summary>
        </member>
        <member name="P:Macro.Common.ProductSettings.VersionSuffix">
            <summary>
            Product version suffix (e.g. SP1).
            </summary>
        </member>
        <member name="P:Macro.Common.ProductSettings.Copyright">
            <summary>
            Product copyright.
            </summary>
        </member>
        <member name="P:Macro.Common.ProductSettings.License">
            <summary>
            Product license.
            </summary>
        </member>
        <member name="T:Macro.Common.Caching.DefaultCacheClient">
            <summary>
            Implementation of <see cref="T:Macro.Common.Caching.ICacheClient"/> for <see cref="T:Macro.Common.Caching.DefaultCacheProvider"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Caching.DefaultCacheClient.#ctor(Macro.Common.Caching.DefaultCacheProvider,System.String)">
            <summary>
            Internal constructor.
            </summary>
            <param name="provider"></param>
            <param name="cacheId"></param>
        </member>
        <member name="M:Macro.Common.Caching.DefaultCacheClient.Get(System.String,Macro.Common.Caching.CacheGetOptions)">
            <summary>
            Gets the object at the specified key from the cache, or null if the key does not exist.
            </summary>
            <param name="key"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Caching.DefaultCacheClient.Put(System.String,System.Object,Macro.Common.Caching.CachePutOptions)">
            <summary>
            Puts the specified object into the cache at the specified key,
            using the specified options.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="M:Macro.Common.Caching.DefaultCacheClient.Remove(System.String,Macro.Common.Caching.CacheRemoveOptions)">
            <summary>
            Removes the specified item from the cache, or does nothing if the item does not
            exist.
            </summary>
            <param name="key">The Key of the Item in the Cache to remove.</param>
            <param name="options"></param>
        </member>
        <member name="M:Macro.Common.Caching.DefaultCacheClient.RegionExists(System.String)">
            <summary>
            Gets a value indicating whether the specified region exists.
            </summary>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Caching.DefaultCacheClient.ClearRegion(System.String)">
            <summary>
            Clears the entire cache region.
            </summary>
        </member>
        <member name="M:Macro.Common.Caching.DefaultCacheClient.ClearCache">
            <summary>
            Clears the entire logical cache (as identified by <see cref="P:Macro.Common.Caching.ICacheClient.CacheID"/>.
            </summary>
        </member>
        <member name="P:Macro.Common.Caching.DefaultCacheClient.CacheID">
            <summary>
            Gets the ID of the logical cache that this client is connected to.
            </summary>
        </member>
        <member name="T:Macro.Common.Audit.IAuditSink">
            <summary>
            Defines an interface to an object that acts as a sink for an <see cref="T:Macro.Common.Audit.AuditLog"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Audit.IAuditSink.WriteEntry(Macro.Common.Audit.AuditEntryInfo)">
            <summary>
            Writes the specified entry to the sink.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="T:Macro.Common.Scripting.IScriptEngine">
            <summary>
            Defines the interface to a script engine.  
            </summary>
        </member>
        <member name="M:Macro.Common.Scripting.IScriptEngine.Run(System.String,System.Collections.IDictionary)">
            <summary>
            Runs the specified script given the specified set of variables and their values.
            </summary>
            <remarks>
            The variables dictionary contains any number of named objects that the engine must make available to the script.
            It is left up to the implementation of the engine to decide how these objects are made available to the script.
            </remarks>
            <param name="script">The script to run.</param>
            <param name="variables">A set of named objects to which the script has access.</param>
            <returns>The return value of the script.</returns>
        </member>
        <member name="M:Macro.Common.Scripting.IScriptEngine.CreateScript(System.String,System.String[])">
            <summary>
            Asks the script engine to create an instance of a <see cref="T:Macro.Common.Scripting.IExecutableScript"/> based on the 
            specified string and variable names.
            </summary>
            <remarks>
            The variableNames array is an array of names of global variables whose values will be provided to the 
            <see cref="M:Macro.Common.Scripting.IExecutableScript.Run(System.Collections.IDictionary)"/> method.  Use of this method may offer better performance than
            calling <see cref="M:Macro.Common.Scripting.IScriptEngine.Run(System.String,System.Collections.IDictionary)"/> in the case where the same script is to be run multiple times,
            as the script engine may be able to pre-compile portions of the script.  However, this is entirely dependent
            upon the implementation of the script engine.
            </remarks>
            <param name="script">The script to create.</param>
            <param name="variableNames">The names of any global variables in the script that will be provided by the caller.</param>
            <returns>An executable script object that can be run multiple times.</returns>
        </member>
        <member name="T:Macro.Common.GuiToolkitAttribute">
            <summary>
            Attribute used to mark a class as using a specific GUI toolkit.
            </summary>
            <remarks>
            Typically this attribute is used on an extension class (in addition to the <see cref="T:Macro.Common.ExtensionOfAttribute"/>) 
            to allow plugin code to determine at runtime if the given extension is compatible with the GUI toolkit
            that is currently in use by the main window.
            </remarks>
        </member>
        <member name="M:Macro.Common.GuiToolkitAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="toolkitID">A string identifier for the Gui Toolkit.</param>
        </member>
        <member name="M:Macro.Common.GuiToolkitAttribute.Match(System.Object)">
            <summary>
            Determines whether or not this attribute is a match for (or is the same as) <paramref name="obj"/>,
            which is itself an <see cref="T:System.Attribute"/>.
            </summary>
        </member>
        <member name="P:Macro.Common.GuiToolkitAttribute.ToolkitID">
            <summary>
            Gets the Gui Toolkit ID.
            </summary>
        </member>
        <member name="T:Macro.Common.Statistics.StatisticsHelper">
            <summary>
            Helper class
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.StatisticsHelper.ResolveID(Macro.Common.Statistics.IStatistics)">
            <summary>
            Resolves the ID of a statistics based on its context and name
            </summary>
            <param name="stat"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.Common.Statistics.IStatisticsLoggerListener">
            <summary>
            Defines the interface to a component that listens to statistics logging event.
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.IStatisticsLoggerListener.OnStatisticsLogged(Macro.Common.Statistics.StatisticsSet)">
            <summary>
            Called when a statistics is logged.
            </summary>
            <param name="statistics">The logged statistics</param>
        </member>
        <member name="T:Macro.Common.Configuration.IConfigurationDocument">
            <summary>
            Represents a configuration document.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.IConfigurationDocument.ReadAll">
            <summary>
            Gets the entire content of the document as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Configuration.IConfigurationDocument.GetReader">
            <summary>
            Gets a reader that can read the document content.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macro.Common.Configuration.IConfigurationDocument.Header">
            <summary>
            Gets the document header.
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.IConfigurationStore">
            <summary>
            Defines the interface to a mechanism for the storage of configuration data.
            </summary>
            <remarks>
            This interface is more general purpose than <see cref="T:Macro.Common.Configuration.ISettingsStore"/>, in that it allows storage
            of arbitrary configuration "documents" that need not conform to any particular structure.
            </remarks>
        </member>
        <member name="M:Macro.Common.Configuration.IConfigurationStore.ListDocuments(Macro.Common.Configuration.ConfigurationDocumentQuery)">
            <summary>
            Lists documents in the configuration that match the specified query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Configuration.IConfigurationStore.GetDocument(Macro.Common.Configuration.ConfigurationDocumentKey)">
            <summary>
            Retrieves the specified document.
            </summary>
            <exception cref="T:Macro.Common.Configuration.ConfigurationDocumentNotFoundException">The requested document does not exist.</exception>
        </member>
        <member name="M:Macro.Common.Configuration.IConfigurationStore.PutDocument(Macro.Common.Configuration.ConfigurationDocumentKey,System.IO.TextReader)">
            <summary>
            Stores the specified document.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.IConfigurationStore.PutDocument(Macro.Common.Configuration.ConfigurationDocumentKey,System.String)">
            <summary>
            Stores the specified document.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.FileUtils">
            <summary>
            File related utilities.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.FileUtils.Delete(System.String)">
            <summary>
            Replacement for <see cref="M:System.IO.File.Delete(System.String)"/> that retries if the file is in use.
            </summary>
            <param name="path">The path to delete</param>
        </member>
        <member name="M:Macro.Common.Utilities.FileUtils.Delete(System.String,System.Int64,System.Threading.ManualResetEvent,System.Int32)">
            <summary>
            Replacement for <see cref="M:System.IO.File.Delete(System.String)"/> that retries if the file is in use.
            </summary>
            <param name="path">The path to delete.</param>
            <param name="timeout">The timeout in milliseconds to attempt to retry to delete the file</param>
            <param name="stopSignal">An optional stopSignal to tell the delete operation to stop if retrying</param>
            <param name="retryMinDelay">The minimum number of milliseconds to delay when deleting.</param>
        </member>
        <member name="M:Macro.Common.Utilities.FileUtils.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Replacement for <see><cref>File.Copy</cref></see> that retries if the file is in use.
            </summary>
            <param name="source">The path to copy from.</param>
            <param name="destination">The path to copy to.</param>
            <param name="overwrite">Overwrite an existing destination file.</param>
        </member>
        <member name="M:Macro.Common.Utilities.FileUtils.Copy(System.String,System.String,System.Boolean,System.Int64,System.Threading.ManualResetEvent,System.Int32)">
            <summary>
            Replacement for <see><cref>File.Copy</cref></see> that retries if the file is in use.
            </summary>
            <param name="source">The path to copy from.</param>
            <param name="destination">The path to copy to.</param>
            <param name="overwrite">Boolean value to indicate whether to overwrite the destination if it exists</param>
            <param name="timeout">The timeout in milliseconds to attempt to retry to delete the file</param>
            <param name="stopSignal">An optional stopSignal to tell the delete operation to stop if retrying</param>
            <param name="retryMinDelay">The minimum number of milliseconds to delay when deleting.</param>
        </member>
        <member name="M:Macro.Common.Utilities.FileUtils.Backup(System.String,System.String)">
            <summary>
            Creates copy of the specified file and returns the path to the backup file.
            This method allows a file to be backed up more than once with different extensions.
            </summary>
            <param name="source"></param>
            <returns>The path to the backup file. Null if the file is not backed up (it doesn't exist).</returns>
            <param name="backupDirectory">A backup directory, if null backup in the same folder</param>
            <remarks>If the file is in use, retry will be attempted until it succeeds.</remarks>
        </member>
        <member name="T:Macro.Common.Caching.CachePutOptions">
            <summary>
            Encapsulates options for the <see cref="M:Macro.Common.Caching.ICacheClient.Put(System.String,System.Object,Macro.Common.Caching.CachePutOptions)"/> method.
            </summary>
        </member>
        <member name="P:Macro.Common.Caching.CacheOptionsBase.Region">
            <summary>
            Gets or sets the region
            </summary>
        </member>
        <member name="M:Macro.Common.Caching.CachePutOptions.#ctor(System.String,System.TimeSpan,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="region"></param>
            <param name="expiration"></param>
            <param name="sliding"></param>
        </member>
        <member name="P:Macro.Common.Caching.CachePutOptions.Expiration">
            <summary>
            Gets or sets the expiration time.
            </summary>
        </member>
        <member name="P:Macro.Common.Caching.CachePutOptions.Sliding">
            <summary>
            Gets or sets a value indicating whether the expiration is sliding or not.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.NullExtensionFactory">
            <summary>
            An implementation of <see cref="T:Macro.Common.IExtensionFactory"/> that returns no extensions.
            </summary>
            <remarks>
            This implementation simply returns zero extensions for any extension point.  This is useful
            for unit-testing scenarios to prevent any extensions from being inadvertantly created.  This class
            may also be used as a base class for a more specialized extension factory that may respond to requests
            for certain extension points but not for others.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.NullExtensionFactory.CreateExtensions(Macro.Common.ExtensionPoint,Macro.Common.ExtensionFilter,System.Boolean)">
            <summary>
            Return an empty array.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.NullExtensionFactory.ListExtensions(Macro.Common.ExtensionPoint,Macro.Common.ExtensionFilter)">
            <summary>
            Returns an empty array.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.EventsHelper">
            <summary>
            Helper class for raising events.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.EventsHelper.Fire(System.Delegate,System.Object,System.EventArgs)">
            <summary>
            Helper method for raising events safely.
            </summary>
            <param name="del">Delegate to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/>.</param>
            <remarks>
            Use this method to invoke user code via delegates.
            This method will log any exceptions thrown in user code and immediately rethrow it.
            The typical usage is shown below.
            </remarks>
            <example>
            <code>
            [C#]
            public class PresentationImage
            {
               private event EventHandler _imageDrawingEvent;
               
               public void Draw()
               {
                  EventsHelper.Fire(_imageDrawingEvent, this, new DrawImageEventArgs());
               }
            }
            </code>
            </example>
        </member>
        <member name="T:Macro.Common.Statistics.TransmissionRateFormatter">
            <summary>
            Transmission rate formatter class.
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.TransmissionRateFormatter.Format(System.Double)">
            <summary>
            Formats a transmission rate in appropriate units
            </summary>
            <param name="rate"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.Common.Statistics.TimeSpanStatisticsHelper">
            <summary>
            Provides helper method to generate <see cref="T:Macro.Common.Statistics.TimeSpanStatistics"/>
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.TimeSpanStatisticsHelper.Measure(Macro.Common.Statistics.TimeSpanStatisticsHelper.ExecutationBlock)">
            <summary>
            Measures the elapsed time taken by an code block.
            </summary>
            <param name="executionBlock">Delegate to the code block which will be executed by this method and its elapsed will be measured</param>
            <returns>The <see cref="T:Macro.Common.Statistics.TimeSpanStatistics"/> object contains the elapsed time of the execution</returns>
        </member>
        <member name="T:Macro.Common.Statistics.TimeSpanStatisticsHelper.ExecutationBlock">
            <summary>
            Defines the delegate to a code block whose execution time will be measured using <see cref="M:Macro.Common.Statistics.TimeSpanStatisticsHelper.Measure(Macro.Common.Statistics.TimeSpanStatisticsHelper.ExecutationBlock)"/>.
            </summary>
        </member>
        <member name="T:Macro.Common.Specifications.InequalitySpecification">
            <summary>
            
            </summary>
            <remarks>
            From MSDN IComparable.CompareTo docs: 
            "By definition, any object compares greater than a null reference, and two null references compare equal to each other."
            </remarks>
        </member>
        <member name="T:Macro.Common.Statistics.StatisticsLogger">
            <summary>
            Provides statistics logging mechanism.
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.StatisticsLogger.Log(System.String,Macro.Common.LogLevel,System.Boolean,Macro.Common.Statistics.StatisticsSet)">
            <summary>
            Logs a statistics.
            </summary>
            <param name="logName">The name of the target log.</param>
            <param name="level">The log level used for logging the statistics</param>
            <param name="recursive">Bool telling if the log should be recursive, or just display averages.</param>
            <param name="statistics">The statistics to be logged</param>
        </member>
        <member name="M:Macro.Common.Statistics.StatisticsLogger.Log(Macro.Common.LogLevel,System.Boolean,Macro.Common.Statistics.StatisticsSet)">
            <summary>
            Logs a statistics.
            </summary>
            <param name="level">The log level used for logging the statistics</param>
            <param name="recursive">Bool telling if the log should be recursive, or just display averages.</param>
            <param name="statistics">The statistics to be logged</param>
        </member>
        <member name="M:Macro.Common.Statistics.StatisticsLogger.Log(Macro.Common.LogLevel,Macro.Common.Statistics.StatisticsSet)">
            <summary>
            Logs a statistics.
            </summary>
            <param name="level">The log level used for logging the statistics</param>
            <param name="statistics">The statistics to be logged</param>
        </member>
        <member name="M:Macro.Common.Statistics.StatisticsLogger.Log(System.String,Macro.Common.LogLevel,Macro.Common.Statistics.StatisticsSet)">
            <summary>
            Logs a statistics.
            </summary>
            <param name="logName">The name of the target log.</param>
            <param name="level">The log level used for logging the statistics</param>
            <param name="statistics">The statistics to be logged</param>
        </member>
        <member name="T:Macro.Common.Statistics.RateType">
            <summary>
            The type of information used in <see cref="T:Macro.Common.Statistics.RateStatistics"/>.
            </summary>
        </member>
        <member name="F:Macro.Common.Statistics.RateType.BYTES">
            <summary>
             Rate statistics in number of bytes within a period
            </summary>
        </member>
        <member name="F:Macro.Common.Statistics.RateType.MESSAGES">
            <summary>
            Rate statistics in number of message within a period
            </summary>
        </member>
        <member name="F:Macro.Common.Statistics.RateType.CUSTOM">
            <summary>
            Custom rate statistics.
            </summary>
        </member>
        <member name="T:Macro.Common.Statistics.RateStatistics">
            <summary>
            Statistics class to store the rate of changes of the underlying information.
            </summary>
            <remarks>
            The information being supported include: Byte rates or Message rate. The number of bytes or messages is set by calling <see cref="M:Macro.Common.Statistics.RateStatistics.SetData(System.Double)"/>.
            The rate will be calculated based on the value set by calling <see cref="M:Macro.Common.Statistics.RateStatistics.SetData(System.Double)"/> in between <see cref="M:Macro.Common.Statistics.RateStatistics.Start"/> and <see cref="M:Macro.Common.Statistics.RateStatistics.End"/> calls.
            
            <see cref="P:Macro.Common.Statistics.IStatistics.FormattedValue"/> of the <see cref="T:Macro.Common.Statistics.RateStatistics"/> has unit of "GB/s", "MB/s", "KB/s" or "msg/s"
            depending on type of value specified in the constructor.
            
            
            <example>
            <code>
                RateStatistics transferSpeed = new RateStatistics("Speed", RateType.BYTES);
                transferSpeed.Begin();
                transferSpeed.SetData(2408);
                transferSpeed.End();    
            </code>
            
            <para>If the time elapsed between Begin() and End() is one second, then transferSpeed.FormattedValue = "2 KB/s"</para>
            <para>If the time elapsed is 5 seconds, then transferSpeed.FormattedValue = "0.4 KB/s"</para>
            
            </example>
            
            
            
            </remarks>
        </member>
        <member name="M:Macro.Common.Statistics.RateStatistics.#ctor(System.String,Macro.Common.Statistics.RateType)">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.RateStatistics"/> for the specified <see cref="T:Macro.Common.Statistics.RateType"/>
            </summary>
            <param name="name"></param>
            <param name="rateType"></param>
        </member>
        <member name="M:Macro.Common.Statistics.RateStatistics.#ctor(System.String,System.String)">
             <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.RateStatistics"/> for type <see cref="F:Macro.Common.Statistics.RateType.CUSTOM"/>.
             </summary>
             <param name="name"></param>
             <param name="unit"></param>
        </member>
        <member name="M:Macro.Common.Statistics.RateStatistics.#ctor(Macro.Common.Statistics.RateStatistics)">
            <summary>
            Creates a copy of the original <see cref="T:Macro.Common.Statistics.RateStatistics"/> object.
            </summary>
            <param name="source">The original <see cref="T:Macro.Common.Statistics.RateStatistics"/> to copy </param>
        </member>
        <member name="M:Macro.Common.Statistics.RateStatistics.SetData(System.Double)">
            <summary>
            Sets the value of the underlying data.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Macro.Common.Statistics.RateStatistics.Start">
            <summary>
            Signals the begining of the measurement.
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.RateStatistics.End">
            <summary>
            Signals the end of the measurement.
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.RateStatistics.Clone">
            <summary>
            Creates a copy of the current statistics
            </summary>
            <returns>A copy of the current <see cref="T:Macro.Common.Statistics.RateStatistics"/> object</returns>
        </member>
        <member name="M:Macro.Common.Statistics.RateStatistics.NewAverageStatistics">
            <summary>
            Returns a new average statistics object corresponding to the current statistics
            </summary>
            <returns>A <see cref="T:Macro.Common.Statistics.AverageRateStatistics"/> object</returns>
        </member>
        <member name="P:Macro.Common.Statistics.RateStatistics.Type">
            <summary>
            Gets or sets the type of the rate being measured
            </summary>
        </member>
        <member name="P:Macro.Common.Statistics.RateStatistics.Value">
            <summary>
            The rate value.
            </summary>
        </member>
        <member name="P:Macro.Common.Statistics.RateStatistics.ElapsedTicks">
            <summary>
            Gets the elapsed time being measured, in ticks.
            </summary>
        </member>
        <member name="P:Macro.Common.Statistics.RateStatistics.ElapsedTime">
            <summary>
            Gets the elapsed time being measured, in ticks.
            </summary>
        </member>
        <member name="T:Macro.Common.Statistics.AverageRateStatistics">
            <summary>
            Average rate statistics.
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.AverageRateStatistics.#ctor(Macro.Common.Statistics.RateType)">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.AverageRateStatistics"/> with specified type
            </summary>
            <param name="rateType">rate statistics type</param>
        </member>
        <member name="M:Macro.Common.Statistics.AverageRateStatistics.#ctor(System.String,Macro.Common.Statistics.RateType)">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.AverageRateStatistics"/> with specified type and name
            </summary>
            <param name="name">Name of the <see cref="T:Macro.Common.Statistics.AverageRateStatistics"/> to be created</param>
            <param name="rateType">Type of statistics rate for the newly created <see cref="T:Macro.Common.Statistics.AverageRateStatistics"/> object</param>
        </member>
        <member name="M:Macro.Common.Statistics.AverageRateStatistics.#ctor(Macro.Common.Statistics.RateStatistics)">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.AverageRateStatistics"/> for a specified <see cref-="RateStatistics"/> object.
            </summary>
            <param name="source">The <see cref-="RateStatistics"/> object based on which the new <see cref="T:Macro.Common.Statistics.AverageRateStatistics"/> object will be created</param>
        </member>
        <member name="M:Macro.Common.Statistics.AverageRateStatistics.AddSample``1(``0)">
            <summary>
            Adds a sample to the <see cref="P:Macro.Common.Statistics.AverageStatistics`1.Samples"/> list.
            </summary>
            <typeparam name="TSample"></typeparam>
            <param name="sample"></param>
        </member>
        <member name="M:Macro.Common.Statistics.AverageRateStatistics.ComputeAverage">
            <summary>
            Computes the average for the samples in <see cref="P:Macro.Common.Statistics.AverageStatistics`1.Samples"/> list.
            </summary>
        </member>
        <member name="T:Macro.Common.PluginInfoCache.SurrogateSelector">
            <summary>
            This class supports serialization of <see cref="T:Macro.Common.TypeRef"/> and <see cref="T:Macro.Common.AssemblyRef"/> objects,
            via their respective serialization surrogate classes.
            </summary>
        </member>
        <member name="T:Macro.Common.ClassNameExtensionFilter">
            <summary>
            An extension filter that checks for equality with the extension class name.
            </summary>
        </member>
        <member name="M:Macro.Common.ClassNameExtensionFilter.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">The extension class name that will be a match for this filter.</param>
        </member>
        <member name="M:Macro.Common.ClassNameExtensionFilter.Test(Macro.Common.ExtensionInfo)">
            <summary>
            Tests whether or not the input <see cref="P:Macro.Common.ExtensionInfo.ExtensionClass"/>' full name matches 
            the name supplied to the filter constructor.
            </summary>
        </member>
        <member name="T:Macro.Common.Shreds.QueueProcessorShred">
            <summary>
            Specialization of <see cref="T:Macro.Common.Shreds.Shred"/> for running code packaged in <see cref="T:Macro.Common.Shreds.QueueProcessor"/>
            derived classes.
            </summary>
            <remarks>
            This class must be sub-classed, and the <see cref="M:Macro.Common.Shreds.QueueProcessorShred.GetProcessors"/> method overridden
            to return the set of processors to execute (a single instance of this class may run multiple
             queue processors in parallel).
            </remarks>
        </member>
        <member name="M:Macro.Common.Shreds.QueueProcessorShred.GetProcessors">
            <summary>
            Obtains a set of processors to be executed by this shred.
            </summary>
            <remarks>
            This method will be called every time the shred is started.  Subsequent
            invocations need not return the same processor instances.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Shreds.QueueProcessorShred.Start">
            <summary>
            Called to start the shred.
            </summary>
        </member>
        <member name="M:Macro.Common.Shreds.QueueProcessorShred.Stop">
            <summary>
            Called to stop the shred.
            </summary>
        </member>
        <member name="M:Macro.Common.Shreds.QueueProcessorShred.StartUp">
            <summary>
            Starts all processors returned by <see cref="M:Macro.Common.Shreds.QueueProcessorShred.GetProcessors"/>.  This method is transactional:
            either all processors start, or none do (those that have already started are stopped). This method
            will not throw under any circumstances.  Failure is silent. (TODO: is this desirable??)
            </summary>
        </member>
        <member name="M:Macro.Common.Shreds.QueueProcessorShred.ShutDown">
            <summary>
            Stops all running processors.  This method is guaranteed to succeed,
            in the sense that it will not throw under any circumstances.  However,
            if a processor thread does not stop within the specified time out, it 
            will be abandoned.
            </summary>
        </member>
        <member name="M:Macro.Common.Shreds.QueueProcessorShred.StartProcessorThread(Macro.Common.Shreds.QueueProcessor)">
            <summary>
            Starts the specified processor on a dedicated thread, and returns the
            <see cref="T:System.Threading.Thread"/> object.
            </summary>
            <param name="processor"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.Common.ILicenseProvider">
            <summary>
            Represents a license information provider.
            </summary>
            <remarks>
            For internal framework use only.
            </remarks>
        </member>
        <member name="M:Macro.Common.ILicenseProvider.GetLicenseInfo(System.String@,System.String@)">
            <summary>
            Gets license information.
            </summary>
        </member>
        <member name="M:Macro.Common.ILicenseProvider.SetLicenseInfo(System.String)">
            <summary>
            Sets the current license key.
            </summary>
            <param name="licenseKey"></param>
        </member>
        <member name="E:Macro.Common.ILicenseProvider.LicenseInfoChanged">
            <summary>
            Fired when the license information has changed.
            </summary>
        </member>
        <member name="T:Macro.Common.LicenseProviderExtensionPoint">
            <summary>
            An extension point for <see cref="T:Macro.Common.ILicenseProvider"/>s.
            </summary>
            <remarks>
            For internal framework use only.
            </remarks>
        </member>
        <member name="T:Macro.Common.Caching.ICacheProvider">
            <summary>
            Defines an interfaces to an object that provides a cache implementation.
            </summary>
        </member>
        <member name="M:Macro.Common.Caching.ICacheProvider.Initialize(Macro.Common.Caching.CacheProviderInitializationArgs)">
            <summary>
            Initializes this cache provider.
            </summary>
        </member>
        <member name="M:Macro.Common.Caching.ICacheProvider.CreateClient(System.String)">
            <summary>
            Creates a cache client for the specified logical cache ID.
            </summary>
            <remarks>
            The implementation of this method *must* be safe for multiple threads making concurrent calls.
            </remarks>
            <returns></returns>
        </member>
        <member name="T:Macro.Common.Utilities.CollectionUtils">
            <summary>
            Provides a set of methods for performing functional-style operations on collections.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Select``2(System.Collections.IEnumerable,System.Predicate{``0})">
            <summary>
            Selects all items in the target collection that match the specified predicate, returning
            them as a new collection of the specified type.
            </summary>
            <typeparam name="TItem">The type of items in the target collection.</typeparam>
            <typeparam name="TResultCollection">The type of collection to return.</typeparam>
            <param name="target">The collection to operate on.</param>
            <param name="predicate">The predicate to test.</param>
            <returns>A collection containing the subset of matching items from the target collection.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Select``1(System.Collections.IEnumerable,System.Predicate{``0})">
            <summary>
            Selects all items in the target collection that match the specified predicate.
            </summary>
            <typeparam name="TItem">The type of items in the target collection.</typeparam>
            <param name="target">The collection to operate on.</param>
            <param name="predicate">The predicate to test.</param>
            <returns>A collection containing the subset of matching items from the target collection.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Select``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Selects all items in the target collection that match the specified predicate.
            </summary>
            <typeparam name="TItem">The type of items in the target collection.</typeparam>
            <param name="target">The collection to operate on.</param>
            <param name="predicate">The predicate to test.</param>
            <returns>A collection containing the subset of matching items from the target collection.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Select(System.Collections.IEnumerable,System.Predicate{System.Object})">
            <summary>
            Selects all items in the target collection that match the specified predicate.
            </summary>
            <remarks>
            This overload accepts an untyped collection, and returns an untyped collection.
            </remarks>
            <param name="target">The collection to operate on.</param>
            <param name="predicate">The predicate to test.</param>
            <returns>A collection containing the subset of matching items from the target collection.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Reject``2(System.Collections.IEnumerable,System.Predicate{``0})">
            <summary>
            Excludes all items in the target collection that match the specified predicate, returning
            the rest of the items as a new collection of the specified type.
            </summary>
            <typeparam name="TItem">The type of items in the target collection.</typeparam>
            <typeparam name="TResultCollection">The type of collection to return.</typeparam>
            <param name="target">The collection to operate on.</param>
            <param name="predicate">The predicate to test.</param>
            <returns>A collection containing the subset of matching items from the target collection.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Reject``1(System.Collections.IEnumerable,System.Predicate{``0})">
            <summary>
            Excludes all items in the target collection that match the specified predicate, returning
            the rest of the items as a new collection.
            </summary>
            <typeparam name="TItem">The type of items in the target collection.</typeparam>
            <param name="target">The collection to operate on.</param>
            <param name="predicate">The predicate to test.</param>
            <returns>A collection containing the subset of matching items from the target collection.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Reject``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Excludes all items in the target collection that match the specified predicate, returning
            the rest of the items as a new collection.
            </summary>
            <typeparam name="TItem">The type of items in the target collection.</typeparam>
            <param name="target">The collection to operate on.</param>
            <param name="predicate">The predicate to test.</param>
            <returns>A collection containing the subset of matching items from the target collection.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Reject(System.Collections.IEnumerable,System.Predicate{System.Object})">
            <summary>
            Excludes all items in the target collection that match the specified predicate, returning
            the rest of the items as a new collection.
            </summary>
            <remarks>
            This overload accepts an untyped collection and returns an untyped collection.
            </remarks>
            <param name="target">The collection to operate on</param>
            <param name="predicate">The predicate to test</param>
            <returns>A collection containing the subset of matching items from the target collection</returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.SelectFirst``1(System.Collections.IEnumerable,System.Predicate{``0})">
            <summary>
            Returns the first item in the target collection that matches the specified predicate, or
            null if no match is found.
            </summary>
            <remarks>
            <typeparamref name="TItem"/> must be a reference type, not a value type.
            </remarks>
            <typeparam name="TItem">The type of items in the target collection.</typeparam>
            <param name="target">The collection to operate on.</param>
            <param name="predicate">The predicate to test.</param>
            <returns>The first matching item, or null if no match are found.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.SelectFirst``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Returns the first item in the target collection that matches the specified predicate, or
            null if no match is found.
            </summary>
            <remarks>
            <typeparamref name="TItem"/> must be a reference type, not a value type.
            </remarks>
            <typeparam name="TItem">The type of items in the target collection.</typeparam>
            <param name="target">The collection to operate on.</param>
            <param name="predicate">The predicate to test.</param>
            <returns>The first matching item, or null if no match are found.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.SelectFirst(System.Collections.IEnumerable,System.Predicate{System.Object})">
            <summary>
            Returns the first item in the target collection that matches the specified predicate, or
            null if no match is found.
            </summary>
            <remarks>
            This overload accepts an untyped collection.
            </remarks>
            <param name="target">The collection to operate on.</param>
            <param name="predicate">The predicate to test.</param>
            <returns>The first matching item, or null if no matches are found.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Map``3(System.Collections.IEnumerable,System.Converter{``0,``1})">
            <summary>
            Maps the specified collection onto a new collection according to the specified map function.
            </summary>
            <remarks>
            Allows the type of the return collection to be specified.
            </remarks>
            <typeparam name="TItem">The type of items in the target collection.</typeparam>
            <typeparam name="TResultItem">The type of item returned by the map function.</typeparam>
            <typeparam name="TResultCollection">The type of collection to return.</typeparam>
            <param name="target">The collection to operate on.</param>
            <param name="mapFunction">A delegate that performs the mapping.</param>
            <returns>A new collection of the specified type, containing a mapped entry for each entry in the target collection.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Map``2(System.Collections.IEnumerable,System.Converter{``0,``1})">
            <summary>
            Maps the specified collection onto a new collection according to the specified map function.
            </summary>
            <typeparam name="TItem">The type of items in the target collection.</typeparam>
            <typeparam name="TResultItem">The type of item returned by the map function.</typeparam>
            <param name="target">The collection to operate on.</param>
            <param name="mapFunction">A delegate that performs the mapping.</param>
            <returns>A new collection containing a mapped entry for each entry in the target collection.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Map(System.Collections.IEnumerable,System.Converter{System.Object,System.Object})">
            <summary>
            Maps the specified collection onto a new collection according to the specified map function.
            </summary>
            <remarks>
            This overload operates on an untyped collection and returns an untyped collection.
            </remarks>
            <param name="target">The collection to operate on.</param>
            <param name="mapFunction">A delegate that performs the mapping.</param>
            <returns>A new collection containing a mapped entry for each entry in the target collection.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Map``4(System.Collections.Generic.IDictionary{``0,``1},System.Converter{System.Collections.Generic.KeyValuePair{``0,``1},System.Collections.Generic.KeyValuePair{``2,``3}})">
            <summary>
            Maps the specified dictionary onto a new dictionary according to the specified map function.
            </summary>
            <typeparam name="K">Key type of target dictionary.</typeparam>
            <typeparam name="V">Value type of target dictionary.</typeparam>
            <typeparam name="K2">Key type of result dictionary.</typeparam>
            <typeparam name="V2">Value type of result dictionary.</typeparam>
            <param name="target"></param>
            <param name="mapFunc"></param>
            <returns>A new dictionary containing a mapped entry for each entry in the target collection.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Reduce``2(System.Collections.IEnumerable,``1,Macro.Common.Utilities.CollectionUtils.ReduceDelegate{``0,``1})">
            <summary>
            Reduces the specified collection to a singular value according to the specified reduce function.
            </summary>
            <typeparam name="TItem">The type of items in the target collection.</typeparam>
            <typeparam name="TMemo">The type of the singular value to reduce the collection to.</typeparam>
            <param name="target">The collection to operate on.</param>
            <param name="initial">The initial value for the reduce operation.</param>
            <param name="reduceFunction">A delegate that performs the reduce operation.</param>
            <returns>The value of the reduce operation.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.ForEach``1(System.Collections.IEnumerable,System.Action{``0})">
            <summary>
            Performs the specified action for each item in the target collection.
            </summary>
            <typeparam name="TItem">The type of items in the target collection.</typeparam>
            <param name="target">The collection to operate on.</param>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action for each item in the target collection.
            </summary>
            <typeparam name="TItem">The type of items in the target collection.</typeparam>
            <param name="target">The collection to operate on.</param>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.ForEach(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            Performs the specified action for each item in the target collection.
            </summary>
            <remarks>
            This overload operates on an untyped collection.
            </remarks>
            <param name="target">The collection to operate on.</param>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Contains``1(System.Collections.IEnumerable,System.Predicate{``0})">
            <summary>
            Returns true if any item in the target collection satisfies the specified predicate.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Returns true if any item in the target collection satisfies the specified predicate.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Contains(System.Collections.IEnumerable,System.Predicate{System.Object})">
            <summary>
            Returns true if any item in the target collection satisfies the specified predicate.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.TrueForAll``1(System.Collections.IEnumerable,System.Predicate{``0})">
            <summary>
            Returns true if all items in the target collection satisfy the specified predicate.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.TrueForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Returns true if all items in the target collection satisfy the specified predicate.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.TrueForAll(System.Collections.IEnumerable,System.Predicate{System.Object})">
            <summary>
            Returns true if all items in the target collection satisfy the specified predicate.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.FirstElement(System.Collections.IEnumerable)">
            <summary>
            Returns the first element in the target collection, or null if the collection is empty.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.FirstElement``1(System.Collections.IEnumerable,``0)">
            <summary>
            Returns the first element in the target collection, or the specified <paramref name="defaultValue"/> if the collection is empty.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.FirstElement``1(System.Collections.IEnumerable)">
            <summary>
            Returns the first element in the target collection, or null if the collection is empty.
            </summary>
            <remarks>
            TItem must be a reference type, not a value type.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.FirstElement``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first element in the target collection, or null if the collection is empty.
            </summary>
            <remarks>
            TItem must be a reference type, not a value type.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.LastElement(System.Collections.IEnumerable)">
            <summary>
            Returns the last element in the target collection, or null if the collection is empty.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.LastElement``1(System.Collections.IEnumerable,``0)">
            <summary>
            Returns the last element in the target collection, or the specified <paramref name="defaultValue "/> if the collection is empty.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.LastElement``1(System.Collections.IEnumerable)">
             <summary>
             Returns the last element in the target collection, or null if the collection is empty.
             </summary>
            <remarks>
             TItem must be a reference type, not a value type.
             </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.LastElement``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>
             Returns the last element in the target collection, or null if the collection is empty.
             </summary>
            <remarks>
             TItem must be a reference type, not a value type.
             </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Remove``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0})">
            <summary>
            Removes all items in the target collection that match the specified predicate.
            </summary>
            <remarks>
            Unlike <see cref="M:Macro.Common.Utilities.CollectionUtils.Reject(System.Collections.IEnumerable,System.Predicate{System.Object})"/>, this method modifies the target collection itself.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Remove(System.Collections.IList,System.Predicate{System.Object})">
            <summary>
            Removes all items in the target collection that match the specified predicate.
            </summary>
            <remarks>
            Unlike <see cref="M:Macro.Common.Utilities.CollectionUtils.Reject(System.Collections.IEnumerable,System.Predicate{System.Object})"/>, this method modifies the target collection itself.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Sort``1(System.Collections.IEnumerable,System.Comparison{``0})">
            <summary>
            Returns a list of the items in the target collection, sorted according to the specified comparison.
            </summary>
            <remarks>
            Does not modify the target collection, since it may not even be a sortable collection.
            If the collection may contain nulls, the comparison must handle nulls.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Sort``1(System.Collections.IEnumerable)">
            <summary>
            Returns a list of the items in the target collection, sorted using the default comparer.
            </summary>
            <remarks>
            Does not modify the target collection, since it may not even be a sortable collection.
            If the collection may contain nulls, the comparison must handle nulls.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            Returns a list of the items in the target collection, sorted according to the specified comparison.
            </summary>
            <remarks>
            Does not modify the target collection, since it may not even be a sortable collection.
            If the collection may contain nulls, the comparison must handle nulls.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Sort``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a list of the items in the target collection, sorted using the default comparer.
            </summary>
            <remarks>
            Does not modify the target collection, since it may not even be a sortable collection.
            If the collection may contain nulls, the comparison must handle nulls.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.ToArray``1(System.Collections.IEnumerable)">
            <summary>
            Converts the target enumerable to an array of the specified type.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the target enumerable to an array of the specified type.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Min``1(System.Collections.IEnumerable,``0,System.Comparison{``0})">
            <summary>
            Returns the minimum value in the target collection, or the specified <paramref name="nullValue "/> if the target is empty.
            </summary>
            <remarks>
            If the collection may contain nulls, the comparison must handle nulls.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Min``1(System.Collections.Generic.IEnumerable{``0},``0,System.Comparison{``0})">
            <summary>
            Returns the minimum value in the target collection, or the specified <paramref name="nullValue "/> if the target is empty.
            </summary>
            <remarks>
            If the collection may contain nulls, the comparison must handle nulls.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Min``1(System.Collections.IEnumerable,``0)">
            <summary>
            Returns the minimum value in the target collection, or the specified <paramref name="nullValue "/> if the target is empty.
            </summary>
            <remarks>
            <para>If the collection contains nulls, they are treated as less than any other value.</para>
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Min``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the minimum value in the target collection, or the specified <paramref name="nullValue "/> if the target is empty.
            </summary>
            <remarks>
            <para>If the collection contains nulls, they are treated as less than any other value.</para>
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Min``1(System.Collections.IEnumerable)">
            <summary>
            Returns the minimum value in the target collection, or null if the collection is empty.
            </summary>
            <remarks>
            <para>The collection must contain object references, not value types.</para>
            <para>If the collection contains nulls, they are treated as less than any other value.</para>
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Min``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the minimum value in the target collection, or null if the collection is empty.
            </summary>
            <remarks>
            <para>The collection must contain object references, not value types.</para>
            <para>If the collection contains nulls, they are treated as less than any other value.</para>
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Max``1(System.Collections.IEnumerable,``0,System.Comparison{``0})">
            <summary>
            Returns the maximum value in the target collection, or the specified <paramref name="nullValue"/> if the collection is empty.
            </summary>
            <remarks>
            If the collection may contain nulls, the comparison must handle nulls.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Max``1(System.Collections.Generic.IEnumerable{``0},``0,System.Comparison{``0})">
            <summary>
            Returns the maximum value in the target collection, or the specified <paramref name="nullValue"/> if the collection is empty.
            </summary>
            <remarks>
            If the collection may contain nulls, the comparison must handle nulls.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Max``1(System.Collections.IEnumerable,``0)">
            <summary>
            Returns the maximum value in the target collection, or the specified <paramref name="nullValue"/> if the collection is empty.
            </summary>
            <remarks>
            <para>If the collection contains nulls, they are treated as less than any other value.</para>
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Max``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the maximum value in the target collection, or the specified <paramref name="nullValue"/> if the collection is empty.
            </summary>
            <remarks>
            <para>If the collection contains nulls, they are treated as less than any other value.</para>
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Max``1(System.Collections.IEnumerable)">
            <summary>
            Returns the maximum value in the target collection, or the null if the collection is empty.
            </summary>
            <remarks>
            <para>The collection must contain object references, not value types.</para>
            <para>If the collection contains nulls, they are treated as less than any other value.</para>
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Max``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the maximum value in the target collection, or the null if the collection is empty.
            </summary>
            <remarks>
            <para>The collection must contain object references, not value types.</para>
            <para>If the collection contains nulls, they are treated as less than any other value.</para>
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.FindExtremeValue``1(System.Collections.IEnumerable,``0,System.Comparison{``0},System.Int32)">
            <summary>
            Helper method to provide implementation of <b>Min</b> and <b>Max</b>.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Equal``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.Boolean)">
            <summary>
            Compares two collections to determine if they are equal, optionally considering the order of elements.
            </summary>
            <remarks>
            Two collections are considered equal if they contain the same number of elements and every element
            contained in one collection is contained in the other. If <paramref name="orderSensitive"/> is true,
            the elements must also enumerate in the same order.  Equality of individual elements is determined
            by their implementation of <see cref="M:System.Object.Equals(System.Object)"/>.
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
            <param name="y"></param>
            <param name="orderSensitive"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Equal(System.Collections.ICollection,System.Collections.ICollection,System.Boolean)">
            <summary>
            Compares two collections to determine if they are equal, optionally considering the order of elements.
            </summary>
            <remarks>
            Two collections are considered equal if they contain the same number of elements and every element
            contained in one collection is contained in the other. If <paramref name="orderSensitive"/> is true,
            the elements must also enumerate in the same order.  Equality of individual elements is determined
            by their implementation of <see cref="M:System.Object.Equals(System.Object)"/>.
            </remarks>
            <param name="x"></param>
            <param name="y"></param>
            <param name="orderSensitive"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Unique``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a new list containing only the unique elements of the target collection, preserving the order.
            Relies on <see cref="M:System.Object.Equals(System.Object)"/> and <see cref="M:System.Object.GetHashCode"/>, since a dictionary
            is used internally to create the unique set of results.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Unique``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns a new list containing only the unique elements of the target collection, preserving the order.
            The specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> is used to determine uniqueness.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Unique(System.Collections.IEnumerable)">
            <summary>
            Returns a new list containing only the unique elements of the target collection, preserving the order.
            Relies on <see cref="M:System.Object.Equals(System.Object)"/> and <see cref="M:System.Object.GetHashCode"/>, since a dictionary
            is used internally to create the unique set of results.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Unique(System.Collections.IEnumerable,System.Collections.IEqualityComparer)">
            <summary>
            Returns a new list containing only the unique elements of the target collection, preserving the order.
            The specified <see cref="T:System.Collections.IEqualityComparer"/> is used to determine uniqueness.
            </summary>
            <param name="target"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Cast``1(System.Collections.IEnumerable)">
            <summary>
            Casts each item in the target collection to the specified type, and returns the results
            in a new list.
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Concat``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Concatenates all target collections into a single collection.  The items are added
            in order.
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Concat(System.Collections.ICollection[])">
            <summary>
            Concatenates all target collections into a single collection.  The items are added
            in order.
            </summary>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.Concat``1(System.Collections.Generic.List{System.Collections.Generic.List{``0}})">
            <summary>
            Concatenates all target collections into a single collection.  The items are added
            in order.
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            Partitions elements of the target collection into sub-groups based on the specified key generating function,
            and returns a dictionary of the generated keys, where each value is a list of the items that produced that key.
            Items appear in the sub-lists in the order in which they were enumerated from the target.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="target"></param>
            <param name="keyFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Utilities.CollectionUtils.MakeDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1},System.Converter{``0,``2})">
            <summary>
            Creates a dictionary from the target collection by mapping each element to a corresponding key and value using the specified functions.
            </summary>
            <typeparam name="T">Target collection element type.</typeparam>
            <typeparam name="K">Key type.</typeparam>
            <typeparam name="V">Value type.</typeparam>
            <param name="target"></param>
            <param name="keyFunc"></param>
            <param name="valueFunc"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.Common.Utilities.CollectionUtils.ReduceDelegate`2">
            <summary>
            Delegate for use with <see cref="M:Macro.Common.Utilities.CollectionUtils.Reduce``2(System.Collections.IEnumerable,``1,Macro.Common.Utilities.CollectionUtils.ReduceDelegate{``0,``1})"/>.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.DelayedEventPublisherTriggerMode">
            <summary>
            Specifies when the real event handler will be triggered by the <see cref="T:Macro.Common.Utilities.DelayedEventPublisher"/>.
            </summary>
        </member>
        <member name="F:Macro.Common.Utilities.DelayedEventPublisherTriggerMode.Inactivity">
            <summary>
            The real event handler will be triggered after a period of inactivity.
            </summary>
        </member>
        <member name="F:Macro.Common.Utilities.DelayedEventPublisherTriggerMode.Periodic">
            <summary>
            The real event handler will be triggered periodically.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.DelayedEventPublisherBase">
            <summary>
            Base class for <see cref="T:Macro.Common.Utilities.DelayedEventPublisher"/> and <see cref="T:Macro.Common.Utilities.DelayedEventPublisher`1"/>.
            </summary>
            <seealso cref="T:Macro.Common.Utilities.DelayedEventPublisher"/>
            <seealso cref="T:Macro.Common.Utilities.DelayedEventPublisher`1"/>
        </member>
        <member name="M:Macro.Common.Utilities.DelayedEventPublisherBase.#ctor(System.EventHandler,System.Int32,Macro.Common.Utilities.DelayedEventPublisherTriggerMode)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.Common.Utilities.DelayedEventPublisher"/>.
            </summary>
            <param name="realEventHandler">The event handler which will be called when the timeout has elapsed.</param>
            <param name="timeoutMilliseconds">The timeout period, in milliseconds, for triggering the real event handler. The default is 350 ms.</param>
            <param name="trigger">Specifies when the real event handler is called after a period of inactivity, or periodically after the last event was raised. The default is to trigger on inactivity.</param>
        </member>
        <member name="M:Macro.Common.Utilities.DelayedEventPublisherBase.Cancel">
            <summary>
            Cancels the currently pending delayed event, if one exists.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.DelayedEventPublisherBase.PublishNow">
            <summary>
            Publishes the currently pending delayed event immediately. This method does nothing if there is no pending event.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.DelayedEventPublisherBase.PublishNowCore(System.Object,System.EventArgs)">
            <summary>
            Publishes an event with the specified input parameters immediately. If there is a pending delayed event, it is discarded.
            </summary>
            <param name="sender">The apparent sender of the event to be passed to the real event handler.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> to be passed to the real event handler.</param>
        </member>
        <member name="M:Macro.Common.Utilities.DelayedEventPublisherBase.PublishCore(System.Object,System.EventArgs)">
            <summary>
            Delay-publishes an event with the specified input parameters.
            </summary>
            <remarks>
            <para>
            Repeated calls to <see cref="M:Macro.Common.Utilities.DelayedEventPublisherBase.PublishCore(System.Object,System.EventArgs)"/> will cause
            only the most recent event parameters to be remembered until the delay
            timeout has expired, at which time only those event parameters will
            be used to publish the delayed event.
            </para>
            <para>
            When a delayed event is published, the <see cref="T:Macro.Common.Utilities.DelayedEventPublisher"/>
            goes into an idle state.  The next call to <see cref="M:Macro.Common.Utilities.DelayedEventPublisherBase.PublishCore(System.Object,System.EventArgs)"/>
            starts the delayed publishing process over again.
            </para>
            </remarks>
            <param name="sender">The apparent sender of the event to be passed to the real event handler.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> to be passed to the real event handler.</param>
        </member>
        <member name="M:Macro.Common.Utilities.DelayedEventPublisherBase.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:Macro.Common.Utilities.DelayedEventPublisher"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.DelayedEventPublisherBase.Dispose">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.DelayedEventPublisher">
            <summary>
            A utility for delaying or throttling the publication of an event.
            </summary>
            <remarks>
            <para>
            This utility is typically used to delay and/or throttle an event that tends to fire many times within a short period of time, triggering
            numerous UI updates too fast for the user to register, and potentially even impacting on UI responsiveness. 
            </para>
            <para>
            When triggered on inactivity, the timeout period speciifes the time after which, if <see cref="M:Macro.Common.Utilities.DelayedEventPublisher.Publish(System.Object,System.EventArgs)"/> has not been called, 
            the delayed event will be published. An example of this usage is on property change events to delay notification until the property value has stabilized.
            </para>
            <para>
            When triggered periodically, the timeout period specifies the minimum interval between publishing consecutive events while <see cref="M:Macro.Common.Utilities.DelayedEventPublisher.Publish(System.Object,System.EventArgs)"/>
            is being called. An example of this usage is on a progress provider to throttle notification while still allowing periodic notification.
            </para>
            <para>
            As this class uses a <see cref="T:Macro.Common.Utilities.Timer"/> internally, it <b>must</b> be instantiated from a UI thread; see <see cref="T:Macro.Common.Utilities.Timer"/> for more details.
            </para>
            </remarks>
            <seealso cref="T:Macro.Common.Utilities.Timer"/>
        </member>
        <member name="M:Macro.Common.Utilities.DelayedEventPublisher.#ctor(System.EventHandler,System.Int32,Macro.Common.Utilities.DelayedEventPublisherTriggerMode)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.Common.Utilities.DelayedEventPublisher"/>.
            </summary>
            <param name="realEventHandler">The event handler which will be called when the timeout has elapsed.</param>
            <param name="timeoutMilliseconds">The timeout period, in milliseconds, for triggering the real event handler. The default is 350 ms.</param>
            <param name="trigger">Specifies when the real event handler is called after a period of inactivity, or periodically after the last event was raised. The default is to trigger on inactivity.</param>
        </member>
        <member name="M:Macro.Common.Utilities.DelayedEventPublisher.Publish(System.Object,System.EventArgs)">
            <summary>
            Delay-publishes an event with the specified input parameters.
            </summary>
            <remarks>
            <para>
            Repeated calls to <see cref="M:Macro.Common.Utilities.DelayedEventPublisher.Publish(System.Object,System.EventArgs)"/> will cause
            only the most recent event parameters to be remembered until the delay
            timeout has expired, at which time only those event parameters will
            be used to publish the delayed event.
            </para>
            <para>
            When a delayed event is published, the <see cref="T:Macro.Common.Utilities.DelayedEventPublisher"/>
            goes into an idle state.  The next call to <see cref="M:Macro.Common.Utilities.DelayedEventPublisher.Publish(System.Object,System.EventArgs)"/>
            starts the delayed publishing process over again.
            </para>
            </remarks>
            <param name="sender">The apparent sender of the event to be passed to the real event handler.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> to be passed to the real event handler.</param>
        </member>
        <member name="M:Macro.Common.Utilities.DelayedEventPublisher.PublishNow(System.Object,System.EventArgs)">
            <summary>
            Publishes an event with the specified input parameters immediately. If there is a pending delayed event, it is discarded.
            </summary>
            <param name="sender">The apparent sender of the event to be passed to the real event handler.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> to be passed to the real event handler.</param>
        </member>
        <member name="T:Macro.Common.Utilities.DelayedEventPublisher`1">
            <summary>
            A utility for delaying or throttling the publication of an event.
            </summary>
            <remarks>
            <para>
            This utility is typically used to delay and/or throttle an event that tends to fire many times within a short period of time, triggering
            numerous UI updates too fast for the user to register, and potentially even impacting on UI responsiveness. 
            </para>
            <para>
            When triggered on inactivity, the timeout period speciifes the time after which, if <see cref="M:Macro.Common.Utilities.DelayedEventPublisher`1.Publish(System.Object,`0)"/> has not been called, 
            the delayed event will be published. An example of this usage is on property change events to delay notification until the property value has stabilized.
            </para>
            <para>
            When triggered periodically, the timeout period specifies the minimum interval between publishing consecutive events while <see cref="M:Macro.Common.Utilities.DelayedEventPublisher`1.Publish(System.Object,`0)"/>
            is being called. An example of this usage is on a progress provider to throttle notification while still allowing periodic notification.
            </para>
            <para>
            As this class uses a <see cref="T:Macro.Common.Utilities.Timer"/> internally, it <b>must</b> be instantiated from a UI thread; see <see cref="T:Macro.Common.Utilities.Timer"/> for more details.
            </para>
            </remarks>
            <seealso cref="T:Macro.Common.Utilities.Timer"/>
        </member>
        <member name="M:Macro.Common.Utilities.DelayedEventPublisher`1.#ctor(System.EventHandler{`0},System.Int32,Macro.Common.Utilities.DelayedEventPublisherTriggerMode)">
            <summary>
            Initializes a new instance of <see cref="T:Macro.Common.Utilities.DelayedEventPublisher`1"/>.
            </summary>
            <param name="realEventHandler">The event handler which will be called when the timeout has elapsed.</param>
            <param name="timeoutMilliseconds">The timeout period, in milliseconds, for triggering the real event handler. The default is 350 ms.</param>
            <param name="trigger">Specifies when the real event handler is called after a period of inactivity, or periodically after the last event was raised. The default is to trigger on inactivity.</param>
        </member>
        <member name="M:Macro.Common.Utilities.DelayedEventPublisher`1.Publish(System.Object,`0)">
            <summary>
            Delay-publishes an event with the specified input parameters.
            </summary>
            <remarks>
            <para>
            Repeated calls to <see cref="M:Macro.Common.Utilities.DelayedEventPublisher`1.Publish(System.Object,`0)"/> will cause
            only the most recent event parameters to be remembered until the delay
            timeout has expired, at which time only those event parameters will
            be used to publish the delayed event.
            </para>
            <para>
            When a delayed event is published, the <see cref="T:Macro.Common.Utilities.DelayedEventPublisher`1"/>
            goes into an idle state.  The next call to <see cref="M:Macro.Common.Utilities.DelayedEventPublisher`1.Publish(System.Object,`0)"/>
            starts the delayed publishing process over again.
            </para>
            </remarks>
            <param name="sender">The apparent sender of the event to be passed to the real event handler.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> to be passed to the real event handler.</param>
        </member>
        <member name="M:Macro.Common.Utilities.DelayedEventPublisher`1.PublishNow(System.Object,`0)">
            <summary>
            Publishes an event with the specified input parameters immediately. If there is a pending delayed event, it is discarded.
            </summary>
            <param name="sender">The apparent sender of the event to be passed to the real event handler.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> to be passed to the real event handler.</param>
        </member>
        <member name="T:Macro.Common.PluginManager">
            <summary>
            Loads plugin assemblies dynamically from disk and exposes meta-data about the set of installed
            plugins, extension points, and extensions to the application.
            </summary>
        </member>
        <member name="M:Macro.Common.PluginManager.EnableBackgroundAssemblyLoading(System.Boolean)">
            <summary>
            Enables or disables loading of any outstanding plugin assemblies on a background thread.
            </summary>
        </member>
        <member name="P:Macro.Common.PluginManager.Plugins">
            <summary>
            Gets information about the set of all installed plugins.
            </summary>
            <remarks>
            If plugins have not yet been loaded into memory, querying this property will cause them to be loaded.
            </remarks>
        </member>
        <member name="P:Macro.Common.PluginManager.Extensions">
            <summary>
            Gets information about the set of extensions defined across all installed plugins,
            including disabled and unlicensed extensions.
            </summary>
            <remarks>
            If plugins have not yet been loaded into memory, querying this property will cause them to be loaded.
            </remarks>
        </member>
        <member name="P:Macro.Common.PluginManager.ExtensionPoints">
            <summary>
            Gets information about the set of extension points defined across all installed plugins.  
            </summary>
            <remarks>
            If plugins have not yet been loaded into memory, querying this property will cause them to be loaded.
            </remarks>
        </member>
        <member name="E:Macro.Common.PluginManager.PluginLoaded">
            <summary>
            Occurs when a plugin is loaded.
            </summary>
        </member>
        <member name="T:Macro.Common.GuiToolkitID">
            <summary>
            Defines a set of identifiers representing different GUI toolkits.
            </summary>
        </member>
        <member name="F:Macro.Common.GuiToolkitID.WinForms">
            <summary>
            WinForms Gui Toolkit.
            </summary>
        </member>
        <member name="F:Macro.Common.GuiToolkitID.GTK">
            <summary>
            GTK (unix based platforms) Gui Toolkit.
            </summary>
        </member>
        <member name="F:Macro.Common.GuiToolkitID.Web">
            <summary>
            Generic Web Gui Toolkit.
            </summary>
        </member>
        <member name="T:Macro.Common.PluginLoader">
            <summary>
            Encapsulates logic for loading plugins and plugin meta-data from disk.
            </summary>
            <remarks>
            This class is used internally by the framework and is not intended for application use.
            </remarks>
        </member>
        <member name="M:Macro.Common.PluginLoader.LoadPluginInfo">
            <summary>
            Loads plugin meta-data, without necessarily loading the plugin assemblies.
            </summary>
            <remarks>
            Calling this method may load the plugin assemblies into memory, but only if cached meta-data cannot be found.
            </remarks>
        </member>
        <member name="E:Macro.Common.PluginLoader.PluginLoaded">
            <summary>
            Occurs when a plugin assembly was loaded into memory.
            </summary>
        </member>
        <member name="T:Macro.Common.ITimeProvider">
            <summary>
            An interface for a time provider.
            </summary>
            <remarks>
            The framework provides an <see cref="T:Macro.Common.ITimeProvider"/> (<see cref="P:Macro.Common.Platform.Time"/>),
            which uses the <see cref="T:Macro.Common.TimeProviderExtensionPoint"/> internally.
            </remarks>
        </member>
        <member name="P:Macro.Common.ITimeProvider.CurrentTime">
            <summary>
            Gets the current date and time.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.HttpFileTransfer">
            <summary>
            Provide access to remote files with Http scheme.
            </summary>
            <remarks>
            This provider class does not create remote directory before uploading files.
            </remarks>
        </member>
        <member name="T:Macro.Common.Utilities.IRemoteFileTransfer">
            <summary>
            Defines an interface for accessing remote files.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.IRemoteFileTransfer.Upload(Macro.Common.Utilities.FileTransferRequest)">
            <summary>
            Upload one file from local to remote.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Macro.Common.Utilities.IRemoteFileTransfer.Download(Macro.Common.Utilities.FileTransferRequest)">
            <summary>
            Download one file from remote to local
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Macro.Common.Utilities.HttpFileTransfer.#ctor">
            <summary>
            Default constructor with no authentication.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.HttpFileTransfer.#ctor(System.String,System.String)">
            <summary>
            Constructor with authentication provided.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.HttpFileTransfer.Upload(Macro.Common.Utilities.FileTransferRequest)">
            <summary>
            Upload one file from local to remote.
            </summary>
            <param name="request"></param>
            <remarks>
            The remote directories are not created before uploading files.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.HttpFileTransfer.Download(Macro.Common.Utilities.FileTransferRequest)">
            <summary>
            Download one file from remote to local
            </summary>
            <param name="request"></param>
        </member>
        <member name="T:Macro.Common.Utilities.FtpFileTransfer">
            <summary>
            Provide access to remote files using the FTP protocol.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.FtpFileTransfer.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.FtpFileTransfer.Upload(Macro.Common.Utilities.FileTransferRequest)">
            <summary>
            Upload one file from local to remote.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Macro.Common.Utilities.FtpFileTransfer.Download(Macro.Common.Utilities.FileTransferRequest)">
            <summary>
            Download one file from remote to local
            </summary>
            <param name="request"></param>
        </member>
        <member name="P:Macro.Common.Utilities.FtpFileTransfer.BaseUri">
            <summary>
            Get the base Uri for the FTP site.
            </summary>
        </member>
        <member name="T:Macro.Common.UsageTracking.IUsageTracking">
            <summary>
            Usage tracking service.
            </summary>
        </member>
        <member name="M:Macro.Common.UsageTracking.IUsageTracking.Register(Macro.Common.UsageTracking.RegisterRequest)">
            <summary>
            Register the startup of an application with the tracking service.
            </summary>
            <param name="request">The request</param>
            <returns>Returns a response, which may include a message to be displayed.</returns>
        </member>
        <member name="T:Macro.Common.Serialization.IJsmlSerializerHook">
            <summary>
            Defines an interface to an object that hooks into the JSML serialization process
            for the purpose of customizing it.
            </summary>
        </member>
        <member name="M:Macro.Common.Serialization.IJsmlSerializerHook.Serialize(Macro.Common.Serialization.IJsmlSerializationContext)">
            <summary>
            Called to allow the hook to perform custom serialization.
            </summary>
            <param name="context"></param>
            <returns>True if the hook has handled serialization, false otherwise.</returns>
        </member>
        <member name="M:Macro.Common.Serialization.IJsmlSerializerHook.Deserialize(Macro.Common.Serialization.IJsmlDeserializationContext)">
            <summary>
            Called to allow the hook to perform custom deserialization.
            </summary>
            <param name="context"></param>
            <returns>True if the hook has handled deserialization, false otherwise.</returns>
        </member>
        <member name="T:Macro.Common.Scripting.ScriptEngineOptionsAttribute">
            <summary>
            When applied to an extension of <see cref="T:Macro.Common.Scripting.ScriptEngineExtensionPoint"/>, specifies
            how that extension will be handled by the scripting framework.
            </summary>
        </member>
        <member name="P:Macro.Common.Scripting.ScriptEngineOptionsAttribute.Singleton">
            <summary>
            Gets or sets a value indicating whether this engine should be limited to a single instance.
            </summary>
        </member>
        <member name="P:Macro.Common.Scripting.ScriptEngineOptionsAttribute.SynchronizeAccess">
            <summary>
            Gets or sets a value indicating whether this engine requires access from multiple threads to be synchronized.
            </summary>
        </member>
        <member name="T:Macro.Common.DecryptedProductSettings">
            <summary>
            Provides some basic information about the product, such as the name and version.
            </summary>
        </member>
        <member name="P:Macro.Common.DecryptedProductSettings.Name">
            <summary>
            Gets the component marketing name.
            </summary>
        </member>
        <member name="P:Macro.Common.DecryptedProductSettings.FamilyName">
            <summary>
            Gets the product's family name.
            </summary>
        </member>
        <member name="P:Macro.Common.DecryptedProductSettings.Component">
            <summary>
            Gets the component name.
            </summary>
        </member>
        <member name="P:Macro.Common.DecryptedProductSettings.Product">
            <summary>
            Gets the product name.
            </summary>
        </member>
        <member name="P:Macro.Common.DecryptedProductSettings.Edition">
            <summary>
            Gets the product edition.
            </summary>
        </member>
        <member name="P:Macro.Common.DecryptedProductSettings.Release">
            <summary>
            Gets the product release type.
            </summary>
        </member>
        <member name="P:Macro.Common.DecryptedProductSettings.Version">
            <summary>
            Gets the product version.
            </summary>
        </member>
        <member name="P:Macro.Common.DecryptedProductSettings.VersionSuffix">
            <summary>
            Gets the product version suffix (e.g. "SP1").
            </summary>
        </member>
        <member name="P:Macro.Common.DecryptedProductSettings.Copyright">
            <summary>
            Gets the product copyright (e.g. "Copyright 2009 Macro Inc.").
            </summary>
        </member>
        <member name="P:Macro.Common.DecryptedProductSettings.License">
            <summary>
            Gets the product license.
            </summary>
        </member>
        <member name="T:Macro.Common.ProductInformation">
            <summary>
            Utility class for reading product identity information.
            </summary>
        </member>
        <member name="M:Macro.Common.ProductInformation.GetName(System.Boolean,System.Boolean)">
            <summary>
            Gets the component name, optionally with the product edition and/or release type.
            </summary>
            <param name="includeEdition">A value indciating whether or not to include the product edition in the name.</param>
            <param name="includeRelease">A value indicating whether or not to include the release type in the name.</param>
        </member>
        <member name="M:Macro.Common.ProductInformation.GetNameSuffix(System.Boolean,System.Boolean)">
            <summary>
            Gets the suffixes to the component name (i.e. the product edition and/or release type).
            </summary>
            <param name="includeEdition">A value indciating whether or not to include the product edition in the name.</param>
            <param name="includeRelease">A value indicating whether or not to include the release type in the name.</param>
        </member>
        <member name="M:Macro.Common.ProductInformation.GetNameAndVersion(System.Boolean,System.Boolean)">
            <summary>
            Gets a string containing both the component name, product edition, release type and version.
            </summary>
            <param name="includeBuildAndRevision">A value indicating whether or not to include the build and revision numbers in the version; False means only the major and minor numbers are included.</param>
            <param name="includeVersionSuffix">A value indicating whether or not to include the version suffix.</param>
        </member>
        <member name="M:Macro.Common.ProductInformation.GetNameAndVersion(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets a string containing both the component name and version, optionally with the product edition and/or release type.
            </summary>
            <param name="includeBuildAndRevision">A value indicating whether or not to include the build and revision numbers in the version; False means only the major and minor numbers are included.</param>
            <param name="includeVersionSuffix">A value indicating whether or not to include the version suffix.</param>
            <param name="includeEdition">A value indciating whether or not to include the product edition in the name.</param>
            <param name="includeRelease">A value indicating whether or not to include the release type in the name.</param>
        </member>
        <member name="M:Macro.Common.ProductInformation.GetVersion(System.Boolean,System.Boolean)">
            <summary>
            Gets the version as a string, optionally with build and revision numbers, and/or version suffix.
            </summary>
            <param name="includeBuildAndRevision">Specifies whether to include the build and revision numbers in the version; false means only the major and minor numbers are included.</param>
            <param name="includeVersionSuffix">Specifies whether to include the version suffix.</param>
        </member>
        <member name="M:Macro.Common.ProductInformation.GetVersion(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the version as a string, optionally with build and revision numbers, version suffix, and/or release type.
            </summary>
            <param name="includeBuildAndRevision">Specifies whether to include the build and revision numbers in the version; false means only the major and minor numbers are included.</param>
            <param name="includeVersionSuffix">Specifies whether to include the version suffix.</param>
            <param name="includeRelease">A value indicating whether or not to include the release type in the name.</param>
        </member>
        <member name="M:Macro.Common.ProductInformation.Concatenate(System.String[])">
            <summary>
            Concatenates a number of strings with spaces, skipping empty strings.
            </summary>
        </member>
        <member name="P:Macro.Common.ProductInformation.Name">
            <summary>
            Gets the component marketing name.
            </summary>
        </member>
        <member name="P:Macro.Common.ProductInformation.FamilyName">
            <summary>
            Gets the product's family name.
            </summary>
        </member>
        <member name="P:Macro.Common.ProductInformation.Component">
            <summary>
            Gets the component name.
            </summary>
        </member>
        <member name="P:Macro.Common.ProductInformation.Product">
            <summary>
            Gets the product name.
            </summary>
        </member>
        <member name="P:Macro.Common.ProductInformation.Edition">
            <summary>
            Gets the product edition.
            </summary>
        </member>
        <member name="P:Macro.Common.ProductInformation.Release">
            <summary>
            Gets the product release type.
            </summary>
        </member>
        <member name="P:Macro.Common.ProductInformation.Version">
            <summary>
            Gets the product version.
            </summary>
        </member>
        <member name="P:Macro.Common.ProductInformation.VersionSuffix">
            <summary>
            Gets the product version suffix (e.g. "SP1").
            </summary>
        </member>
        <member name="P:Macro.Common.ProductInformation.Copyright">
            <summary>
            Gets the product copyright (e.g. "Copyright 2009 Macro Inc.").
            </summary>
        </member>
        <member name="P:Macro.Common.ProductInformation.License">
            <summary>
            Gets the product license.
            </summary>
        </member>
        <member name="M:Macro.Common.ExtensionSettings.OrderExtensions(System.Collections.Generic.IEnumerable{Macro.Common.ExtensionInfo},System.Collections.Generic.List{Macro.Common.ExtensionInfo}@,System.Collections.Generic.List{Macro.Common.ExtensionInfo}@)">
            <summary>
            Orders the extensions according to the order specified by the XML document.
            </summary>
            <param name="input"></param>
            <param name="ordered"></param>
            <param name="remainder"></param>
        </member>
        <member name="M:Macro.Common.ExtensionSettings.IsEnabled(System.Type,System.Boolean)">
            <summary>
            Determines whether the specified extension class is enabled.
            </summary>
            <param name="extensionClass"></param>
            <param name="defaultEnablement"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.ExtensionSettings.ListExtensionNodes">
            <summary>
            List the stored extensions in the XML doc
            </summary>
            <returns>A list of "extension" element</returns>
        </member>
        <member name="T:Macro.Common.Utilities.SizeUnits">
            <summary>
            Memory and storage size units
            </summary>
        </member>
        <member name="F:Macro.Common.Utilities.SizeUnits.Bytes">
            <summary>
            Bytes
            </summary>
        </member>
        <member name="F:Macro.Common.Utilities.SizeUnits.Kilobytes">
            <summary>
            Kilobytes
            </summary>
        </member>
        <member name="F:Macro.Common.Utilities.SizeUnits.Megabytes">
            <summary>
            Megabytes
            </summary>
        </member>
        <member name="F:Macro.Common.Utilities.SizeUnits.Gigabytes">
            <summary>
            Gigabytes
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.SystemResources">
            <summary>
            Provides convenience methods for querying system resources.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.SystemResources.GetAvailableMemory(Macro.Common.Utilities.SizeUnits)">
            <summary>
            Gets the available physical memory.
            </summary>
            <param name="units"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.Common.PluginAttribute">
            <summary>
            Attribute used to mark an assembly as being a Macro Plugin.
            </summary>
        </member>
        <member name="M:Macro.Common.PluginAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.Common.PluginAttribute.Name">
            <summary>
            A friendly name for the plugin.  
            </summary>
            <remarks>
            This is optional and may be supplied as a named parameter.
            </remarks>
        </member>
        <member name="P:Macro.Common.PluginAttribute.Description">
            <summary>
            A friendly description for the plugin.  
            </summary>
            <remarks>
            This is optional and may be supplied as a named parameter.
            </remarks>
        </member>
        <member name="P:Macro.Common.PluginAttribute.Icon">
            <summary>
            The name of an icon resource to associate with the plugin.
            </summary>
        </member>
        <member name="T:Macro.Common.Scripting.LanguageSupportAttribute">
            <summary>
            Used to specify that a class (for example, an <see cref="T:Macro.Common.Scripting.IScriptEngine"/>) 
            supports a certain scripting language.
            </summary>
        </member>
        <member name="M:Macro.Common.Scripting.LanguageSupportAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="language">A string describing the language.</param>
        </member>
        <member name="M:Macro.Common.Scripting.LanguageSupportAttribute.Match(System.Object)">
            <summary>
            Determines whether or not this instance is the same as <paramref name="obj"/>, which is itself an <see cref="T:System.Attribute"/>.
            </summary>
        </member>
        <member name="P:Macro.Common.Scripting.LanguageSupportAttribute.Language">
            <summary>
            Gets a string describing the language.
            </summary>
        </member>
        <member name="T:Macro.Common.Statistics.AverageMessageCountStatistics">
            <summary>
            Average message count statistics.
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.AverageMessageCountStatistics.#ctor">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.AverageMessageCountStatistics"/>
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.AverageMessageCountStatistics.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.AverageMessageCountStatistics"/> with a specified name.
            </summary>
            <param name="name">Name of the <see cref="T:Macro.Common.Statistics.AverageMessageCountStatistics"/> to be created</param>
        </member>
        <member name="M:Macro.Common.Statistics.AverageMessageCountStatistics.#ctor(Macro.Common.Statistics.MessageCountStatistics)">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.AverageMessageCountStatistics"/> for a specified <see cref="T:Macro.Common.Statistics.MessageCountStatistics"/> object
            </summary>
            <param name="source">The <see cref="T:Macro.Common.Statistics.MessageCountStatistics"/> for which the <see cref="T:Macro.Common.Statistics.AverageMessageCountStatistics"/> to be created is based on</param>
        </member>
        <member name="M:Macro.Common.Statistics.AverageMessageCountStatistics.AddSample``1(``0)">
            <summary>
            Adds a sample to the <see cref="P:Macro.Common.Statistics.AverageStatistics`1.Samples"/> list.
            </summary>
            <typeparam name="TSample"></typeparam>
            <param name="sample"></param>
        </member>
        <member name="M:Macro.Common.Statistics.AverageMessageCountStatistics.ComputeAverage">
            <summary>
            Computes the average for the samples in <see cref="P:Macro.Common.Statistics.AverageStatistics`1.Samples"/> list.
            </summary>
        </member>
        <member name="T:Macro.Common.Actions.ActionSet`1">
            <summary>
            A class used to manage and execute a set of <see cref="T:System.Action`1"/> instances.
            </summary>
            <typeparam name="T">A context used by the <see cref="T:System.Action`1"/> instances.</typeparam>
        </member>
        <member name="T:Macro.Common.Actions.IActionSet`1">
            <summary>
            Interface representing a compiled set of actions returned by <see cref="T:Macro.Common.Actions.XmlActionCompiler`2"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Actions.IActionSet`1.Execute(`0)">
            <summary>
            Execute a set of actions.
            </summary>
            <param name="context">An implementation specific context for the actions.</param>
            <returns>A <see cref="T:Macro.Common.Specifications.TestResult"/> object describing the results.</returns>
        </member>
        <member name="M:Macro.Common.Actions.ActionSet`1.#ctor(System.Collections.Generic.IList{Macro.Common.Actions.IActionItem{`0}})">
            <summary>
            Constructor.
            </summary>
            <param name="list">The list of actions in the set.</param>
        </member>
        <member name="M:Macro.Common.Actions.ActionSet`1.Execute(`0)">
            <summary>
            Execute the actions associated with the set.
            </summary>
            <param name="context">The context used by the <see cref="T:System.Action`1"/> instances in the set.</param>
            <returns>A <see cref="T:Macro.Common.Specifications.TestResult"/> instance telling the result of executing the actions.</returns>
        </member>
        <member name="T:Macro.Common.UsageTracking.UsageApplicationData">
            <summary>
            Application specific Key/Value pair information for <see cref="T:Macro.Common.UsageTracking.UsageMessage"/>.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.UsageApplicationData.ExtensionData">
            <summary>
            Extensible data for serialization.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.UsageApplicationData.Key">
            <summary>
            Key/Value pair for application specific usage data.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.UsageApplicationData.Value">
            <summary>
            Key/Value pair for application specific usage data.
            </summary>
        </member>
        <member name="T:Macro.Common.UsageTracking.UsageType">
            <summary>
            The type of usage tracking message.
            </summary>
        </member>
        <member name="F:Macro.Common.UsageTracking.UsageType.Startup">
            <summary>
            The message is being sent at startup of the application.
            </summary>
        </member>
        <member name="F:Macro.Common.UsageTracking.UsageType.Shutdown">
            <summary>
            The message is being sent at shutdown of the application.
            </summary>
        </member>
        <member name="F:Macro.Common.UsageTracking.UsageType.Other">
            <summary>
            The message is being sent
            </summary>
        </member>
        <member name="T:Macro.Common.UsageTracking.UsageMessage">
            <summary>
            A product usage message for usage tracking.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.UsageMessage.ExtensionData">
            <summary>
            Extensible data for serialization.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.UsageMessage.MessageType">
            <summary>
            The type of usage tracking message
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.UsageMessage.Timestamp">
            <summary>
            The timestamp for the usage data.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.UsageMessage.Product">
            <summary>
            The product being tracked.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.UsageMessage.Component">
            <summary>
            The component being tracked.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.UsageMessage.Edition">
            <summary>
            The edition being tracked.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.UsageMessage.Release">
            <summary>
            Release type.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.UsageMessage.Version">
            <summary>
            The version of the product being tracked.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.UsageMessage.OS">
            <summary>
            The operating system version string the product is installed on.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.UsageMessage.Region">
            <summary>
            The region/culture information for the system that the product is installed on.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.UsageMessage.LicenseString">
            <summary>
            License String, if configured, for the product.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.UsageMessage.LicenseType">
            <summary>
            Short Description of the License Type, if exists, for the product.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.UsageMessage.LicenseExpiryTimeUTC">
            <summary>
            License Expiry Time, if exists, for the product.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.UsageMessage.MachineIdentifier">
            <summary>
            A unique machine identifier.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.UsageMessage.Certified">
            <summary>
            A unique machine identifier.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.UsageMessage.AllowDiagnosticUse">
            <summary>
            If the app is allowed for diagnostic use.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.UsageMessage.AppData">
            <summary>
            A set of application data specific to the <see cref="P:Macro.Common.UsageTracking.UsageMessage.Product"/>.
            </summary>
        </member>
        <member name="T:Macro.Common.LicenseInformation">
            <summary>
            Provides access to product licensing information.
            </summary>
        </member>
        <member name="M:Macro.Common.LicenseInformation.GetTrialStatus(System.Nullable{System.TimeSpan}@)">
            <summary>
            Gets the status if the license is for a limited-use trial.
            </summary>
            <param name="timeRemaining">Time remaining in trial period.</param>
            <returns>True if license is for a limited-use trial; False otherwise.</returns>
        </member>
        <member name="M:Macro.Common.LicenseInformation.IsFeatureAuthorized(System.String)">
            <summary>
            Checks if a specific feature is authorized by the license.
            </summary>
            <param name="featureToken"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.LicenseInformation.Reset">
            <summary>
            Forces license information to be reloaded when it is requested next time
            </summary>
        </member>
        <member name="E:Macro.Common.LicenseInformation.LicenseChanged">
            <summary>
            Notifies when the license information has changed.
            </summary>
        </member>
        <member name="P:Macro.Common.LicenseInformation.MachineIdentifier">
            <summary>
            Gets a unique identifier for the installation.
            </summary>
        </member>
        <member name="P:Macro.Common.LicenseInformation.LicenseKey">
            <summary>
            Gets or sets the product license key.
            </summary>
        </member>
        <member name="P:Macro.Common.LicenseInformation.LicenseType">
            <summary>
            Gets a string indicating the product license type.
            </summary>
        </member>
        <member name="P:Macro.Common.LicenseInformation.DiagnosticUse">
            <summary>
            Gets a value indicating the licensed diagnostic use of the product.
            </summary>
        </member>
        <member name="P:Macro.Common.LicenseInformation.FirstRun">
            <summary>
            Gets the date when the product was first run.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.ResourceResolver">
            <summary>
            Default implementation of <see cref="T:Macro.Common.Utilities.IResourceResolver"/>; finds resources embedded in assemblies.
            </summary>
            <remarks>
            Resolves resources by searching the set of assemblies (specified in the constructor)
            in order for a matching resource.  Instances of this class are immutable and thread-safe.
            </remarks>
        </member>
        <member name="T:Macro.Common.Utilities.IResourceResolver">
            <summary>
            Defines an interface that provides resource resolution services.
            </summary>
            <remarks>
            Resource resolution in this context involves accepting an unqualified or 
            partially qualified resource name as input and attempting to fully
            qualify the name so as to resolve the resource.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.IResourceResolver.LocalizeString(System.String)">
            <summary>
            Attempts to localize the specified unqualified string resource key.
            </summary>
            <remarks>
            Searches for a string resource entry that matches the specified key.
            </remarks>
            <param name="unqualifiedStringKey">The string resource key to search for.  Must not be qualified.</param>
            <returns>The localized string, or the argument unchanged if the key could not be found.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.IResourceResolver.OpenResource(System.String)">
            <summary>
            Attempts to return a fully qualified resource name from the specified name, which may be partially
            qualified or entirely unqualified.
            </summary>
            <param name="resourceName">A partially qualified or unqualified resource name.</param>
            <returns>A qualified resource name, if found, otherwise an exception is thrown.</returns>
            <exception cref="T:System.Resources.MissingManifestResourceException">if the resource name could not be resolved.</exception>
        </member>
        <member name="M:Macro.Common.Utilities.IResourceResolver.ResolveResource(System.String)">
            <summary>
            Attempts to resolve and open a resource from the specified name, which may be partially
            qualified or entirely unqualified.
            </summary>
            <param name="resourceName">A partially qualified or unqualified resource name.</param>
            <returns>A qualified resource name, if found, otherwise an exception is thrown.</returns>
            <exception cref="T:System.Resources.MissingManifestResourceException">if the resource name could not be resolved.</exception>
        </member>
        <member name="M:Macro.Common.Utilities.IResourceResolver.FindResources(System.Text.RegularExpressions.Regex)">
            <summary>
            Returns the set of resources whose name matches the specified regular expression.
            </summary>
            <param name="regex"></param>
            <returns></returns>
        </member>
        <member name="F:Macro.Common.Utilities.ResourceResolver._mapStringResourceManagers">
            <summary>
            Cache of string resource managers for each assembly.
            </summary>
            <remarks>
            This field is accessed in only one method, GetStringResourceManagers().  This 
            is important from a thread-sync point of view.
            </remarks>
        </member>
        <member name="F:Macro.Common.Utilities.ResourceResolver._assemblies">
            <summary>
            Assemblies to search for resources.
            </summary>
        </member>
        <member name="F:Macro.Common.Utilities.ResourceResolver._fallbackResolver">
            <summary>
            A fallback resolver, used when a resource cannot be resolved by this resolver.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ResourceResolver.#ctor(System.Reflection.Assembly[])">
            <summary>
            Constructs a resource resolver that will look in the specified set of assemblies for resources.
            </summary>
            <param name="assemblies">The set of assemblies to search.</param>
        </member>
        <member name="M:Macro.Common.Utilities.ResourceResolver.#ctor(System.Reflection.Assembly)">
            <summary>
            Constructs an object that will search the specified assembly.
            </summary>
            <param name="assembly">The assembly to search.</param>
        </member>
        <member name="M:Macro.Common.Utilities.ResourceResolver.#ctor(System.Reflection.Assembly,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Constructs a resource resolver that will look in the specified assembly for resources.
            </summary>
            <param name="assembly">The assembly to search.</param>
            <param name="fallback">The fallback <see cref="T:Macro.Common.Utilities.IResourceResolver"/> to use when an object cannot be resolved by this resolver.</param>
        </member>
        <member name="M:Macro.Common.Utilities.ResourceResolver.#ctor(System.Reflection.Assembly[],Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Constructs a resource resolver that will look in the specified set of assemblies for resources.
            </summary>
            <param name="assemblies">Assemblies covered by this resolver.</param>
            <param name="fallback">A fallback resolver, that will be invoked if resources are not found in the specified assemblies.</param>
        </member>
        <member name="M:Macro.Common.Utilities.ResourceResolver.#ctor(System.Type,System.Boolean)">
            <summary>
            Constructs a resource resolver that will find resources in the assembly containing the specified type,
            and optionally those assemblies containing its base types.
            </summary>
            <param name="type"></param>
            <param name="walkInheritanceChain">If true, assemblies containing base types of the specified type will also be included.</param>
        </member>
        <member name="M:Macro.Common.Utilities.ResourceResolver.#ctor(System.Type,System.Boolean,Macro.Common.Utilities.IResourceResolver)">
            <summary>
            Constructs a resource resolver that will find resources in the assembly containing the specified type,
            and optionally those assemblies containing its base types.
            </summary>
            <param name="type"></param>
            <param name="walkInheritanceChain">If true, assemblies containing base types of the specified type will also be included.</param>
            <param name="fallback"></param>
        </member>
        <member name="M:Macro.Common.Utilities.ResourceResolver.LocalizeString(System.String)">
            <summary>
            Attempts to localize the specified unqualified string resource key
            by searching the set of assemblies associated with this <see cref="T:Macro.Common.Utilities.ResourceResolver"/> in order.
            </summary>
            <remarks>
            Searches the assemblies for resources ending in "SR.resources", and searches those resources
            for a string matching the specified key.
            </remarks>
            <param name="unqualifiedStringKey">The string resource key to search for.  Must not be qualified.</param>
            <returns>The localized string, or the argument unchanged if the key could not be found.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.ResourceResolver.ResolveResource(System.String)">
            <summary>
            Attempts to return a fully qualified resource name from the specified name, which may be partially
            qualified or entirely unqualified, by searching the assemblies associated with this <see cref="T:Macro.Common.Utilities.ResourceResolver"/> in order.
            </summary>
            <param name="resourceName">A partially qualified or unqualified resource name.</param>
            <returns>A qualified resource name, if found, otherwise an exception is thrown.</returns>
            <exception cref="T:System.Resources.MissingManifestResourceException">if the resource name could not be resolved.</exception>
        </member>
        <member name="M:Macro.Common.Utilities.ResourceResolver.OpenResource(System.String)">
            <summary>
            Attempts to resolve and open a resource from the specified name, which may be partially
            qualified or entirely unqualified, by searching the assemblies associated with this <see cref="T:Macro.Common.Utilities.ResourceResolver"/> in order.
            </summary>
            <param name="resourceName">A partially qualified or unqualified resource name.</param>
            <returns>The loaded resource stream.</returns>
            <exception cref="T:System.Resources.MissingManifestResourceException">if the resource name could not be resolved.</exception>
        </member>
        <member name="M:Macro.Common.Utilities.ResourceResolver.FindResources(System.Text.RegularExpressions.Regex)">
            <summary>
            Returns the set of resources whose name matches the specified regular expression.
            </summary>
            <param name="regex">A regular expression to be used to select matching resources.</param>
            <returns>An array of fully qualified resource names that match the specified regular expression.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.ResourceResolver.ResolveResource(System.String,System.Reflection.Assembly)">
            <summary>
            Attempts to resolve a fully qualified resource name from the specified name, which may be partially qualified or entirely unqualified.
            </summary>
            <param name="resourceName">A partially qualified or unqualified resource name.</param>
            <param name="assembly">The assembly in which the resource is to be resolved.</param>
            <returns>A qualified resource name, if found, otherwise an exception is thrown.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.ResourceResolver.OpenResource(System.String,System.Reflection.Assembly)">
            <summary>
            Attempts to open the resource with the specified fully-qualified name.
            </summary>
            <param name="resourceFullName">A partially qualified or unqualified resource name.</param>
            <param name="assembly">The assembly from which the resource is to be opened.</param>
            <returns>The loaded resource stream.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.ResourceResolver.LocalizeString(System.String,System.Reflection.Assembly)">
            <summary>
            Attempts to localize the specified string table key from the specified assembly, checking all
            string resource files in arbitrary order.
            </summary>
            <remarks>
            The first match is returned, or null if no matches are found.
            </remarks>
            <param name="stringTableKey">The string table key to localize.</param>
            <param name="assembly">The assembly to look in.</param>
            <returns>The first string table entry that matches the specified key, or null if no matches are found.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.ResourceResolver.GetStringResourceManagers(System.Reflection.Assembly)">
            <summary>
            Returns a list of <see cref="T:System.Resources.ResourceManager"/>s, one for each string resource file that is present
            in the specified assembly.
            </summary>
            <remarks>
            The returned <see cref="T:System.Resources.ResourceManager"/>s can be used to localize strings.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.ResourceResolver.GetResourcesEndingWith(System.Reflection.Assembly,System.String)">
            <summary>
            Searches the specified assembly for resource files whose names end with the specified string.
            </summary>
            <param name="asm">The assembly to search.</param>
            <param name="endingWith">The string to match the end of the resource name with.</param>
        </member>
        <member name="M:Macro.Common.Utilities.ResourceResolver.GetAssembliesForType(System.Type,System.Boolean)">
            <summary>
            Returns the set of assemblies containing the specified type and all of its base types.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.ProcessItemDelegate`1">
            <summary>
            A strongly typed delegate for use with <see cref="T:Macro.Common.Utilities.ItemProcessingThreadPool`1"/>.
            </summary>
            <param name="item">A specific item to be passed to the delegate.</param>
        </member>
        <member name="T:Macro.Common.Utilities.ProcessItemCommand`1">
            <summary>
            A class used with <see cref="T:Macro.Common.Utilities.ItemProcessingThreadPool`1"/> to pass an item to a delgate
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ProcessItemCommand`1.#ctor(`0,Macro.Common.Utilities.ProcessItemDelegate{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="parameter">The item to pass to <paramref name="del"/></param>
            <param name="del">The delegate to call.</param>
        </member>
        <member name="M:Macro.Common.Utilities.ProcessItemCommand`1.Execute">
            <summary>
            Execute the delegate
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.ItemProcessingThreadPool`1">
            <summary>
            An implementation of <see cref="T:Macro.Common.Utilities.BlockingThreadPool`1"/> that processes <see cref="T:Macro.Common.Utilities.ProcessItemDelegate`1"/>s.
            </summary>
            <remarks>
            <para>
            ItemProcessingThreadPool allows for the creation of a thread pools for passing a strongly typed
            item to the delegate.
            </para>
            </remarks>
            <typeparam name="T">A specific type for passing to the delegate.</typeparam>
        </member>
        <member name="T:Macro.Common.Utilities.BlockingThreadPool`1">
            <summary>
            A blocking thread pool.
            </summary>
            <remarks>
            This class uses a <see cref="T:Macro.Common.Utilities.BlockingQueue`1"/> internally and processes
            items of type <typeparamref name="T"/> concurrently on multiple threads.
            </remarks>
            <typeparam name="T">The type of object to be processed by the thread pool.</typeparam>
        </member>
        <member name="M:Macro.Common.Utilities.BlockingThreadPool`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Protected constructor.
            </summary>
            <param name="concurrency">Defines the number of concurrent threads that will process enqueued items.</param>
            <param name="allowInactiveAdd">Specifies whether or not items can be added while the threads are not running.</param>
        </member>
        <member name="M:Macro.Common.Utilities.BlockingThreadPool`1.#ctor(System.Int32)">
            <summary>
            Protected constructor.
            </summary>
            <param name="concurrency">Defines the number of concurrent threads that will process enqueued items.</param>
        </member>
        <member name="M:Macro.Common.Utilities.BlockingThreadPool`1.#ctor">
            <summary>
            Protected constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.BlockingThreadPool`1.OnStart">
            <summary>
            Called before the thread pool is started.
            </summary>
            <remarks>
            Inheritors that override this method must first call the base method and 
            cannot return true if the base method returns false.
            </remarks>
            <returns>
            False if the thread pool is not in the <see cref="F:Macro.Common.Utilities.ThreadPoolBase.StartStopState.Stopped"/> 
            state, and thus cannot be started.
            </returns>
        </member>
        <member name="M:Macro.Common.Utilities.BlockingThreadPool`1.OnStop(System.Boolean)">
            <summary>
            Called before the thread pool is stopped.
            </summary>
            <remarks>
            Inheritors that override this method must first call the base method and 
            cannot return true if the base method returns false.
            </remarks>
            <returns>
            False if the thread pool is not in the <see cref="F:Macro.Common.Utilities.ThreadPoolBase.StartStopState.Started"/> 
            state, and thus cannot be stopped.
            </returns>
        </member>
        <member name="M:Macro.Common.Utilities.BlockingThreadPool`1.Enqueue(`0)">
            <summary>
            Adds an item of type <typeparamref name="T"/> to the queue.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Macro.Common.Utilities.BlockingThreadPool`1.RunThread">
            <summary>
            The method that each thread in the thread pool will run on.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.BlockingThreadPool`1.ProcessItem(`0)">
            <summary>
            Inheritors must override this method in order to perform processing on items.
            </summary>
            <remarks>
            This method is called from within the <see cref="M:Macro.Common.Utilities.BlockingThreadPool`1.RunThread"/> 
            method to process each item that has been taken from the queue.
            </remarks>
        </member>
        <member name="P:Macro.Common.Utilities.BlockingThreadPool`1.AllowInactiveAdd">
            <summary>
            Specifies whether or not items to be processed can be added while the thread pool is not running.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.BlockingThreadPool`1.SleepTimeMilliseconds">
            <summary>
            Specifies an amount of time, in milliseconds, for each thread to sleep between processing items.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.BlockingThreadPool`1.QueueCount">
            <summary>
            Gets the number of items remaining in the queue.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.BlockingThreadPool`1.ActiveCount">
            <summary>
            The current number of active threads in the queue.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ItemProcessingThreadPool`1.Enqueue(`0,Macro.Common.Utilities.ProcessItemDelegate{`0})">
            <summary>
            Adds an item to the queue.
            </summary>
            <param name="del">The delegate to enqueue.</param>
            <param name="parameter">The parameter to pass to the delegate when it is executed.</param>
        </member>
        <member name="M:Macro.Common.Utilities.ItemProcessingThreadPool`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="concurrency">Defines the number of concurrent threads that will process enqueued items.</param>
            <param name="allowInactiveAdd">Specifies whether or not items can be added while the threads are not running.</param>
        </member>
        <member name="M:Macro.Common.Utilities.ItemProcessingThreadPool`1.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="concurrency">Defines the number of concurrent threads that will process enqueued items.</param>
        </member>
        <member name="M:Macro.Common.Utilities.ItemProcessingThreadPool`1.#ctor">
            <summary>
            Protected constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ItemProcessingThreadPool`1.ProcessItem(Macro.Common.Utilities.ProcessItemCommand{`0})">
            <summary>
            Called by one of the threads in the pool when a <see cref="T:Macro.Common.Utilities.ProcessItemDelegate`1"/> is about to be processed.
            </summary>
            <param name="parm">The delegate that will be executed by this method call.</param>
        </member>
        <member name="T:Macro.Common.Utilities.SimpleBlockingThreadPoolDelegate">
            <summary>
            A simple delegate for use in a <see cref="T:Macro.Common.Utilities.SimpleBlockingThreadPool"/>.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.SimpleBlockingThreadPool">
            <summary>
            An implementation of <see cref="T:Macro.Common.Utilities.BlockingThreadPool`1"/> that processes <see cref="T:Macro.Common.Utilities.SimpleBlockingThreadPoolDelegate"/>s.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.SimpleBlockingThreadPool.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="concurrency">Defines the number of concurrent threads that will process enqueued items.</param>
            <param name="allowInactiveAdd">Specifies whether or not items can be added while the threads are not running.</param>
        </member>
        <member name="M:Macro.Common.Utilities.SimpleBlockingThreadPool.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="concurrency">Defines the number of concurrent threads that will process enqueued items.</param>
        </member>
        <member name="M:Macro.Common.Utilities.SimpleBlockingThreadPool.#ctor">
            <summary>
            Protected constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.SimpleBlockingThreadPool.ProcessItem(Macro.Common.Utilities.SimpleBlockingThreadPoolDelegate)">
            <summary>
            Called by one of the threads in the pool when a <see cref="T:Macro.Common.Utilities.SimpleBlockingThreadPoolDelegate"/> is about to be processed.
            </summary>
            <param name="del">The delegate that will be executed by this method call.</param>
        </member>
        <member name="T:Macro.Common.Scripting.ScriptEngineExtensionPoint">
            <summary>
            Extension point for <see cref="T:Macro.Common.Scripting.IScriptEngine"/>s.
            </summary>
        </member>
        <member name="T:Macro.Common.Scripting.ScriptEngineFactory">
            <summary>
            Factory for creating instances of <see cref="T:Macro.Common.Scripting.IScriptEngine"/>s that support a given language.
            </summary>
        </member>
        <member name="M:Macro.Common.Scripting.ScriptEngineFactory.GetEngine(System.String)">
            <summary>
            Attempts to instantiate a script engine for the specified language. 
            </summary>
            <remarks>
            <para>
            Internally, this class looks for an extension of <see cref="T:Macro.Common.Scripting.ScriptEngineExtensionPoint"/> 
            that is capable of running scripts in the specified language.
            In order to be considered a match, extensions must be decorated with a 
            <see cref="T:Macro.Common.Scripting.LanguageSupportAttribute"/> matching the <paramref name="language"/> parameter.
            </para>
            <para>
            If the engine is marked as a singleton, and a cached instance already exists, that instance will
            be returned.
            </para>
            <para>
            This method can safely be called by multiple threads.
            </para>
            </remarks>
            <param name="language">The case-insensitive script language, so jscript is equivalent to JScript.</param>
        </member>
        <member name="T:Macro.Common.log4net.RollingFileAppender">
            <summary>
            Appender that rolls log files based on size or date or both.
            </summary>
            <remarks>
            <para>
            RollingFileAppender can roll log files based on size or date or both
            depending on the setting of the <see cref="P:Macro.Common.log4net.RollingFileAppender.RollingStyle"/> property.
            When set to <see cref="F:Macro.Common.log4net.RollingFileAppender.RollingMode.Size"/> the log file will be rolled
            once its size exceeds the <see cref="P:Macro.Common.log4net.RollingFileAppender.MaximumFileSize"/>.
            When set to <see cref="F:Macro.Common.log4net.RollingFileAppender.RollingMode.Date"/> the log file will be rolled
            once the date boundary specified in the <see cref="P:Macro.Common.log4net.RollingFileAppender.DatePattern"/> property
            is crossed.
            When set to <see cref="F:Macro.Common.log4net.RollingFileAppender.RollingMode.Composite"/> the log file will be
            rolled once the date boundary specified in the <see cref="P:Macro.Common.log4net.RollingFileAppender.DatePattern"/> property
            is crossed, but within a date boundary the file will also be rolled
            once its size exceeds the <see cref="P:Macro.Common.log4net.RollingFileAppender.MaximumFileSize"/>.
            When set to <see cref="F:Macro.Common.log4net.RollingFileAppender.RollingMode.Once"/> the log file will be rolled when
            the appender is configured. This effectively means that the log file can be
            rolled once per program execution.
            </para>
            <para>
            A of few additional optional features have been added:
            <list type="bullet">
            <item>Attach date pattern for current log file <see cref="P:Macro.Common.log4net.RollingFileAppender.StaticLogFileName"/></item>
            <item>Backup number increments for newer files <see cref="P:Macro.Common.log4net.RollingFileAppender.CountDirection"/></item>
            <item>Infinite number of backups by file size <see cref="P:Macro.Common.log4net.RollingFileAppender.MaxSizeRollBackups"/></item>
            </list>
            </para>
            
            <note>
            <para>
            For large or infinite numbers of backup files a <see cref="P:Macro.Common.log4net.RollingFileAppender.CountDirection"/> 
            greater than zero is highly recommended, otherwise all the backup files need
            to be renamed each time a new backup is created.
            </para>
            <para>
            When Date/Time based rolling is used setting <see cref="P:Macro.Common.log4net.RollingFileAppender.StaticLogFileName"/> 
            to <see langword="true"/> will reduce the number of file renamings to few or none.
            </para>
            </note>
            
            <note type="caution">
            <para>
            Changing <see cref="P:Macro.Common.log4net.RollingFileAppender.StaticLogFileName"/> or <see cref="P:Macro.Common.log4net.RollingFileAppender.CountDirection"/> without clearing
            the log file directory of backup files will cause unexpected and unwanted side effects.  
            </para>
            </note>
            
            <para>
            If Date/Time based rolling is enabled this appender will attempt to roll existing files
            in the directory without a Date/Time tag based on the last write date of the base log file.
            The appender only rolls the log file when a message is logged. If Date/Time based rolling 
            is enabled then the appender will not roll the log file at the Date/Time boundary but
            at the point when the next message is logged after the boundary has been crossed.
            </para>
            
            <para>
            The <see cref="T:Macro.Common.log4net.RollingFileAppender"/> extends the <see cref="T:Macro.Common.log4net.FileAppender"/> and
            has the same behavior when opening the log file.
            The appender will first try to open the file for writing when <see cref="M:Macro.Common.log4net.RollingFileAppender.ActivateOptions"/>
            is called. This will typically be during configuration.
            If the file cannot be opened for writing the appender will attempt
            to open the file again each time a message is logged to the appender.
            If the file cannot be opened for writing when a message is logged then
            the message will be discarded by this appender.
            </para>
            <para>
            When rolling a backup file necessitates deleting an older backup file the
            file to be deleted is moved to a temporary name before being deleted.
            </para>
            
            <note type="caution">
            <para>
            A maximum number of backup files when rolling on date/time boundaries is not supported.
            </para>
            </note>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Aspi Havewala</author>
            <author>Douglas de la Torre</author>
            <author>Edward Smit</author>
        </member>
        <member name="T:Macro.Common.log4net.FileAppender">
            <summary>
            Appends logging events to a file.
            </summary>
            <remarks>
            <para>
            Logging events are sent to the file specified by
            the <see cref="P:Macro.Common.log4net.FileAppender.File"/> property.
            </para>
            <para>
            The file can be opened in either append or overwrite mode 
            by specifying the <see cref="P:Macro.Common.log4net.FileAppender.AppendToFile"/> property.
            If the file path is relative it is taken as relative from 
            the application base directory. The file encoding can be
            specified by setting the <see cref="P:Macro.Common.log4net.FileAppender.Encoding"/> property.
            </para>
            <para>
            The layout's <see cref="P:log4net.Layout.ILayout.Header"/> and <see cref="P:log4net.Layout.ILayout.Footer"/>
            values will be written each time the file is opened and closed
            respectively. If the <see cref="P:Macro.Common.log4net.FileAppender.AppendToFile"/> property is <see langword="true"/>
            then the file may contain multiple copies of the header and footer.
            </para>
            <para>
            This appender will first try to open the file for writing when <see cref="M:Macro.Common.log4net.FileAppender.ActivateOptions"/>
            is called. This will typically be during configuration.
            If the file cannot be opened for writing the appender will attempt
            to open the file again each time a message is logged to the appender.
            If the file cannot be opened for writing when a message is logged then
            the message will be discarded by this appender.
            </para>
            <para>
            The <see cref="T:Macro.Common.log4net.FileAppender"/> supports pluggable file locking models via
            the <see cref="P:Macro.Common.log4net.FileAppender.LockingModel"/> property.
            The default behavior, implemented by <see cref="T:Macro.Common.log4net.FileAppender.MutexLock"/> 
            is to use a Mutex to lock the file across processe
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Rodrigo B. de Oliveira</author>
            <author>Douglas de la Torre</author>
            <author>Niall Daley</author>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            <para>
            Default constructor
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.#ctor(log4net.Layout.ILayout,System.String,System.Boolean)">
            <summary>
            Construct a new appender using the layout, file and append mode.
            </summary>
            <param name="layout">the layout to use with this appender</param>
            <param name="filename">the full path to the file to write to</param>
            <param name="append">flag to indicate if the file should be appended to</param>
            <remarks>
            <para>
            Obsolete constructor.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.#ctor(log4net.Layout.ILayout,System.String)">
            <summary>
            Construct a new appender using the layout and file specified.
            The file will be appended to.
            </summary>
            <param name="layout">the layout to use with this appender</param>
            <param name="filename">the full path to the file to write to</param>
            <remarks>
            <para>
            Obsolete constructor.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.ActivateOptions">
            <summary>
            Activate the options on the file appender. 
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:Macro.Common.log4net.FileAppender.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:Macro.Common.log4net.FileAppender.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:Macro.Common.log4net.FileAppender.ActivateOptions"/> must be called again.
            </para>
            <para>
            This will cause the file to be opened.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.Reset">
            <summary>
            Closes any previously opened file and calls the parent's <see cref="M:log4net.Appender.TextWriterAppender.Reset"/>.
            </summary>
            <remarks>
            <para>
            Resets the filename and the file stream.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.PrepareWriter">
            <summary>
            Called to initialize the file writer
            </summary>
            <remarks>
            <para>
            Will be called for each logged message until the file is
            successfully opened.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)"/>
            method. 
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
            <para>
            Writes a log statement to the output stream if the output stream exists 
            and is writable.  
            </para>
            <para>
            The format of the output will depend on the appender's layout.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.Append(log4net.Core.LoggingEvent[])">
            <summary>
            This method is called by the <see cref="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent[])"/>
            method. 
            </summary>
            <param name="loggingEvents">The array of events to log.</param>
            <remarks>
            <para>
            Acquires the output file locks once before writing all the events to
            the stream.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.WriteFooter">
            <summary>
            Writes a footer as produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Footer"/> property.
            </summary>
            <remarks>
            <para>
            Writes a footer as produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Footer"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.WriteHeader">
            <summary>
            Writes a header produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Header"/> property.
            </summary>
            <remarks>
            <para>
            Writes a header produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Header"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.CloseWriter">
            <summary>
            Closes the underlying <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <remarks>
            <para>
            Closes the underlying <see cref="T:System.IO.TextWriter"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.CloseFile">
            <summary>
            Closes the previously opened file.
            </summary>
            <remarks>
            <para>
            Writes the <see cref="P:log4net.Layout.ILayout.Footer"/> to the file and then
            closes the file.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.SafeOpenFile(System.String,System.Boolean)">
            <summary>
            Sets and <i>opens</i> the file where the log output will go. The specified file must be writable.
            </summary>
            <param name="fileName">The path to the log file. Must be a fully qualified path.</param>
            <param name="append">If true will append to fileName. Otherwise will truncate fileName</param>
            <remarks>
            <para>
            Calls <see cref="M:Macro.Common.log4net.FileAppender.OpenFile(System.String,System.Boolean)"/> but guarantees not to throw an exception.
            Errors are passed to the <see cref="P:log4net.Appender.TextWriterAppender.ErrorHandler"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.OpenFile(System.String,System.Boolean)">
            <summary>
            Sets and <i>opens</i> the file where the log output will go. The specified file must be writable.
            </summary>
            <param name="fileName">The path to the log file. Must be a fully qualified path.</param>
            <param name="append">If true will append to fileName. Otherwise will truncate fileName</param>
            <remarks>
            <para>
            If there was already an opened file, then the previous file
            is closed first.
            </para>
            <para>
            This method will ensure that the directory structure
            for the <paramref name="fileName"/> specified exists.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.SetQWForFiles(System.IO.Stream)">
            <summary>
            Sets the quiet writer used for file output
            </summary>
            <param name="fileStream">the file stream that has been opened for writing</param>
            <remarks>
            <para>
            This implementation of <see cref="M:Macro.Common.log4net.FileAppender.SetQWForFiles(System.IO.Stream)"/> creates a <see cref="T:System.IO.StreamWriter"/>
            over the <paramref name="fileStream"/> and passes it to the 
            <see cref="M:Macro.Common.log4net.FileAppender.SetQWForFiles(System.IO.TextWriter)"/> method.
            </para>
            <para>
            This method can be overridden by sub classes that want to wrap the
            <see cref="T:System.IO.Stream"/> in some way, for example to encrypt the output
            data using a <c>System.Security.Cryptography.CryptoStream</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.SetQWForFiles(System.IO.TextWriter)">
            <summary>
            Sets the quiet writer being used.
            </summary>
            <param name="writer">the writer over the file stream that has been opened for writing</param>
            <remarks>
            <para>
            This method can be overridden by sub classes that want to
            wrap the <see cref="T:System.IO.TextWriter"/> in some way.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.ConvertToFullPath(System.String)">
            <summary>
            Convert a path into a fully qualified path.
            </summary>
            <param name="path">The path to convert.</param>
            <returns>The fully qualified path.</returns>
            <remarks>
            <para>
            Converts the path specified to a fully
            qualified path. If the path is relative it is
            taken as relative from the application base 
            directory.
            </para>
            </remarks>
        </member>
        <member name="F:Macro.Common.log4net.FileAppender.m_appendToFile">
            <summary>
            Flag to indicate if we should append to the file
            or overwrite the file. The default is to append.
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.FileAppender.m_fileName">
            <summary>
            The name of the log file.
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.FileAppender.m_encoding">
            <summary>
            The encoding to use for the file stream.
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.FileAppender.m_securityContext">
            <summary>
            The security context to use for privileged calls
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.FileAppender.m_stream">
            <summary>
            The stream to log to. Has added locking semantics
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.FileAppender.m_lockingModel">
            <summary>
            The locking model to use
            </summary>
        </member>
        <member name="P:Macro.Common.log4net.FileAppender.File">
            <summary>
            Gets or sets the path to the file that logging will be written to.
            </summary>
            <value>
            The path to the file that logging will be written to.
            </value>
            <remarks>
            <para>
            If the path is relative it is taken as relative from 
            the application base directory.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.Common.log4net.FileAppender.AppendToFile">
            <summary>
            Gets or sets a flag that indicates whether the file should be
            appended to or overwritten.
            </summary>
            <value>
            Indicates whether the file should be appended to or overwritten.
            </value>
            <remarks>
            <para>
            If the value is set to false then the file will be overwritten, if 
            it is set to true then the file will be appended to.
            </para>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Macro.Common.log4net.FileAppender.Encoding">
            <summary>
            Gets or sets <see cref="P:Macro.Common.log4net.FileAppender.Encoding"/> used to write to the file.
            </summary>
            <value>
            The <see cref="P:Macro.Common.log4net.FileAppender.Encoding"/> used to write to the file.
            </value>
            <remarks>
            <para>
            The default encoding set is <see cref="P:System.Text.Encoding.Default"/>
            which is the encoding for the system's current ANSI code page.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.Common.log4net.FileAppender.SecurityContext">
            <summary>
            Gets or sets the <see cref="P:Macro.Common.log4net.FileAppender.SecurityContext"/> used to write to the file.
            </summary>
            <value>
            The <see cref="P:Macro.Common.log4net.FileAppender.SecurityContext"/> used to write to the file.
            </value>
            <remarks>
            <para>
            Unless a <see cref="P:Macro.Common.log4net.FileAppender.SecurityContext"/> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider"/> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.Common.log4net.FileAppender.LockingModel">
            <summary>
            Gets or sets the <see cref="P:Macro.Common.log4net.FileAppender.LockingModel"/> used to handle locking of the file.
            </summary>
            <value>
            The <see cref="P:Macro.Common.log4net.FileAppender.LockingModel"/> used to lock the file.
            </value>
            <remarks>
            <para>
            Gets or sets the <see cref="P:Macro.Common.log4net.FileAppender.LockingModel"/> used to handle locking of the file.
            </para>
            <para>
            There are two built in locking models, <see cref="T:Macro.Common.log4net.FileAppender.MutexLock"/>.
            The former locks the file from the start of logging to the end and the 
            later lock only for the minimal amount of time when logging each message.
            </para>
            <para>
            The default locking model is the <see cref="T:Macro.Common.log4net.FileAppender.MutexLock"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Macro.Common.log4net.FileAppender.LockingStream">
            <summary>
            Write only <see cref="T:System.IO.Stream"/> that uses the <see cref="T:Macro.Common.log4net.FileAppender.LockingModelBase"/> 
            to manage access to an underlying resource.
            </summary>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingStream.#ctor(Macro.Common.log4net.FileAppender.LockingModelBase,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="locking">The locking model.</param>
            <param name="lockLevel">The lock level.</param>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begin read.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            True asynchronous writes are not supported, the implementation forces a synchronous write.
            </summary>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingStream.Close">
            <summary>
            Close the log file.
            </summary>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingStream.EndRead(System.IAsyncResult)">
            <summary>
            End an asynchronous read.
            </summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingStream.EndWrite(System.IAsyncResult)">
            <summary>
            End an asychronous write.
            </summary>
            <param name="asyncResult"></param>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingStream.Flush">
            <summary>
            Flush write data.
            </summary>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingStream.ReadByte">
            <summary>
            Read a byte from the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek in the stream.
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingStream.SetLength(System.Int64)">
            <summary>
            Set the length of the stream.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingStream.System#IDisposable#Dispose">
            <summary>
            Dispose the stream.
            </summary>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingStream.WriteByte(System.Byte)">
            <summary>
            Write a byte to the stream.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingStream.Reopen">
            <summary>
            Reopen the file.
            </summary>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingStream.AcquireLock">
            <summary>
            Acquire a lock on the file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingStream.ReleaseLock">
            <summary>
            Release a lock on the file.
            </summary>
        </member>
        <member name="P:Macro.Common.log4net.FileAppender.LockingStream.LockLevel">
            <summary>
            The Lock level.
            </summary>
        </member>
        <member name="P:Macro.Common.log4net.FileAppender.LockingStream.CanRead">
            <summary>
            Can the stream read?
            </summary>
        </member>
        <member name="P:Macro.Common.log4net.FileAppender.LockingStream.CanSeek">
            <summary>
            Can the stream seek?
            </summary>
        </member>
        <member name="P:Macro.Common.log4net.FileAppender.LockingStream.CanWrite">
            <summary>
            Can the stream write?
            </summary>
        </member>
        <member name="P:Macro.Common.log4net.FileAppender.LockingStream.Length">
            <summary>
            What is the length of the stream?
            </summary>
        </member>
        <member name="P:Macro.Common.log4net.FileAppender.LockingStream.Position">
            <summary>
            what is the current position within the stream?
            </summary>
        </member>
        <member name="T:Macro.Common.log4net.FileAppender.LockingStream.LockStateException">
            <summary>
            Exception based on the LockState.
            </summary>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingStream.LockStateException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="T:Macro.Common.log4net.FileAppender.LockingModelBase">
            <summary>
            Locking model base class
            </summary>
            <remarks>
            <para>
            Base class for the locking models available to the <see cref="T:Macro.Common.log4net.FileAppender"/> derived loggers.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingModelBase.ReopenFile">
            <summary>
            Reopen the file.
            </summary>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingModelBase.OpenFile(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Open the output file
            </summary>
            <param name="filename">The filename to use</param>
            <param name="append">Whether to append to the file, or overwrite</param>
            <param name="encoding">The encoding to use</param>
            <remarks>
            <para>
            Open the file specified and prepare for logging. 
            No writes will be made until <see cref="M:Macro.Common.log4net.FileAppender.LockingModelBase.AcquireLock"/> is called.
            Must be called before any calls to <see cref="M:Macro.Common.log4net.FileAppender.LockingModelBase.AcquireLock"/>,
            <see cref="M:Macro.Common.log4net.FileAppender.LockingModelBase.ReleaseLock"/> and <see cref="M:Macro.Common.log4net.FileAppender.LockingModelBase.CloseFile"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingModelBase.CloseFile">
            <summary>
            Close the file
            </summary>
            <remarks>
            <para>
            Close the file. No further writes will be made.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingModelBase.AcquireLock">
            <summary>
            Acquire the lock on the file
            </summary>
            <returns>A stream that is ready to be written to.</returns>
            <remarks>
            <para>
            Acquire the lock on the file in preparation for writing to it. 
            Return a stream pointing to the file. <see cref="M:Macro.Common.log4net.FileAppender.LockingModelBase.ReleaseLock"/>
            must be called to release the lock on the output file.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.LockingModelBase.ReleaseLock">
            <summary>
            Release the lock on the file
            </summary>
            <remarks>
            <para>
            Release the lock on the file. No further writes will be made to the 
            stream until <see cref="M:Macro.Common.log4net.FileAppender.LockingModelBase.AcquireLock"/> is called again.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.Common.log4net.FileAppender.LockingModelBase.Stream">
            <summary>
             The underlying stream for the file.
            </summary>
        </member>
        <member name="P:Macro.Common.log4net.FileAppender.LockingModelBase.Locked">
            <summary>
            Is it locked?
            </summary>
        </member>
        <member name="P:Macro.Common.log4net.FileAppender.LockingModelBase.CurrentAppender">
            <summary>
            Gets or sets the <see cref="T:Macro.Common.log4net.FileAppender"/> for this LockingModel
            </summary>
            <value>
            The <see cref="T:Macro.Common.log4net.FileAppender"/> for this LockingModel
            </value>
            <remarks>
            <para>
            The file appender this locking model is attached to and working on
            behalf of.
            </para>
            <para>
            The file appender is used to locate the security context and the error handler to use.
            </para>
            <para>
            The value of this property will be set before <see cref="M:Macro.Common.log4net.FileAppender.LockingModelBase.OpenFile(System.String,System.Boolean,System.Text.Encoding)"/> is
            called.
            </para>
            </remarks>
        </member>
        <member name="T:Macro.Common.log4net.FileAppender.MutexLock">
            <summary>
            Class that represents a mutex based locking
            model
            </summary>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.MutexLock.ReopenFile">
            <summary>
            Reopen the log file.
            </summary>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.MutexLock.OpenFile(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Prepares to open the file when the first message is logged.
            </summary>
            <param name="filename">The filename to use</param>
            <param name="append">Whether to append to the file, or overwrite</param>
            <param name="encoding">The encoding to use</param>
            <remarks>
            <para>
            Open the file specified and prepare for logging. 
            No writes will be made until <see cref="M:Macro.Common.log4net.FileAppender.MutexLock.AcquireLock"/> is called.
            Must be called before any calls to <see cref="M:Macro.Common.log4net.FileAppender.MutexLock.AcquireLock"/>,
            <see cref="M:Macro.Common.log4net.FileAppender.MutexLock.ReleaseLock"/> and <see cref="M:Macro.Common.log4net.FileAppender.MutexLock.CloseFile"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.MutexLock.CloseFile">
            <summary>
            Close the file
            </summary>
            <remarks>
            <para>
            Close the file. No further writes will be made.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.MutexLock.AcquireLock">
            <summary>
            Acquire the lock on the file
            </summary>
            <returns>A stream that is ready to be written to.</returns>
            <remarks>
            <para>
            Acquire the lock on the file in preparation for writing to it. 
            Return a stream pointing to the file. <see cref="M:Macro.Common.log4net.FileAppender.MutexLock.ReleaseLock"/>
            must be called to release the lock on the output file.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.MutexLock.ReleaseLock">
            <summary>
            Release the lock on the file
            </summary>
            <remarks>
            <para>
            Release the lock on the file. No further writes will be made to the 
            stream until <see cref="M:Macro.Common.log4net.FileAppender.MutexLock.AcquireLock"/> is called again.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.FileAppender.MutexLock.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
        </member>
        <member name="P:Macro.Common.log4net.FileAppender.MutexLock.Locked">
            <summary>
            Locked property.
            </summary>
        </member>
        <member name="P:Macro.Common.log4net.FileAppender.MutexLock.Stream">
            <summary>
            The underlying stream.
            </summary>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Macro.Common.log4net.RollingFileAppender"/> class.
            </summary>
            <remarks>
            <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.declaringType">
            <summary>
            The fully qualified type of the RollingFileAppender class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.SetQWForFiles(System.IO.TextWriter)">
            <summary>
            Sets the quiet writer being used.
            </summary>
            <remarks>
            This method can be overridden by sub classes.
            </remarks>
            <param name="writer">the writer to set</param>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            Write out a logging event.
            </summary>
            <param name="loggingEvent">the event to write to file.</param>
            <remarks>
            <para>
            Handles append time behavior for RollingFileAppender.  This checks
            if a roll over either by date (checked first) or time (checked second)
            is need and then appends to the file last.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.Append(log4net.Core.LoggingEvent[])">
            <summary>
            Write out an array of logging events.
            </summary>
            <param name="loggingEvents">the events to write to file.</param>
            <remarks>
            <para>
            Handles append time behavior for RollingFileAppender.  This checks
            if a roll over either by date (checked first) or time (checked second)
            is need and then appends to the file last.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.AdjustFileBeforeAppend">
            <summary>
            Performs any required rolling before outputting the next event
            </summary>
            <remarks>
            <para>
            Handles append time behavior for RollingFileAppender.  This checks
            if a roll over either by date (checked first) or time (checked second)
            is need and then appends to the file last.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.OpenFile(System.String,System.Boolean)">
            <summary>
            Creates and opens the file for logging.  If <see cref="P:Macro.Common.log4net.RollingFileAppender.StaticLogFileName"/>
            is false then the fully qualified name is determined and used.
            </summary>
            <param name="fileName">the name of the file to open</param>
            <param name="append">true to append to existing file</param>
            <remarks>
            <para>This method will ensure that the directory structure
            for the <paramref name="fileName"/> specified exists.</para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.GetNextOutputFileName(System.String)">
            <summary>
            Get the current output file name
            </summary>
            <param name="fileName">the base file name</param>
            <returns>the output file name</returns>
            <remarks>
            The output file name is based on the base fileName specified.
            If <see cref="P:Macro.Common.log4net.RollingFileAppender.StaticLogFileName"/> is set then the output 
            file name is the same as the base file passed in. Otherwise
            the output file depends on the date pattern, on the count
            direction or both.
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.DetermineCurSizeRollBackups">
            <summary>
            Determines curSizeRollBackups (only within the current roll point)
            </summary>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.GetWildcardPatternForFile(System.String)">
            <summary>
            Generates a wildcard pattern that can be used to find all files
            that are similar to the base file name.
            </summary>
            <param name="baseFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.GetExistingFiles(System.String)">
            <summary>
            Builds a list of filenames for all files matching the base filename plus a file
            pattern.
            </summary>
            <param name="baseFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.RollOverIfDateBoundaryCrossing">
            <summary>
            Initiates a roll over if needed for crossing a date boundary since the last run.
            </summary>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.ExistingInit">
            <summary>
            Initializes based on existing conditions at time of <see cref="M:Macro.Common.log4net.RollingFileAppender.ActivateOptions"/>.
            </summary>
            <remarks>
            <para>
            Initializes based on existing conditions at time of <see cref="M:Macro.Common.log4net.RollingFileAppender.ActivateOptions"/>.
            The following is done
            <list type="bullet">
            <item>determine curSizeRollBackups (only within the current roll point)</item>
            <item>initiates a roll over if needed for crossing a date boundary since the last run.</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.InitializeFromOneFile(System.String,System.String)">
            <summary>
            Does the work of bumping the 'current' file counter higher
            to the highest count when an incremental file name is seen.
            The highest count is either the first file (when count direction
            is greater than 0) or the last file (when count direction less than 0).
            In either case, we want to know the highest count that is present.
            </summary>
            <param name="baseFile"></param>
            <param name="curFileName"></param>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.GetBackUpIndex(System.String)">
            <summary>
            Attempts to extract a number from the end of the file name that indicates
            the number of the times the file has been rolled over.
            </summary>
            <remarks>
            Certain date pattern extensions like yyyyMMdd will be parsed as valid backup indexes.
            </remarks>
            <param name="curFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.InitializeRollBackups(System.String,System.Collections.ArrayList)">
            <summary>
            Takes a list of files and a base file name, and looks for 
            'incremented' versions of the base file.  Bumps the max
            count up to the highest count seen.
            </summary>
            <param name="baseFile"></param>
            <param name="arrayFiles"></param>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.ComputeCheckPeriod(System.String)">
            <summary>
            Calculates the RollPoint for the datePattern supplied.
            </summary>
            <param name="datePattern">the date pattern to calculate the check period for</param>
            <returns>The RollPoint that is most accurate for the date pattern supplied</returns>
            <remarks>
            Essentially the date pattern is examined to determine what the
            most suitable roll point is. The roll point chosen is the roll point
            with the smallest period that can be detected using the date pattern
            supplied. i.e. if the date pattern only outputs the year, month, day 
            and hour then the smallest roll point that can be detected would be
            and hourly roll point as minutes could not be detected.
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.ActivateOptions">
            <summary>
            Initialize the appender based on the options set
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:Macro.Common.log4net.RollingFileAppender.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:Macro.Common.log4net.RollingFileAppender.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:Macro.Common.log4net.RollingFileAppender.ActivateOptions"/> must be called again.
            </para>
            <para>
            Sets initial conditions including date/time roll over information, first check,
            scheduledFilename, and calls <see cref="M:Macro.Common.log4net.RollingFileAppender.ExistingInit"/> to initialize
            the current number of backups.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.CombinePath(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="path1"></param>
            <param name="path2">.1, .2, .3, etc.</param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.RollOverTime(System.Boolean)">
            <summary>
            Rollover the file(s) to date/time tagged file(s).
            </summary>
            <param name="fileIsOpen">set to true if the file to be rolled is currently open</param>
            <remarks>
            <para>
            Rollover the file(s) to date/time tagged file(s).
            Resets curSizeRollBackups. 
            If fileIsOpen is set then the new file is opened (through SafeOpenFile).
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.RollFile(System.String,System.String)">
            <summary>
            Renames file <paramref name="fromFile"/> to file <paramref name="toFile"/>.
            </summary>
            <param name="fromFile">Name of existing file to roll.</param>
            <param name="toFile">New name for file.</param>
            <remarks>
            <para>
            Renames file <paramref name="fromFile"/> to file <paramref name="toFile"/>. It
            also checks for existence of target file and deletes if it does.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.FileExists(System.String)">
            <summary>
            Test if a file exists at a specified path
            </summary>
            <param name="path">the path to the file</param>
            <returns>true if the file exists</returns>
            <remarks>
            <para>
            Test if a file exists at a specified path
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.DeleteFile(System.String)">
            <summary>
            Deletes the specified file if it exists.
            </summary>
            <param name="fileName">The file to delete.</param>
            <remarks>
            <para>
            Delete a file if is exists.
            The file is first moved to a new filename then deleted.
            This allows the file to be removed even when it cannot
            be deleted, but it still can be moved.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.RollOverSize">
            <summary>
            Implements file roll base on file size.
            </summary>
            <remarks>
            <para>
            If the maximum number of size based backups is reached
            (<c>curSizeRollBackups == maxSizeRollBackups</c>) then the oldest
            file is deleted -- its index determined by the sign of countDirection.
            If <c>countDirection</c> &lt; 0, then files
            {<c>File.1</c>, ..., <c>File.curSizeRollBackups -1</c>}
            are renamed to {<c>File.2</c>, ...,
            <c>File.curSizeRollBackups</c>}. Moreover, <c>File</c> is
            renamed <c>File.1</c> and closed.
            </para>
            <para>
            A new file is created to receive further log output.
            </para>
            <para>
            If <c>maxSizeRollBackups</c> is equal to zero, then the
            <c>File</c> is truncated with no backup files created.
            </para>
            <para>
            If <c>maxSizeRollBackups</c> &lt; 0, then <c>File</c> is
            renamed if needed and no files are deleted.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.RollOverRenameFiles(System.String)">
            <summary>
            Implements file roll.
            </summary>
            <param name="baseFileName">the base name to rename</param>
            <remarks>
            <para>
            If the maximum number of size based backups is reached
            (<c>curSizeRollBackups == maxSizeRollBackups</c>) then the oldest
            file is deleted -- its index determined by the sign of countDirection.
            If <c>countDirection</c> &lt; 0, then files
            {<c>File.1</c>, ..., <c>File.curSizeRollBackups -1</c>}
            are renamed to {<c>File.2</c>, ...,
            <c>File.curSizeRollBackups</c>}. 
            </para>
            <para>
            If <c>maxSizeRollBackups</c> is equal to zero, then the
            <c>File</c> is truncated with no backup files created.
            </para>
            <para>
            If <c>maxSizeRollBackups</c> &lt; 0, then <c>File</c> is
            renamed if needed and no files are deleted.
            </para>
            <para>
            This is called by <see cref="M:Macro.Common.log4net.RollingFileAppender.RollOverSize"/> to rename the files.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.log4net.RollingFileAppender.NextCheckDate(System.DateTime,Macro.Common.log4net.RollingFileAppender.RollPoint)">
            <summary>
            Get the start time of the next window for the current rollpoint
            </summary>
            <param name="currentDateTime">the current date</param>
            <param name="rollPoint">the type of roll point we are working with</param>
            <returns>the start time for the next roll point an interval after the currentDateTime date</returns>
            <remarks>
            <para>
            Returns the date of the next roll point after the currentDateTime date passed to the method.
            </para>
            <para>
            The basic strategy is to subtract the time parts that are less significant
            than the rollpoint from the current time. This should roll the time back to
            the start of the time window for the current rollpoint. Then we add 1 window
            worth of time and get the start time of the next window for the rollpoint.
            </para>
            </remarks>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.m_dateTime">
            <summary>
            This object supplies the current date/time.  Allows test code to plug in
            a method to control this class when testing date/time based rolling. The default
            implementation uses the underlying value of DateTime.Now.
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.m_datePattern">
            <summary>
            The date pattern. By default, the pattern is set to <c>".yyyy-MM-dd"</c> 
            meaning daily rollover.
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.m_scheduledFilename">
            <summary>
            The actual formatted filename that is currently being written to
            or will be the file transferred to on roll over
            (based on staticLogFileName).
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.m_nextCheck">
            <summary>
            The timestamp when we shall next recompute the filename.
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.m_now">
            <summary>
            Holds date of last roll over
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.m_rollPoint">
            <summary>
            The type of rolling done
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.m_maxFileSize">
            <summary>
            The default maximum file size is 10MB
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.m_maxSizeRollBackups">
            <summary>
            There is zero backup files by default
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.m_curSizeRollBackups">
            <summary>
            How many sized based backups have been made so far
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.m_countDirection">
            <summary>
            The rolling file count direction. 
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.m_rollingStyle">
            <summary>
            The rolling mode used in this appender.
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.m_rollDate">
            <summary>
            Cache flag set if we are rolling by date.
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.m_rollSize">
            <summary>
            Cache flag set if we are rolling by size.
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.m_staticLogFileName">
            <summary>
            Value indicating whether to always log to the same file.
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.m_preserveLogFileNameExtension">
            <summary>
            Value indicating whether to preserve the file name extension when rolling.
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.m_baseFileName">
            <summary>
            FileName provided in configuration.  Used for rolling properly
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.s_date1970">
            <summary>
            The 1st of January 1970 in UTC
            </summary>
        </member>
        <member name="P:Macro.Common.log4net.RollingFileAppender.DateTimeStrategy">
            <summary>
            Gets or sets the strategy for determining the current date and time. The default
            implementation is to use LocalDateTime which internally calls through to DateTime.Now. 
            DateTime.UtcNow may be used by specifying
            <see cref="T:Macro.Common.log4net.RollingFileAppender.UniversalDateTime"/>.
            </summary>
            <value>
            An implementation of the <see cref="T:Macro.Common.log4net.RollingFileAppender.IDateTime"/> interface which returns the current date and time.
            </value>
            <remarks>
            <para>
            Gets or sets the <see cref="T:Macro.Common.log4net.RollingFileAppender.IDateTime"/> used to return the current date and time.
            </para>
            <para>
            There are two built strategies for determining the current date and time, 
            <see cref="T:Macro.Common.log4net.RollingFileAppender.LocalDateTime"/> and <see cref="T:Macro.Common.log4net.RollingFileAppender.UniversalDateTime"/>.
            </para>
            <para>
            The default strategy is <see cref="T:Macro.Common.log4net.RollingFileAppender.LocalDateTime"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.Common.log4net.RollingFileAppender.DatePattern">
            <summary>
            Gets or sets the date pattern to be used for generating file names
            when rolling over on date.
            </summary>
            <value>
            The date pattern to be used for generating file names when rolling 
            over on date.
            </value>
            <remarks>
            <para>
            Takes a string in the same format as expected by 
            <see cref="!:log4net.DateFormatter.SimpleDateFormatter"/>.
            </para>
            <para>
            This property determines the rollover schedule when rolling over
            on date.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.Common.log4net.RollingFileAppender.MaxSizeRollBackups">
            <summary>
            Gets or sets the maximum number of backup files that are kept before
            the oldest is erased.
            </summary>
            <value>
            The maximum number of backup files that are kept before the oldest is
            erased.
            </value>
            <remarks>
            <para>
            If set to zero, then there will be no backup files and the log file 
            will be truncated when it reaches <see cref="P:Macro.Common.log4net.RollingFileAppender.MaxFileSize"/>.  
            </para>
            <para>
            If a negative number is supplied then no deletions will be made.  Note 
            that this could result in very slow performance as a large number of 
            files are rolled over unless <see cref="P:Macro.Common.log4net.RollingFileAppender.CountDirection"/> is used.
            </para>
            <para>
            The maximum applies to <b>each</b> time based group of files and 
            <b>not</b> the total.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.Common.log4net.RollingFileAppender.MaxFileSize">
            <summary>
            Gets or sets the maximum size that the output file is allowed to reach
            before being rolled over to backup files.
            </summary>
            <value>
            The maximum size in bytes that the output file is allowed to reach before being 
            rolled over to backup files.
            </value>
            <remarks>
            <para>
            This property is equivalent to <see cref="P:Macro.Common.log4net.RollingFileAppender.MaximumFileSize"/> except
            that it is required for differentiating the setter taking a
            <see cref="T:System.Int64"/> argument from the setter taking a <see cref="T:System.String"/> 
            argument.
            </para>
            <para>
            The default maximum file size is 10MB (10*1024*1024).
            </para>
            </remarks>
        </member>
        <member name="P:Macro.Common.log4net.RollingFileAppender.MaximumFileSize">
            <summary>
            Gets or sets the maximum size that the output file is allowed to reach
            before being rolled over to backup files.
            </summary>
            <value>
            The maximum size that the output file is allowed to reach before being 
            rolled over to backup files.
            </value>
            <remarks>
            <para>
            This property allows you to specify the maximum size with the
            suffixes "KB", "MB" or "GB" so that the size is interpreted being 
            expressed respectively in kilobytes, megabytes or gigabytes. 
            </para>
            <para>
            For example, the value "10KB" will be interpreted as 10240 bytes.
            </para>
            <para>
            The default maximum file size is 10MB.
            </para>
            <para>
            If you have the option to set the maximum file size programmatically
            consider using the <see cref="P:Macro.Common.log4net.RollingFileAppender.MaxFileSize"/> property instead as this
            allows you to set the size in bytes as a <see cref="T:System.Int64"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.Common.log4net.RollingFileAppender.CountDirection">
            <summary>
            Gets or sets the rolling file count direction. 
            </summary>
            <value>
            The rolling file count direction.
            </value>
            <remarks>
            <para>
            Indicates if the current file is the lowest numbered file or the
            highest numbered file.
            </para>
            <para>
            By default newer files have lower numbers (<see cref="P:Macro.Common.log4net.RollingFileAppender.CountDirection"/> &lt; 0),
            i.e. log.1 is most recent, log.5 is the 5th backup, etc...
            </para>
            <para>
            <see cref="P:Macro.Common.log4net.RollingFileAppender.CountDirection"/> &gt;= 0 does the opposite i.e.
            log.1 is the first backup made, log.5 is the 5th backup made, etc.
            For infinite backups use <see cref="P:Macro.Common.log4net.RollingFileAppender.CountDirection"/> &gt;= 0 to reduce 
            rollover costs.
            </para>
            <para>The default file count direction is -1.</para>
            </remarks>
        </member>
        <member name="P:Macro.Common.log4net.RollingFileAppender.RollingStyle">
            <summary>
            Gets or sets the rolling style.
            </summary>
            <value>The rolling style.</value>
            <remarks>
            <para>
            The default rolling style is <see cref="F:Macro.Common.log4net.RollingFileAppender.RollingMode.Composite"/>.
            </para>
            <para>
            When set to <see cref="F:Macro.Common.log4net.RollingFileAppender.RollingMode.Once"/> this appender's
            <see cref="P:Macro.Common.log4net.FileAppender.AppendToFile"/> property is set to <c>false</c>, otherwise
            the appender would append to a single file rather than rolling
            the file each time it is opened.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.Common.log4net.RollingFileAppender.PreserveLogFileNameExtension">
            <summary>
            Gets or sets a value indicating whether to preserve the file name extension when rolling.
            </summary>
            <value>
            <c>true</c> if the file name extension should be preserved.
            </value>
            <remarks>
            <para>
            By default file.log is rolled to file.log.yyyy-MM-dd or file.log.curSizeRollBackup.
            However, under Windows the new file name will loose any program associations as the
            extension is changed. Optionally file.log can be renamed to file.yyyy-MM-dd.log or
            file.curSizeRollBackup.log to maintain any program associations.
            </para>
            </remarks>
        </member>
        <member name="P:Macro.Common.log4net.RollingFileAppender.StaticLogFileName">
            <summary>
            Gets or sets a value indicating whether to always log to
            the same file.
            </summary>
            <value>
            <c>true</c> if always should be logged to the same file, otherwise <c>false</c>.
            </value>
            <remarks>
            <para>
            By default file.log is always the current file.  Optionally
            file.log.yyyy-mm-dd for current formatted datePattern can by the currently
            logging file (or file.log.curSizeRollBackup or even
            file.log.yyyy-mm-dd.curSizeRollBackup).
            </para>
            <para>
            This will make time based rollovers with a large number of backups 
            much faster as the appender it won't have to rename all the backups!
            </para>
            </remarks>
        </member>
        <member name="T:Macro.Common.log4net.RollingFileAppender.RollingMode">
            <summary>
            Style of rolling to use
            </summary>
            <remarks>
            <para>
            Style of rolling to use
            </para>
            </remarks>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.RollingMode.Once">
            <summary>
            Roll files once per program execution
            </summary>
            <remarks>
            <para>
            Roll files once per program execution.
            Well really once each time this appender is
            configured.
            </para>
            <para>
            Setting this option also sets <c>AppendToFile</c> to
            <c>false</c> on the <c>RollingFileAppender</c>, otherwise
            this appender would just be a normal file appender.
            </para>
            </remarks>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.RollingMode.Size">
            <summary>
            Roll files based only on the size of the file
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.RollingMode.Date">
            <summary>
            Roll files based only on the date
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.RollingMode.Composite">
            <summary>
            Roll files based on both the size and date of the file
            </summary>
        </member>
        <member name="T:Macro.Common.log4net.RollingFileAppender.RollPoint">
            <summary>
            The code assumes that the following 'time' constants are in a increasing sequence.
            </summary>
            <remarks>
            <para>
            The code assumes that the following 'time' constants are in a increasing sequence.
            </para>
            </remarks>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.RollPoint.InvalidRollPoint">
            <summary>
            Roll the log not based on the date
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.RollPoint.TopOfMinute">
            <summary>
            Roll the log for each minute
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.RollPoint.TopOfHour">
            <summary>
            Roll the log for each hour
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.RollPoint.HalfDay">
            <summary>
            Roll the log twice a day (midday and midnight)
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.RollPoint.TopOfDay">
            <summary>
            Roll the log each day (midnight)
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.RollPoint.TopOfWeek">
            <summary>
            Roll the log each week
            </summary>
        </member>
        <member name="F:Macro.Common.log4net.RollingFileAppender.RollPoint.TopOfMonth">
            <summary>
            Roll the log each month
            </summary>
        </member>
        <member name="T:Macro.Common.log4net.RollingFileAppender.IDateTime">
            <summary>
            This interface is used to supply Date/Time information to the <see cref="T:Macro.Common.log4net.RollingFileAppender"/>.
            </summary>
            <remarks>
            This interface is used to supply Date/Time information to the <see cref="T:Macro.Common.log4net.RollingFileAppender"/>.
            Used primarily to allow test classes to plug themselves in so they can
            supply test date/times.
            </remarks>
        </member>
        <member name="P:Macro.Common.log4net.RollingFileAppender.IDateTime.Now">
            <summary>
            Gets the <i>current</i> time.
            </summary>
            <value>The <i>current</i> time.</value>
            <remarks>
            <para>
            Gets the <i>current</i> time.
            </para>
            </remarks>
        </member>
        <member name="T:Macro.Common.log4net.RollingFileAppender.LocalDateTime">
            <summary>
            Default implementation of <see cref="T:Macro.Common.log4net.RollingFileAppender.IDateTime"/> that returns the current time.
            </summary>
        </member>
        <member name="P:Macro.Common.log4net.RollingFileAppender.LocalDateTime.Now">
            <summary>
            Gets the <b>current</b> time.
            </summary>
            <value>The <b>current</b> time.</value>
            <remarks>
            <para>
            Gets the <b>current</b> time.
            </para>
            </remarks>
        </member>
        <member name="T:Macro.Common.log4net.RollingFileAppender.UniversalDateTime">
            <summary>
            Implementation of <see cref="T:Macro.Common.log4net.RollingFileAppender.IDateTime"/> that returns the current time as the coordinated universal time (UTC).
            </summary>
        </member>
        <member name="P:Macro.Common.log4net.RollingFileAppender.UniversalDateTime.Now">
            <summary>
            Gets the <b>current</b> time.
            </summary>
            <value>The <b>current</b> time.</value>
            <remarks>
            <para>
            Gets the <b>current</b> time.
            </para>
            </remarks>
        </member>
        <member name="T:Macro.Common.Configuration.ConfigurationDocumentKey">
            <summary>
            Identifies a configuration document.
            </summary>
        </member>
        <member name="T:Macro.Common.Caching.IDefinesCacheKey">
            <summary>
            Defines an interface to allow a class to define its own custom cache key string.
            </summary>
        </member>
        <member name="M:Macro.Common.Caching.IDefinesCacheKey.GetCacheKey">
            <summary>
            Gets the cache key defined by this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Configuration.ConfigurationDocumentKey.#ctor(System.String,System.Version,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="documentName"></param>
            <param name="version"></param>
            <param name="user"></param>
            <param name="instanceKey"></param>
        </member>
        <member name="M:Macro.Common.Configuration.ConfigurationDocumentKey.Macro#Common#Caching#IDefinesCacheKey#GetCacheKey">
            <summary>
            Gets the cache key defined by this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macro.Common.Configuration.ConfigurationDocumentKey.DocumentName">
            <summary>
            Gets the name of the document.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.ConfigurationDocumentKey.Version">
            <summary>
            Gets the version of the document.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.ConfigurationDocumentKey.User">
            <summary>
            Gets the owner of the document.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.ConfigurationDocumentKey.InstanceKey">
            <summary>
            Gets the instance key of the document.
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.ConfigurationDocumentHeader">
            <summary>
            Encapsulates meta-data about a configuration document.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.ConfigurationDocumentHeader.#ctor(Macro.Common.Configuration.ConfigurationDocumentKey,System.DateTime,System.DateTime)">
            <summary>
            Constructor.
            </summary>
            <param name="key"></param>
            <param name="creationTime"></param>
            <param name="modifiedTime"></param>
        </member>
        <member name="P:Macro.Common.Configuration.ConfigurationDocumentHeader.Key">
            <summary>
            Gets the key that identifies the document.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.ConfigurationDocumentHeader.CreationTime">
            <summary>
            Gets the document creation time.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.ConfigurationDocumentHeader.ModifiedTime">
            <summary>
            Gets the document last modification time.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.BlockingQueue`1">
            <summary>
            Basic producer-consumer queue.
            </summary>
            <typeparam name="T">The type to be used in the queue.</typeparam>
        </member>
        <member name="M:Macro.Common.Utilities.BlockingQueue`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.BlockingQueue`1.Dequeue(`0@)">
            <summary>
            Removes the item at the head of the queue.
            </summary>
            <remarks>
            <para>
            If no items are available, this call will block until an item becomes available, 
            unless the <see cref="P:Macro.Common.Utilities.BlockingQueue`1.ContinueBlocking"/> member has been set to false.
            </para>
            <para>
            This method will not throw an exception.
            </para>
            </remarks>
            <param name="value">The value of the next item in the queue, or <b>default(T)</b> 
            if <see cref="P:Macro.Common.Utilities.BlockingQueue`1.ContinueBlocking"/> is false and the queue is empty.</param>
            <returns>True if the item returned (via the out parameter) was in the queue, otherwise false.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.BlockingQueue`1.Enqueue(`0)">
            <summary>
            Adds the specified item to the end of the queue.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when the input item is null.</exception>
            <param name="item">The item to enqueue.</param>
        </member>
        <member name="P:Macro.Common.Utilities.BlockingQueue`1.ContinueBlocking">
            <summary>
            Indicates whether or not the <b>Dequeue</b> methods should block until the queue
            becomes non-empty.
            </summary>
            <remarks>
            When set to false, all actively waiting threads 
            (e.g. currently blocked, calling <b>Dequeue</b>) are  released so they 
            can determine whether or not they should quit.
            </remarks>
        </member>
        <member name="P:Macro.Common.Utilities.BlockingQueue`1.Count">
            <summary>
            Returns the number of items remaining in the queue.
            </summary>
        </member>
        <member name="T:Macro.Common.Scripting.ActiveTemplateException">
            <summary>
            Used by the <see cref="T:Macro.Common.Scripting.ActiveTemplate"/> class.
            </summary>
        </member>
        <member name="M:Macro.Common.Scripting.ActiveTemplateException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.SettingScope">
            <summary>
            Enum defining the scope of a setting.
            </summary>
        </member>
        <member name="F:Macro.Common.Configuration.SettingScope.Application">
            <summary>
            Indicates that a setting has application scope.
            </summary>
        </member>
        <member name="F:Macro.Common.Configuration.SettingScope.User">
            <summary>
            Indicates that a setting has user scope.
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.SettingsClassMetaDataReader">
            <summary>
            Utility class for reading meta-data associated with a settings class
            (a subclass of <see cref="T:System.Configuration.SettingsBase"/>).
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsClassMetaDataReader.GetVersion(System.Type,System.Boolean)">
            <summary>
            Obtains the version of the settings class.
            </summary>
            <remarks>
            The version of the settings class is the version of the assembly in which the class is contained.
            If <paramref name="truncate"/> is true, the returned value does not contain Build or Revision components.
            </remarks>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsClassMetaDataReader.GetGroupName(System.Type)">
            <summary>
            Obtains the name of the settings group, which is always the full name of the settings class.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsClassMetaDataReader.GetSettingsProvider(System.Type)">
            <summary>
            Gets the provider associated with the specified settings class.
            </summary>
            <param name="settingsClass"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsClassMetaDataReader.GetGroupDescription(System.Type)">
            <summary>
            Obtains the settings group description from the <see cref="T:System.Configuration.SettingsGroupDescriptionAttribute"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsClassMetaDataReader.GetSettingsProperties(System.Type)">
            <summary>
            Gets the collection of properties that represent settings.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsClassMetaDataReader.GetSettingsProperties(System.Type,Macro.Common.Configuration.SettingScope)">
            <summary>
            Gets the collection of properties that represent settings of the specified scope.
            </summary>
            <param name="settingsClass"></param>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsClassMetaDataReader.HasUserScopedSettings(System.Type)">
            <summary>
            Returns true if the specified settings class has any settings that are user-scoped.
            </summary>
            <param name="settingsClass"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsClassMetaDataReader.HasAppScopedSettings(System.Type)">
            <summary>
            Returns true if the specified settings class has any settings that are application-scoped.
            </summary>
            <param name="settingsClass"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsClassMetaDataReader.GetSettingsProvider(System.Reflection.PropertyInfo)">
            <summary>
            Gets the settings provider associated with the specified property.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsClassMetaDataReader.GetDefaultValue(System.Reflection.PropertyInfo)">
            <summary>
            Obtains the default value of a setting from the <see cref="T:System.Configuration.DefaultSettingValueAttribute"/>.
            </summary>
            <remarks>
            If the value is the name of an embedded resource, it is automatically translated.
            </remarks>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsClassMetaDataReader.GetDefaultValue(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Obtains the default value of a setting from the <see cref="T:System.Configuration.DefaultSettingValueAttribute"/>.
            </summary>
            <remarks>
            If translate is true, and the value is the name of an embedded resource, it is automatically translated.
            </remarks>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsClassMetaDataReader.TranslateDefaultValue(System.Type,System.String)">
            <summary>
            Translates the default value for a settings class given the raw value.
            </summary>
            <remarks>
            If the specified raw value is the name of an embedded resource (embedded in the same
            assembly as the specified settings class), the contents of the resource are returned.
            Otherwise, the raw value is simply returned.
            </remarks>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsClassMetaDataReader.GetDescription(System.Reflection.PropertyInfo)">
            <summary>
            Obtains the setting description from the <see cref="T:System.Configuration.SettingsDescriptionAttribute"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsClassMetaDataReader.GetScope(System.Reflection.PropertyInfo)">
            <summary>
            Returns a <see cref="T:Macro.Common.Configuration.SettingScope"/> enum describing the scope of the property.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsClassMetaDataReader.GetSerializeAs(System.Reflection.PropertyInfo)">
            <summary>
            Determines how a particular property should be serialized based on its type.
            </summary>
            <param name="property">the property whose SerializeAs method is to be determined</param>
            <returns>a <see cref="T:System.Configuration.SettingsSerializeAs"/> value</returns>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsClassMetaDataReader.GetName(System.Reflection.PropertyInfo)">
            <summary>
            Returns the name of the settings property.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsClassMetaDataReader.GetType(System.Reflection.PropertyInfo)">
            <summary>
            Returns the <see cref="T:System.Type"/> of the settings property.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsClassMetaDataReader.IsUserScoped(System.Reflection.PropertyInfo)">
            <summary>
            Returns true if the property is decorated with a <see cref="T:System.Configuration.UserScopedSettingAttribute"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsClassMetaDataReader.IsAppScoped(System.Reflection.PropertyInfo)">
            <summary>
            Returns true if the property is decorated with a <see cref="T:System.Configuration.ApplicationScopedSettingAttribute"/>.
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.ConfigurationDocumentNotFoundException">
            <summary>
            Exception indicates that a requested configuration document does not exist.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.ConfigurationDocumentNotFoundException.#ctor(Macro.Common.Configuration.ConfigurationDocumentKey)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Macro.Common.Authorization.AuthorityTokenAttribute">
            <summary>
            Attribute used to define authority group tokens on types.
            </summary>
            <seealso cref="T:Macro.Common.Authorization.AuthorityGroupDefinition"/>
        </member>
        <member name="P:Macro.Common.Authorization.AuthorityTokenAttribute.Description">
            <summary>
            The token description.
            </summary>
        </member>
        <member name="P:Macro.Common.Authorization.AuthorityTokenAttribute.Formerly">
            <summary>
            The former identities of this token, used for purposes of migrating a token.
            Separate multiple former identities by a semicolon.
            </summary>
        </member>
        <member name="T:Macro.Common.UsageTracking.RegisterResponse">
            <summary>
            Request object for the <see cref="M:Macro.Common.UsageTracking.IUsageTracking.Register(Macro.Common.UsageTracking.RegisterRequest)"/>
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.RegisterResponse.ExtensionData">
            <summary>
            Extensible data for serialization.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.RegisterResponse.Message">
            <summary>
            A message to be displayed on the client.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.CommandLineException">
            <summary>
            Represents an error that occured in parsing command line arguments.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CommandLineException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Macro.Common.Utilities.ICloningContext">
            <summary>
            Constructed and used by the <see cref="T:Macro.Common.Utilities.CloneBuilder"/>; allows
            objects being cloned to have control over when their fields
            are cloned.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ICloningContext.CloneFields``1(``0,``0)">
            <summary>
            Clones <paramref name="source"/>'s fields and populates
            the corresponding fields in <paramref name="destination"/>.
            </summary>
            <remarks>
            The generic type parameter tells the <see cref="T:Macro.Common.Utilities.CloneBuilder"/>
            what type's fields are to be cloned.  It is a <b>contract breakage</b>
            to specify a type other than the one currently making the call
            to <see cref="M:Macro.Common.Utilities.ICloningContext.CloneFields``1(``0,``0)"/>.
            </remarks>
            <typeparam name="T">The type for which fields are to be cloned.</typeparam>
            <param name="source">The source object.</param>
            <param name="destination">The destination object (or clone).</param>
        </member>
        <member name="T:Macro.Common.Utilities.CloneCreatedEventArgs">
            <summary>
            Can be used to notify listeners of objects being cloned.
            </summary>
            <remarks>
            No events are fired by the <see cref="T:Macro.Common.Utilities.CloneBuilder"/>; this
            class exists for convenience so cloneable objects can notify
            listeners when they are cloned.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CloneCreatedEventArgs.#ctor(System.Object,System.Object)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.CloneCreatedEventArgs.Source">
            <summary>
            The object that has been cloned.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.CloneCreatedEventArgs.Clone">
            <summary>
            The clone.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.CloneableAttribute">
            <summary>
            Decorates a class as being cloneable.
            </summary>
            <remarks>
            When decorated with this attribute, a class must:
            <list type="bullet">
            <item>
            Have a default constructor (can be private, protected or public) with an optional 
            <see cref="T:Macro.Common.Utilities.CloneInitializeAttribute"/>-decorated method.
            <see cref="F:Macro.Common.Utilities.CloneableAttribute.UseDefaultConstructor"/> 
            must be true, or an exception will be thrown.
            </item>
            <item>
            <para>
            Have a cloning constructor, which has the following signature:
            </para>
            <para>
            - ClassType(ClassType source, ICloningContext context)
            </para>
            <para>
            The cloning constructor should have protected or private access and must call
            the base class' cloning constructor if one exists, <b>or none of the base classes
            with cloning constructors will be cloned correctly</b>.
            </para>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Macro.Common.Utilities.CloneableAttribute.UseDefaultConstructor">
            <summary>
            Specifies that the class' default constructor should be used when cloning.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CloneableAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            Use of this constructor implies that the class being cloned has a cloning constructor.
            See <see cref="T:Macro.Common.Utilities.CloneableAttribute"/> for more details.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CloneableAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            See <see cref="T:Macro.Common.Utilities.CloneableAttribute"/> for more details.
            </remarks>
        </member>
        <member name="T:Macro.Common.Utilities.CloneIgnoreAttribute">
            <summary>
            Decorates a field belonging to a cloneable class; the field will not be cloned.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CloneIgnoreAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.CloneCopyReferenceAttribute">
            <summary>
            Decorates a field belonging to a cloneable class; for reference types,
            the object reference will be copied rather than a clone.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CloneCopyReferenceAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.CloneInitializeAttribute">
            <summary>
            Decorates the clone-initialization method of a cloneable class;  the
            method will only be called when <see cref="F:Macro.Common.Utilities.CloneableAttribute.UseDefaultConstructor"/>
            is true, otherwise a cloning constructor must exist.
            </summary>
            <remarks>
            <para>
            The clone-initalization method must have the same signature as the cloning
            constructor, with a void return type.  See <see cref="T:Macro.Common.Utilities.CloneableAttribute"/> for more details
            on the cloning constructor's signature.
            </para>
            <para>
            The method should have private access.
            </para>
            <para>
            The clone-initialization method is called for each class in the hierarchy beginning
            with the lowest level cloneable class, and ending with the highest.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CloneInitializeAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.OnCloneCompleteAttribute">
            <summary>
            Decorates the clone-complete method of a cloneable class; the method will
            be called after construction (or initialization) for each cloneable class
            in the hierarchy.
            </summary>
            <remarks>
            <para>
            The clone-complete method must have a void signature (no argument, no return value).
            The method should have private access.
            </para>
            <para>
            the clone-complete method is called for each class in the hierarchy
            beginning with the lowest level cloneable class, and ending with the highest.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.OnCloneCompleteAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.CloningException">
            <summary>
            Exception thrown by the <see cref="T:Macro.Common.Utilities.CloneBuilder"/>.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.CloneBuilder">
            <summary>
            A static helper class that builds a clone of a class decorated
            with the <see cref="T:Macro.Common.Utilities.CloneableAttribute"/> attribute.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.CloneBuilder.Clone(System.Object)">
            <summary>
            Creates a clone of the <paramref name="source"/> object.
            </summary>
            <remarks>
            Returns null if the class is not cloneable.
            </remarks>
        </member>
        <member name="T:Macro.Common.ExtensionOfAttribute">
            <summary>
            Attribute used to mark a class as being an extension of the specified extension point class.
            </summary>
            <remarks>
            Use this attribute to mark a class as being an extension of the specified extension point,
            specified by the <see cref="T:System.Type"/> of the extension point class.
            </remarks>
        </member>
        <member name="M:Macro.Common.ExtensionOfAttribute.#ctor(System.Type)">
            <summary>
            Attribute constructor.
            </summary>
            <param name="extensionPointClass">The type of the extension point class which the target class extends.</param>
        </member>
        <member name="P:Macro.Common.ExtensionOfAttribute.ExtensionPointClass">
            <summary>
            The class that defines the extension point which this extension extends.
            </summary>
        </member>
        <member name="P:Macro.Common.ExtensionOfAttribute.Name">
            <summary>
            A friendly name for the extension.
            </summary>
            <remarks>
            This is optional and may be supplied as a named parameter.
            </remarks>
        </member>
        <member name="P:Macro.Common.ExtensionOfAttribute.Description">
            <summary>
            A friendly description for the extension.
            </summary>
            <remarks>
            This is optional and may be supplied as a named parameter.
            </remarks>
        </member>
        <member name="P:Macro.Common.ExtensionOfAttribute.Enabled">
            <summary>
            The default enablement of the extension.
            </summary>
        </member>
        <member name="P:Macro.Common.ExtensionOfAttribute.FeatureToken">
            <summary>
            Feature identification token to be checked against application licensing.
            </summary>
        </member>
        <member name="T:Macro.Common.PluginLoadedEventArgs">
            <summary>
            Conveys information about plugins as they are loaded.
            </summary>
            <remarks>
            This class is used internally by the framework.
            </remarks>
            <see cref="T:Macro.Common.PluginManager"/>
        </member>
        <member name="P:Macro.Common.PluginLoadedEventArgs.Message">
            <summary>
            Gets a user-friendly message describing the plugin that was loaded.
            </summary>
            <remarks>
            This is typically just the full name of the plugin assembly.
            </remarks>
        </member>
        <member name="P:Macro.Common.PluginLoadedEventArgs.PluginAssembly">
            <summary>
            Gets the plugin assembly that was loaded, if any.
            </summary>
            <remarks>
            Null if no actual assembly was loaded for this particular event.
            </remarks>
        </member>
        <member name="T:Macro.Common.Statistics.StatisticsSetCollection`1">
            <summary>
            Base collection of <see cref="T:Macro.Common.Statistics.StatisticsSet"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Macro.Common.Statistics.StatisticsSetCollection`1.ToXmlElements(System.Xml.XmlDocument,System.Boolean)">
            <summary>
            Returns the statistics collection as a list of XML elements.
            </summary>
            <param name="doc"></param>
            <param name="recursive"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.Common.DialogBoxAction">
            <summary>
            Enum flags describing the buttons/options that should be available to the user in a dialog box.
            </summary>
            <remarks>
            These flags can be combined together using the | operator to specify multiple buttons.
            </remarks>
        </member>
        <member name="F:Macro.Common.DialogBoxAction.Ok">
            <summary>
            An Ok button should be shown.
            </summary>
        </member>
        <member name="F:Macro.Common.DialogBoxAction.Cancel">
            <summary>
            A Cancel button should be shown.
            </summary>
        </member>
        <member name="F:Macro.Common.DialogBoxAction.Yes">
            <summary>
            A Yes button should be shown.
            </summary>
        </member>
        <member name="F:Macro.Common.DialogBoxAction.No">
            <summary>
            A No button should be shown.
            </summary>
        </member>
        <member name="T:Macro.Common.MessageBoxActions">
            <summary>
            Enum flags specific to message boxes, which are just 
            commonly used combinations of <see cref="T:Macro.Common.DialogBoxAction"/>s.
            </summary>
        </member>
        <member name="F:Macro.Common.MessageBoxActions.Ok">
            <summary>
            An Ok button should be shown.
            </summary>
        </member>
        <member name="F:Macro.Common.MessageBoxActions.OkCancel">
            <summary>
            Both an Ok and a Cancel button should be shown.
            </summary>
        </member>
        <member name="F:Macro.Common.MessageBoxActions.YesNo">
            <summary>
            Both a Yes and No button should be shown.
            </summary>
        </member>
        <member name="F:Macro.Common.MessageBoxActions.YesNoCancel">
            <summary>
            Yes, No and Cancel buttons should be shown.
            </summary>
        </member>
        <member name="T:Macro.Common.IMessageBox">
            <summary>
            An interface for a message box.
            </summary>
        </member>
        <member name="M:Macro.Common.IMessageBox.Show(System.String)">
            <summary>
            Shows a message box displaying the input <paramref name="message"/>, 
            usually with an Ok button.
            </summary>
        </member>
        <member name="M:Macro.Common.IMessageBox.Show(System.String,Macro.Common.MessageBoxActions)">
            <summary>
            Shows a message box displaying the input <paramref name="message"/>
            and the specified <paramref name="buttons"/>.
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.ConfigurationStoreExtensionPoint">
            <summary>
            Defines an extension point for configuration stores.  Used by <see cref="T:Macro.Common.Configuration.ConfigurationStore"/>
            to create configuration store instances.
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.ConfigurationStore">
            <summary>
            Factory class for creating instances of <see cref="T:Macro.Common.Configuration.IConfigurationStore"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.ConfigurationStore.Create">
            <summary>
            Obtains an instance of the configuration store, if supported.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Indicates that there is no configuration store extension.</exception>
        </member>
        <member name="P:Macro.Common.Configuration.ConfigurationStore.IsSupported">
            <summary>
            Gets a value indicating whether the configuration store is supported under the current deployment.
            </summary>
        </member>
        <member name="T:Macro.Common.Actions.IXmlActionCompilerOperator`2">
            <summary>
            Interface for extensions implementing <see cref="T:Macro.Common.Actions.XmlActionCompilerOperatorExtensionPoint`2"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Actions.IXmlActionCompilerOperator`2.Compile(System.Xml.XmlElement)">
            <summary>
            Method used to compile the action.  
            </summary>
            <param name="xmlNode">Input <see cref="T:System.Xml.XmlElement"/> describing the action to perform.</param>
            <returns>A class implementing the <see cref="T:Macro.Common.Actions.IActionItem`1"/> interface which can perform the action.</returns>
        </member>
        <member name="M:Macro.Common.Actions.IXmlActionCompilerOperator`2.GetSchema(`1)">
            <summary>
            Get an <see cref="T:System.Xml.Schema.XmlSchemaElement"/> describing the ActionItem for validation purposes.
            </summary>
            <param name="context">A context in which the schema is being generated.</param>
            <returns></returns>
        </member>
        <member name="P:Macro.Common.Actions.IXmlActionCompilerOperator`2.OperatorTag">
            <summary>
            The name of the action implemented.  This is typically the name of the <see cref="T:System.Xml.XmlElement"/> describing the action.
            </summary>
        </member>
        <member name="T:Macro.Common.Serialization.IJsmlSerializationContext">
            <summary>
            Defines an interface to the serialization context information passed to <see cref="M:Macro.Common.Serialization.IJsmlSerializerHook.Serialize(Macro.Common.Serialization.IJsmlSerializationContext)"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Serialization.IJsmlSerializationContext.Serialize(System.Object,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Allows the hook to call back into the JSML serializer.
            </summary>
            <param name="obj"></param>
            <param name="objectName"></param>
            <param name="attributes"></param>
        </member>
        <member name="P:Macro.Common.Serialization.IJsmlSerializationContext.XmlWriter">
            <summary>
            Gets the XML writer that is being used to perform serialization.
            </summary>
            <remarks>
            The hook may use this object to write XML directly.
            </remarks>
        </member>
        <member name="P:Macro.Common.Serialization.IJsmlSerializationContext.Data">
            <summary>
            Gets or sets the object being serialized.
            </summary>
            <remarks>
            The hook may set this to a different object.
            </remarks>
        </member>
        <member name="P:Macro.Common.Serialization.IJsmlSerializationContext.Name">
            <summary>
            Gets or sets the name of the object for serialization.
            </summary>
            <remarks>
            The hook may modify the name.
            </remarks>
        </member>
        <member name="P:Macro.Common.Serialization.IJsmlSerializationContext.Attributes">
            <summary>
            Gets the collection of attributes that will be serialized along with this object.
            </summary>
            <remarks>
            The hook may add to this collection.
            </remarks>
        </member>
        <member name="T:Macro.Common.Serialization.IJsmlDeserializationContext">
            <summary>
            Defines an interface to the serialization context information passed to <see cref="M:Macro.Common.Serialization.IJsmlSerializerHook.Deserialize(Macro.Common.Serialization.IJsmlDeserializationContext)"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Serialization.IJsmlDeserializationContext.Deserialize(System.Type,System.Xml.XmlElement)">
            <summary>
            Allows the hook to call back into the JSML deserializer.
            </summary>
            <param name="dataType"></param>
            <param name="xmlElement"></param>
            <returns>The object resulting from deserialization.</returns>
        </member>
        <member name="P:Macro.Common.Serialization.IJsmlDeserializationContext.XmlElement">
            <summary>
            Gets the XML element containing the serialized representation.
            </summary>
        </member>
        <member name="P:Macro.Common.Serialization.IJsmlDeserializationContext.DataType">
            <summary>
            Gets or sets the data-type of the object being deserialized.
            </summary>
            <remarks>
            The hook may set this property to modify the data type.
            </remarks>
        </member>
        <member name="P:Macro.Common.Serialization.IJsmlDeserializationContext.Data">
            <summary>
            Gets or sets the object that results from deserialization.
            </summary>
            <remarks>
            If the hook handled the deserialization, it must set this property to reference the resulting object.
            </remarks>
        </member>
        <member name="T:Macro.Common.Serialization.JsmlSerializerHookExtensionPoint">
            <summary>
            Defines an extension point for customizing the JSML serialization/deserialization services.
            </summary>
        </member>
        <member name="T:Macro.Common.Serialization.JsmlSerializer">
            <summary>
            Provides JSML serialization and deserialization services.
            </summary>
        </member>
        <member name="M:Macro.Common.Serialization.JsmlSerializer.Serialize(System.Object,System.String)">
            <summary>
            Serializes the specified object to JSML format, using the specified objectName as the outermost tag name.
            </summary>
            <param name="obj"></param>
            <param name="objectName"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Serialization.JsmlSerializer.Serialize(System.Object,System.String,Macro.Common.Serialization.JsmlSerializer.SerializeOptions)">
            <summary>
            Serializes the specified object to JSML format, using the specified objectName as the outermost tag name.
            </summary>
        </member>
        <member name="M:Macro.Common.Serialization.JsmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.String)">
            <summary>
            Serializes the specified object to JSML format, using the specified objectName as the outermost tag name.
            </summary>
        </member>
        <member name="M:Macro.Common.Serialization.JsmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.String,Macro.Common.Serialization.JsmlSerializer.SerializeOptions)">
            <summary>
            Serializes the specified object to JSML format, using the specified objectName as the outermost tag name.
            </summary>
        </member>
        <member name="M:Macro.Common.Serialization.JsmlSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes the specified JSML text into an object of the specified type.
            </summary>
        </member>
        <member name="M:Macro.Common.Serialization.JsmlSerializer.Deserialize``1(System.String,Macro.Common.Serialization.JsmlSerializer.DeserializeOptions)">
            <summary>
            Deserializes the specified JSML text into an object of the specified type.
            </summary>
        </member>
        <member name="M:Macro.Common.Serialization.JsmlSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the specified JSML text into an object of the specified type.
            </summary>
        </member>
        <member name="M:Macro.Common.Serialization.JsmlSerializer.Deserialize(System.Type,System.String,Macro.Common.Serialization.JsmlSerializer.DeserializeOptions)">
            <summary>
            Deserializes the specified JSML text into an object of the specified type.
            </summary>
        </member>
        <member name="M:Macro.Common.Serialization.JsmlSerializer.Deserialize``1(System.Xml.XmlReader)">
            <summary>
            Deserializes the specified JSML text into an object of the specified type.
            </summary>
        </member>
        <member name="M:Macro.Common.Serialization.JsmlSerializer.Deserialize``1(System.Xml.XmlReader,Macro.Common.Serialization.JsmlSerializer.DeserializeOptions)">
            <summary>
            Deserializes the specified JSML text into an object of the specified type.
            </summary>
        </member>
        <member name="M:Macro.Common.Serialization.JsmlSerializer.Deserialize(System.Xml.XmlReader,System.Type)">
            <summary>
            Deserializes the specified JSML text into an object of the specified type.
            </summary>
        </member>
        <member name="M:Macro.Common.Serialization.JsmlSerializer.Deserialize(System.Xml.XmlReader,System.Type,Macro.Common.Serialization.JsmlSerializer.DeserializeOptions)">
            <summary>
            Deserializes the specified JSML text into an object of the specified type.
            </summary>
        </member>
        <member name="T:Macro.Common.Serialization.JsmlSerializer.OptionsBase">
            <summary>
            Abstract base class for serialization options.
            </summary>
        </member>
        <member name="P:Macro.Common.Serialization.JsmlSerializer.OptionsBase.DataMemberTest">
            <summary>
            Gets or sets a predicate that determines whether a member should participate in serialization.
            </summary>
            <remarks>
            By default, a member is considered a data-member if it has the <see cref="T:System.Runtime.Serialization.DataMemberAttribute"/>,
            but this behaviour can be changed by supplying a custom predicate here.
            </remarks>
        </member>
        <member name="P:Macro.Common.Serialization.JsmlSerializer.OptionsBase.DataContractTest">
            <summary>
            Gets or sets a predicate that determines whether a type is considered a data-contract.
            </summary>
            <remarks>
            If a type is considered a data-contract, its data-members are serialized recursively.
            By default, a type is considered a data-contract if it has the <see cref="T:System.Runtime.Serialization.DataContractAttribute"/>,
            but this behaviour can be changed by supplying a custom predicate here.
            </remarks>
        </member>
        <member name="P:Macro.Common.Serialization.JsmlSerializer.OptionsBase.Hook">
            <summary>
            Gets or sets an instance of <see cref="T:Macro.Common.Serialization.IJsmlSerializerHook"/>.
            </summary>
        </member>
        <member name="T:Macro.Common.Serialization.JsmlSerializer.SerializeOptions">
            <summary>
            Encapsulates options that customize the serialization process.
            </summary>
        </member>
        <member name="F:Macro.Common.Serialization.JsmlSerializer.SerializeOptions.Default">
            <summary>
            Defines the default options.
            </summary>
        </member>
        <member name="T:Macro.Common.Serialization.JsmlSerializer.DeserializeOptions">
            <summary>
            Encapsulates options that customize the deserialization process.
            </summary>
        </member>
        <member name="F:Macro.Common.Serialization.JsmlSerializer.DeserializeOptions.Default">
            <summary>
            Defines the default options.
            </summary>
        </member>
        <member name="M:Macro.Common.Serialization.JsmlSerializer.SerializerBase.GetDataMemberFields(System.Object,System.Predicate{System.Reflection.MemberInfo})">
            <summary>
            Get a list of properties and fields from a data contract that satisfy the predicate.
            </summary>
        </member>
        <member name="M:Macro.Common.Serialization.JsmlSerializer.Serializer.Do(System.Object,System.String)">
            <summary>
            Serializes the specified object, enclosing it with the specified name.
            </summary>
            <param name="obj"></param>
            <param name="objectName"></param>
        </member>
        <member name="M:Macro.Common.Serialization.JsmlSerializer.Serializer.Do(System.Object,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Serializes the specified object, enclosing it with the specified name.
            </summary>
            <param name="obj"></param>
            <param name="objectName"></param>
            <param name="attributes"></param>
        </member>
        <member name="M:Macro.Common.Serialization.JsmlSerializer.Deserializer.Do(System.Type,System.Xml.XmlElement)">
            <summary>
            Create an object of type 'dataType' from the xmlElement.  Recurse if the object is a DataContractBase or IList
            </summary>
            <param name="dataType"></param>
            <param name="xmlElement"></param>
            <returns></returns>
        </member>
        <member name="T:Macro.Common.Utilities.IObservableList`1">
            <summary>
            Interface to an observable list.
            </summary>
        </member>
        <member name="E:Macro.Common.Utilities.IObservableList`1.ItemAdded">
            <summary>
            Fired when an item is added to the list.
            </summary>
        </member>
        <member name="E:Macro.Common.Utilities.IObservableList`1.ItemRemoved">
            <summary>
            Fired when an item is removed from the list.
            </summary>
        </member>
        <member name="E:Macro.Common.Utilities.IObservableList`1.ItemChanged">
            <summary>
            Fired when an item in the list has changed.
            </summary>
        </member>
        <member name="E:Macro.Common.Utilities.IObservableList`1.ItemChanging">
            <summary>
            Fires when an item in the list is about to change.
            </summary>
        </member>
        <member name="T:Macro.Common.UsageTracking.RegisterRequest">
            <summary>
            Request object for the <see cref="M:Macro.Common.UsageTracking.IUsageTracking.Register(Macro.Common.UsageTracking.RegisterRequest)"/> service.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.RegisterRequest.ExtensionData">
            <summary>
            Extensible data for serialization.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.RegisterRequest.Message">
            <summary>
            The usage data to register.
            </summary>
        </member>
        <member name="T:Macro.Common.Caching.DefaultCacheProvider">
            <summary>
            Default implementation of <see cref="T:Macro.Common.Caching.ICacheProvider"/>, provides a local in-process cache.
            </summary>
        </member>
        <member name="M:Macro.Common.Caching.DefaultCacheProvider.Initialize(Macro.Common.Caching.CacheProviderInitializationArgs)">
            <summary>
            Initializes this cache provider.
            </summary>
        </member>
        <member name="M:Macro.Common.Caching.DefaultCacheProvider.CreateClient(System.String)">
            <summary>
            Creates a cache client for the specified logical cache ID.
            </summary>
            <remarks>
            The implementation of this method *must* be safe for multiple threads making concurrent calls.
            </remarks>
            <returns></returns>
        </member>
        <member name="T:Macro.Common.Caching.CacheRemoveOptions">
            <summary>
            Encapsulates options for the <see cref="M:Macro.Common.Caching.ICacheClient.Remove(System.String,Macro.Common.Caching.CacheRemoveOptions)"/> method.
            </summary>
        </member>
        <member name="M:Macro.Common.Caching.CacheRemoveOptions.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="region"></param>
        </member>
        <member name="T:Macro.Common.Authorization.AuthorityGroupDefinition">
            <summary>
            Helper class for providing authority group definitions to be imported at deployment time.
            </summary>
            <seealso cref="T:Macro.Common.Authorization.AuthorityTokenAttribute"/>
        </member>
        <member name="M:Macro.Common.Authorization.AuthorityGroupDefinition.#ctor(System.String,System.String,System.Boolean,System.String[])">
            <summary>
            Constructor.
            </summary>
            <param name="name">The name of the authority group.</param>
            <param name="tokens">The associated authority group tokens.</param>
            <param name="dataGroup">Tells if the group is an authority group for controlling access to data.</param>
            <param name="description">The description of the authority group.</param>
        </member>
        <member name="M:Macro.Common.Authorization.AuthorityGroupDefinition.#ctor(System.String,System.String[])">
            <summary>
            Constructor.
            </summary>
            <param name="name">The name of the authority group.</param>
            <param name="tokens">The associated authority group tokens.</param>
        </member>
        <member name="P:Macro.Common.Authorization.AuthorityGroupDefinition.Name">
            <summary>
            Gets the name of the authority group.
            </summary>
        </member>
        <member name="P:Macro.Common.Authorization.AuthorityGroupDefinition.Description">
            <summary>
            Gets the name of the authority group.
            </summary>
        </member>
        <member name="P:Macro.Common.Authorization.AuthorityGroupDefinition.DataGroup">
            <summary>
            Gets a bool signaling if the authority group is for Data access.
            </summary>
        </member>
        <member name="P:Macro.Common.Authorization.AuthorityGroupDefinition.Tokens">
            <summary>
            Gets the set of tokens that are assigned to the group.
            </summary>
        </member>
        <member name="T:Macro.Common.Actions.XmlActionCompilerOperatorExtensionPoint`2">
            <summary>
            Defines an extension point for types of actions that can be parsed by the <see cref="T:Macro.Common.Actions.XmlActionCompiler`2"/>.
            </summary>
            <seealso cref="T:Macro.Common.Actions.IXmlActionCompilerOperator`2"/>
        </member>
        <member name="T:Macro.Common.Actions.XmlActionCompiler`2">
            <summary>
            Compiler for compiling a set of actions to execute from an XML file.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Macro.Common.Actions.XmlActionCompiler`2"/> can be used to compile a set of actions to perform
            from XML.  The <see cref="M:Macro.Common.Actions.XmlActionCompiler`2.Compile(System.Xml.XmlElement,`1,System.Boolean)"/> method can be called to create the
            set of actions to be performed.  These actions can then be executed based on input data.
            </para>
            <para>
            Actions are defined by the <see cref="T:Macro.Common.Actions.XmlActionCompilerOperatorExtensionPoint`2"/> extension
            point.  The compiler does not contain any predefined actions.  The compiler makes no assumptions
            about the attributes of the <see cref="T:System.Xml.XmlElement"/> for the action.  Any attributes can be defined
            for the action and are interpreted by the operation defined for the action type.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.Actions.XmlActionCompiler`2.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.Actions.XmlActionCompiler`2.Compile(System.Xml.XmlElement,`1,System.Boolean)">
            <summary>
            Compile a set of actions to perform.
            </summary>
            <remarks>
            <para>
            This method will parse the child <see cref="T:System.Xml.XmlElement"/>s of <paramref name="containingNode"/>.
            Based on the name of the element, the the compiler will look for an <see cref="T:Macro.Common.Actions.XmlActionCompilerOperatorExtensionPoint`2"/>
            extension that handles the element type.  A list is constructed of all actions to perform, and a class implementing the 
            <see cref="T:Macro.Common.Actions.IActionSet`1"/> interface is returned which can be called to exectute the actions based on input data.
            </para>
            </remarks>
            <param name="containingNode">The input XML containg actions to perform.</param>
            <param name="schemaContext"></param>
            <param name="checkSchema">Check the schema when compiling.</param>
            <returns>A class instance that implements the <see cref="T:Macro.Common.Actions.IActionSet`1"/> interface.</returns>
        </member>
        <member name="T:Macro.Common.UsageTracking.UsageTrackingThread">
            <summary>
            Enum for specifying if a Usage Tracking message will be sent on the current thread or a background thread.
            </summary>
        </member>
        <member name="F:Macro.Common.UsageTracking.UsageTrackingThread.Background">
            <summary>
            The Usage Tracking message will be sent on a background thread
            </summary>
        </member>
        <member name="F:Macro.Common.UsageTracking.UsageTrackingThread.Current">
            <summary>
            The UsageTracking message will be sent on the current thread.
            </summary>
        </member>
        <member name="T:Macro.Common.UsageTracking.UsageUtilities">
            <summary>
            Static helper class for implementing usage tracking of Macro applications.
            </summary>
        </member>
        <member name="M:Macro.Common.UsageTracking.UsageUtilities.Send(System.Object)">
            <summary>
            Send the UsageTracking message.
            </summary>
            <param name="theMessage"></param>
        </member>
        <member name="M:Macro.Common.UsageTracking.UsageUtilities.Register(Macro.Common.UsageTracking.UsageMessage,Macro.Common.UsageTracking.UsageTrackingThread)">
            <summary>
            Register the usage of the application with a Macro server on a background thread.
            </summary>
            <remarks>
            A check is done of the <see cref="T:Macro.Common.UsageTracking.UsageTrackingSettings"/>, and if usage tracking is enabled, the 
            <paramref name="message"/> is sent to the Macro server.
            </remarks>
            <param name="message">The usage message to send.</param>
            <param name="thread">Flag telling if the usage will be sent on the current thread or a background thread.</param>
        </member>
        <member name="M:Macro.Common.UsageTracking.UsageUtilities.GetUsageMessage">
            <summary>
            Get a <see cref="T:Macro.Common.UsageTracking.UsageMessage"/> for the application.
            </summary>
            <returns>
            <para>
            A new <see cref="T:Macro.Common.UsageTracking.UsageMessage"/> object with product, region, timestamp, license, and OS information filled in.
            </para>
            <para>
            The <see cref="T:Macro.Common.UsageTracking.UsageMessage"/> instance is used in conjunction with <see cref="M:Macro.Common.UsageTracking.UsageUtilities.Register(Macro.Common.UsageTracking.UsageMessage,Macro.Common.UsageTracking.UsageTrackingThread)"/> to send a usage message
            to Macro servers.
            </para>
            </returns>
        </member>
        <member name="E:Macro.Common.UsageTracking.UsageUtilities.MessageEvent">
            <summary>
            Event which can receive display messages from the UsageTracking server
            </summary>
            <remarks>
            Note that the configuration option in <see cref="T:Macro.Common.UsageTracking.UsageTrackingSettings"/> must be enabled to receive these
            messages.
            </remarks>
        </member>
        <member name="T:Macro.Common.Serialization.PolymorphicDataContractAttribute">
            <summary>
            Assigns a GUID to a class to enable robust polymorphic de/serialization.
            </summary>
        </member>
        <member name="M:Macro.Common.Serialization.PolymorphicDataContractAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="dataContractGuid"></param>
        </member>
        <member name="P:Macro.Common.Serialization.PolymorphicDataContractAttribute.ContractId">
            <summary>
            Gets the ID that identifies the data-contract.
            </summary>
        </member>
        <member name="T:Macro.Common.ILicenseDetailsProvider">
            <summary>
            Represents a license details provider.
            </summary>
            <remarks>
            For internal framework use only.
            </remarks>
        </member>
        <member name="M:Macro.Common.ILicenseDetailsProvider.GetTrialStatus(System.Nullable{System.TimeSpan}@)">
            <summary>
            Gets the status of the license if it is a time-limited trial.
            </summary>
            <param name="timeRemaining">Time remaining in trial period.</param>
            <returns>True if license is for a limited-use trial; False otherwise.</returns>
        </member>
        <member name="M:Macro.Common.ILicenseDetailsProvider.GetExpiryDate">
            <summary>
            Gets the license expiry date in local time.
            </summary>
            <returns>
            License expiry time or NULL if the license does not expire.
            </returns>
        </member>
        <member name="M:Macro.Common.ILicenseDetailsProvider.IsFeatureAuthorized(System.String)">
            <summary>
            Gets a value indicating whether or not a specific feature is authorized by the license.
            </summary>
            <param name="featureToken"></param>
            <returns></returns>
        </member>
        <member name="P:Macro.Common.ILicenseDetailsProvider.LicenseType">
            <summary>
            Gets a string indicating license type.
            </summary>
        </member>
        <member name="P:Macro.Common.ILicenseDetailsProvider.DiagnosticUse">
            <summary>
            Gets the licensed diagnostic use.
            </summary>
        </member>
        <member name="P:Macro.Common.ILicenseDetailsProvider.FirstRun">
            <summary>
            Gets the first run date.
            </summary>
        </member>
        <member name="T:Macro.Common.LicenseDiagnosticUse">
            <summary>
            Specifies the allowed diagnostic use of the product license.
            </summary>
        </member>
        <member name="F:Macro.Common.LicenseDiagnosticUse.None">
            <summary>
            Indicates product is not licensed for diagnostic use.
            </summary>
        </member>
        <member name="F:Macro.Common.LicenseDiagnosticUse.Allowed">
            <summary>
            Indicates product is licensed for general diagnostic use, including humans.
            </summary>
        </member>
        <member name="F:Macro.Common.LicenseDiagnosticUse.VeterinaryOnly">
            <summary>
            Indicates product is licensed only for veterinary diagnosis.
            </summary>
        </member>
        <member name="T:Macro.Common.LicenseDetailsProviderExtensionPoint">
            <summary>
            An extension point for <see cref="T:Macro.Common.ILicenseDetailsProvider"/>s.
            </summary>
            <remarks>
            For internal framework use only.
            </remarks>
        </member>
        <member name="T:Macro.Common.Audit.AuditEntryInfo">
            <summary>
            Contains all information about an audit log entry.
            </summary>
        </member>
        <member name="M:Macro.Common.Audit.AuditEntryInfo.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.Audit.AuditEntryInfo.#ctor(System.String,System.DateTime,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="category"></param>
            <param name="timeStamp"></param>
            <param name="hostName"></param>
            <param name="application"></param>
            <param name="user"></param>
            <param name="userSessionId"></param>
            <param name="operation"></param>
            <param name="details"></param>
        </member>
        <member name="P:Macro.Common.Audit.AuditEntryInfo.TimeStamp">
            <summary>
            Gets or sets the time at which this log entry was created.
            </summary>
        </member>
        <member name="P:Macro.Common.Audit.AuditEntryInfo.HostName">
            <summary>
            Gets or sets the hostname of the computer that generated this log entry.
            </summary>
        </member>
        <member name="P:Macro.Common.Audit.AuditEntryInfo.Application">
            <summary>
            Gets or sets the the name of the application that created this log entry.
            </summary>
        </member>
        <member name="P:Macro.Common.Audit.AuditEntryInfo.User">
            <summary>
            Gets or sets the user of the application on whose behalf this log entry was created.
            </summary>
        </member>
        <member name="P:Macro.Common.Audit.AuditEntryInfo.UserSessionId">
            <summary>
            Gets or sets the user session ID on whose behalf this log entry was created.
            </summary>
        </member>
        <member name="P:Macro.Common.Audit.AuditEntryInfo.Operation">
            <summary>
            Gets or sets the name of the operation that caused this log entry to be created.
            </summary>
        </member>
        <member name="P:Macro.Common.Audit.AuditEntryInfo.Details">
            <summary>
            Gets or sets the contents of this log entry, which may be text or XML based.
            </summary>
        </member>
        <member name="P:Macro.Common.Audit.AuditEntryInfo.Category">
            <summary>
            Gets or sets the category of this audit log entry.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.TypeSafeEnumeratorWrapper`1">
            <summary>
            Utility class used to wrap an untyped <see cref="T:System.Collections.IEnumerator"/> as a type-safe one.
            </summary>
            <typeparam name="T">The type of the items to be enumerated.</typeparam>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeEnumeratorWrapper`1.#ctor(System.Collections.IEnumerator)">
            <summary>
            Constructor.
            </summary>
            <param name="inner">The untyped <see cref="T:System.Collections.IEnumerator"/> to be wrapped.</param>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeEnumeratorWrapper`1.MoveNext">
            <summary>
            Moves to the next element.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeEnumeratorWrapper`1.Reset">
            <summary>
            Resets the <see cref="T:System.Collections.IEnumerator"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeEnumeratorWrapper`1.Dispose">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.TypeSafeEnumeratorWrapper`1.Current">
            <summary>
            Gets the object at the current <see cref="T:System.Collections.Generic.IEnumerator`1"/> position.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.TypeSafeEnumeratorWrapper`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the object at the current <see cref="T:System.Collections.IEnumerator"/> position.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.CommandLineParameterAttribute">
            <summary>
            When placed on a field/property of a class derived from <see cref="T:Macro.Common.Utilities.CommandLine"/>, instructs
            the base class to attempt to set the field/property according to the parsed command line arguments.
            </summary>
            <remarks>
            If the field/property is of type string, int, or enum, it is treated as a named parameter, unless
            the <see cref="P:Macro.Common.Utilities.CommandLineParameterAttribute.Position"/> property of the attribute is set, in which case it is treated as a positional
            parameter.  If the field/property is of type boolean, it is treated as a switch.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.CommandLineParameterAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Constructor for declaring a positional parameter.
            </summary>
            <param name="position"></param>
            <param name="displayName"></param>
        </member>
        <member name="M:Macro.Common.Utilities.CommandLineParameterAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor for declaring a named parameter or boolean switch.
            </summary>
            <param name="key"></param>
            <param name="usage"></param>
        </member>
        <member name="M:Macro.Common.Utilities.CommandLineParameterAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor for declaring a named parameter or boolean switch.
            </summary>
            <param name="key"></param>
            <param name="keyShortForm"></param>
            <param name="usage"></param>
        </member>
        <member name="P:Macro.Common.Utilities.CommandLineParameterAttribute.Required">
            <summary>
            Gets or sets a value indicating whether this parameter is a required parameter.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.CommandLineParameterAttribute.Position">
            <summary>
            Gets the position of a positional parameter.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.CommandLineParameterAttribute.DisplayName">
            <summary>
            Gets the display name for a positional parameter.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.CommandLineParameterAttribute.Key">
            <summary>
            Gets the key (parameter name) for a named parameter.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.CommandLineParameterAttribute.KeyShortForm">
            <summary>
            Gets the key short-form for a named parameter.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.CommandLineParameterAttribute.Usage">
            <summary>
            Gets a message describing the usage of this parameter.
            </summary>
        </member>
        <member name="T:Macro.Common.Authorization.IDefineAuthorityGroups">
            <summary>
            Interface used by <see cref="T:Macro.Common.Authorization.DefineAuthorityGroupsExtensionPoint"/>. 
            </summary>
        </member>
        <member name="M:Macro.Common.Authorization.IDefineAuthorityGroups.GetAuthorityGroups">
            <summary>
            Get the authority group definitions.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Macro.Common.Shreds.QueueProcessor">
            <summary>
            Abstract base class for queue processor classes.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Macro.Common.Shreds.QueueProcessor.Run">
            <summary>
            Runs the processor.
            </summary>
            <remarks>
            This method is expected to block indefinitely until the <see cref="M:Macro.Common.Shreds.QueueProcessor.RequestStop"/>
            method is called, at which point it should exit in a timely manner.
            </remarks>
        </member>
        <member name="M:Macro.Common.Shreds.QueueProcessor.RequestStop">
            <summary>
            Requests the task to exit gracefully.
            </summary>
            <remarks>
            This method will be called on a thread other than the thread on which the task is executing.
            This method should return quickly - it should not block.  A typical implementation simply
            sets a flag that causes the <see cref="M:Macro.Common.Shreds.QueueProcessor.Run"/> method to terminate.
            must be implemented in such a way as to heed
            a request to stop within a timely manner.
            </remarks>
        </member>
        <member name="M:Macro.Common.Shreds.QueueProcessor.RunCore">
            <summary>
            Implements the main logic of the processor.
            </summary>
            <remarks>
            Implementation is expected to run indefinitely but must poll the
            <see cref="P:Macro.Common.Shreds.QueueProcessor.StopRequested"/> property and exit in a timely manner when true.
            </remarks>
        </member>
        <member name="P:Macro.Common.Shreds.QueueProcessor.Name">
            <summary>
            A name for the queue processor.
            </summary>
            <remarks>
            The thread in the <see cref="T:Macro.Common.Shreds.QueueProcessorShred"/> corresponding to this QueueProcessor is given its Name.
            </remarks>
        </member>
        <member name="P:Macro.Common.Shreds.QueueProcessor.StopRequested">
            <summary>
            Gets a value indicating whether this processor has been requested to terminate.
            </summary>
        </member>
        <member name="T:Macro.Common.Shreds.QueueProcessor`1">
            <summary>
            Abstract base class for queue processor classes.
            </summary>
            <typeparam name="TItem"></typeparam>
            <remarks>
            <para>
            This class implements the logic to process a queue of items.  It polls the queue
            for a batch of items to process, processes those items, and then polls the queue
            again.  If the queue is empty, it sleeps for a preset amount of time.
            </para>
            <para>
            All threading is handled externally by <see cref="T:Macro.Common.Shreds.QueueProcessorShred"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.Shreds.QueueProcessor`1.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Constructor.
            </summary>
            <param name="batchSize">Max number of items to pull off queue for processing.</param>
            <param name="sleepTime"></param>
        </member>
        <member name="M:Macro.Common.Shreds.QueueProcessor`1.GetNextBatch(System.Int32)">
            <summary>
            Gets the next batch of items from the queue.
            </summary>
            <param name="batchSize"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Shreds.QueueProcessor`1.ClaimItem(`0)">
            <summary>
            Claims the item for processing.
            </summary>
            <remarks>
            This method is provided to enable the possibility of clustered queue processing - that is,
            having multiple processes operate on the same queue concurrently.  In this case,
            a process needs to claim a given item to ensure that no other process operates on it.
            The default implementation of this method does nothing and returns true.
            </remarks>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Macro.Common.Shreds.QueueProcessor`1.ProcessItem(`0)">
            <summary>
            Called to process a queue item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Macro.Common.Shreds.QueueProcessor`1.RequestSuspend(System.Int32)">
            <summary>
            Requests the task to suspend.  The processor will pause for some duration then resume processing.
            </summary>
        </member>
        <member name="M:Macro.Common.Shreds.QueueProcessor`1.RunCore">
            <summary>
            Implements the main logic of the processor.
            </summary>
            <remarks>
            Implementation is expected to run indefinitely but must poll the
            StopRequested property and exit in a timely manner when true.
            </remarks>
        </member>
        <member name="P:Macro.Common.Shreds.QueueProcessor`1.SuspendRequested">
            <summary>
            Gets a value indicating whether this processor has been requested to suspend.
            </summary>
        </member>
        <member name="T:Macro.Common.Scripting.SynchronizedScriptEngineWrapper">
            <summary>
            Wraps an instance of <see cref="T:Macro.Common.Scripting.IScriptEngine"/> and synchronizes all operations.
            </summary>
        </member>
        <member name="M:Macro.Common.Scripting.SynchronizedScriptEngineWrapper.#ctor(Macro.Common.Scripting.IScriptEngine)">
            <summary>
            Wraps the specified script engine, such that all operations will be synchronized.
            </summary>
            <param name="engine"></param>
        </member>
        <member name="M:Macro.Common.Scripting.SynchronizedScriptEngineWrapper.Run(System.String,System.Collections.IDictionary)">
            <summary>
            Runs the specified script given the specified set of variables and their values.
            </summary>
            <remarks>
            The variables dictionary contains any number of named objects that the engine must make available to the script.
            It is left up to the implementation of the engine to decide how these objects are made available to the script.
            </remarks>
            <param name="script">The script to run.</param>
            <param name="variables">A set of named objects to which the script has access.</param>
            <returns>The return value of the script.</returns>
        </member>
        <member name="M:Macro.Common.Scripting.SynchronizedScriptEngineWrapper.CreateScript(System.String,System.String[])">
            <summary>
            Asks the script engine to create an instance of a <see cref="T:Macro.Common.Scripting.IExecutableScript"/> based on the 
            specified string and variable names.
            </summary>
            <remarks>
            The variableNames array is an array of names of global variables whose values will be provided to the 
            <see cref="M:Macro.Common.Scripting.IExecutableScript.Run(System.Collections.IDictionary)"/> method.  Use of this method may offer better performance than
            calling <see cref="M:Macro.Common.Scripting.IScriptEngine.Run(System.String,System.Collections.IDictionary)"/> in the case where the same script is to be run multiple times,
            as the script engine may be able to pre-compile portions of the script.  However, this is entirely dependent
            upon the implementation of the script engine.
            </remarks>
            <param name="script">The script to create.</param>
            <param name="variableNames">The names of any global variables in the script that will be provided by the caller.</param>
            <returns>An executable script object that can be run multiple times.</returns>
        </member>
        <member name="T:Macro.Common.Scripting.IExecutableScript">
            <summary>
            Defines the interface to an executable script returned by an instance of an <see cref="T:Macro.Common.Scripting.IScriptEngine"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Scripting.IExecutableScript.Run(System.Collections.IDictionary)">
            <summary>
            Executes this script, using the supplied values to initialize any variables in the script.
            </summary>
            <param name="context">The set of values to substitute into the script.</param>
            <returns>The return value of the script.</returns>
        </member>
        <member name="M:Macro.Common.Scripting.SynchronizedScriptEngineWrapper.ExecutableScript.Run(System.Collections.IDictionary)">
            <summary>
            Executes this script, using the supplied values to initialize any variables in the script.
            </summary>
            <param name="context">The set of values to substitute into the script.</param>
            <returns>The return value of the script.</returns>
        </member>
        <member name="P:Macro.Common.Configuration.ExtendedLocalFileSettingsProvider.ExeConfigFileName">
            <summary>
            Hack to allow shared settings migration to redirect to a different exe's config file.
            </summary>
        </member>
        <member name="T:Macro.Common.Caching.CacheGetOptions">
            <summary>
            Encapsulates options for the <see cref="M:Macro.Common.Caching.ICacheClient.Get(System.String,Macro.Common.Caching.CacheGetOptions)"/> method.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.FileProcessor">
            <summary>
            A helper class providing methods for processing files.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.FileProcessor.Process(System.String,System.String,Macro.Common.Utilities.FileProcessor.ProcessFile,System.Boolean)">
            <summary>
            Processes all files on the given <paramref name="path"/> matching the specified <paramref name="searchPattern"/>.
            </summary>
            <remarks>
            The input <paramref name="path"/> can be a file or a directory.
            </remarks>
            <param name="path">The root path to the file(s) to be processed.</param>
            <param name="searchPattern">The search pattern to be used.  A value of <b>null</b> or <b>""</b> indicates that all files are a match.</param>
            <param name="proc">The method to call for each matching file.</param>
            <param name="recursive">Whether or not the <paramref name="path"/> should be searched recursively.</param>
        </member>
        <member name="M:Macro.Common.Utilities.FileProcessor.Process(System.String,System.String,Macro.Common.Utilities.FileProcessor.ProcessFileCancellable,System.Boolean)">
            <summary>
            Processes all files on the given <paramref name="path"/> matching the specified <paramref name="searchPattern"/>.
            </summary>
            <remarks>
            The input <paramref name="path"/> can be a file or a directory.
            </remarks>
            <param name="path">The root path to the file(s) to be processed.</param>
            <param name="searchPattern">The search pattern to be used.  A value of <b>null</b> or <b>""</b> indicates that all files are a match.</param>
            <param name="proc">The method to call for each matching file.</param>
            <param name="recursive">Whether or not the <paramref name="path"/> should be searched recursively.</param>
        </member>
        <member name="T:Macro.Common.Utilities.FileProcessor.ProcessFile">
            <summary>
            Delegate for use by the <see cref="M:Macro.Common.Utilities.FileProcessor.Process(System.String,System.String,Macro.Common.Utilities.FileProcessor.ProcessFile,System.Boolean)"/> method.
            </summary>
            <param name="filePath">The path to the file to be processed.</param>
        </member>
        <member name="T:Macro.Common.Utilities.FileProcessor.ProcessFileCancellable">
            <summary>
            Delegate for use by the <see cref="M:Macro.Common.Utilities.FileProcessor.Process(System.String,System.String,Macro.Common.Utilities.FileProcessor.ProcessFileCancellable,System.Boolean)"/> method.
            </summary>
            <param name="filePath">The path to the file to be processed.</param>
            <param name="cancel">Gets whether or not the entire processing operation should be cancelled.</param>
        </member>
        <member name="T:Macro.Common.Utilities.TimerDelegate">
            <summary>
            A delegate for use by a <see cref="T:Macro.Common.Utilities.Timer"/> object.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.Timer">
            <summary>
            Implements a simple timer class that handles marshalling delegates back to the thread on which
            this object was allocated (usually the main UI thread).
            </summary>
            <remarks>
            This class <B>must</B> be instantiated from within a UI thread, otherwise an exception
            could be thrown upon construction (unless the thread has a custom <see cref="T:System.Threading.SynchronizationContext"/>).  
            This class relies on <see cref="P:System.Threading.SynchronizationContext.Current"/> being non-null in order to do the marshalling.
            Also, this class is very simple and may not be as accurate as other timer classes.
            </remarks>
        </member>
        <member name="M:Macro.Common.Utilities.Timer.#ctor(Macro.Common.Utilities.TimerDelegate)">
            <summary>
            Constructor.
            </summary>
            <param name="elapsedDelegate">The delegate to execute on a timer.</param>
        </member>
        <member name="M:Macro.Common.Utilities.Timer.#ctor(Macro.Common.Utilities.TimerDelegate,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="elapsedDelegate">The delegate to execute on a timer.</param>
            <param name="stateObject">A user defined state object.</param>
        </member>
        <member name="M:Macro.Common.Utilities.Timer.#ctor(Macro.Common.Utilities.TimerDelegate,System.Object,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="elapsedDelegate">The delegate to execute on a timer.</param>
            <param name="stateObject">A user defined state object.</param>
            <param name="intervalMilliseconds">The time to wait in milliseconds.</param>
        </member>
        <member name="M:Macro.Common.Utilities.Timer.Start">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.Timer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.Timer.Dispose">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> pattern.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.Timer.Enabled">
            <summary>
            Gets whether or not the timer is currently running.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.Timer.IntervalMilliseconds">
            <summary>
            Sets the timer interval in milliseconds.
            </summary>
            <remarks>
            The default value is 1000 milliseconds, or 1 second.
            </remarks>
        </member>
        <member name="T:Macro.Common.NamedObjectRef`1">
            <summary>
            Base class for <see cref="T:Macro.Common.TypeRef"/> and <see cref="T:Macro.Common.AssemblyRef"/>.
            </summary>
            <typeparam name="T">The type of the referenced object.</typeparam>
            <remarks>
            Instances of this class are immutable and safe for concurrent access by multiple threads.
            </remarks>
        </member>
        <member name="M:Macro.Common.NamedObjectRef`1.Resolve">
            <summary>
            Resolves the reference and returns the referenced object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macro.Common.NamedObjectRef`1.IsResolved">
            <summary>
            Gets a value indicating whether the referenced object has been resolved.
            </summary>
        </member>
        <member name="T:Macro.Common.TypeRef">
            <summary>
            Represents a reference to a <see cref="T:System.Type"/> object.
            </summary>
            <remarks>
            <para>
            To obtain a <see cref="T:Macro.Common.TypeRef"/> instance, use an overload of <see cref="M:Macro.Common.TypeRef.Get(System.String)"/>.
            Alternatively, an existing <see cref="T:System.Type"/> object can be implicitly cast to a
            <see cref="T:Macro.Common.TypeRef"/> instance.
            </para>
            <para>
            Instances of this class are immutable and safe for concurrent access by multiple threads.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.TypeRef.Get(System.String)">
            <summary>
            Gets a <see cref="T:Macro.Common.TypeRef"/> corresponding to the specified type.
            </summary>
        </member>
        <member name="M:Macro.Common.TypeRef.Get(System.Type)">
            <summary>
            Gets a <see cref="T:Macro.Common.TypeRef"/> corresponding to the specified type.
            </summary>
        </member>
        <member name="M:Macro.Common.TypeRef.#ctor(System.String,System.Type)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.TypeRef.#ctor(System.String)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.TypeRef.op_Implicit(System.Type)~Macro.Common.TypeRef">
            <summary>
            Converts a <see cref="T:System.Type"/> to a <see cref="T:Macro.Common.TypeRef"/>.
            </summary>
        </member>
        <member name="P:Macro.Common.TypeRef.FullName">
            <summary>
            Gets the full name of the referenced type.
            </summary>
        </member>
        <member name="P:Macro.Common.TypeRef.AssemblyName">
            <summary>
            Gets the name of the assembly in which the type is defined.
            </summary>
        </member>
        <member name="T:Macro.Common.TypeRef.SerializationSurrogate">
            <summary>
            Serialization helper class.
            </summary>
        </member>
        <member name="T:Macro.Common.AssemblyRef">
            <summary>
            Represents a reference to an <see cref="T:System.Reflection.Assembly"/> object.
            </summary>
            <remarks>
            <para>
            To obtain an <see cref="T:Macro.Common.AssemblyRef"/> instance, use an overload of <see cref="M:Macro.Common.AssemblyRef.Get(System.String)"/>.
            Alternatively, an existing <see cref="T:System.Reflection.Assembly"/> object can be implicitly cast to an
            <see cref="T:Macro.Common.AssemblyRef"/> instance.
            </para>
            <para>
            Instances of this class are immutable and safe for concurrent access by multiple threads.
            </para>
            </remarks>
        </member>
        <member name="M:Macro.Common.AssemblyRef.Get(System.String)">
            <summary>
            Gets an <see cref="T:Macro.Common.AssemblyRef"/> corresponding to the specified assembly.
            </summary>
        </member>
        <member name="M:Macro.Common.AssemblyRef.Get(System.Reflection.Assembly)">
            <summary>
            Gets an <see cref="T:Macro.Common.AssemblyRef"/> corresponding to the specified assembly.
            </summary>
        </member>
        <member name="M:Macro.Common.AssemblyRef.SetResolver(System.Func{System.String,System.Reflection.Assembly})">
            <summary>
            Sets a global assembly resolver.
            </summary>
            <param name="assemblyResolver"></param>
        </member>
        <member name="M:Macro.Common.AssemblyRef.#ctor(System.String,System.Reflection.Assembly)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.AssemblyRef.#ctor(System.String)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.AssemblyRef.op_Implicit(System.Reflection.Assembly)~Macro.Common.AssemblyRef">
            <summary>
            Converts an <see cref="T:System.Reflection.Assembly"/> to an <see cref="T:Macro.Common.AssemblyRef"/>.
            </summary>
        </member>
        <member name="T:Macro.Common.AssemblyRef.SerializationSurrogate">
            <summary>
            Serialization helper class.
            </summary>
        </member>
        <member name="T:Macro.Common.AttributeExtensionFilter">
            <summary>
            Implements an extension filter that performs matching on attributes.
            </summary>
            <remarks>
            For each attribute that is supplied to the constructor of this filter, the filter
            will check if the extension is marked with at least one matching attribute.  A matching attribute is an
            attribute for which the <see cref="M:System.Attribute.Match(System.Object)"/> method returns true.  This allows
            for quite sophisticated matching capabilities, as the attribute itself decides what constitutes
            a match.
            </remarks>
        </member>
        <member name="M:Macro.Common.AttributeExtensionFilter.#ctor(System.Attribute[])">
            <summary>
            Creates a filter to match on multiple attributes.
            </summary>
            <remarks>
            The extension must test true on each attribute.
            </remarks>
            <param name="attributes">The attributes to be used as test criteria.</param>
        </member>
        <member name="M:Macro.Common.AttributeExtensionFilter.#ctor(System.Attribute)">
            <summary>
            Creates a filter to match on a single attribute.
            </summary>
            <param name="attribute">The attribute to be used as test criteria.</param>
        </member>
        <member name="M:Macro.Common.AttributeExtensionFilter.Test(Macro.Common.ExtensionInfo)">
            <summary>
            Checks whether the specified extension is marked with attributes that 
            match every test attribute supplied as criteria to this filter.
            </summary>
            <param name="extension">The information about the extension to test.</param>
            <returns>true if the test succeeds.</returns>
        </member>
        <member name="T:Macro.Common.Statistics.StatisticsContext">
            <summary>
            <see cref="T:Macro.Common.Statistics.IStatisticsContext"/> implemenation class 
            </summary>
        </member>
        <member name="T:Macro.Common.Statistics.IStatisticsContext">
            <summary>
            Defines the interface of the context where performance <see cref="T:Macro.Common.Statistics.IStatistics"/> is being tracked.
            </summary>
        </member>
        <member name="P:Macro.Common.Statistics.IStatisticsContext.ID">
            <summary>
            Gets or sets the ID of the context
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.StatisticsContext.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.StatisticsContext"/> with a specified ID.
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Macro.Common.Statistics.StatisticsContext.ID">
            <summary>
            Gets or sets the ID of the context
            </summary>
        </member>
        <member name="T:Macro.Common.Statistics.CountStatistics">
            <summary>
            Statistics to store the number of messages.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Macro.Common.Statistics.CountStatistics.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.CountStatistics"/> with unit "?"
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Macro.Common.Statistics.CountStatistics.#ctor(System.String,System.UInt32)">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.CountStatistics"/> with specified name and value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Macro.Common.Statistics.CountStatistics.#ctor(Macro.Common.Statistics.CountStatistics)">
            <summary>
            Creates a copy of the original <see cref="T:Macro.Common.Statistics.CountStatistics"/>
            </summary>
            <param name="copy"></param>
        </member>
        <member name="T:Macro.Common.Statistics.AverageByteCountStatistics">
            <summary>
            Average statistics class based on samples of <see cref="T:Macro.Common.Statistics.ByteCountStatistics"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.AverageByteCountStatistics.#ctor">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.AverageByteCountStatistics"/>
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.AverageByteCountStatistics.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.AverageByteCountStatistics"/> with a specific name.
            </summary>
            <param name="name">Name of the <see cref="T:Macro.Common.Statistics.AverageByteCountStatistics"/> instance object to be created</param>
        </member>
        <member name="M:Macro.Common.Statistics.AverageByteCountStatistics.#ctor(Macro.Common.Statistics.ByteCountStatistics)">
            <summary>
            Creates an copy instance of <see cref="T:Macro.Common.Statistics.AverageByteCountStatistics"/> based on another <see cref="T:Macro.Common.Statistics.AverageByteCountStatistics"/> instance.
            </summary>
            <param name="source">The original <see cref="T:Macro.Common.Statistics.AverageByteCountStatistics"/> object</param>
        </member>
        <member name="M:Macro.Common.Statistics.AverageByteCountStatistics.AddSample``1(``0)">
            <summary>
            Adds a sample to the <see cref="P:Macro.Common.Statistics.AverageStatistics`1.Samples"/> list.
            </summary>
            <typeparam name="TSample">Type of the sample value to be inserted</typeparam>
            <param name="sample"></param>
        </member>
        <member name="M:Macro.Common.Statistics.AverageByteCountStatistics.ComputeAverage">
            <summary>
            Computes the average for the samples in <see cref="T:Macro.Common.Statistics.AverageStatistics`1"/> list.
            </summary>
        </member>
        <member name="T:Macro.Common.Specifications.CaseSpecification">
            <summary>
            Class for implementing Case/When/Else statements.
            </summary>
            <see cref="T:Macro.Common.Specifications.ISpecification"/>
        </member>
        <member name="M:Macro.Common.Specifications.CaseSpecification.InnerTest(System.Object,System.Object)">
            <summary>
            Perform the test.
            </summary>
            <param name="exp"></param>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="F:Macro.Common.Configuration.SettingsGroupFilter.All">
            <summary>
            All settings groups (no filter).
            </summary>
        </member>
        <member name="F:Macro.Common.Configuration.SettingsGroupFilter.SupportEnterpriseStorage">
            <summary>
            Settings groups that will be stored in the enterprise configuration store, if one exists.
            </summary>
        </member>
        <member name="F:Macro.Common.Configuration.SettingsGroupFilter.LocalStorage">
            <summary>
            Settings groups that use some form of local storage.
            </summary>
        </member>
        <member name="F:Macro.Common.Configuration.SettingsGroupFilter.SupportsEditingOfSharedProfile">
            <summary>
            Settings groups that support editing of the shared profile.
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.SettingsGroupDescriptor">
            <summary>
            Describes a settings group.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsGroupDescriptor.ListInstalledSettingsGroups">
            <summary>
            Returns a list of <see cref="T:Macro.Common.Configuration.SettingsGroupDescriptor"/> objects describing each settings class
            that exists in the installed plugin base.
            </summary>
            <remarks>
            This method is thread-safe.
            </remarks>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsGroupDescriptor.ListInstalledSettingsGroups(Macro.Common.Configuration.SettingsGroupFilter)">
            <summary>
            Returns a list of <see cref="T:Macro.Common.Configuration.SettingsGroupDescriptor"/> objects describing each settings class
            that exists in the installed plugin base, applying the specified filter.
            </summary>
            <remarks>
            This method is thread-safe.
            </remarks>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsGroupDescriptor.#ctor(System.String,System.Version,System.String,System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsGroupDescriptor.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsGroupDescriptor.Equals(System.Object)">
            <summary>
            Settings groups are considered equal if they have the same name and version.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsGroupDescriptor.GetHashCode">
            <summary>
            Gets the hash code for this object.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsGroupDescriptor.Equals(Macro.Common.Configuration.SettingsGroupDescriptor)">
            <summary>
            Settings groups are considered equal if they have the same name and version.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsGroupDescriptor.GetSafeClassName(System.Type)">
            <summary>
            Gets the assembly qualified name of the type, but without all the version and culture info.
            </summary>
            <param name="settingsClass"></param>
            <returns></returns>
        </member>
        <member name="P:Macro.Common.Configuration.SettingsGroupDescriptor.Name">
            <summary>
            Gets the name of the settings group.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.SettingsGroupDescriptor.Version">
            <summary>
            Gets the version of the settings group.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.SettingsGroupDescriptor.Description">
            <summary>
            Gets the description of the settings group.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.SettingsGroupDescriptor.HasUserScopedSettings">
            <summary>
            Gets a value indicating whether this settings class has user-scoped settings.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.SettingsGroupDescriptor.AssemblyQualifiedTypeName">
            <summary>
            Gets the assembly-qualified type name of the class that implements the settings group.
            </summary>
        </member>
        <member name="T:Macro.Common.Actions.IActionItem`1">
            <summary>
            Performs an action using an implementation specific context.
            </summary>
        </member>
        <member name="M:Macro.Common.Actions.IActionItem`1.Execute(`0)">
            <summary>
            Executes the action.
            </summary>
            <param name="context">An implementation specific context for the action.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="P:Macro.Common.Actions.IActionItem`1.FailureReason">
            <summary>
            A descriptive reason for a failure of the action.  This property is populated when <see cref="M:Macro.Common.Actions.IActionItem`1.Execute(`0)"/> returns false.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.FileTransferRequest">
            <summary>
            Defines a request to transfer a file between local and remote file systems.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.FileTransferRequest.#ctor(System.Uri,System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.FileTransferRequest.RemoteFile">
            <summary>
            The url of the remote file.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.FileTransferRequest.LocalFile">
            <summary>
            The complete path of the local file.
            </summary>
        </member>
        <member name="T:Macro.Common.UsageTracking.DisplayMessage">
            <summary>
            A display message related to a Macro application.
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.DisplayMessage.Title">
            <summary>
            The title of the message to be displayed
            </summary>
        </member>
        <member name="P:Macro.Common.UsageTracking.DisplayMessage.Message">
            <summary>
            The content of the message.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.ItemEventArgs`1">
            <summary>
            <see cref="T:System.EventArgs"/>-derived class for raising events about a particular object of type <typeparamref name="TItem"/>.
            </summary>
            <typeparam name="TItem">Any arbitrary type for which an event is to be raised.</typeparam>
        </member>
        <member name="M:Macro.Common.Utilities.ItemEventArgs`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="item">The item that is the subject of the raised event.</param>
        </member>
        <member name="P:Macro.Common.Utilities.ItemEventArgs`1.Item">
            <summary>
            Gets the item that is the subject of the raised event.
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.StandardSettingsProvider">
            <summary>
            This class is the standard settings provider that should be used by all settings classes that operate
            within the Macro framework.
            </summary>
            <remarks>
            Internally, this class will delegate the storage of settings between
            the local file system and an implemetation of <see cref="T:Macro.Common.Configuration.SettingsStoreExtensionPoint"/>,
            if an extension is found.  All methods on this class are thread-safe, as per MSDN guidelines.
            </remarks>
        </member>
        <member name="M:Macro.Common.Configuration.StandardSettingsProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.StandardSettingsProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <param name="name">The friendly name of the provider.</param>
        </member>
        <member name="M:Macro.Common.Configuration.StandardSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
            <summary>
            Returns the collection of settings property values for the specified application instance and settings property group.
            </summary>
            
            <returns>
            A <see cref="T:System.Configuration.SettingsPropertyValueCollection"></see> containing the values for the specified settings property group.
            </returns>
            
            <param name="context">A <see cref="T:System.Configuration.SettingsContext"></see> describing the current application use.</param>
            <param name="props">A <see cref="T:System.Configuration.SettingsPropertyCollection"></see> containing the settings property group whose values are to be retrieved.</param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Macro.Common.Configuration.StandardSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)">
            <summary>
            Sets the values of the specified group of property settings.
            </summary>
            
            <param name="context">A <see cref="T:System.Configuration.SettingsContext"></see> describing the current application usage.</param>
            <param name="settings">A <see cref="T:System.Configuration.SettingsPropertyValueCollection"></see> representing the group of property settings to set.</param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Macro.Common.Configuration.StandardSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)">
            <summary>
            Returns the value of the specified settings property for the previous version of the same application.
            </summary>
            
            <returns>
            A <see cref="T:System.Configuration.SettingsPropertyValue"></see> containing the value of the specified property setting as it was last set in the previous version of the application; or null if the setting cannot be found.
            </returns>
            
            <param name="context">A <see cref="T:System.Configuration.SettingsContext"></see> describing the current application usage.</param>
            <param name="property">The <see cref="T:System.Configuration.SettingsProperty"></see> whose value is to be returned.</param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Macro.Common.Configuration.StandardSettingsProvider.Reset(System.Configuration.SettingsContext)">
            <summary>
            Resets the application settings associated with the specified application to their default values.
            </summary>
            
            <param name="context">A <see cref="T:System.Configuration.SettingsContext"></see> describing the current application usage.</param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Macro.Common.Configuration.StandardSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
            <summary>
            Indicates to the provider that the application has been upgraded. This offers the provider an opportunity to upgrade its stored settings as appropriate.
            </summary>
            
            <param name="properties">A <see cref="T:System.Configuration.SettingsPropertyCollection"></see> containing the settings property group whose values are to be retrieved.</param>
            <param name="context">A <see cref="T:System.Configuration.SettingsContext"></see> describing the current application usage.</param><filterpriority>2</filterpriority>
        </member>
        <member name="P:Macro.Common.Configuration.StandardSettingsProvider.ApplicationName">
            <summary>
            Gets the Application Name used to initialize the settings subsystem.
            </summary>
        </member>
        <member name="T:Macro.Common.Specifications.CountSpecification">
            <summary>
            Counts the number of items in a <see cref="T:System.Collections.IEnumerable"/> that satisfy the inner specification. If no
            inner specification is supplied, all items are counted.
            </summary>
        </member>
        <member name="T:Macro.Common.Statistics.TimeSpanStatistics">
            <summary>
            Statistics class to track a timespan.
            </summary>
            <remarks>
            <see cref="P:Macro.Common.Statistics.IStatistics.FormattedValue"/> of the <see cref="T:Macro.Common.Statistics.TimeSpanStatistics"/> has unit of "sec", "ms", "min", "hr" depending on the elapsed time
            between <see cref="M:Macro.Common.Statistics.TimeSpanStatistics.Start"/> and <see cref="M:Macro.Common.Statistics.TimeSpanStatistics.End"/> calls. The number of ticks between these calls is stored in <see cref="P:Macro.Common.Statistics.Statistics`1.Value"/>.
            
            <example>
            <code>
                TimeSpanStatistics ts = new TimeSpanStatistics("Time");
                transferSpeed.Begin();
                ....
                transferSpeed.End();
            </code>
            
            <para>If the time elapsed between Begin() and End() is 90 second, then ts.FormattedValue = "1 min 30 sec"</para>
            <para>If the time elapsed is 300 miliseconds, then ts.FormattedValue = "300ms"</para>
            
            <para>
            <see cref="T:Macro.Common.Statistics.TimeSpanStatistics"/> also supports <see cref="M:Macro.Common.Statistics.TimeSpanStatistics.Add(Macro.Common.Statistics.TimeSpanStatistics)"/> and <see cref="M:Macro.Common.Statistics.TimeSpanStatistics.Subtract(Macro.Common.Statistics.TimeSpanStatistics)"/> for timespan 
            arithmetics.
            </para>
            
            </example>
            
            
            
            </remarks>
            
        </member>
        <member name="M:Macro.Common.Statistics.TimeSpanStatistics.#ctor">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.TimeSpanStatistics"/>
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.TimeSpanStatistics.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.TimeSpanStatistics"/> with a specified name.
            </summary>
            <param name="name">Name of the <see cref="T:Macro.Common.Statistics.TimeSpanStatistics"/> instance to be created</param>
        </member>
        <member name="M:Macro.Common.Statistics.TimeSpanStatistics.#ctor(Macro.Common.Statistics.TimeSpanStatistics)">
            <summary>
            Creates a copy of the orginal <see cref="T:Macro.Common.Statistics.TimeSpanStatistics"/> object.
            </summary>
            <param name="copy"></param>
        </member>
        <member name="M:Macro.Common.Statistics.TimeSpanStatistics.Reset">
            <summary>
            Resets the current statistics.
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.TimeSpanStatistics.Add(Macro.Common.Statistics.TimeSpanStatistics)">
            <summary>
            Adds a duration to the current <see cref="T:Macro.Common.Statistics.TimeSpanStatistics"/>.
            </summary>
            <param name="duration"></param>
            <remarks>
            Duration set using <see cref="M:Macro.Common.Statistics.TimeSpanStatistics.Add(Macro.Common.Statistics.TimeSpanStatistics)"/> will
            be lost if <see cref="M:Macro.Common.Statistics.TimeSpanStatistics.Start"/> and <see cref="M:Macro.Common.Statistics.TimeSpanStatistics.End"/> are called.
            </remarks>
        </member>
        <member name="M:Macro.Common.Statistics.TimeSpanStatistics.Add(Macro.Common.Statistics.TimeSpanStatisticsHelper.ExecutationBlock)">
            <summary>
            Executes and measures the duration of the specified call.
            </summary>
            <param name="codeDelegate">a delegate to an executation block</param>
            <remarks>
            This method provides a convenient mean to capture the elapsed time of the code block. 
            </remarks>
        </member>
        <member name="M:Macro.Common.Statistics.TimeSpanStatistics.Add(System.Int64)">
            <summary>
            Adds a number of ticks to the current <see cref="T:Macro.Common.Statistics.TimeSpanStatistics"/>.
            </summary>
            <param name="ticks"></param>
            <remarks>
            Duration set using <see cref="M:Macro.Common.Statistics.TimeSpanStatistics.Add(System.Int64)"/> will
            be lost if <see cref="M:Macro.Common.Statistics.TimeSpanStatistics.Start"/> and <see cref="M:Macro.Common.Statistics.TimeSpanStatistics.End"/> are called.
            </remarks>
        </member>
        <member name="M:Macro.Common.Statistics.TimeSpanStatistics.Subtract(System.Int64)">
            <summary>
            Subtract a number of ticks from the current <see cref="T:Macro.Common.Statistics.TimeSpanStatistics"/>.
            </summary>
            <param name="ticks"></param>
            <remarks>
            Duration set using <see cref="M:Macro.Common.Statistics.TimeSpanStatistics.Subtract(System.Int64)"/> will
            be lost if <see cref="M:Macro.Common.Statistics.TimeSpanStatistics.Start"/> and <see cref="M:Macro.Common.Statistics.TimeSpanStatistics.End"/> are called.
            </remarks>
        </member>
        <member name="M:Macro.Common.Statistics.TimeSpanStatistics.Subtract(Macro.Common.Statistics.TimeSpanStatistics)">
            <summary>
            Adds a duration to the current <see cref="T:Macro.Common.Statistics.TimeSpanStatistics"/>.
            </summary>
            <param name="duration">The duration </param>
            <remarks>
            Duration set using <see cref="M:Macro.Common.Statistics.TimeSpanStatistics.Subtract(Macro.Common.Statistics.TimeSpanStatistics)"/> will
            be lost if <see cref="M:Macro.Common.Statistics.TimeSpanStatistics.Start"/> and <see cref="M:Macro.Common.Statistics.TimeSpanStatistics.End"/> are called.
            </remarks>
        </member>
        <member name="M:Macro.Common.Statistics.TimeSpanStatistics.Start">
            <summary>
            Signals the beginning of the period to be measured.
            </summary>
        </member>
        <member name="M:Macro.Common.Statistics.TimeSpanStatistics.End">
            <summary>
            Signals the end of the period to be measured.
            </summary>
            <remarks>
            Any value set using <see cref="M:Macro.Common.Statistics.TimeSpanStatistics.Add(Macro.Common.Statistics.TimeSpanStatistics)"/> and <see cref="M:Macro.Common.Statistics.TimeSpanStatistics.Subtract(Macro.Common.Statistics.TimeSpanStatistics)"/> will
            be lost. The <see cref="P:Macro.Common.Statistics.Statistics`1.Value"/>  will be the elapsed time between <see cref="M:Macro.Common.Statistics.TimeSpanStatistics.Start"/> and <see cref="M:Macro.Common.Statistics.TimeSpanStatistics.End"/>
            </remarks>
        </member>
        <member name="P:Macro.Common.Statistics.TimeSpanStatistics.IsSet">
            <summary>
            Gets a value indiating whether or not the value of the statistics has been set.
            </summary>
        </member>
        <member name="P:Macro.Common.Statistics.TimeSpanStatistics.IsRunning">
            <summary>
            Gets a value indicating whether or not the statistics is still being recorded 
            </summary>
            <remarks>
            After after <see cref="M:Macro.Common.Statistics.TimeSpanStatistics.Start"/> is called, the statistics will be in running state until <see cref="M:Macro.Common.Statistics.TimeSpanStatistics.End"/> is called.
            </remarks>
        </member>
        <member name="P:Macro.Common.Statistics.TimeSpanStatistics.ElapsedTick">
            <summary>
            Gets the total elapsed time measured, in timer ticks.
            </summary>
        </member>
        <member name="T:Macro.Common.Shreds.ShredExtensionPoint">
            <summary>
            Defines an extension point for shreds that can be loaded and executed by the shred-host.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.ObservableList`1">
            <summary>
            A list class, changes to which can be observed via events.
            </summary>
            <remarks>
            Internally, a simple <see cref="T:System.Collections.Generic.List`1"/> object is used.  
            For exception details on individual methods, see <see cref="T:System.Collections.Generic.List`1"/>.
            </remarks>
            <typeparam name="TItem">The type of the objects stored in the list.</typeparam>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableList`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Copy constructor that takes a set of <typeparamref name="TItem"/>s and adds them to this list.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the list given the input <paramref name="sortComparer"/>.
            </summary>
            <param name="sortComparer">A comparer to be used to sort the list.</param>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableList`1.IndexOf(`0)">
            <summary>
            Gets the index of <paramref name="item"/> in the list.
            </summary>
            <returns>The index of <paramref name="item"/>, or -1 if it is not in the list.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts <paramref name="item"/> at the specified <paramref name="index"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified <paramref name="index"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableList`1.Add(`0)">
            <summary>
            Adds the specified item to the list.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the items of the specified collection to the end of the list.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableList`1.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableList`1.Contains(`0)">
            <summary>
            Gets whether or not the list contains the specified item.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire contents of the list to the input <paramref name="array"/>, 
            starting at the specified <paramref name="arrayIndex"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableList`1.Remove(`0)">
            <summary>
            Removes the specified <paramref name="item"/> from the list.
            </summary>
            <returns>True if the item was in the list and was removed.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableList`1.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the list.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> for the list.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableList`1.OnItemAdded(Macro.Common.Utilities.ListEventArgs{`0})">
            <summary>
            Called internally when an item is added.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableList`1.OnItemRemoved(Macro.Common.Utilities.ListEventArgs{`0})">
            <summary>
            Called internally when an item is removed.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableList`1.OnItemChanging(Macro.Common.Utilities.ListEventArgs{`0})">
            <summary>
            Called internally when an item is changing.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.ObservableList`1.OnItemChanged(Macro.Common.Utilities.ListEventArgs{`0})">
            <summary>
            Called internally when an item has changed.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.ObservableList`1.EnableEvents">
            <summary>
            Gets or sets a value indicating whether <see cref="E:Macro.Common.Utilities.ObservableList`1.ItemAdded"/>, <see cref="E:Macro.Common.Utilities.ObservableList`1.ItemChanged"/>,
            <see cref="E:Macro.Common.Utilities.ObservableList`1.ItemChanging"/> and <see cref="E:Macro.Common.Utilities.ObservableList`1.ItemRemoved"/> events are raised.
            </summary>
        </member>
        <member name="E:Macro.Common.Utilities.ObservableList`1.ItemAdded">
            <summary>
            Fired when an item is added to the list.
            </summary>
        </member>
        <member name="E:Macro.Common.Utilities.ObservableList`1.ItemRemoved">
            <summary>
            Fired when an item is removed from the list.
            </summary>
        </member>
        <member name="E:Macro.Common.Utilities.ObservableList`1.ItemChanged">
            <summary>
            Fired when an item in the list has changed.
            </summary>
        </member>
        <member name="E:Macro.Common.Utilities.ObservableList`1.ItemChanging">
            <summary>
            Fires when an item in the list is about to change.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.ObservableList`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.ObservableList`1.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.ObservableList`1.IsReadOnly">
            <summary>
            returns false.
            </summary>
        </member>
        <member name="T:Macro.Common.Utilities.TypeSafeListWrapper`1">
            <summary>
            Utility class used to wrap an untyped <see cref="T:System.Collections.IList"/> as a type-safe one.
            </summary>
            <typeparam name="T">The type of the items in the list.</typeparam>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeListWrapper`1.#ctor(System.Collections.IList)">
            <summary>
            Constructor.
            </summary>
            <param name="innerList">The untyped <see cref="T:System.Collections.IList"/> to wrap.</param>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeListWrapper`1.IndexOf(`0)">
            <summary>
            Gets the index of <paramref name="item"/> in the list.
            </summary>
            <returns>The index of the input item, or -1 if it doesn't exist.</returns>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeListWrapper`1.Insert(System.Int32,`0)">
            <summary>
            Inserts <paramref name="item"/> at the specified <paramref name="index"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeListWrapper`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at <paramref name="index"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeListWrapper`1.Add(`0)">
            <summary>
            Adds the <paramref name="item"/> to the list.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeListWrapper`1.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeListWrapper`1.Contains(`0)">
            <summary>
            Gets whether or not <paramref name="item"/> is in the list.
            </summary>
            <returns>
            True if the item is in the list, false otherwise.
            </returns>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeListWrapper`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire contents of the list to <paramref name="array"/>, 
            starting at the specified <paramref name="arrayIndex"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeListWrapper`1.Remove(`0)">
            <summary>
            Removes <paramref name="item"/> from the list.
            </summary>
            <returns>
            True if the item was in the list and was successfully removed, otherwise false.
            </returns>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeListWrapper`1.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the list.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeListWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> for the list.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeListWrapper`1.Add(System.Object)">
            <summary>
            Adds <paramref name="value"/> to the list.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeListWrapper`1.Contains(System.Object)">
            <summary>
            Gets whether or not <paramref name="value"/> is in the list.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeListWrapper`1.IndexOf(System.Object)">
            <summary>
            Gets the index of <paramref name="value"/>, or -1 if it is not in the list.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeListWrapper`1.Insert(System.Int32,System.Object)">
            <summary>
            Inserts <paramref name="value"/> at the specified <paramref name="index"/>.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeListWrapper`1.Remove(System.Object)">
            <summary>
            Removes <paramref name="value"/> from the list.
            </summary>
        </member>
        <member name="M:Macro.Common.Utilities.TypeSafeListWrapper`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire contents of the list to <paramref name="array"/>, 
            starting at the specified <paramref name="index"/>.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.TypeSafeListWrapper`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at <paramref name="index"/>.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.TypeSafeListWrapper`1.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.TypeSafeListWrapper`1.IsReadOnly">
            <summary>
            Gets whether or not the list is read-only.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.TypeSafeListWrapper`1.IsFixedSize">
            <summary>
            Gets whether or not the list is of fixed size.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.TypeSafeListWrapper`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets the item at the specified <paramref name="index"/>.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.TypeSafeListWrapper`1.IsSynchronized">
            <summary>
            Gets whether or not the list is synchronized.
            </summary>
        </member>
        <member name="P:Macro.Common.Utilities.TypeSafeListWrapper`1.SyncRoot">
            <summary>
            Gets the sync root object for synchronization of the list.
            </summary>
        </member>
        <member name="T:Macro.Common.ExtensionPointAttribute">
            <summary>
            Attribute used to mark a class as defining an extension point.
            </summary>
            <remarks>
            Use this attribute to mark a class as defining an extension point.  This attribute must only be
            applied to subclasses of <see cref="T:Macro.Common.ExtensionPoint"/>.
            </remarks>
        </member>
        <member name="M:Macro.Common.ExtensionPointAttribute.#ctor">
            <summary>
            Attribute constructor.
            </summary>
        </member>
        <member name="P:Macro.Common.ExtensionPointAttribute.Name">
            <summary>
            A friendly name for the extension point.  
            </summary>
            <remarks>
            This is optional and may be supplied as a named parameter.
            </remarks>
        </member>
        <member name="P:Macro.Common.ExtensionPointAttribute.Description">
            <summary>
            A friendly description for the extension point.  
            </summary>
            <remarks>
            This is optional and may be supplied as a named parameter.
            </remarks>
        </member>
        <member name="T:Macro.Common.Statistics.ByteCountStatistics">
            <summary>
            Statistics to store the number of bytes
            </summary>
            <remarks>
            <see cref="P:Macro.Common.Statistics.IStatistics.FormattedValue"/> of the <see cref="T:Macro.Common.Statistics.ByteCountStatistics"/> has unit of "GB", 'MB" or "KB"
            depending on the number of bytes being set.
            </remarks>
        </member>
        <member name="M:Macro.Common.Statistics.ByteCountStatistics.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.ByteCountStatistics"/>
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Macro.Common.Statistics.ByteCountStatistics.#ctor(System.String,System.UInt64)">
            <summary>
            Creates an instance of <see cref="T:Macro.Common.Statistics.ByteCountStatistics"/> with specified name and value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Macro.Common.Statistics.ByteCountStatistics.#ctor(Macro.Common.Statistics.ByteCountStatistics)">
            <summary>
            Creates a copy of the original <see cref="T:Macro.Common.Statistics.ByteCountStatistics"/> object.
            </summary>
            <param name="source">The original <see cref="T:Macro.Common.Statistics.ByteCountStatistics"/> to copy</param>
        </member>
        <member name="M:Macro.Common.Statistics.ByteCountStatistics.Clone">
            <summary>
            Creates a copy of the current statistics
            </summary>
            <returns>A copy of the current <see cref="T:Macro.Common.Statistics.RateStatistics"/> object</returns>
        </member>
        <member name="M:Macro.Common.Statistics.ByteCountStatistics.NewAverageStatistics">
            <summary>
            Returns a new average statistics object corresponding to the current statistics
            </summary>
            <returns>A <see cref="T:Macro.Common.Statistics.AverageRateStatistics"/> object</returns>
        </member>
        <member name="T:Macro.Common.Configuration.SettingsPropertyDescriptor">
            <summary>
            Describes a settings property.
            </summary>
            <remarks>
            A settings property is a single property belonging to a settings group.
            </remarks>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsPropertyDescriptor.ListSettingsProperties(Macro.Common.Configuration.SettingsGroupDescriptor)">
            <summary>
            Returns a list of <see cref="T:Macro.Common.Configuration.SettingsPropertyDescriptor"/> objects describing each property belonging
            to a settings group.
            </summary>
            <remarks>
            The specified group must refer to a locally installed settings class.
            </remarks>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsPropertyDescriptor.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsPropertyDescriptor.#ctor(System.String,System.String,System.String,Macro.Common.Configuration.SettingScope,System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.SettingsPropertyDescriptor.Name">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.SettingsPropertyDescriptor.TypeName">
            <summary>
            Gets the name of the type of the property.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.SettingsPropertyDescriptor.Description">
            <summary>
            Gets the description of the property.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.SettingsPropertyDescriptor.Scope">
            <summary>
            Gets the scope of the property.
            </summary>
        </member>
        <member name="P:Macro.Common.Configuration.SettingsPropertyDescriptor.DefaultValue">
            <summary>
            Gets the serialized default value of the property.
            </summary>
        </member>
        <member name="T:Macro.Common.Configuration.SettingsStoreSettingsProvider">
            <summary>
            Communicates with an <see cref="T:Macro.Common.Configuration.ISettingsStore"/> to manage loading and saving of
            settings from the store.
            </summary>
            <remarks>
            Supports the framework and is not intended for use by application code.  Use 
            <see cref="T:Macro.Common.Configuration.StandardSettingsProvider"/> instead.
            </remarks>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsStoreSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
            <summary>
            Returns the collection of settings property values for the specified application instance and settings property group.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsStoreSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)">
            <summary>
            Sets the values of the specified group of property settings.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsStoreSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsStoreSettingsProvider.Reset(System.Configuration.SettingsContext)">
            <summary>
            Resets all settings back to the defaults.
            </summary>
            <remarks>
            Note that this implementation resets the user-scoped settings only.  It does not modify application-scoped settings.
            </remarks>
        </member>
        <member name="M:Macro.Common.Configuration.SettingsStoreSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
            <summary>
            Upgrades the settings from a previous version.
            </summary>
            <remarks>
            Note that this implementation upgrades user-scoped settings only; it does not modify application-scoped settings.
            </remarks>
        </member>
        <member name="P:Macro.Common.Configuration.SettingsStoreSettingsProvider.ApplicationName">
            <summary>
            Gets the Application Name used to initialize the settings subsystem.
            </summary>
        </member>
    </members>
</doc>
